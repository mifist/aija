/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/assets/js/bootstrap/bootstrap.bundle.min.js":
/*!*********************************************************!*\
  !*** ./src/assets/js/bootstrap/bootstrap.bundle.min.js ***!
  \*********************************************************/
/***/ (function(module) {

function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _newArrowCheck(innerThis, boundThis) {if (innerThis !== boundThis) {throw new TypeError("Cannot instantiate an arrow function");}} /*!
  * Bootstrap v5.0.2 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
!function (t, e) { true ? module.exports = e() : 0;}(this, function () {"use strict";var _this = this;const t = { find: function find(t, e = document.documentElement) {_newArrowCheck(this, _this);return [].concat(...Element.prototype.querySelectorAll.call(e, t));}.bind(this), findOne: function findOne(t, e = document.documentElement) {_newArrowCheck(this, _this);return Element.prototype.querySelector.call(e, t);}.bind(this), children: function children(t, e) {var _this2 = this;_newArrowCheck(this, _this);return [].concat(...t.children).filter(function (t) {_newArrowCheck(this, _this2);return t.matches(e);}.bind(this));}.bind(this), parents(t, e) {const i = [];let n = t.parentNode;for (; n && n.nodeType === Node.ELEMENT_NODE && 3 !== n.nodeType;) n.matches(e) && i.push(n), n = n.parentNode;return i;}, prev(t, e) {let i = t.previousElementSibling;for (; i;) {if (i.matches(e)) return [i];i = i.previousElementSibling;}return [];}, next(t, e) {let i = t.nextElementSibling;for (; i;) {if (i.matches(e)) return [i];i = i.nextElementSibling;}return [];} },e = function e(t) {_newArrowCheck(this, _this);do {t += Math.floor(1e6 * Math.random());} while (document.getElementById(t));return t;}.bind(this),i = function i(t) {_newArrowCheck(this, _this);let e = t.getAttribute("data-bs-target");if (!e || "#" === e) {let i = t.getAttribute("href");if (!i || !i.includes("#") && !i.startsWith(".")) return null;i.includes("#") && !i.startsWith("#") && (i = "#" + i.split("#")[1]), e = i && "#" !== i ? i.trim() : null;}return e;}.bind(this),n = function n(t) {_newArrowCheck(this, _this);const e = i(t);return e && document.querySelector(e) ? e : null;}.bind(this),s = function s(t) {_newArrowCheck(this, _this);const e = i(t);return e ? document.querySelector(e) : null;}.bind(this),o = function o(t) {_newArrowCheck(this, _this);t.dispatchEvent(new Event("transitionend"));}.bind(this),r = function r(t) {_newArrowCheck(this, _this);return !(!t || "object" != typeof t) && (void 0 !== t.jquery && (t = t[0]), void 0 !== t.nodeType);}.bind(this),a = function a(e) {_newArrowCheck(this, _this);return r(e) ? e.jquery ? e[0] : e : "string" == typeof e && e.length > 0 ? t.findOne(e) : null;}.bind(this),l = function l(t, e, i) {var _this3 = this;_newArrowCheck(this, _this);Object.keys(i).forEach(function (n) {_newArrowCheck(this, _this3);const s = i[n],o = e[n],a = o && r(o) ? "element" : null == (l = o) ? "" + l : {}.toString.call(l).match(/\s([a-z]+)/i)[1].toLowerCase();var l;if (!new RegExp(s).test(a)) throw new TypeError(`${t.toUpperCase()}: Option "${n}" provided type "${a}" but expected type "${s}".`);}.bind(this));}.bind(this),c = function c(t) {_newArrowCheck(this, _this);return !(!r(t) || 0 === t.getClientRects().length) && "visible" === getComputedStyle(t).getPropertyValue("visibility");}.bind(this),h = function h(t) {_newArrowCheck(this, _this);return !t || t.nodeType !== Node.ELEMENT_NODE || !!t.classList.contains("disabled") || (void 0 !== t.disabled ? t.disabled : t.hasAttribute("disabled") && "false" !== t.getAttribute("disabled"));}.bind(this),_d = function d(t) {_newArrowCheck(this, _this);if (!document.documentElement.attachShadow) return null;if ("function" == typeof t.getRootNode) {const e = t.getRootNode();return e instanceof ShadowRoot ? e : null;}return t instanceof ShadowRoot ? t : t.parentNode ? _d(t.parentNode) : null;}.bind(this),u = function u() {_newArrowCheck(this, _this);}.bind(this),f = function f(t) {_newArrowCheck(this, _this);return t.offsetHeight;}.bind(this),p = function p() {_newArrowCheck(this, _this);const { jQuery: t } = window;return t && !document.body.hasAttribute("data-bs-no-jquery") ? t : null;}.bind(this),m = [],g = function g() {_newArrowCheck(this, _this);return "rtl" === document.documentElement.dir;}.bind(this),_ = function _(t) {var _this4 = this;_newArrowCheck(this, _this);var e;e = function e() {var _this5 = this;_newArrowCheck(this, _this4);const e = p();if (e) {const i = t.NAME,n = e.fn[i];e.fn[i] = t.jQueryInterface, e.fn[i].Constructor = t, e.fn[i].noConflict = function () {_newArrowCheck(this, _this5);return e.fn[i] = n, t.jQueryInterface;}.bind(this);}}.bind(this), "loading" === document.readyState ? (m.length || document.addEventListener("DOMContentLoaded", function () {var _this6 = this;_newArrowCheck(this, _this4);m.forEach(function (t) {_newArrowCheck(this, _this6);return t();}.bind(this));}.bind(this)), m.push(e)) : e();}.bind(this),b = function b(t) {_newArrowCheck(this, _this);"function" == typeof t && t();}.bind(this),v = function v(t, e, i = !0) {var _this7 = this;_newArrowCheck(this, _this);if (!i) return void b(t);const n = function (t) {_newArrowCheck(this, _this7);if (!t) return 0;let { transitionDuration: e, transitionDelay: i } = window.getComputedStyle(t);const n = Number.parseFloat(e),s = Number.parseFloat(i);return n || s ? (e = e.split(",")[0], i = i.split(",")[0], 1e3 * (Number.parseFloat(e) + Number.parseFloat(i))) : 0;}.bind(this)(e) + 5;let s = !1;const _r = function r({ target: i }) {_newArrowCheck(this, _this7);i === e && (s = !0, e.removeEventListener("transitionend", _r), b(t));}.bind(this);e.addEventListener("transitionend", _r), setTimeout(function () {_newArrowCheck(this, _this7);s || o(e);}.bind(this), n);}.bind(this),y = function y(t, e, i, n) {_newArrowCheck(this, _this);let s = t.indexOf(e);if (-1 === s) return t[!i && n ? t.length - 1 : 0];const o = t.length;return s += i ? 1 : -1, n && (s = (s + o) % o), t[Math.max(0, Math.min(s, o - 1))];}.bind(this),w = /[^.]*(?=\..*)\.|.*/,E = /\..*/,A = /::\d+$/,T = {};let O = 1;const C = { mouseenter: "mouseover", mouseleave: "mouseout" },k = /^(mouseenter|mouseleave)/i,L = new Set(["click", "dblclick", "mouseup", "mousedown", "contextmenu", "mousewheel", "DOMMouseScroll", "mouseover", "mouseout", "mousemove", "selectstart", "selectend", "keydown", "keypress", "keyup", "orientationchange", "touchstart", "touchmove", "touchend", "touchcancel", "pointerdown", "pointermove", "pointerup", "pointerleave", "pointercancel", "gesturestart", "gesturechange", "gestureend", "focus", "blur", "change", "reset", "select", "submit", "focusin", "focusout", "load", "unload", "beforeunload", "resize", "move", "DOMContentLoaded", "readystatechange", "error", "abort", "scroll"]);function x(t, e) {return e && `${e}::${O++}` || t.uidEvent || O++;}function D(t) {const e = x(t);return t.uidEvent = e, T[e] = T[e] || {}, T[e];}function S(t, e, i = null) {const n = Object.keys(t);for (let s = 0, o = n.length; s < o; s++) {const o = t[n[s]];if (o.originalHandler === e && o.delegationSelector === i) return o;}return null;}function I(t, e, i) {const n = "string" == typeof e,s = n ? i : e;let o = M(t);return L.has(o) || (o = t), [n, s, o];}function N(t, e, i, n, s) {var _this8 = this;if ("string" != typeof e || !t) return;if (i || (i = n, n = null), k.test(e)) {const t = function t(_t2) {_newArrowCheck(this, _this8);return function (e) {if (!e.relatedTarget || e.relatedTarget !== e.delegateTarget && !e.delegateTarget.contains(e.relatedTarget)) return _t2.call(this, e);};}.bind(this);n ? n = t(n) : i = t(i);}const [o, r, a] = I(e, i, n),l = D(t),c = l[a] || (l[a] = {}),h = S(c, r, o ? i : null);if (h) return void (h.oneOff = h.oneOff && s);const d = x(r, e.replace(w, "")),u = o ? function (t, e, i) {return function n(s) {const o = t.querySelectorAll(e);for (let { target: r } = s; r && r !== this; r = r.parentNode) for (let a = o.length; a--;) if (o[a] === r) return s.delegateTarget = r, n.oneOff && P.off(t, s.type, e, i), i.apply(r, [s]);return null;};}(t, i, n) : function (t, e) {return function i(n) {return n.delegateTarget = t, i.oneOff && P.off(t, n.type, e), e.apply(t, [n]);};}(t, i);u.delegationSelector = o ? i : null, u.originalHandler = r, u.oneOff = s, u.uidEvent = d, c[d] = u, t.addEventListener(a, u, o);}function j(t, e, i, n, s) {const o = S(e[i], n, s);o && (t.removeEventListener(i, o, Boolean(s)), delete e[i][o.uidEvent]);}function M(t) {return t = t.replace(E, ""), C[t] || t;}const P = { on(t, e, i, n) {N(t, e, i, n, !1);}, one(t, e, i, n) {N(t, e, i, n, !0);}, off(t, e, i, n) {var _this9 = this;if ("string" != typeof e || !t) return;const [s, o, r] = I(e, i, n),a = r !== e,l = D(t),c = e.startsWith(".");if (void 0 !== o) {if (!l || !l[r]) return;return void j(t, l, r, o, s ? i : null);}c && Object.keys(l).forEach(function (i) {_newArrowCheck(this, _this9);!function (t, e, i, n) {var _this10 = this;const s = e[i] || {};Object.keys(s).forEach(function (o) {_newArrowCheck(this, _this10);if (o.includes(n)) {const n = s[o];j(t, e, i, n.originalHandler, n.delegationSelector);}}.bind(this));}(t, l, i, e.slice(1));}.bind(this));const h = l[r] || {};Object.keys(h).forEach(function (i) {_newArrowCheck(this, _this9);const n = i.replace(A, "");if (!a || e.includes(n)) {const e = h[i];j(t, l, r, e.originalHandler, e.delegationSelector);}}.bind(this));}, trigger(t, e, i) {var _this11 = this;if ("string" != typeof e || !t) return null;const n = p(),s = M(e),o = e !== s,r = L.has(s);let a,l = !0,c = !0,h = !1,d = null;return o && n && (a = n.Event(e, i), n(t).trigger(a), l = !a.isPropagationStopped(), c = !a.isImmediatePropagationStopped(), h = a.isDefaultPrevented()), r ? (d = document.createEvent("HTMLEvents"), d.initEvent(s, l, !0)) : d = new CustomEvent(e, { bubbles: l, cancelable: !0 }), void 0 !== i && Object.keys(i).forEach(function (t) {var _this12 = this;_newArrowCheck(this, _this11);Object.defineProperty(d, t, { get: function get() {_newArrowCheck(this, _this12);return i[t];}.bind(this) });}.bind(this)), h && d.preventDefault(), c && t.dispatchEvent(d), d.defaultPrevented && void 0 !== a && a.preventDefault(), d;} },H = new Map();var R = { set(t, e, i) {H.has(t) || H.set(t, new Map());const n = H.get(t);n.has(e) || 0 === n.size ? n.set(e, i) : console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(n.keys())[0]}.`);}, get: function get(t, e) {_newArrowCheck(this, _this);return H.has(t) && H.get(t).get(e) || null;}.bind(this), remove(t, e) {if (!H.has(t)) return;const i = H.get(t);i.delete(e), 0 === i.size && H.delete(t);} };class B {constructor(t) {(t = a(t)) && (this._element = t, R.set(this._element, this.constructor.DATA_KEY, this));}dispose() {var _this13 = this;R.remove(this._element, this.constructor.DATA_KEY), P.off(this._element, this.constructor.EVENT_KEY), Object.getOwnPropertyNames(this).forEach(function (t) {_newArrowCheck(this, _this13);this[t] = null;}.bind(this));}_queueCallback(t, e, i = !0) {v(t, e, i);}static getInstance(t) {return R.get(t, this.DATA_KEY);}static getOrCreateInstance(t, e = {}) {return this.getInstance(t) || new this(t, "object" == typeof e ? e : null);}static get VERSION() {return "5.0.2";}static get NAME() {throw new Error('You have to implement the static method "NAME", for each component!');}static get DATA_KEY() {return "bs." + this.NAME;}static get EVENT_KEY() {return "." + this.DATA_KEY;}}class W extends B {static get NAME() {return "alert";}close(t) {const e = t ? this._getRootElement(t) : this._element,i = this._triggerCloseEvent(e);null === i || i.defaultPrevented || this._removeElement(e);}_getRootElement(t) {return s(t) || t.closest(".alert");}_triggerCloseEvent(t) {return P.trigger(t, "close.bs.alert");}_removeElement(t) {var _this14 = this;t.classList.remove("show");const e = t.classList.contains("fade");this._queueCallback(function () {_newArrowCheck(this, _this14);return this._destroyElement(t);}.bind(this), t, e);}_destroyElement(t) {t.remove(), P.trigger(t, "closed.bs.alert");}static jQueryInterface(t) {return this.each(function () {const e = W.getOrCreateInstance(this);"close" === t && e[t](this);});}static handleDismiss(t) {return function (e) {e && e.preventDefault(), t.close(this);};}}P.on(document, "click.bs.alert.data-api", '[data-bs-dismiss="alert"]', W.handleDismiss(new W())), _(W);class q extends B {static get NAME() {return "button";}toggle() {this._element.setAttribute("aria-pressed", this._element.classList.toggle("active"));}static jQueryInterface(t) {return this.each(function () {const e = q.getOrCreateInstance(this);"toggle" === t && e[t]();});}}function z(t) {return "true" === t || "false" !== t && (t === Number(t).toString() ? Number(t) : "" === t || "null" === t ? null : t);}function $(t) {var _this15 = this;return t.replace(/[A-Z]/g, function (t) {_newArrowCheck(this, _this15);return "-" + t.toLowerCase();}.bind(this));}P.on(document, "click.bs.button.data-api", '[data-bs-toggle="button"]', function (t) {_newArrowCheck(this, _this);t.preventDefault();const e = t.target.closest('[data-bs-toggle="button"]');q.getOrCreateInstance(e).toggle();}.bind(this)), _(q);const U = { setDataAttribute(t, e, i) {t.setAttribute("data-bs-" + $(e), i);}, removeDataAttribute(t, e) {t.removeAttribute("data-bs-" + $(e));}, getDataAttributes(t) {var _this16 = this;if (!t) return {};const e = {};return Object.keys(t.dataset).filter(function (t) {_newArrowCheck(this, _this16);return t.startsWith("bs");}.bind(this)).forEach(function (i) {_newArrowCheck(this, _this16);let n = i.replace(/^bs/, "");n = n.charAt(0).toLowerCase() + n.slice(1, n.length), e[n] = z(t.dataset[i]);}.bind(this)), e;}, getDataAttribute: function getDataAttribute(t, e) {_newArrowCheck(this, _this);return z(t.getAttribute("data-bs-" + $(e)));}.bind(this), offset(t) {const e = t.getBoundingClientRect();return { top: e.top + document.body.scrollTop, left: e.left + document.body.scrollLeft };}, position: function position(t) {_newArrowCheck(this, _this);return { top: t.offsetTop, left: t.offsetLeft };}.bind(this) },F = { interval: 5e3, keyboard: !0, slide: !1, pause: "hover", wrap: !0, touch: !0 },V = { interval: "(number|boolean)", keyboard: "boolean", slide: "(boolean|string)", pause: "(string|boolean)", wrap: "boolean", touch: "boolean" },K = "next",X = "prev",Y = "left",Q = "right",G = { ArrowLeft: Q, ArrowRight: Y };class Z extends B {constructor(e, i) {super(e), this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(i), this._indicatorsElement = t.findOne(".carousel-indicators", this._element), this._touchSupported = "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0, this._pointerEvent = Boolean(window.PointerEvent), this._addEventListeners();}static get Default() {return F;}static get NAME() {return "carousel";}next() {this._slide(K);}nextWhenVisible() {!document.hidden && c(this._element) && this.next();}prev() {this._slide(X);}pause(e) {e || (this._isPaused = !0), t.findOne(".carousel-item-next, .carousel-item-prev", this._element) && (o(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;}cycle(t) {t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config && this._config.interval && !this._isPaused && (this._updateInterval(), this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));}to(e) {var _this17 = this;this._activeElement = t.findOne(".active.carousel-item", this._element);const i = this._getItemIndex(this._activeElement);if (e > this._items.length - 1 || e < 0) return;if (this._isSliding) return void P.one(this._element, "slid.bs.carousel", function () {_newArrowCheck(this, _this17);return this.to(e);}.bind(this));if (i === e) return this.pause(), void this.cycle();const n = e > i ? K : X;this._slide(n, this._items[e]);}_getConfig(t) {return t = _objectSpread(_objectSpread(_objectSpread({}, F), U.getDataAttributes(this._element)), "object" == typeof t ? t : {}), l("carousel", t, V), t;}_handleSwipe() {const t = Math.abs(this.touchDeltaX);if (t <= 40) return;const e = t / this.touchDeltaX;this.touchDeltaX = 0, e && this._slide(e > 0 ? Q : Y);}_addEventListeners() {var _this18 = this;this._config.keyboard && P.on(this._element, "keydown.bs.carousel", function (t) {_newArrowCheck(this, _this18);return this._keydown(t);}.bind(this)), "hover" === this._config.pause && (P.on(this._element, "mouseenter.bs.carousel", function (t) {_newArrowCheck(this, _this18);return this.pause(t);}.bind(this)), P.on(this._element, "mouseleave.bs.carousel", function (t) {_newArrowCheck(this, _this18);return this.cycle(t);}.bind(this))), this._config.touch && this._touchSupported && this._addTouchEventListeners();}_addTouchEventListeners() {var _this19 = this;const e = function e(t) {_newArrowCheck(this, _this19);!this._pointerEvent || "pen" !== t.pointerType && "touch" !== t.pointerType ? this._pointerEvent || (this.touchStartX = t.touches[0].clientX) : this.touchStartX = t.clientX;}.bind(this),i = function i(t) {_newArrowCheck(this, _this19);this.touchDeltaX = t.touches && t.touches.length > 1 ? 0 : t.touches[0].clientX - this.touchStartX;}.bind(this),n = function n(t) {var _this20 = this;_newArrowCheck(this, _this19);!this._pointerEvent || "pen" !== t.pointerType && "touch" !== t.pointerType || (this.touchDeltaX = t.clientX - this.touchStartX), this._handleSwipe(), "hover" === this._config.pause && (this.pause(), this.touchTimeout && clearTimeout(this.touchTimeout), this.touchTimeout = setTimeout(function (t) {_newArrowCheck(this, _this20);return this.cycle(t);}.bind(this), 500 + this._config.interval));}.bind(this);t.find(".carousel-item img", this._element).forEach(function (t) {var _this21 = this;_newArrowCheck(this, _this19);P.on(t, "dragstart.bs.carousel", function (t) {_newArrowCheck(this, _this21);return t.preventDefault();}.bind(this));}.bind(this)), this._pointerEvent ? (P.on(this._element, "pointerdown.bs.carousel", function (t) {_newArrowCheck(this, _this19);return e(t);}.bind(this)), P.on(this._element, "pointerup.bs.carousel", function (t) {_newArrowCheck(this, _this19);return n(t);}.bind(this)), this._element.classList.add("pointer-event")) : (P.on(this._element, "touchstart.bs.carousel", function (t) {_newArrowCheck(this, _this19);return e(t);}.bind(this)), P.on(this._element, "touchmove.bs.carousel", function (t) {_newArrowCheck(this, _this19);return i(t);}.bind(this)), P.on(this._element, "touchend.bs.carousel", function (t) {_newArrowCheck(this, _this19);return n(t);}.bind(this)));}_keydown(t) {if (/input|textarea/i.test(t.target.tagName)) return;const e = G[t.key];e && (t.preventDefault(), this._slide(e));}_getItemIndex(e) {return this._items = e && e.parentNode ? t.find(".carousel-item", e.parentNode) : [], this._items.indexOf(e);}_getItemByOrder(t, e) {const i = t === K;return y(this._items, e, i, this._config.wrap);}_triggerSlideEvent(e, i) {const n = this._getItemIndex(e),s = this._getItemIndex(t.findOne(".active.carousel-item", this._element));return P.trigger(this._element, "slide.bs.carousel", { relatedTarget: e, direction: i, from: s, to: n });}_setActiveIndicatorElement(e) {if (this._indicatorsElement) {const i = t.findOne(".active", this._indicatorsElement);i.classList.remove("active"), i.removeAttribute("aria-current");const n = t.find("[data-bs-target]", this._indicatorsElement);for (let t = 0; t < n.length; t++) if (Number.parseInt(n[t].getAttribute("data-bs-slide-to"), 10) === this._getItemIndex(e)) {n[t].classList.add("active"), n[t].setAttribute("aria-current", "true");break;}}}_updateInterval() {const e = this._activeElement || t.findOne(".active.carousel-item", this._element);if (!e) return;const i = Number.parseInt(e.getAttribute("data-bs-interval"), 10);i ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = i) : this._config.interval = this._config.defaultInterval || this._config.interval;}_slide(e, i) {var _this22 = this;const n = this._directionToOrder(e),s = t.findOne(".active.carousel-item", this._element),o = this._getItemIndex(s),r = i || this._getItemByOrder(n, s),a = this._getItemIndex(r),l = Boolean(this._interval),c = n === K,h = c ? "carousel-item-start" : "carousel-item-end",d = c ? "carousel-item-next" : "carousel-item-prev",u = this._orderToDirection(n);if (r && r.classList.contains("active")) return void (this._isSliding = !1);if (this._isSliding) return;if (this._triggerSlideEvent(r, u).defaultPrevented) return;if (!s || !r) return;this._isSliding = !0, l && this.pause(), this._setActiveIndicatorElement(r), this._activeElement = r;const p = function p() {_newArrowCheck(this, _this22);P.trigger(this._element, "slid.bs.carousel", { relatedTarget: r, direction: u, from: o, to: a });}.bind(this);if (this._element.classList.contains("slide")) {r.classList.add(d), f(r), s.classList.add(h), r.classList.add(h);const t = function t() {_newArrowCheck(this, _this22);r.classList.remove(h, d), r.classList.add("active"), s.classList.remove("active", d, h), this._isSliding = !1, setTimeout(p, 0);}.bind(this);this._queueCallback(t, s, !0);} else s.classList.remove("active"), r.classList.add("active"), this._isSliding = !1, p();l && this.cycle();}_directionToOrder(t) {return [Q, Y].includes(t) ? g() ? t === Y ? X : K : t === Y ? K : X : t;}_orderToDirection(t) {return [K, X].includes(t) ? g() ? t === X ? Y : Q : t === X ? Q : Y : t;}static carouselInterface(t, e) {const i = Z.getOrCreateInstance(t, e);let { _config: n } = i;"object" == typeof e && (n = _objectSpread(_objectSpread({}, n), e));const s = "string" == typeof e ? e : n.slide;if ("number" == typeof e) i.to(e);else if ("string" == typeof s) {if (void 0 === i[s]) throw new TypeError(`No method named "${s}"`);i[s]();} else n.interval && n.ride && (i.pause(), i.cycle());}static jQueryInterface(t) {return this.each(function () {Z.carouselInterface(this, t);});}static dataApiClickHandler(t) {const e = s(this);if (!e || !e.classList.contains("carousel")) return;const i = _objectSpread(_objectSpread({}, U.getDataAttributes(e)), U.getDataAttributes(this)),n = this.getAttribute("data-bs-slide-to");n && (i.interval = !1), Z.carouselInterface(e, i), n && Z.getInstance(e).to(n), t.preventDefault();}}P.on(document, "click.bs.carousel.data-api", "[data-bs-slide], [data-bs-slide-to]", Z.dataApiClickHandler), P.on(window, "load.bs.carousel.data-api", function () {_newArrowCheck(this, _this);const e = t.find('[data-bs-ride="carousel"]');for (let t = 0, i = e.length; t < i; t++) Z.carouselInterface(e[t], Z.getInstance(e[t]));}.bind(this)), _(Z);const J = { toggle: !0, parent: "" },tt = { toggle: "boolean", parent: "(string|element)" };class et extends B {constructor(e, i) {var _this23;(super(e), _this23 = this), this._isTransitioning = !1, this._config = this._getConfig(i), this._triggerArray = t.find(`[data-bs-toggle="collapse"][href="#${this._element.id}"],[data-bs-toggle="collapse"][data-bs-target="#${this._element.id}"]`);const s = t.find('[data-bs-toggle="collapse"]');for (let e = 0, i = s.length; e < i; e++) {var _arrowCheckId = {};const i = s[e],o = n(i),r = t.find(o).filter(function (t) {_newArrowCheck(this, _arrowCheckId);return t === _this23._element;}.bind(_arrowCheckId));null !== o && r.length && (this._selector = o, this._triggerArray.push(i));}this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();}static get Default() {return J;}static get NAME() {return "collapse";}toggle() {this._element.classList.contains("show") ? this.hide() : this.show();}show() {var _this24 = this;if (this._isTransitioning || this._element.classList.contains("show")) return;let e, i;this._parent && (e = t.find(".show, .collapsing", this._parent).filter(function (t) {_newArrowCheck(this, _this24);return "string" == typeof this._config.parent ? t.getAttribute("data-bs-parent") === this._config.parent : t.classList.contains("collapse");}.bind(this)), 0 === e.length && (e = null));const n = t.findOne(this._selector);if (e) {const t = e.find(function (t) {_newArrowCheck(this, _this24);return n !== t;}.bind(this));if (i = t ? et.getInstance(t) : null, i && i._isTransitioning) return;}if (P.trigger(this._element, "show.bs.collapse").defaultPrevented) return;e && e.forEach(function (t) {_newArrowCheck(this, _this24);n !== t && et.collapseInterface(t, "hide"), i || R.set(t, "bs.collapse", null);}.bind(this));const s = this._getDimension();this._element.classList.remove("collapse"), this._element.classList.add("collapsing"), this._element.style[s] = 0, this._triggerArray.length && this._triggerArray.forEach(function (t) {_newArrowCheck(this, _this24);t.classList.remove("collapsed"), t.setAttribute("aria-expanded", !0);}.bind(this)), this.setTransitioning(!0);const o = "scroll" + (s[0].toUpperCase() + s.slice(1));this._queueCallback(function () {_newArrowCheck(this, _this24);this._element.classList.remove("collapsing"), this._element.classList.add("collapse", "show"), this._element.style[s] = "", this.setTransitioning(!1), P.trigger(this._element, "shown.bs.collapse");}.bind(this), this._element, !0), this._element.style[s] = this._element[o] + "px";}hide() {var _this25 = this;if (this._isTransitioning || !this._element.classList.contains("show")) return;if (P.trigger(this._element, "hide.bs.collapse").defaultPrevented) return;const t = this._getDimension();this._element.style[t] = this._element.getBoundingClientRect()[t] + "px", f(this._element), this._element.classList.add("collapsing"), this._element.classList.remove("collapse", "show");const e = this._triggerArray.length;if (e > 0) for (let t = 0; t < e; t++) {const e = this._triggerArray[t],i = s(e);i && !i.classList.contains("show") && (e.classList.add("collapsed"), e.setAttribute("aria-expanded", !1));}this.setTransitioning(!0), this._element.style[t] = "", this._queueCallback(function () {_newArrowCheck(this, _this25);this.setTransitioning(!1), this._element.classList.remove("collapsing"), this._element.classList.add("collapse"), P.trigger(this._element, "hidden.bs.collapse");}.bind(this), this._element, !0);}setTransitioning(t) {this._isTransitioning = t;}_getConfig(t) {return (t = _objectSpread(_objectSpread({}, J), t)).toggle = Boolean(t.toggle), l("collapse", t, tt), t;}_getDimension() {return this._element.classList.contains("width") ? "width" : "height";}_getParent() {var _this26 = this;let { parent: e } = this._config;e = a(e);const i = `[data-bs-toggle="collapse"][data-bs-parent="${e}"]`;return t.find(i, e).forEach(function (t) {_newArrowCheck(this, _this26);const e = s(t);this._addAriaAndCollapsedClass(e, [t]);}.bind(this)), e;}_addAriaAndCollapsedClass(t, e) {var _this27 = this;if (!t || !e.length) return;const i = t.classList.contains("show");e.forEach(function (t) {_newArrowCheck(this, _this27);i ? t.classList.remove("collapsed") : t.classList.add("collapsed"), t.setAttribute("aria-expanded", i);}.bind(this));}static collapseInterface(t, e) {let i = et.getInstance(t);const n = _objectSpread(_objectSpread(_objectSpread({}, J), U.getDataAttributes(t)), "object" == typeof e && e ? e : {});if (!i && n.toggle && "string" == typeof e && /show|hide/.test(e) && (n.toggle = !1), i || (i = new et(t, n)), "string" == typeof e) {if (void 0 === i[e]) throw new TypeError(`No method named "${e}"`);i[e]();}}static jQueryInterface(t) {return this.each(function () {et.collapseInterface(this, t);});}}P.on(document, "click.bs.collapse.data-api", '[data-bs-toggle="collapse"]', function (e) {var _this28 = this;("A" === e.target.tagName || e.delegateTarget && "A" === e.delegateTarget.tagName) && e.preventDefault();const i = U.getDataAttributes(this),s = n(this);t.find(s).forEach(function (t) {_newArrowCheck(this, _this28);const e = et.getInstance(t);let n;e ? (null === e._parent && "string" == typeof i.parent && (e._config.parent = i.parent, e._parent = e._getParent()), n = "toggle") : n = i, et.collapseInterface(t, n);}.bind(this));}), _(et);var it = "top",nt = "bottom",st = "right",ot = "left",rt = [it, nt, st, ot],at = rt.reduce(function (t, e) {return t.concat([e + "-start", e + "-end"]);}, []),lt = [].concat(rt, ["auto"]).reduce(function (t, e) {return t.concat([e, e + "-start", e + "-end"]);}, []),ct = ["beforeRead", "read", "afterRead", "beforeMain", "main", "afterMain", "beforeWrite", "write", "afterWrite"];function ht(t) {return t ? (t.nodeName || "").toLowerCase() : null;}function dt(t) {if (null == t) return window;if ("[object Window]" !== t.toString()) {var e = t.ownerDocument;return e && e.defaultView || window;}return t;}function ut(t) {return t instanceof dt(t).Element || t instanceof Element;}function ft(t) {return t instanceof dt(t).HTMLElement || t instanceof HTMLElement;}function pt(t) {return "undefined" != typeof ShadowRoot && (t instanceof dt(t).ShadowRoot || t instanceof ShadowRoot);}var mt = { name: "applyStyles", enabled: !0, phase: "write", fn: function (t) {var e = t.state;Object.keys(e.elements).forEach(function (t) {var i = e.styles[t] || {},n = e.attributes[t] || {},s = e.elements[t];ft(s) && ht(s) && (Object.assign(s.style, i), Object.keys(n).forEach(function (t) {var e = n[t];!1 === e ? s.removeAttribute(t) : s.setAttribute(t, !0 === e ? "" : e);}));});}, effect: function (t) {var e = t.state,i = { popper: { position: e.options.strategy, left: "0", top: "0", margin: "0" }, arrow: { position: "absolute" }, reference: {} };return Object.assign(e.elements.popper.style, i.popper), e.styles = i, e.elements.arrow && Object.assign(e.elements.arrow.style, i.arrow), function () {Object.keys(e.elements).forEach(function (t) {var n = e.elements[t],s = e.attributes[t] || {},o = Object.keys(e.styles.hasOwnProperty(t) ? e.styles[t] : i[t]).reduce(function (t, e) {return t[e] = "", t;}, {});ft(n) && ht(n) && (Object.assign(n.style, o), Object.keys(s).forEach(function (t) {n.removeAttribute(t);}));});};}, requires: ["computeStyles"] };function gt(t) {return t.split("-")[0];}function _t(t) {var e = t.getBoundingClientRect();return { width: e.width, height: e.height, top: e.top, right: e.right, bottom: e.bottom, left: e.left, x: e.left, y: e.top };}function bt(t) {var e = _t(t),i = t.offsetWidth,n = t.offsetHeight;return Math.abs(e.width - i) <= 1 && (i = e.width), Math.abs(e.height - n) <= 1 && (n = e.height), { x: t.offsetLeft, y: t.offsetTop, width: i, height: n };}function vt(t, e) {var i = e.getRootNode && e.getRootNode();if (t.contains(e)) return !0;if (i && pt(i)) {var n = e;do {if (n && t.isSameNode(n)) return !0;n = n.parentNode || n.host;} while (n);}return !1;}function yt(t) {return dt(t).getComputedStyle(t);}function wt(t) {return ["table", "td", "th"].indexOf(ht(t)) >= 0;}function Et(t) {return ((ut(t) ? t.ownerDocument : t.document) || window.document).documentElement;}function At(t) {return "html" === ht(t) ? t : t.assignedSlot || t.parentNode || (pt(t) ? t.host : null) || Et(t);}function Tt(t) {return ft(t) && "fixed" !== yt(t).position ? t.offsetParent : null;}function Ot(t) {for (var e = dt(t), i = Tt(t); i && wt(i) && "static" === yt(i).position;) i = Tt(i);return i && ("html" === ht(i) || "body" === ht(i) && "static" === yt(i).position) ? e : i || function (t) {var e = -1 !== navigator.userAgent.toLowerCase().indexOf("firefox");if (-1 !== navigator.userAgent.indexOf("Trident") && ft(t) && "fixed" === yt(t).position) return null;for (var i = At(t); ft(i) && ["html", "body"].indexOf(ht(i)) < 0;) {var n = yt(i);if ("none" !== n.transform || "none" !== n.perspective || "paint" === n.contain || -1 !== ["transform", "perspective"].indexOf(n.willChange) || e && "filter" === n.willChange || e && n.filter && "none" !== n.filter) return i;i = i.parentNode;}return null;}(t) || e;}function Ct(t) {return ["top", "bottom"].indexOf(t) >= 0 ? "x" : "y";}var kt = Math.max,Lt = Math.min,xt = Math.round;function Dt(t, e, i) {return kt(t, Lt(e, i));}function St(t) {return Object.assign({}, { top: 0, right: 0, bottom: 0, left: 0 }, t);}function It(t, e) {return e.reduce(function (e, i) {return e[i] = t, e;}, {});}var Nt = { name: "arrow", enabled: !0, phase: "main", fn: function (t) {var e,i = t.state,n = t.name,s = t.options,o = i.elements.arrow,r = i.modifiersData.popperOffsets,a = gt(i.placement),l = Ct(a),c = [ot, st].indexOf(a) >= 0 ? "height" : "width";if (o && r) {var h = function (t, e) {return St("number" != typeof (t = "function" == typeof t ? t(Object.assign({}, e.rects, { placement: e.placement })) : t) ? t : It(t, rt));}(s.padding, i),d = bt(o),u = "y" === l ? it : ot,f = "y" === l ? nt : st,p = i.rects.reference[c] + i.rects.reference[l] - r[l] - i.rects.popper[c],m = r[l] - i.rects.reference[l],g = Ot(o),_ = g ? "y" === l ? g.clientHeight || 0 : g.clientWidth || 0 : 0,b = p / 2 - m / 2,v = h[u],y = _ - d[c] - h[f],w = _ / 2 - d[c] / 2 + b,E = Dt(v, w, y),A = l;i.modifiersData[n] = ((e = {})[A] = E, e.centerOffset = E - w, e);}}, effect: function (t) {var e = t.state,i = t.options.element,n = void 0 === i ? "[data-popper-arrow]" : i;null != n && ("string" != typeof n || (n = e.elements.popper.querySelector(n))) && vt(e.elements.popper, n) && (e.elements.arrow = n);}, requires: ["popperOffsets"], requiresIfExists: ["preventOverflow"] },jt = { top: "auto", right: "auto", bottom: "auto", left: "auto" };function Mt(t) {var e,i = t.popper,n = t.popperRect,s = t.placement,o = t.offsets,r = t.position,a = t.gpuAcceleration,l = t.adaptive,c = t.roundOffsets,h = !0 === c ? function (t) {var e = t.x,i = t.y,n = window.devicePixelRatio || 1;return { x: xt(xt(e * n) / n) || 0, y: xt(xt(i * n) / n) || 0 };}(o) : "function" == typeof c ? c(o) : o,d = h.x,u = void 0 === d ? 0 : d,f = h.y,p = void 0 === f ? 0 : f,m = o.hasOwnProperty("x"),g = o.hasOwnProperty("y"),_ = ot,b = it,v = window;if (l) {var y = Ot(i),w = "clientHeight",E = "clientWidth";y === dt(i) && "static" !== yt(y = Et(i)).position && (w = "scrollHeight", E = "scrollWidth"), y = y, s === it && (b = nt, p -= y[w] - n.height, p *= a ? 1 : -1), s === ot && (_ = st, u -= y[E] - n.width, u *= a ? 1 : -1);}var A,T = Object.assign({ position: r }, l && jt);return a ? Object.assign({}, T, ((A = {})[b] = g ? "0" : "", A[_] = m ? "0" : "", A.transform = (v.devicePixelRatio || 1) < 2 ? "translate(" + u + "px, " + p + "px)" : "translate3d(" + u + "px, " + p + "px, 0)", A)) : Object.assign({}, T, ((e = {})[b] = g ? p + "px" : "", e[_] = m ? u + "px" : "", e.transform = "", e));}var Pt = { name: "computeStyles", enabled: !0, phase: "beforeWrite", fn: function (t) {var e = t.state,i = t.options,n = i.gpuAcceleration,s = void 0 === n || n,o = i.adaptive,r = void 0 === o || o,a = i.roundOffsets,l = void 0 === a || a,c = { placement: gt(e.placement), popper: e.elements.popper, popperRect: e.rects.popper, gpuAcceleration: s };null != e.modifiersData.popperOffsets && (e.styles.popper = Object.assign({}, e.styles.popper, Mt(Object.assign({}, c, { offsets: e.modifiersData.popperOffsets, position: e.options.strategy, adaptive: r, roundOffsets: l })))), null != e.modifiersData.arrow && (e.styles.arrow = Object.assign({}, e.styles.arrow, Mt(Object.assign({}, c, { offsets: e.modifiersData.arrow, position: "absolute", adaptive: !1, roundOffsets: l })))), e.attributes.popper = Object.assign({}, e.attributes.popper, { "data-popper-placement": e.placement });}, data: {} },Ht = { passive: !0 },Rt = { name: "eventListeners", enabled: !0, phase: "write", fn: function () {}, effect: function (t) {var e = t.state,i = t.instance,n = t.options,s = n.scroll,o = void 0 === s || s,r = n.resize,a = void 0 === r || r,l = dt(e.elements.popper),c = [].concat(e.scrollParents.reference, e.scrollParents.popper);return o && c.forEach(function (t) {t.addEventListener("scroll", i.update, Ht);}), a && l.addEventListener("resize", i.update, Ht), function () {o && c.forEach(function (t) {t.removeEventListener("scroll", i.update, Ht);}), a && l.removeEventListener("resize", i.update, Ht);};}, data: {} },Bt = { left: "right", right: "left", bottom: "top", top: "bottom" };function Wt(t) {return t.replace(/left|right|bottom|top/g, function (t) {return Bt[t];});}var qt = { start: "end", end: "start" };function zt(t) {return t.replace(/start|end/g, function (t) {return qt[t];});}function $t(t) {var e = dt(t);return { scrollLeft: e.pageXOffset, scrollTop: e.pageYOffset };}function Ut(t) {return _t(Et(t)).left + $t(t).scrollLeft;}function Ft(t) {var e = yt(t),i = e.overflow,n = e.overflowX,s = e.overflowY;return /auto|scroll|overlay|hidden/.test(i + s + n);}function Vt(t, e) {var i;void 0 === e && (e = []);var n = function t(e) {return ["html", "body", "#document"].indexOf(ht(e)) >= 0 ? e.ownerDocument.body : ft(e) && Ft(e) ? e : t(At(e));}(t),s = n === (null == (i = t.ownerDocument) ? void 0 : i.body),o = dt(n),r = s ? [o].concat(o.visualViewport || [], Ft(n) ? n : []) : n,a = e.concat(r);return s ? a : a.concat(Vt(At(r)));}function Kt(t) {return Object.assign({}, t, { left: t.x, top: t.y, right: t.x + t.width, bottom: t.y + t.height });}function Xt(t, e) {return "viewport" === e ? Kt(function (t) {var e = dt(t),i = Et(t),n = e.visualViewport,s = i.clientWidth,o = i.clientHeight,r = 0,a = 0;return n && (s = n.width, o = n.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (r = n.offsetLeft, a = n.offsetTop)), { width: s, height: o, x: r + Ut(t), y: a };}(t)) : ft(e) ? function (t) {var e = _t(t);return e.top = e.top + t.clientTop, e.left = e.left + t.clientLeft, e.bottom = e.top + t.clientHeight, e.right = e.left + t.clientWidth, e.width = t.clientWidth, e.height = t.clientHeight, e.x = e.left, e.y = e.top, e;}(e) : Kt(function (t) {var e,i = Et(t),n = $t(t),s = null == (e = t.ownerDocument) ? void 0 : e.body,o = kt(i.scrollWidth, i.clientWidth, s ? s.scrollWidth : 0, s ? s.clientWidth : 0),r = kt(i.scrollHeight, i.clientHeight, s ? s.scrollHeight : 0, s ? s.clientHeight : 0),a = -n.scrollLeft + Ut(t),l = -n.scrollTop;return "rtl" === yt(s || i).direction && (a += kt(i.clientWidth, s ? s.clientWidth : 0) - o), { width: o, height: r, x: a, y: l };}(Et(t)));}function Yt(t) {return t.split("-")[1];}function Qt(t) {var e,i = t.reference,n = t.element,s = t.placement,o = s ? gt(s) : null,r = s ? Yt(s) : null,a = i.x + i.width / 2 - n.width / 2,l = i.y + i.height / 2 - n.height / 2;switch (o) {case it:e = { x: a, y: i.y - n.height };break;case nt:e = { x: a, y: i.y + i.height };break;case st:e = { x: i.x + i.width, y: l };break;case ot:e = { x: i.x - n.width, y: l };break;default:e = { x: i.x, y: i.y };}var c = o ? Ct(o) : null;if (null != c) {var h = "y" === c ? "height" : "width";switch (r) {case "start":e[c] = e[c] - (i[h] / 2 - n[h] / 2);break;case "end":e[c] = e[c] + (i[h] / 2 - n[h] / 2);}}return e;}function Gt(t, e) {void 0 === e && (e = {});var i = e,n = i.placement,s = void 0 === n ? t.placement : n,o = i.boundary,r = void 0 === o ? "clippingParents" : o,a = i.rootBoundary,l = void 0 === a ? "viewport" : a,c = i.elementContext,h = void 0 === c ? "popper" : c,d = i.altBoundary,u = void 0 !== d && d,f = i.padding,p = void 0 === f ? 0 : f,m = St("number" != typeof p ? p : It(p, rt)),g = "popper" === h ? "reference" : "popper",_ = t.elements.reference,b = t.rects.popper,v = t.elements[u ? g : h],y = function (t, e, i) {var n = "clippingParents" === e ? function (t) {var e = Vt(At(t)),i = ["absolute", "fixed"].indexOf(yt(t).position) >= 0 && ft(t) ? Ot(t) : t;return ut(i) ? e.filter(function (t) {return ut(t) && vt(t, i) && "body" !== ht(t);}) : [];}(t) : [].concat(e),s = [].concat(n, [i]),o = s[0],r = s.reduce(function (e, i) {var n = Xt(t, i);return e.top = kt(n.top, e.top), e.right = Lt(n.right, e.right), e.bottom = Lt(n.bottom, e.bottom), e.left = kt(n.left, e.left), e;}, Xt(t, o));return r.width = r.right - r.left, r.height = r.bottom - r.top, r.x = r.left, r.y = r.top, r;}(ut(v) ? v : v.contextElement || Et(t.elements.popper), r, l),w = _t(_),E = Qt({ reference: w, element: b, strategy: "absolute", placement: s }),A = Kt(Object.assign({}, b, E)),T = "popper" === h ? A : w,O = { top: y.top - T.top + m.top, bottom: T.bottom - y.bottom + m.bottom, left: y.left - T.left + m.left, right: T.right - y.right + m.right },C = t.modifiersData.offset;if ("popper" === h && C) {var k = C[s];Object.keys(O).forEach(function (t) {var e = [st, nt].indexOf(t) >= 0 ? 1 : -1,i = [it, nt].indexOf(t) >= 0 ? "y" : "x";O[t] += k[i] * e;});}return O;}function Zt(t, e) {void 0 === e && (e = {});var i = e,n = i.placement,s = i.boundary,o = i.rootBoundary,r = i.padding,a = i.flipVariations,l = i.allowedAutoPlacements,c = void 0 === l ? lt : l,h = Yt(n),d = h ? a ? at : at.filter(function (t) {return Yt(t) === h;}) : rt,u = d.filter(function (t) {return c.indexOf(t) >= 0;});0 === u.length && (u = d);var f = u.reduce(function (e, i) {return e[i] = Gt(t, { placement: i, boundary: s, rootBoundary: o, padding: r })[gt(i)], e;}, {});return Object.keys(f).sort(function (t, e) {return f[t] - f[e];});}var Jt = { name: "flip", enabled: !0, phase: "main", fn: function (t) {var e = t.state,i = t.options,n = t.name;if (!e.modifiersData[n]._skip) {for (var s = i.mainAxis, o = void 0 === s || s, r = i.altAxis, a = void 0 === r || r, l = i.fallbackPlacements, c = i.padding, h = i.boundary, d = i.rootBoundary, u = i.altBoundary, f = i.flipVariations, p = void 0 === f || f, m = i.allowedAutoPlacements, g = e.options.placement, _ = gt(g), b = l || (_ !== g && p ? function (t) {if ("auto" === gt(t)) return [];var e = Wt(t);return [zt(t), e, zt(e)];}(g) : [Wt(g)]), v = [g].concat(b).reduce(function (t, i) {return t.concat("auto" === gt(i) ? Zt(e, { placement: i, boundary: h, rootBoundary: d, padding: c, flipVariations: p, allowedAutoPlacements: m }) : i);}, []), y = e.rects.reference, w = e.rects.popper, E = new Map(), A = !0, T = v[0], O = 0; O < v.length; O++) {var C = v[O],k = gt(C),L = "start" === Yt(C),x = [it, nt].indexOf(k) >= 0,D = x ? "width" : "height",S = Gt(e, { placement: C, boundary: h, rootBoundary: d, altBoundary: u, padding: c }),I = x ? L ? st : ot : L ? nt : it;y[D] > w[D] && (I = Wt(I));var N = Wt(I),j = [];if (o && j.push(S[k] <= 0), a && j.push(S[I] <= 0, S[N] <= 0), j.every(function (t) {return t;})) {T = C, A = !1;break;}E.set(C, j);}if (A) for (var M = function (t) {var e = v.find(function (e) {var i = E.get(e);if (i) return i.slice(0, t).every(function (t) {return t;});});if (e) return T = e, "break";}, P = p ? 3 : 1; P > 0 && "break" !== M(P); P--);e.placement !== T && (e.modifiersData[n]._skip = !0, e.placement = T, e.reset = !0);}}, requiresIfExists: ["offset"], data: { _skip: !1 } };function te(t, e, i) {return void 0 === i && (i = { x: 0, y: 0 }), { top: t.top - e.height - i.y, right: t.right - e.width + i.x, bottom: t.bottom - e.height + i.y, left: t.left - e.width - i.x };}function ee(t) {return [it, st, nt, ot].some(function (e) {return t[e] >= 0;});}var ie = { name: "hide", enabled: !0, phase: "main", requiresIfExists: ["preventOverflow"], fn: function (t) {var e = t.state,i = t.name,n = e.rects.reference,s = e.rects.popper,o = e.modifiersData.preventOverflow,r = Gt(e, { elementContext: "reference" }),a = Gt(e, { altBoundary: !0 }),l = te(r, n),c = te(a, s, o),h = ee(l),d = ee(c);e.modifiersData[i] = { referenceClippingOffsets: l, popperEscapeOffsets: c, isReferenceHidden: h, hasPopperEscaped: d }, e.attributes.popper = Object.assign({}, e.attributes.popper, { "data-popper-reference-hidden": h, "data-popper-escaped": d });} },ne = { name: "offset", enabled: !0, phase: "main", requires: ["popperOffsets"], fn: function (t) {var e = t.state,i = t.options,n = t.name,s = i.offset,o = void 0 === s ? [0, 0] : s,r = lt.reduce(function (t, i) {return t[i] = function (t, e, i) {var n = gt(t),s = [ot, it].indexOf(n) >= 0 ? -1 : 1,o = "function" == typeof i ? i(Object.assign({}, e, { placement: t })) : i,r = o[0],a = o[1];return r = r || 0, a = (a || 0) * s, [ot, st].indexOf(n) >= 0 ? { x: a, y: r } : { x: r, y: a };}(i, e.rects, o), t;}, {}),a = r[e.placement],l = a.x,c = a.y;null != e.modifiersData.popperOffsets && (e.modifiersData.popperOffsets.x += l, e.modifiersData.popperOffsets.y += c), e.modifiersData[n] = r;} },se = { name: "popperOffsets", enabled: !0, phase: "read", fn: function (t) {var e = t.state,i = t.name;e.modifiersData[i] = Qt({ reference: e.rects.reference, element: e.rects.popper, strategy: "absolute", placement: e.placement });}, data: {} },oe = { name: "preventOverflow", enabled: !0, phase: "main", fn: function (t) {var e = t.state,i = t.options,n = t.name,s = i.mainAxis,o = void 0 === s || s,r = i.altAxis,a = void 0 !== r && r,l = i.boundary,c = i.rootBoundary,h = i.altBoundary,d = i.padding,u = i.tether,f = void 0 === u || u,p = i.tetherOffset,m = void 0 === p ? 0 : p,g = Gt(e, { boundary: l, rootBoundary: c, padding: d, altBoundary: h }),_ = gt(e.placement),b = Yt(e.placement),v = !b,y = Ct(_),w = "x" === y ? "y" : "x",E = e.modifiersData.popperOffsets,A = e.rects.reference,T = e.rects.popper,O = "function" == typeof m ? m(Object.assign({}, e.rects, { placement: e.placement })) : m,C = { x: 0, y: 0 };if (E) {if (o || a) {var k = "y" === y ? it : ot,L = "y" === y ? nt : st,x = "y" === y ? "height" : "width",D = E[y],S = E[y] + g[k],I = E[y] - g[L],N = f ? -T[x] / 2 : 0,j = "start" === b ? A[x] : T[x],M = "start" === b ? -T[x] : -A[x],P = e.elements.arrow,H = f && P ? bt(P) : { width: 0, height: 0 },R = e.modifiersData["arrow#persistent"] ? e.modifiersData["arrow#persistent"].padding : { top: 0, right: 0, bottom: 0, left: 0 },B = R[k],W = R[L],q = Dt(0, A[x], H[x]),z = v ? A[x] / 2 - N - q - B - O : j - q - B - O,$ = v ? -A[x] / 2 + N + q + W + O : M + q + W + O,U = e.elements.arrow && Ot(e.elements.arrow),F = U ? "y" === y ? U.clientTop || 0 : U.clientLeft || 0 : 0,V = e.modifiersData.offset ? e.modifiersData.offset[e.placement][y] : 0,K = E[y] + z - V - F,X = E[y] + $ - V;if (o) {var Y = Dt(f ? Lt(S, K) : S, D, f ? kt(I, X) : I);E[y] = Y, C[y] = Y - D;}if (a) {var Q = "x" === y ? it : ot,G = "x" === y ? nt : st,Z = E[w],J = Z + g[Q],tt = Z - g[G],et = Dt(f ? Lt(J, K) : J, Z, f ? kt(tt, X) : tt);E[w] = et, C[w] = et - Z;}}e.modifiersData[n] = C;}}, requiresIfExists: ["offset"] };function re(t, e, i) {void 0 === i && (i = !1);var n,s,o = Et(e),r = _t(t),a = ft(e),l = { scrollLeft: 0, scrollTop: 0 },c = { x: 0, y: 0 };return (a || !a && !i) && (("body" !== ht(e) || Ft(o)) && (l = (n = e) !== dt(n) && ft(n) ? { scrollLeft: (s = n).scrollLeft, scrollTop: s.scrollTop } : $t(n)), ft(e) ? ((c = _t(e)).x += e.clientLeft, c.y += e.clientTop) : o && (c.x = Ut(o))), { x: r.left + l.scrollLeft - c.x, y: r.top + l.scrollTop - c.y, width: r.width, height: r.height };}var ae = { placement: "bottom", modifiers: [], strategy: "absolute" };function le() {for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++) e[i] = arguments[i];return !e.some(function (t) {return !(t && "function" == typeof t.getBoundingClientRect);});}function ce(t) {void 0 === t && (t = {});var e = t,i = e.defaultModifiers,n = void 0 === i ? [] : i,s = e.defaultOptions,o = void 0 === s ? ae : s;return function (t, e, i) {void 0 === i && (i = o);var s,r,a = { placement: "bottom", orderedModifiers: [], options: Object.assign({}, ae, o), modifiersData: {}, elements: { reference: t, popper: e }, attributes: {}, styles: {} },l = [],c = !1,h = { state: a, setOptions: function (i) {d(), a.options = Object.assign({}, o, a.options, i), a.scrollParents = { reference: ut(t) ? Vt(t) : t.contextElement ? Vt(t.contextElement) : [], popper: Vt(e) };var s,r,c = function (t) {var e = function (t) {var e = new Map(),i = new Set(),n = [];return t.forEach(function (t) {e.set(t.name, t);}), t.forEach(function (t) {i.has(t.name) || function t(s) {i.add(s.name), [].concat(s.requires || [], s.requiresIfExists || []).forEach(function (n) {if (!i.has(n)) {var s = e.get(n);s && t(s);}}), n.push(s);}(t);}), n;}(t);return ct.reduce(function (t, i) {return t.concat(e.filter(function (t) {return t.phase === i;}));}, []);}((s = [].concat(n, a.options.modifiers), r = s.reduce(function (t, e) {var i = t[e.name];return t[e.name] = i ? Object.assign({}, i, e, { options: Object.assign({}, i.options, e.options), data: Object.assign({}, i.data, e.data) }) : e, t;}, {}), Object.keys(r).map(function (t) {return r[t];})));return a.orderedModifiers = c.filter(function (t) {return t.enabled;}), a.orderedModifiers.forEach(function (t) {var e = t.name,i = t.options,n = void 0 === i ? {} : i,s = t.effect;if ("function" == typeof s) {var o = s({ state: a, name: e, instance: h, options: n });l.push(o || function () {});}}), h.update();}, forceUpdate: function () {if (!c) {var t = a.elements,e = t.reference,i = t.popper;if (le(e, i)) {a.rects = { reference: re(e, Ot(i), "fixed" === a.options.strategy), popper: bt(i) }, a.reset = !1, a.placement = a.options.placement, a.orderedModifiers.forEach(function (t) {return a.modifiersData[t.name] = Object.assign({}, t.data);});for (var n = 0; n < a.orderedModifiers.length; n++) if (!0 !== a.reset) {var s = a.orderedModifiers[n],o = s.fn,r = s.options,l = void 0 === r ? {} : r,d = s.name;"function" == typeof o && (a = o({ state: a, options: l, name: d, instance: h }) || a);} else a.reset = !1, n = -1;}}}, update: (s = function () {return new Promise(function (t) {h.forceUpdate(), t(a);});}, function () {return r || (r = new Promise(function (t) {Promise.resolve().then(function () {r = void 0, t(s());});})), r;}), destroy: function () {d(), c = !0;} };if (!le(t, e)) return h;function d() {l.forEach(function (t) {return t();}), l = [];}return h.setOptions(i).then(function (t) {!c && i.onFirstUpdate && i.onFirstUpdate(t);}), h;};}var he = ce(),de = ce({ defaultModifiers: [Rt, se, Pt, mt] }),ue = ce({ defaultModifiers: [Rt, se, Pt, mt, ne, Jt, oe, Nt, ie] }),fe = Object.freeze({ __proto__: null, popperGenerator: ce, detectOverflow: Gt, createPopperBase: he, createPopper: ue, createPopperLite: de, top: it, bottom: nt, right: st, left: ot, auto: "auto", basePlacements: rt, start: "start", end: "end", clippingParents: "clippingParents", viewport: "viewport", popper: "popper", reference: "reference", variationPlacements: at, placements: lt, beforeRead: "beforeRead", read: "read", afterRead: "afterRead", beforeMain: "beforeMain", main: "main", afterMain: "afterMain", beforeWrite: "beforeWrite", write: "write", afterWrite: "afterWrite", modifierPhases: ct, applyStyles: mt, arrow: Nt, computeStyles: Pt, eventListeners: Rt, flip: Jt, hide: ie, offset: ne, popperOffsets: se, preventOverflow: oe });const pe = new RegExp("ArrowUp|ArrowDown|Escape"),me = g() ? "top-end" : "top-start",ge = g() ? "top-start" : "top-end",_e = g() ? "bottom-end" : "bottom-start",be = g() ? "bottom-start" : "bottom-end",ve = g() ? "left-start" : "right-start",ye = g() ? "right-start" : "left-start",we = { offset: [0, 2], boundary: "clippingParents", reference: "toggle", display: "dynamic", popperConfig: null, autoClose: !0 },Ee = { offset: "(array|string|function)", boundary: "(string|element)", reference: "(string|element|object)", display: "string", popperConfig: "(null|object|function)", autoClose: "(boolean|string)" };class Ae extends B {constructor(t, e) {super(t), this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();}static get Default() {return we;}static get DefaultType() {return Ee;}static get NAME() {return "dropdown";}toggle() {h(this._element) || (this._element.classList.contains("show") ? this.hide() : this.show());}show() {var _this29 = this;if (h(this._element) || this._menu.classList.contains("show")) return;const t = Ae.getParentFromElement(this._element),e = { relatedTarget: this._element };if (!P.trigger(this._element, "show.bs.dropdown", e).defaultPrevented) {if (this._inNavbar) U.setDataAttribute(this._menu, "popper", "none");else {if (void 0 === fe) throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e = this._element;"parent" === this._config.reference ? e = t : r(this._config.reference) ? e = a(this._config.reference) : "object" == typeof this._config.reference && (e = this._config.reference);const i = this._getPopperConfig(),n = i.modifiers.find(function (t) {_newArrowCheck(this, _this29);return "applyStyles" === t.name && !1 === t.enabled;}.bind(this));this._popper = ue(e, this._menu, i), n && U.setDataAttribute(this._menu, "popper", "static");}"ontouchstart" in document.documentElement && !t.closest(".navbar-nav") && [].concat(...document.body.children).forEach(function (t) {_newArrowCheck(this, _this29);return P.on(t, "mouseover", u);}.bind(this)), this._element.focus(), this._element.setAttribute("aria-expanded", !0), this._menu.classList.toggle("show"), this._element.classList.toggle("show"), P.trigger(this._element, "shown.bs.dropdown", e);}}hide() {if (h(this._element) || !this._menu.classList.contains("show")) return;const t = { relatedTarget: this._element };this._completeHide(t);}dispose() {this._popper && this._popper.destroy(), super.dispose();}update() {this._inNavbar = this._detectNavbar(), this._popper && this._popper.update();}_addEventListeners() {var _this30 = this;P.on(this._element, "click.bs.dropdown", function (t) {_newArrowCheck(this, _this30);t.preventDefault(), this.toggle();}.bind(this));}_completeHide(t) {var _this31 = this;P.trigger(this._element, "hide.bs.dropdown", t).defaultPrevented || ("ontouchstart" in document.documentElement && [].concat(...document.body.children).forEach(function (t) {_newArrowCheck(this, _this31);return P.off(t, "mouseover", u);}.bind(this)), this._popper && this._popper.destroy(), this._menu.classList.remove("show"), this._element.classList.remove("show"), this._element.setAttribute("aria-expanded", "false"), U.removeDataAttribute(this._menu, "popper"), P.trigger(this._element, "hidden.bs.dropdown", t));}_getConfig(t) {if (t = _objectSpread(_objectSpread(_objectSpread({}, this.constructor.Default), U.getDataAttributes(this._element)), t), l("dropdown", t, this.constructor.DefaultType), "object" == typeof t.reference && !r(t.reference) && "function" != typeof t.reference.getBoundingClientRect) throw new TypeError("dropdown".toUpperCase() + ': Option "reference" provided type "object" without a required "getBoundingClientRect" method.');return t;}_getMenuElement() {return t.next(this._element, ".dropdown-menu")[0];}_getPlacement() {const t = this._element.parentNode;if (t.classList.contains("dropend")) return ve;if (t.classList.contains("dropstart")) return ye;const e = "end" === getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup") ? e ? ge : me : e ? be : _e;}_detectNavbar() {return null !== this._element.closest(".navbar");}_getOffset() {var _this32 = this;const { offset: t } = this._config;return "string" == typeof t ? t.split(",").map(function (t) {_newArrowCheck(this, _this32);return Number.parseInt(t, 10);}.bind(this)) : "function" == typeof t ? function (e) {_newArrowCheck(this, _this32);return t(e, this._element);}.bind(this) : t;}_getPopperConfig() {const t = { placement: this._getPlacement(), modifiers: [{ name: "preventOverflow", options: { boundary: this._config.boundary } }, { name: "offset", options: { offset: this._getOffset() } }] };return "static" === this._config.display && (t.modifiers = [{ name: "applyStyles", enabled: !1 }]), _objectSpread(_objectSpread({}, t), "function" == typeof this._config.popperConfig ? this._config.popperConfig(t) : this._config.popperConfig);}_selectMenuItem({ key: e, target: i }) {const n = t.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)", this._menu).filter(c);n.length && y(n, i, "ArrowDown" === e, !n.includes(i)).focus();}static dropdownInterface(t, e) {const i = Ae.getOrCreateInstance(t, e);if ("string" == typeof e) {if (void 0 === i[e]) throw new TypeError(`No method named "${e}"`);i[e]();}}static jQueryInterface(t) {return this.each(function () {Ae.dropdownInterface(this, t);});}static clearMenus(e) {if (e && (2 === e.button || "keyup" === e.type && "Tab" !== e.key)) return;const i = t.find('[data-bs-toggle="dropdown"]');for (let t = 0, n = i.length; t < n; t++) {const n = Ae.getInstance(i[t]);if (!n || !1 === n._config.autoClose) continue;if (!n._element.classList.contains("show")) continue;const s = { relatedTarget: n._element };if (e) {const t = e.composedPath(),i = t.includes(n._menu);if (t.includes(n._element) || "inside" === n._config.autoClose && !i || "outside" === n._config.autoClose && i) continue;if (n._menu.contains(e.target) && ("keyup" === e.type && "Tab" === e.key || /input|select|option|textarea|form/i.test(e.target.tagName))) continue;"click" === e.type && (s.clickEvent = e);}n._completeHide(s);}}static getParentFromElement(t) {return s(t) || t.parentNode;}static dataApiKeydownHandler(e) {var _this33 = this;if (/input|textarea/i.test(e.target.tagName) ? "Space" === e.key || "Escape" !== e.key && ("ArrowDown" !== e.key && "ArrowUp" !== e.key || e.target.closest(".dropdown-menu")) : !pe.test(e.key)) return;const i = this.classList.contains("show");if (!i && "Escape" === e.key) return;if (e.preventDefault(), e.stopPropagation(), h(this)) return;const n = function n() {_newArrowCheck(this, _this33);return this.matches('[data-bs-toggle="dropdown"]') ? this : t.prev(this, '[data-bs-toggle="dropdown"]')[0];}.bind(this);return "Escape" === e.key ? (n().focus(), void Ae.clearMenus()) : "ArrowUp" === e.key || "ArrowDown" === e.key ? (i || n().click(), void Ae.getInstance(n())._selectMenuItem(e)) : void (i && "Space" !== e.key || Ae.clearMenus());}}P.on(document, "keydown.bs.dropdown.data-api", '[data-bs-toggle="dropdown"]', Ae.dataApiKeydownHandler), P.on(document, "keydown.bs.dropdown.data-api", ".dropdown-menu", Ae.dataApiKeydownHandler), P.on(document, "click.bs.dropdown.data-api", Ae.clearMenus), P.on(document, "keyup.bs.dropdown.data-api", Ae.clearMenus), P.on(document, "click.bs.dropdown.data-api", '[data-bs-toggle="dropdown"]', function (t) {t.preventDefault(), Ae.dropdownInterface(this);}), _(Ae);class Te {constructor() {this._element = document.body;}getWidth() {const t = document.documentElement.clientWidth;return Math.abs(window.innerWidth - t);}hide() {var _this34 = this;const t = this.getWidth();this._disableOverFlow(), this._setElementAttributes(this._element, "paddingRight", function (e) {_newArrowCheck(this, _this34);return e + t;}.bind(this)), this._setElementAttributes(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top", "paddingRight", function (e) {_newArrowCheck(this, _this34);return e + t;}.bind(this)), this._setElementAttributes(".sticky-top", "marginRight", function (e) {_newArrowCheck(this, _this34);return e - t;}.bind(this));}_disableOverFlow() {this._saveInitialAttribute(this._element, "overflow"), this._element.style.overflow = "hidden";}_setElementAttributes(t, e, i) {var _this35 = this;const n = this.getWidth();this._applyManipulationCallback(t, function (t) {_newArrowCheck(this, _this35);if (t !== this._element && window.innerWidth > t.clientWidth + n) return;this._saveInitialAttribute(t, e);const s = window.getComputedStyle(t)[e];t.style[e] = i(Number.parseFloat(s)) + "px";}.bind(this));}reset() {this._resetElementAttributes(this._element, "overflow"), this._resetElementAttributes(this._element, "paddingRight"), this._resetElementAttributes(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top", "paddingRight"), this._resetElementAttributes(".sticky-top", "marginRight");}_saveInitialAttribute(t, e) {const i = t.style[e];i && U.setDataAttribute(t, e, i);}_resetElementAttributes(t, e) {var _this36 = this;this._applyManipulationCallback(t, function (t) {_newArrowCheck(this, _this36);const i = U.getDataAttribute(t, e);void 0 === i ? t.style.removeProperty(e) : (U.removeDataAttribute(t, e), t.style[e] = i);}.bind(this));}_applyManipulationCallback(e, i) {r(e) ? i(e) : t.find(e, this._element).forEach(i);}isOverflowing() {return this.getWidth() > 0;}}const Oe = { isVisible: !0, isAnimated: !1, rootElement: "body", clickCallback: null },Ce = { isVisible: "boolean", isAnimated: "boolean", rootElement: "(element|string)", clickCallback: "(function|null)" };class ke {constructor(t) {this._config = this._getConfig(t), this._isAppended = !1, this._element = null;}show(t) {var _this37 = this;this._config.isVisible ? (this._append(), this._config.isAnimated && f(this._getElement()), this._getElement().classList.add("show"), this._emulateAnimation(function () {_newArrowCheck(this, _this37);b(t);}.bind(this))) : b(t);}hide(t) {var _this38 = this;this._config.isVisible ? (this._getElement().classList.remove("show"), this._emulateAnimation(function () {_newArrowCheck(this, _this38);this.dispose(), b(t);}.bind(this))) : b(t);}_getElement() {if (!this._element) {const t = document.createElement("div");t.className = "modal-backdrop", this._config.isAnimated && t.classList.add("fade"), this._element = t;}return this._element;}_getConfig(t) {return (t = _objectSpread(_objectSpread({}, Oe), "object" == typeof t ? t : {})).rootElement = a(t.rootElement), l("backdrop", t, Ce), t;}_append() {var _this39 = this;this._isAppended || (this._config.rootElement.appendChild(this._getElement()), P.on(this._getElement(), "mousedown.bs.backdrop", function () {_newArrowCheck(this, _this39);b(this._config.clickCallback);}.bind(this)), this._isAppended = !0);}dispose() {this._isAppended && (P.off(this._element, "mousedown.bs.backdrop"), this._element.remove(), this._isAppended = !1);}_emulateAnimation(t) {v(t, this._getElement(), this._config.isAnimated);}}const Le = { backdrop: !0, keyboard: !0, focus: !0 },xe = { backdrop: "(boolean|string)", keyboard: "boolean", focus: "boolean" };class De extends B {constructor(e, i) {super(e), this._config = this._getConfig(i), this._dialog = t.findOne(".modal-dialog", this._element), this._backdrop = this._initializeBackDrop(), this._isShown = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollBar = new Te();}static get Default() {return Le;}static get NAME() {return "modal";}toggle(t) {return this._isShown ? this.hide() : this.show(t);}show(t) {var _this40 = this;this._isShown || this._isTransitioning || P.trigger(this._element, "show.bs.modal", { relatedTarget: t }).defaultPrevented || (this._isShown = !0, this._isAnimated() && (this._isTransitioning = !0), this._scrollBar.hide(), document.body.classList.add("modal-open"), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), P.on(this._element, "click.dismiss.bs.modal", '[data-bs-dismiss="modal"]', function (t) {_newArrowCheck(this, _this40);return this.hide(t);}.bind(this)), P.on(this._dialog, "mousedown.dismiss.bs.modal", function () {var _this41 = this;_newArrowCheck(this, _this40);P.one(this._element, "mouseup.dismiss.bs.modal", function (t) {_newArrowCheck(this, _this41);t.target === this._element && (this._ignoreBackdropClick = !0);}.bind(this));}.bind(this)), this._showBackdrop(function () {_newArrowCheck(this, _this40);return this._showElement(t);}.bind(this)));}hide(t) {var _this42 = this;if (t && ["A", "AREA"].includes(t.target.tagName) && t.preventDefault(), !this._isShown || this._isTransitioning) return;if (P.trigger(this._element, "hide.bs.modal").defaultPrevented) return;this._isShown = !1;const e = this._isAnimated();e && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), P.off(document, "focusin.bs.modal"), this._element.classList.remove("show"), P.off(this._element, "click.dismiss.bs.modal"), P.off(this._dialog, "mousedown.dismiss.bs.modal"), this._queueCallback(function () {_newArrowCheck(this, _this42);return this._hideModal();}.bind(this), this._element, e);}dispose() {var _this43 = this;[window, this._dialog].forEach(function (t) {_newArrowCheck(this, _this43);return P.off(t, ".bs.modal");}.bind(this)), this._backdrop.dispose(), super.dispose(), P.off(document, "focusin.bs.modal");}handleUpdate() {this._adjustDialog();}_initializeBackDrop() {return new ke({ isVisible: Boolean(this._config.backdrop), isAnimated: this._isAnimated() });}_getConfig(t) {return t = _objectSpread(_objectSpread(_objectSpread({}, Le), U.getDataAttributes(this._element)), "object" == typeof t ? t : {}), l("modal", t, xe), t;}_showElement(e) {var _this44 = this;const i = this._isAnimated(),n = t.findOne(".modal-body", this._dialog);this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", !0), this._element.setAttribute("role", "dialog"), this._element.scrollTop = 0, n && (n.scrollTop = 0), i && f(this._element), this._element.classList.add("show"), this._config.focus && this._enforceFocus(), this._queueCallback(function () {_newArrowCheck(this, _this44);this._config.focus && this._element.focus(), this._isTransitioning = !1, P.trigger(this._element, "shown.bs.modal", { relatedTarget: e });}.bind(this), this._dialog, i);}_enforceFocus() {var _this45 = this;P.off(document, "focusin.bs.modal"), P.on(document, "focusin.bs.modal", function (t) {_newArrowCheck(this, _this45);document === t.target || this._element === t.target || this._element.contains(t.target) || this._element.focus();}.bind(this));}_setEscapeEvent() {var _this46 = this;this._isShown ? P.on(this._element, "keydown.dismiss.bs.modal", function (t) {_newArrowCheck(this, _this46);this._config.keyboard && "Escape" === t.key ? (t.preventDefault(), this.hide()) : this._config.keyboard || "Escape" !== t.key || this._triggerBackdropTransition();}.bind(this)) : P.off(this._element, "keydown.dismiss.bs.modal");}_setResizeEvent() {var _this47 = this;this._isShown ? P.on(window, "resize.bs.modal", function () {_newArrowCheck(this, _this47);return this._adjustDialog();}.bind(this)) : P.off(window, "resize.bs.modal");}_hideModal() {var _this48 = this;this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._element.removeAttribute("aria-modal"), this._element.removeAttribute("role"), this._isTransitioning = !1, this._backdrop.hide(function () {_newArrowCheck(this, _this48);document.body.classList.remove("modal-open"), this._resetAdjustments(), this._scrollBar.reset(), P.trigger(this._element, "hidden.bs.modal");}.bind(this));}_showBackdrop(t) {var _this49 = this;P.on(this._element, "click.dismiss.bs.modal", function (t) {_newArrowCheck(this, _this49);this._ignoreBackdropClick ? this._ignoreBackdropClick = !1 : t.target === t.currentTarget && (!0 === this._config.backdrop ? this.hide() : "static" === this._config.backdrop && this._triggerBackdropTransition());}.bind(this)), this._backdrop.show(t);}_isAnimated() {return this._element.classList.contains("fade");}_triggerBackdropTransition() {var _this50 = this;if (P.trigger(this._element, "hidePrevented.bs.modal").defaultPrevented) return;const { classList: t, scrollHeight: e, style: i } = this._element,n = e > document.documentElement.clientHeight;!n && "hidden" === i.overflowY || t.contains("modal-static") || (n || (i.overflowY = "hidden"), t.add("modal-static"), this._queueCallback(function () {var _this51 = this;_newArrowCheck(this, _this50);t.remove("modal-static"), n || this._queueCallback(function () {_newArrowCheck(this, _this51);i.overflowY = "";}.bind(this), this._dialog);}.bind(this), this._dialog), this._element.focus());}_adjustDialog() {const t = this._element.scrollHeight > document.documentElement.clientHeight,e = this._scrollBar.getWidth(),i = e > 0;(!i && t && !g() || i && !t && g()) && (this._element.style.paddingLeft = e + "px"), (i && !t && !g() || !i && t && g()) && (this._element.style.paddingRight = e + "px");}_resetAdjustments() {this._element.style.paddingLeft = "", this._element.style.paddingRight = "";}static jQueryInterface(t, e) {return this.each(function () {const i = De.getOrCreateInstance(this, t);if ("string" == typeof t) {if (void 0 === i[t]) throw new TypeError(`No method named "${t}"`);i[t](e);}});}}P.on(document, "click.bs.modal.data-api", '[data-bs-toggle="modal"]', function (t) {var _this52 = this;const e = s(this);["A", "AREA"].includes(this.tagName) && t.preventDefault(), P.one(e, "show.bs.modal", function (t) {var _this53 = this;_newArrowCheck(this, _this52);t.defaultPrevented || P.one(e, "hidden.bs.modal", function () {_newArrowCheck(this, _this53);c(this) && this.focus();}.bind(this));}.bind(this)), De.getOrCreateInstance(e).toggle(this);}), _(De);const Se = { backdrop: !0, keyboard: !0, scroll: !1 },Ie = { backdrop: "boolean", keyboard: "boolean", scroll: "boolean" };class Ne extends B {constructor(t, e) {super(t), this._config = this._getConfig(e), this._isShown = !1, this._backdrop = this._initializeBackDrop(), this._addEventListeners();}static get NAME() {return "offcanvas";}static get Default() {return Se;}toggle(t) {return this._isShown ? this.hide() : this.show(t);}show(t) {var _this54 = this;this._isShown || P.trigger(this._element, "show.bs.offcanvas", { relatedTarget: t }).defaultPrevented || (this._isShown = !0, this._element.style.visibility = "visible", this._backdrop.show(), this._config.scroll || (new Te().hide(), this._enforceFocusOnElement(this._element)), this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", !0), this._element.setAttribute("role", "dialog"), this._element.classList.add("show"), this._queueCallback(function () {_newArrowCheck(this, _this54);P.trigger(this._element, "shown.bs.offcanvas", { relatedTarget: t });}.bind(this), this._element, !0));}hide() {var _this55 = this;this._isShown && (P.trigger(this._element, "hide.bs.offcanvas").defaultPrevented || (P.off(document, "focusin.bs.offcanvas"), this._element.blur(), this._isShown = !1, this._element.classList.remove("show"), this._backdrop.hide(), this._queueCallback(function () {_newArrowCheck(this, _this55);this._element.setAttribute("aria-hidden", !0), this._element.removeAttribute("aria-modal"), this._element.removeAttribute("role"), this._element.style.visibility = "hidden", this._config.scroll || new Te().reset(), P.trigger(this._element, "hidden.bs.offcanvas");}.bind(this), this._element, !0)));}dispose() {this._backdrop.dispose(), super.dispose(), P.off(document, "focusin.bs.offcanvas");}_getConfig(t) {return t = _objectSpread(_objectSpread(_objectSpread({}, Se), U.getDataAttributes(this._element)), "object" == typeof t ? t : {}), l("offcanvas", t, Ie), t;}_initializeBackDrop() {var _this56 = this;return new ke({ isVisible: this._config.backdrop, isAnimated: !0, rootElement: this._element.parentNode, clickCallback: function clickCallback() {_newArrowCheck(this, _this56);return this.hide();}.bind(this) });}_enforceFocusOnElement(t) {var _this57 = this;P.off(document, "focusin.bs.offcanvas"), P.on(document, "focusin.bs.offcanvas", function (e) {_newArrowCheck(this, _this57);document === e.target || t === e.target || t.contains(e.target) || t.focus();}.bind(this)), t.focus();}_addEventListeners() {var _this58 = this;P.on(this._element, "click.dismiss.bs.offcanvas", '[data-bs-dismiss="offcanvas"]', function () {_newArrowCheck(this, _this58);return this.hide();}.bind(this)), P.on(this._element, "keydown.dismiss.bs.offcanvas", function (t) {_newArrowCheck(this, _this58);this._config.keyboard && "Escape" === t.key && this.hide();}.bind(this));}static jQueryInterface(t) {return this.each(function () {const e = Ne.getOrCreateInstance(this, t);if ("string" == typeof t) {if (void 0 === e[t] || t.startsWith("_") || "constructor" === t) throw new TypeError(`No method named "${t}"`);e[t](this);}});}}P.on(document, "click.bs.offcanvas.data-api", '[data-bs-toggle="offcanvas"]', function (e) {var _this59 = this;const i = s(this);if (["A", "AREA"].includes(this.tagName) && e.preventDefault(), h(this)) return;P.one(i, "hidden.bs.offcanvas", function () {_newArrowCheck(this, _this59);c(this) && this.focus();}.bind(this));const n = t.findOne(".offcanvas.show");n && n !== i && Ne.getInstance(n).hide(), Ne.getOrCreateInstance(i).toggle(this);}), P.on(window, "load.bs.offcanvas.data-api", function () {var _this60 = this;_newArrowCheck(this, _this);return t.find(".offcanvas.show").forEach(function (t) {_newArrowCheck(this, _this60);return Ne.getOrCreateInstance(t).show();}.bind(this));}.bind(this)), _(Ne);const je = new Set(["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"]),Me = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/i,Pe = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,He = function He(t, e) {var _this61 = this;_newArrowCheck(this, _this);const i = t.nodeName.toLowerCase();if (e.includes(i)) return !je.has(i) || Boolean(Me.test(t.nodeValue) || Pe.test(t.nodeValue));const n = e.filter(function (t) {_newArrowCheck(this, _this61);return t instanceof RegExp;}.bind(this));for (let t = 0, e = n.length; t < e; t++) if (n[t].test(i)) return !0;return !1;}.bind(this);function Re(t, e, i) {var _this62 = this;if (!t.length) return t;if (i && "function" == typeof i) return i(t);const n = new window.DOMParser().parseFromString(t, "text/html"),s = Object.keys(e),o = [].concat(...n.body.querySelectorAll("*"));for (let t = 0, i = o.length; t < i; t++) {const i = o[t],n = i.nodeName.toLowerCase();if (!s.includes(n)) {i.remove();continue;}const r = [].concat(...i.attributes),a = [].concat(e["*"] || [], e[n] || []);r.forEach(function (t) {_newArrowCheck(this, _this62);He(t, a) || i.removeAttribute(t.nodeName);}.bind(this));}return n.body.innerHTML;}const Be = new RegExp("(^|\\s)bs-tooltip\\S+", "g"),We = new Set(["sanitize", "allowList", "sanitizeFn"]),qe = { animation: "boolean", template: "string", title: "(string|element|function)", trigger: "string", delay: "(number|object)", html: "boolean", selector: "(string|boolean)", placement: "(string|function)", offset: "(array|string|function)", container: "(string|element|boolean)", fallbackPlacements: "array", boundary: "(string|element)", customClass: "(string|function)", sanitize: "boolean", sanitizeFn: "(null|function)", allowList: "object", popperConfig: "(null|object|function)" },ze = { AUTO: "auto", TOP: "top", RIGHT: g() ? "left" : "right", BOTTOM: "bottom", LEFT: g() ? "right" : "left" },$e = { animation: !0, template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>', trigger: "hover focus", title: "", delay: 0, html: !1, selector: !1, placement: "top", offset: [0, 0], container: !1, fallbackPlacements: ["top", "right", "bottom", "left"], boundary: "clippingParents", customClass: "", sanitize: !0, sanitizeFn: null, allowList: { "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i], a: ["target", "href", "title", "rel"], area: [], b: [], br: [], col: [], code: [], div: [], em: [], hr: [], h1: [], h2: [], h3: [], h4: [], h5: [], h6: [], i: [], img: ["src", "srcset", "alt", "title", "width", "height"], li: [], ol: [], p: [], pre: [], s: [], small: [], span: [], sub: [], sup: [], strong: [], u: [], ul: [] }, popperConfig: null },Ue = { HIDE: "hide.bs.tooltip", HIDDEN: "hidden.bs.tooltip", SHOW: "show.bs.tooltip", SHOWN: "shown.bs.tooltip", INSERTED: "inserted.bs.tooltip", CLICK: "click.bs.tooltip", FOCUSIN: "focusin.bs.tooltip", FOCUSOUT: "focusout.bs.tooltip", MOUSEENTER: "mouseenter.bs.tooltip", MOUSELEAVE: "mouseleave.bs.tooltip" };class Fe extends B {constructor(t, e) {if (void 0 === fe) throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t), this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this._config = this._getConfig(e), this.tip = null, this._setListeners();}static get Default() {return $e;}static get NAME() {return "tooltip";}static get Event() {return Ue;}static get DefaultType() {return qe;}enable() {this._isEnabled = !0;}disable() {this._isEnabled = !1;}toggleEnabled() {this._isEnabled = !this._isEnabled;}toggle(t) {if (this._isEnabled) if (t) {const e = this._initializeOnDelegatedTarget(t);e._activeTrigger.click = !e._activeTrigger.click, e._isWithActiveTrigger() ? e._enter(null, e) : e._leave(null, e);} else {if (this.getTipElement().classList.contains("show")) return void this._leave(null, this);this._enter(null, this);}}dispose() {clearTimeout(this._timeout), P.off(this._element.closest(".modal"), "hide.bs.modal", this._hideModalHandler), this.tip && this.tip.remove(), this._popper && this._popper.destroy(), super.dispose();}show() {var _this63 = this;if ("none" === this._element.style.display) throw new Error("Please use show on visible elements");if (!this.isWithContent() || !this._isEnabled) return;const t = P.trigger(this._element, this.constructor.Event.SHOW),i = _d(this._element),n = null === i ? this._element.ownerDocument.documentElement.contains(this._element) : i.contains(this._element);if (t.defaultPrevented || !n) return;const s = this.getTipElement(),o = e(this.constructor.NAME);s.setAttribute("id", o), this._element.setAttribute("aria-describedby", o), this.setContent(), this._config.animation && s.classList.add("fade");const r = "function" == typeof this._config.placement ? this._config.placement.call(this, s, this._element) : this._config.placement,a = this._getAttachment(r);this._addAttachmentClass(a);const { container: l } = this._config;R.set(s, this.constructor.DATA_KEY, this), this._element.ownerDocument.documentElement.contains(this.tip) || (l.appendChild(s), P.trigger(this._element, this.constructor.Event.INSERTED)), this._popper ? this._popper.update() : this._popper = ue(this._element, s, this._getPopperConfig(a)), s.classList.add("show");const c = "function" == typeof this._config.customClass ? this._config.customClass() : this._config.customClass;c && s.classList.add(...c.split(" ")), "ontouchstart" in document.documentElement && [].concat(...document.body.children).forEach(function (t) {_newArrowCheck(this, _this63);P.on(t, "mouseover", u);}.bind(this));const h = this.tip.classList.contains("fade");this._queueCallback(function () {_newArrowCheck(this, _this63);const t = this._hoverState;this._hoverState = null, P.trigger(this._element, this.constructor.Event.SHOWN), "out" === t && this._leave(null, this);}.bind(this), this.tip, h);}hide() {var _this64 = this;if (!this._popper) return;const t = this.getTipElement();if (P.trigger(this._element, this.constructor.Event.HIDE).defaultPrevented) return;t.classList.remove("show"), "ontouchstart" in document.documentElement && [].concat(...document.body.children).forEach(function (t) {_newArrowCheck(this, _this64);return P.off(t, "mouseover", u);}.bind(this)), this._activeTrigger.click = !1, this._activeTrigger.focus = !1, this._activeTrigger.hover = !1;const e = this.tip.classList.contains("fade");this._queueCallback(function () {_newArrowCheck(this, _this64);this._isWithActiveTrigger() || ("show" !== this._hoverState && t.remove(), this._cleanTipClass(), this._element.removeAttribute("aria-describedby"), P.trigger(this._element, this.constructor.Event.HIDDEN), this._popper && (this._popper.destroy(), this._popper = null));}.bind(this), this.tip, e), this._hoverState = "";}update() {null !== this._popper && this._popper.update();}isWithContent() {return Boolean(this.getTitle());}getTipElement() {if (this.tip) return this.tip;const t = document.createElement("div");return t.innerHTML = this._config.template, this.tip = t.children[0], this.tip;}setContent() {const e = this.getTipElement();this.setElementContent(t.findOne(".tooltip-inner", e), this.getTitle()), e.classList.remove("fade", "show");}setElementContent(t, e) {if (null !== t) return r(e) ? (e = a(e), void (this._config.html ? e.parentNode !== t && (t.innerHTML = "", t.appendChild(e)) : t.textContent = e.textContent)) : void (this._config.html ? (this._config.sanitize && (e = Re(e, this._config.allowList, this._config.sanitizeFn)), t.innerHTML = e) : t.textContent = e);}getTitle() {let t = this._element.getAttribute("data-bs-original-title");return t || (t = "function" == typeof this._config.title ? this._config.title.call(this._element) : this._config.title), t;}updateAttachment(t) {return "right" === t ? "end" : "left" === t ? "start" : t;}_initializeOnDelegatedTarget(t, e) {const i = this.constructor.DATA_KEY;return (e = e || R.get(t.delegateTarget, i)) || (e = new this.constructor(t.delegateTarget, this._getDelegateConfig()), R.set(t.delegateTarget, i, e)), e;}_getOffset() {var _this65 = this;const { offset: t } = this._config;return "string" == typeof t ? t.split(",").map(function (t) {_newArrowCheck(this, _this65);return Number.parseInt(t, 10);}.bind(this)) : "function" == typeof t ? function (e) {_newArrowCheck(this, _this65);return t(e, this._element);}.bind(this) : t;}_getPopperConfig(t) {var _this66 = this;const e = { placement: t, modifiers: [{ name: "flip", options: { fallbackPlacements: this._config.fallbackPlacements } }, { name: "offset", options: { offset: this._getOffset() } }, { name: "preventOverflow", options: { boundary: this._config.boundary } }, { name: "arrow", options: { element: `.${this.constructor.NAME}-arrow` } }, { name: "onChange", enabled: !0, phase: "afterWrite", fn: function fn(t) {_newArrowCheck(this, _this66);return this._handlePopperPlacementChange(t);}.bind(this) }], onFirstUpdate: function onFirstUpdate(t) {_newArrowCheck(this, _this66);t.options.placement !== t.placement && this._handlePopperPlacementChange(t);}.bind(this) };return _objectSpread(_objectSpread({}, e), "function" == typeof this._config.popperConfig ? this._config.popperConfig(e) : this._config.popperConfig);}_addAttachmentClass(t) {this.getTipElement().classList.add("bs-tooltip-" + this.updateAttachment(t));}_getAttachment(t) {return ze[t.toUpperCase()];}_setListeners() {var _this67 = this;this._config.trigger.split(" ").forEach(function (t) {var _this68 = this;_newArrowCheck(this, _this67);if ("click" === t) P.on(this._element, this.constructor.Event.CLICK, this._config.selector, function (t) {_newArrowCheck(this, _this68);return this.toggle(t);}.bind(this));else if ("manual" !== t) {const e = "hover" === t ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN,i = "hover" === t ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;P.on(this._element, e, this._config.selector, function (t) {_newArrowCheck(this, _this68);return this._enter(t);}.bind(this)), P.on(this._element, i, this._config.selector, function (t) {_newArrowCheck(this, _this68);return this._leave(t);}.bind(this));}}.bind(this)), this._hideModalHandler = function () {_newArrowCheck(this, _this67);this._element && this.hide();}.bind(this), P.on(this._element.closest(".modal"), "hide.bs.modal", this._hideModalHandler), this._config.selector ? this._config = _objectSpread(_objectSpread({}, this._config), {}, { trigger: "manual", selector: "" }) : this._fixTitle();}_fixTitle() {const t = this._element.getAttribute("title"),e = typeof this._element.getAttribute("data-bs-original-title");(t || "string" !== e) && (this._element.setAttribute("data-bs-original-title", t || ""), !t || this._element.getAttribute("aria-label") || this._element.textContent || this._element.setAttribute("aria-label", t), this._element.setAttribute("title", ""));}_enter(t, e) {var _this69 = this;e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger["focusin" === t.type ? "focus" : "hover"] = !0), e.getTipElement().classList.contains("show") || "show" === e._hoverState ? e._hoverState = "show" : (clearTimeout(e._timeout), e._hoverState = "show", e._config.delay && e._config.delay.show ? e._timeout = setTimeout(function () {_newArrowCheck(this, _this69);"show" === e._hoverState && e.show();}.bind(this), e._config.delay.show) : e.show());}_leave(t, e) {var _this70 = this;e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger["focusout" === t.type ? "focus" : "hover"] = e._element.contains(t.relatedTarget)), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = "out", e._config.delay && e._config.delay.hide ? e._timeout = setTimeout(function () {_newArrowCheck(this, _this70);"out" === e._hoverState && e.hide();}.bind(this), e._config.delay.hide) : e.hide());}_isWithActiveTrigger() {for (const t in this._activeTrigger) if (this._activeTrigger[t]) return !0;return !1;}_getConfig(t) {var _this71 = this;const e = U.getDataAttributes(this._element);return Object.keys(e).forEach(function (t) {_newArrowCheck(this, _this71);We.has(t) && delete e[t];}.bind(this)), (t = _objectSpread(_objectSpread(_objectSpread({}, this.constructor.Default), e), "object" == typeof t && t ? t : {})).container = !1 === t.container ? document.body : a(t.container), "number" == typeof t.delay && (t.delay = { show: t.delay, hide: t.delay }), "number" == typeof t.title && (t.title = t.title.toString()), "number" == typeof t.content && (t.content = t.content.toString()), l("tooltip", t, this.constructor.DefaultType), t.sanitize && (t.template = Re(t.template, t.allowList, t.sanitizeFn)), t;}_getDelegateConfig() {const t = {};if (this._config) for (const e in this._config) this.constructor.Default[e] !== this._config[e] && (t[e] = this._config[e]);return t;}_cleanTipClass() {var _this72 = this;const t = this.getTipElement(),e = t.getAttribute("class").match(Be);null !== e && e.length > 0 && e.map(function (t) {_newArrowCheck(this, _this72);return t.trim();}.bind(this)).forEach(function (e) {_newArrowCheck(this, _this72);return t.classList.remove(e);}.bind(this));}_handlePopperPlacementChange(t) {const { state: e } = t;e && (this.tip = e.elements.popper, this._cleanTipClass(), this._addAttachmentClass(this._getAttachment(e.placement)));}static jQueryInterface(t) {return this.each(function () {const e = Fe.getOrCreateInstance(this, t);if ("string" == typeof t) {if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);e[t]();}});}}_(Fe);const Ve = new RegExp("(^|\\s)bs-popover\\S+", "g"),Ke = _objectSpread(_objectSpread({}, Fe.Default), {}, { placement: "right", offset: [0, 8], trigger: "click", content: "", template: '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>' }),Xe = _objectSpread(_objectSpread({}, Fe.DefaultType), {}, { content: "(string|element|function)" }),Ye = { HIDE: "hide.bs.popover", HIDDEN: "hidden.bs.popover", SHOW: "show.bs.popover", SHOWN: "shown.bs.popover", INSERTED: "inserted.bs.popover", CLICK: "click.bs.popover", FOCUSIN: "focusin.bs.popover", FOCUSOUT: "focusout.bs.popover", MOUSEENTER: "mouseenter.bs.popover", MOUSELEAVE: "mouseleave.bs.popover" };class Qe extends Fe {static get Default() {return Ke;}static get NAME() {return "popover";}static get Event() {return Ye;}static get DefaultType() {return Xe;}isWithContent() {return this.getTitle() || this._getContent();}getTipElement() {return this.tip || (this.tip = super.getTipElement(), this.getTitle() || t.findOne(".popover-header", this.tip).remove(), this._getContent() || t.findOne(".popover-body", this.tip).remove()), this.tip;}setContent() {const e = this.getTipElement();this.setElementContent(t.findOne(".popover-header", e), this.getTitle());let i = this._getContent();"function" == typeof i && (i = i.call(this._element)), this.setElementContent(t.findOne(".popover-body", e), i), e.classList.remove("fade", "show");}_addAttachmentClass(t) {this.getTipElement().classList.add("bs-popover-" + this.updateAttachment(t));}_getContent() {return this._element.getAttribute("data-bs-content") || this._config.content;}_cleanTipClass() {var _this73 = this;const t = this.getTipElement(),e = t.getAttribute("class").match(Ve);null !== e && e.length > 0 && e.map(function (t) {_newArrowCheck(this, _this73);return t.trim();}.bind(this)).forEach(function (e) {_newArrowCheck(this, _this73);return t.classList.remove(e);}.bind(this));}static jQueryInterface(t) {return this.each(function () {const e = Qe.getOrCreateInstance(this, t);if ("string" == typeof t) {if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);e[t]();}});}}_(Qe);const Ge = { offset: 10, method: "auto", target: "" },Ze = { offset: "number", method: "string", target: "(string|element)" };class Je extends B {constructor(t, e) {var _this74,_arrowCheckId2 = {};(super(t), _this74 = this), this._scrollElement = "BODY" === this._element.tagName ? window : this._element, this._config = this._getConfig(e), this._selector = `${this._config.target} .nav-link, ${this._config.target} .list-group-item, ${this._config.target} .dropdown-item`, this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, P.on(this._scrollElement, "scroll.bs.scrollspy", function () {_newArrowCheck(this, _arrowCheckId2);return _this74._process();}.bind(_arrowCheckId2)), this.refresh(), this._process();}static get Default() {return Ge;}static get NAME() {return "scrollspy";}refresh() {var _this75 = this;const e = this._scrollElement === this._scrollElement.window ? "offset" : "position",i = "auto" === this._config.method ? e : this._config.method,s = "position" === i ? this._getScrollTop() : 0;this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), t.find(this._selector).map(function (e) {_newArrowCheck(this, _this75);const o = n(e),r = o ? t.findOne(o) : null;if (r) {const t = r.getBoundingClientRect();if (t.width || t.height) return [U[i](r).top + s, o];}return null;}.bind(this)).filter(function (t) {_newArrowCheck(this, _this75);return t;}.bind(this)).sort(function (t, e) {_newArrowCheck(this, _this75);return t[0] - e[0];}.bind(this)).forEach(function (t) {_newArrowCheck(this, _this75);this._offsets.push(t[0]), this._targets.push(t[1]);}.bind(this));}dispose() {P.off(this._scrollElement, ".bs.scrollspy"), super.dispose();}_getConfig(t) {if ("string" != typeof (t = _objectSpread(_objectSpread(_objectSpread({}, Ge), U.getDataAttributes(this._element)), "object" == typeof t && t ? t : {})).target && r(t.target)) {let { id: i } = t.target;i || (i = e("scrollspy"), t.target.id = i), t.target = "#" + i;}return l("scrollspy", t, Ze), t;}_getScrollTop() {return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;}_getScrollHeight() {return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);}_getOffsetHeight() {return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;}_process() {const t = this._getScrollTop() + this._config.offset,e = this._getScrollHeight(),i = this._config.offset + e - this._getOffsetHeight();if (this._scrollHeight !== e && this.refresh(), t >= i) {const t = this._targets[this._targets.length - 1];this._activeTarget !== t && this._activate(t);} else {if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear();for (let e = this._offsets.length; e--;) this._activeTarget !== this._targets[e] && t >= this._offsets[e] && (void 0 === this._offsets[e + 1] || t < this._offsets[e + 1]) && this._activate(this._targets[e]);}}_activate(e) {var _this76 = this;this._activeTarget = e, this._clear();const i = this._selector.split(",").map(function (t) {_newArrowCheck(this, _this76);return `${t}[data-bs-target="${e}"],${t}[href="${e}"]`;}.bind(this)),n = t.findOne(i.join(","));n.classList.contains("dropdown-item") ? (t.findOne(".dropdown-toggle", n.closest(".dropdown")).classList.add("active"), n.classList.add("active")) : (n.classList.add("active"), t.parents(n, ".nav, .list-group").forEach(function (e) {var _this77 = this;_newArrowCheck(this, _this76);t.prev(e, ".nav-link, .list-group-item").forEach(function (t) {_newArrowCheck(this, _this77);return t.classList.add("active");}.bind(this)), t.prev(e, ".nav-item").forEach(function (e) {var _this78 = this;_newArrowCheck(this, _this77);t.children(e, ".nav-link").forEach(function (t) {_newArrowCheck(this, _this78);return t.classList.add("active");}.bind(this));}.bind(this));}.bind(this))), P.trigger(this._scrollElement, "activate.bs.scrollspy", { relatedTarget: e });}_clear() {var _this79 = this;t.find(this._selector).filter(function (t) {_newArrowCheck(this, _this79);return t.classList.contains("active");}.bind(this)).forEach(function (t) {_newArrowCheck(this, _this79);return t.classList.remove("active");}.bind(this));}static jQueryInterface(t) {return this.each(function () {const e = Je.getOrCreateInstance(this, t);if ("string" == typeof t) {if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);e[t]();}});}}P.on(window, "load.bs.scrollspy.data-api", function () {var _this80 = this;_newArrowCheck(this, _this);t.find('[data-bs-spy="scroll"]').forEach(function (t) {_newArrowCheck(this, _this80);return new Je(t);}.bind(this));}.bind(this)), _(Je);class ti extends B {static get NAME() {return "tab";}show() {var _this81 = this;if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains("active")) return;let e;const i = s(this._element),n = this._element.closest(".nav, .list-group");if (n) {const i = "UL" === n.nodeName || "OL" === n.nodeName ? ":scope > li > .active" : ".active";e = t.find(i, n), e = e[e.length - 1];}const o = e ? P.trigger(e, "hide.bs.tab", { relatedTarget: this._element }) : null;if (P.trigger(this._element, "show.bs.tab", { relatedTarget: e }).defaultPrevented || null !== o && o.defaultPrevented) return;this._activate(this._element, n);const r = function r() {_newArrowCheck(this, _this81);P.trigger(e, "hidden.bs.tab", { relatedTarget: this._element }), P.trigger(this._element, "shown.bs.tab", { relatedTarget: e });}.bind(this);i ? this._activate(i, i.parentNode, r) : r();}_activate(e, i, n) {var _this82 = this;const s = (!i || "UL" !== i.nodeName && "OL" !== i.nodeName ? t.children(i, ".active") : t.find(":scope > li > .active", i))[0],o = n && s && s.classList.contains("fade"),r = function r() {_newArrowCheck(this, _this82);return this._transitionComplete(e, s, n);}.bind(this);s && o ? (s.classList.remove("show"), this._queueCallback(r, e, !0)) : r();}_transitionComplete(e, i, n) {var _this83 = this;if (i) {i.classList.remove("active");const e = t.findOne(":scope > .dropdown-menu .active", i.parentNode);e && e.classList.remove("active"), "tab" === i.getAttribute("role") && i.setAttribute("aria-selected", !1);}e.classList.add("active"), "tab" === e.getAttribute("role") && e.setAttribute("aria-selected", !0), f(e), e.classList.contains("fade") && e.classList.add("show");let s = e.parentNode;if (s && "LI" === s.nodeName && (s = s.parentNode), s && s.classList.contains("dropdown-menu")) {const i = e.closest(".dropdown");i && t.find(".dropdown-toggle", i).forEach(function (t) {_newArrowCheck(this, _this83);return t.classList.add("active");}.bind(this)), e.setAttribute("aria-expanded", !0);}n && n();}static jQueryInterface(t) {return this.each(function () {const e = ti.getOrCreateInstance(this);if ("string" == typeof t) {if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);e[t]();}});}}P.on(document, "click.bs.tab.data-api", '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]', function (t) {["A", "AREA"].includes(this.tagName) && t.preventDefault(), h(this) || ti.getOrCreateInstance(this).show();}), _(ti);const ei = { animation: "boolean", autohide: "boolean", delay: "number" },ii = { animation: !0, autohide: !0, delay: 5e3 };class ni extends B {constructor(t, e) {super(t), this._config = this._getConfig(e), this._timeout = null, this._hasMouseInteraction = !1, this._hasKeyboardInteraction = !1, this._setListeners();}static get DefaultType() {return ei;}static get Default() {return ii;}static get NAME() {return "toast";}show() {var _this84 = this;P.trigger(this._element, "show.bs.toast").defaultPrevented || (this._clearTimeout(), this._config.animation && this._element.classList.add("fade"), this._element.classList.remove("hide"), f(this._element), this._element.classList.add("showing"), this._queueCallback(function () {_newArrowCheck(this, _this84);this._element.classList.remove("showing"), this._element.classList.add("show"), P.trigger(this._element, "shown.bs.toast"), this._maybeScheduleHide();}.bind(this), this._element, this._config.animation));}hide() {var _this85 = this;this._element.classList.contains("show") && (P.trigger(this._element, "hide.bs.toast").defaultPrevented || (this._element.classList.remove("show"), this._queueCallback(function () {_newArrowCheck(this, _this85);this._element.classList.add("hide"), P.trigger(this._element, "hidden.bs.toast");}.bind(this), this._element, this._config.animation)));}dispose() {this._clearTimeout(), this._element.classList.contains("show") && this._element.classList.remove("show"), super.dispose();}_getConfig(t) {return t = _objectSpread(_objectSpread(_objectSpread({}, ii), U.getDataAttributes(this._element)), "object" == typeof t && t ? t : {}), l("toast", t, this.constructor.DefaultType), t;}_maybeScheduleHide() {var _this86 = this;this._config.autohide && (this._hasMouseInteraction || this._hasKeyboardInteraction || (this._timeout = setTimeout(function () {_newArrowCheck(this, _this86);this.hide();}.bind(this), this._config.delay)));}_onInteraction(t, e) {switch (t.type) {case "mouseover":case "mouseout":this._hasMouseInteraction = e;break;case "focusin":case "focusout":this._hasKeyboardInteraction = e;}if (e) return void this._clearTimeout();const i = t.relatedTarget;this._element === i || this._element.contains(i) || this._maybeScheduleHide();}_setListeners() {var _this87 = this;P.on(this._element, "click.dismiss.bs.toast", '[data-bs-dismiss="toast"]', function () {_newArrowCheck(this, _this87);return this.hide();}.bind(this)), P.on(this._element, "mouseover.bs.toast", function (t) {_newArrowCheck(this, _this87);return this._onInteraction(t, !0);}.bind(this)), P.on(this._element, "mouseout.bs.toast", function (t) {_newArrowCheck(this, _this87);return this._onInteraction(t, !1);}.bind(this)), P.on(this._element, "focusin.bs.toast", function (t) {_newArrowCheck(this, _this87);return this._onInteraction(t, !0);}.bind(this)), P.on(this._element, "focusout.bs.toast", function (t) {_newArrowCheck(this, _this87);return this._onInteraction(t, !1);}.bind(this));}_clearTimeout() {clearTimeout(this._timeout), this._timeout = null;}static jQueryInterface(t) {return this.each(function () {const e = ni.getOrCreateInstance(this, t);if ("string" == typeof t) {if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);e[t](this);}});}}return _(ni), { Alert: W, Button: q, Carousel: Z, Collapse: et, Dropdown: Ae, Modal: De, Offcanvas: Ne, Popover: Qe, ScrollSpy: Je, Tab: ti, Toast: ni, Tooltip: Fe };});

/***/ }),

/***/ "./src/assets/js/components/chat.js":
/*!******************************************!*\
  !*** ./src/assets/js/components/chat.js ***!
  \******************************************/
/***/ (function() {

function _newArrowCheck(innerThis, boundThis) {if (innerThis !== boundThis) {throw new TypeError("Cannot instantiate an arrow function");}}(function ($) {
  "use_strict";var _this = this;

  const getUrlVars = function getUrlVars() {_newArrowCheck(this, _this);
    let vars = {};
    window.location.href.replace(
    /[?&]+([^=&]+)=([^&]*)/gi,
    function (m, key, value) {
      vars[key] = value;
    });

    if (window.location.hash) {
      const hash = window.location.hash.replace("#", "/#");
      hash.replace(/[#&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
        vars[key] = value;
      });
    }
    return vars;
  }.bind(this);

  const url_vars = getUrlVars();

  window.addEventListener("load", function () {_newArrowCheck(this, _this);
    if (url_vars !== null && url_vars !== void 0 && url_vars.chat_action) {
      const chatSection = $(document).find(".chat-section");
      if (chatSection && chatSection.length > 0) {
        // set active side menu item based on location href
        chatSection.find(`.chat-main__body`).each(function () {
          if ((url_vars === null || url_vars === void 0 ? void 0 : url_vars.chat_action) == $(this).attr("id")) {
            $(this).removeClass("hide");
          } else {
            $(this).addClass("hide");
          }
        });
      }
    }
  }.bind(this));

  $(document).ready(function () {
    // console.log({ url_vars });

    const chatSection = $(document).find(".chat-section");
    if (chatSection && (chatSection === null || chatSection === void 0 ? void 0 : chatSection.length) > 0) {
      const chat = {
        messageToSend: "",
        messageResponses: [
        "Why did the web developer leave the restaurant? Because of the table layout.",
        "How do you comfort a JavaScript bug? You console it.",
        'An SQL query enters a bar, approaches two tables and asks: "May I join you?"',
        "What is the most used language in programming? Profanity.",
        "What is the object-oriented way to become wealthy? Inheritance.",
        "An SEO expert walks into a bar, bars, pub, tavern, public house, Irish pub, drinks, beer, alcohol"],

        init: function () {
          this.cacheDOM();
          this.bindEvents();
          // this.bindMessageTextArea();
        },
        get: function (selector, root = document) {
          return root.querySelector(selector);
        },
        cacheDOM: function () {
          this.$chatForm = chatSection.find('form[name="chat-form"]');
          this.$chatBody = this.$chatForm.parents(".chat-main__body");
          this.$textarea = this.$chatBody.find('[name="chat-message"]');
          this.$chatHistoryList = this.$chatBody.find("ul.chat-list");

        },
        bindEvents: function () {
          this.$chatForm.each(this.submitBindAll.bind(this));
          this.$chatForm.on("keydown", this.submitForm.bind(this));

          chatSection.find(".chat-new-message").on("click", this.handleOpenChatBody.bind(this));
          chatSection.find(
          ".chat-sidebar__list .chat-list-item a").
          on("click", this.handleOpenChatBody.bind(this));
          chatSection.find(
          ".chat-serach__list .chat-list-item a").
          on("click", this.handleOpenChatBody.bind(this));
        },
        submitBindAll: function (inx, elem) {
          const form = $(elem);
          form.on("submit", this.formSubmitHandler.bind(this));
        },
        submitForm: function (event) {
          if (window.event.keyCode == "13") {
            this.$chatForm.submit();
          }
        },
        formSubmitHandler: function (event) {
          event.preventDefault();
          const currentForm = $(event.currentTarget);
          const currentMsg = currentForm.find('[name="chat-message"]').val();

          this.$chatBody = currentForm.parents(".chat-main__body");
          this.$textarea = currentForm.find('[name="chat-message"]');
          this.$chatHistoryList = currentForm.parents(".chat-main__body").find("ul.chat-list");

          if (currentMsg && currentMsg.trim() !== "") {
            this.removeEmptyMsg();
            this.appendMessage(currentMsg);
            this.botResponse();
          }
        },
        appendMessage: function (message) {
          if (message && message.trim() !== "") {
            const msgHTML = this.msgTempleteSender(message);
            this.$chatHistoryList.append(msgHTML);
            this.$textarea.val("");
            this.scrollToBottom();
          }
        },
        appendMessageRecipient: function (message) {
          if (message && message.trim() !== "") {
            this.removeTypingMsg();
            const msgHTML = this.msgTempleteRecipient(message);
            this.$chatHistoryList.append(msgHTML);
            this.scrollToBottom();
          }
        },
        appendTypingMsg: function () {
          const typingMsg = this.msgTyping();
          this.$chatHistoryList.append(typingMsg);
          this.scrollToBottom();
        },
        appendEmptyMsg: function () {
          const typingMsg = this.msgEmpty();
          this.$chatHistoryList.append(typingMsg);
          this.scrollToBottom();
        },
        removeEmptyMsg: function () {
          this.$chatHistoryList.find(".chat-list-item.empty-item").remove();
        },
        removeTypingMsg: function () {
          this.$chatHistoryList.find(".chat-list-item.typing").remove();
        },
        botResponse: function () {var _this2 = this;
          const randomMsg = this.getRandomItem(this.messageResponses);
          if (randomMsg && randomMsg.toString().trim() !== "") {
            this.appendTypingMsg();

            const delay = randomMsg.split(" ").length * 100;
            setTimeout(function () {_newArrowCheck(this, _this2);
              this.appendMessageRecipient(randomMsg);
            }.bind(this), delay);
          }
        },
        bindMessageTextArea: function () {
          const div = document.querySelector(".chat-main__form-message");
          const ta = document.querySelector(".chat-message");

          ta.addEventListener("keydown", autosize);

          function autosize() {
            setTimeout(function () {
              ta.style.cssText = "height:0px";
              let height = Math.min(26 * 5, ta.scrollHeight);
              div.style.cssText = "height:" + height + "px";
              ta.style.cssText = "height:" + height + "px";
            }, 0);
          }
        },
        scrollToBottom: function () {
          this.$chatHistoryList &&
          this.$chatHistoryList.scrollTop(
          this.$chatHistoryList[0].scrollHeight);

        },
        getCurrentTime: function () {
          return new Date().
          toLocaleTimeString().
          replace(/([\d]+:[\d]{2})(:[\d]{2})(.*)/, "$1$3");
        },
        getRandomItem: function (arr) {
          return arr && arr[Math.floor(Math.random() * arr.length)];
        },
        msgTyping: function () {
          return `<li class="chat-list-item typing">
          <div class="message-item-chat typing">
            <div class="message-user">
              <div class="user-photo">
                <img src="assets/images/Avatar_2.png" alt="Wade Warren" />
              </div>
              <span class="user-status online"></span>
            </div>
            <div class="message-info">
              <div class="message-header">
                <div class="message-user-info">
                  <h6 class="user-name">Wade Warren</h6>
                </div>
              </div>
              <div class="message-text">
                <div class="dot-typing"></div>
              </div>
            </div>
          </div>
        </li>`;
        },
        msgEmpty: function () {
          return `<li class="chat-list-item empty-item">
          <div class="message-item-big empty-item">There are no messages in this conversation yet.</div>
        </li>`;
        },
        msgTempleteSender: function (message) {
          return `<li class="chat-list-item right">
          <div class="message-item-chat my-msg">
            <div class="message-info">
              <div class="message-header">
                <div class="message-user-info">
                  <h6 class="user-name">You</h6>
                </div>
                <div class="message-time">${this.getCurrentTime()}</div>
              </div>
              <div class="message-text">
                <p>${message}</p>
              </div>
            </div>
          </div>
        </li>`;
        },
        msgTempleteRecipient: function (message) {
          return `<li class="chat-list-item">
          <div class="message-item-chat">
            <div class="message-user">
              <div class="user-photo">
                <img src="assets/images/Avatar_2.png" alt="Wade Warren" />
              </div>
              <span class="user-status online"></span>
            </div>
            <div class="message-info">
              <div class="message-header">
                <div class="message-user-info">
                  <h6 class="user-name">Wade Warren</h6>
                </div>
                <div class="message-time">${this.getCurrentTime()}</div>
              </div>
              <div class="message-text">
                <p>${message}</p>
              </div>
            </div>
          </div>
        </li>`;
        },
        handleOpenChatBody: function (e) {
          let vars = {};
          const thisLink = $(e.currentTarget);
          if (thisLink.attr("href")) {
            const hash = thisLink.attr("href").replace("#", "/#");
            hash.replace(/[#&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
              vars[key] = value;
            });
          }
          if (vars !== null && vars !== void 0 && vars.chat_action) {
            chatSection.find('.chat-main__body').each(function (inx, item) {
              const currentBody = $(item);
              if ((vars === null || vars === void 0 ? void 0 : vars.chat_action) == currentBody.attr("id")) {
                currentBody.removeClass("hide");
              } else {
                currentBody.addClass("hide");
              }
            });
          }
        } };


      chat.init();

      // Search user in the list
      const searchFilter = {
        root: function () {
          const userList = chatSection.find(".chat-sidebar__list");
          return userList;
        },
        rootNewMsg: function () {
          const userList = chatSection.find(".chat-serach__list");
          return userList;
        },
        options: { valueNames: ["user-name"] },
        resetList: function () {
          const root = this.root();
          const userList = root.find(".chat-sidebar__list");
          const userListItem = root.find("> li");

          // show all items if seraching vakue is empty
          userListItem.each(function (e) {
            $(this).removeClass("hide");
          });

          // remove empty message if we have it in the list
          if (
          userList.find(".chat-list-item.empty-item") &&
          userList.find(".chat-list-item.empty-item").length > 0)
          {
            userList.find(".chat-list-item.empty-item").remove();
          }
        },
        findInList: function (value) {
          const root = this.root();
          const userListItem = root.find("> li");
          if (value) {
            const noItems =
            '<li class="chat-list-item empty-item"><div class="message-item-big empty-item">No items found</div></li>';
            const totalLength = userListItem === null || userListItem === void 0 ? void 0 : userListItem.length;
            let hiddenItem = 0;
            userListItem.each(function (e) {
              const user = $(this),
              userName = user.find(".user-name").text(),
              compareUserName = userName.toString().toLocaleLowerCase();
              if (compareUserName.indexOf(value) == -1) {
                ++hiddenItem;
                user.addClass("hide");

                // add empty message if total list item amount the same as hidden item amount
                if (totalLength == hiddenItem) {
                  root.append(noItems);
                } else {
                  // remove empty message if we have it in the list
                  if (
                  root.find(".chat-list-item.empty-item") &&
                  root.find(".chat-list-item.empty-item").length > 0)
                  {
                    root.find(".chat-list-item.empty-item").remove();
                  }
                }
              } else {
                user.removeClass("hide");
              }
            });
          } else {
            this.resetList();
          }
        },
        resetListNewMsg: function () {
          const root = this.rootNewMsg();
          const userList = root.find(".chat-sidebar__list");
          const userListItem = root.find("> li");

          // show all items if seraching vakue is empty
          userListItem.each(function (e) {
            $(this).removeClass("hide");
          });

          // remove empty message if we have it in the list
          if (
          userList.find(".chat-list-item.empty-item") &&
          userList.find(".chat-list-item.empty-item").length > 0)
          {
            userList.find(".chat-list-item.empty-item").remove();
          }
        },
        findInListNewMsg: function (value) {
          const root = this.rootNewMsg();
          const userListItem = root.find("li");

          if (value) {
            const noItems =
            '<li class="chat-list-item empty-item"><div class="message-item-big empty-item">No items found</div></li>';
            const totalLength = userListItem === null || userListItem === void 0 ? void 0 : userListItem.length;
            let hiddenItem = 0;
            userListItem.each(function (e) {
              const user = $(this),
              userName = user.find(".user-name").text(),
              compareUserName = userName.toString().toLocaleLowerCase();

              if (compareUserName.indexOf(value) == -1) {
                ++hiddenItem;
                user.addClass("hide");

                // add empty message if total list item amount the same as hidden item amount
                if (totalLength == hiddenItem) {
                  root.append(noItems);
                } else {
                  // remove empty message if we have it in the list
                  if (
                  root.find(".chat-list-item.empty-item") &&
                  root.find(".chat-list-item.empty-item").length > 0)
                  {
                    root.find(".chat-list-item.empty-item").remove();
                  }
                }
              } else {
                user.removeClass("hide");
              }
            });
          } else {
            this.resetListNewMsg();
          }
        },
        init: function () {var _this3 = this;
          const userList = this.root();
          const searchInput = chatSection.find(
          '.chat-sidebar__header [type="search"]');

          const noItems =
          '<li class="chat-list-item empty-item"><div class="message-item-big empty-item">No items found</div></li>';

          if (
          searchInput &&
          (searchInput === null || searchInput === void 0 ? void 0 : searchInput.length) > 0 &&
          userList &&
          (userList === null || userList === void 0 ? void 0 : userList.length) > 0)
          {var _userListNode$childNo, _userListNode$childNo2;
            const userListNode = userList[0];
            // empty message if in list item is 0 or empty string
            if (
            (userListNode === null || userListNode === void 0 ? void 0 : (_userListNode$childNo = userListNode.childNodes) === null || _userListNode$childNo === void 0 ? void 0 : _userListNode$childNo.length) <= 0 ||
            (userListNode === null || userListNode === void 0 ? void 0 : (_userListNode$childNo2 = userListNode.childNodes) === null || _userListNode$childNo2 === void 0 ? void 0 : _userListNode$childNo2.length) == 1 &&
            (userListNode === null || userListNode === void 0 ? void 0 : userListNode.childNodes[0].nodeName) == "#text")
            {
              userList.html(noItems);
            } else {
              searchInput.on("keyup", function (_event) {var _event$currentTarget;_newArrowCheck(this, _this3);
                const targetValue = (_event$currentTarget = _event.currentTarget) === null || _event$currentTarget === void 0 ? void 0 : _event$currentTarget.value,
                serachValue = targetValue.toString().toLowerCase();
                this.findInList(serachValue);
              }.bind(this));
              searchInput.on("search", function (_event) {var _event$currentTarget2;_newArrowCheck(this, _this3);
                const targetValue = (_event$currentTarget2 = _event.currentTarget) === null || _event$currentTarget2 === void 0 ? void 0 : _event$currentTarget2.value,
                serachValue = targetValue.toString().toLowerCase();
                this.findInList(serachValue);
              }.bind(this));
            }
          }
        },
        initSearchNewMsg: function () {var _this4 = this;
          const userList = this.rootNewMsg();
          const searchInput = chatSection.find(
          '.chat-main__messages [type="search"]');

          const noItems =
          '<li class="chat-list-item empty-item"><div class="message-item-big empty-item">No items found</div></li>';

          if (
          searchInput &&
          (searchInput === null || searchInput === void 0 ? void 0 : searchInput.length) > 0 &&
          userList &&
          (userList === null || userList === void 0 ? void 0 : userList.length) > 0)
          {var _userListNode$childNo3, _userListNode$childNo4;
            const userListNode = userList[0];
            // empty message if in list item is 0 or empty string
            if (
            (userListNode === null || userListNode === void 0 ? void 0 : (_userListNode$childNo3 = userListNode.childNodes) === null || _userListNode$childNo3 === void 0 ? void 0 : _userListNode$childNo3.length) <= 0 ||
            (userListNode === null || userListNode === void 0 ? void 0 : (_userListNode$childNo4 = userListNode.childNodes) === null || _userListNode$childNo4 === void 0 ? void 0 : _userListNode$childNo4.length) == 1 &&
            (userListNode === null || userListNode === void 0 ? void 0 : userListNode.childNodes[0].nodeName) == "#text")
            {
              userList.html(noItems);
            } else {
              searchInput.on("keyup", function (_event) {var _event$currentTarget3;_newArrowCheck(this, _this4);
                const targetValue = (_event$currentTarget3 = _event.currentTarget) === null || _event$currentTarget3 === void 0 ? void 0 : _event$currentTarget3.value,
                serachValue = targetValue.toString().toLowerCase();
                this.findInListNewMsg(serachValue);
              }.bind(this));
              searchInput.on("search", function (_event) {var _event$currentTarget4;_newArrowCheck(this, _this4);
                const targetValue = (_event$currentTarget4 = _event.currentTarget) === null || _event$currentTarget4 === void 0 ? void 0 : _event$currentTarget4.value,
                serachValue = targetValue.toString().toLowerCase();
                this.findInListNewMsg(serachValue);
              }.bind(this));
            }
          }
        } };


      searchFilter.init();
      searchFilter.initSearchNewMsg();
    }
  });
})(jQuery);

/***/ }),

/***/ "./src/assets/js/components/custom.js":
/*!********************************************!*\
  !*** ./src/assets/js/components/custom.js ***!
  \********************************************/
/***/ (function() {

function _newArrowCheck(innerThis, boundThis) {if (innerThis !== boundThis) {throw new TypeError("Cannot instantiate an arrow function");}}(function ($) {
  'use_strict';var _this = this;

  $.fn.equalHeight = function () {
    let tallest = 0;
    this.each(function () {
      let thisHeight = $(this).height();
      tallest = thisHeight > tallest ? thisHeight : tallest;
    });
    return this.height(tallest);
  };

  let is_chrome = navigator.userAgent.indexOf('Chrome') > -1;
  const is_explorer = navigator.userAgent.indexOf('MSIE') > -1;
  const is_firefox = navigator.userAgent.indexOf('Firefox') > -1;
  let is_safari = navigator.userAgent.indexOf("Safari") > -1;
  const is_opera = navigator.userAgent.toLowerCase().indexOf("op") > -1;
  if (is_chrome && is_safari) {
    is_safari = false;
  }
  if (is_chrome && is_opera) {
    is_chrome = false;
  }

  const getUrlVars = function getUrlVars() {_newArrowCheck(this, _this);
    let vars = {};
    let parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
      vars[key] = value;
    });
    return vars;
  }.bind(this);

  const url_vars = getUrlVars();

  const getUrl = function getUrl($url) {_newArrowCheck(this, _this);
    let url = $url.split("//");
    if (url[0] === "http:" || url[0] === "https:") {
      const protocol = url[0] + "//";
      let host = url[1].split("/")[0];
      url = protocol + host;
      const path = $url.split(url)[1];
      const lastArr = $url.split("/dist/"),
      last = lastArr.slice(-1).pop();

      return {
        protocol: protocol,
        host: host,
        path: path,
        last: last };

    }
  }.bind(this);

  /**
   * Preloader
   * */
  window.addEventListener("load", function () {var _this2 = this;_newArrowCheck(this, _this);
    const preloaderGroup = document.getElementById("preloaderGroup");
    if (preloaderGroup) {
      preloaderGroup.classList.add("vanish");
      setTimeout(function () {_newArrowCheck(this, _this2);
        preloaderGroup.style.display = "none";
      }.bind(this), 500);
    }

    // open side menu item
    if (url_vars !== null && url_vars !== void 0 && url_vars.toggle) {
      const parentLi = $(document).find(".collapse-item");
      if (parentLi && parentLi.length > 0) {
        const collapseMenu = parentLi.find(`#${url_vars === null || url_vars === void 0 ? void 0 : url_vars.toggle}`),
        collapseLink = parentLi.find(`.nav-link`),
        locationUrlArr = getUrl(window.location.href),
        linkHref = locationUrlArr === null || locationUrlArr === void 0 ? void 0 : locationUrlArr.last;

        // open collapsed menu
        collapseLink.removeClass("collapsed");
        collapseMenu.addClass("show");
        parentLi.addClass("active");

        // set active side menu item based on location href
        parentLi.find(`.nav-link`).each(function () {
          const current = $(this),
          currentHref = current.attr("href");
          if (linkHref == currentHref) {
            current.parent(".nav-item").addClass("active");
          }
        });
      }
    }
  }.bind(this));
  // END - Preloader

  $(window).on("load ready resize orientationChange", function () {
    const mainCointainer = document.querySelector("main.main-container"),
    headerNav = document.querySelector(".main-header > nav.navbar"),
    headerNavHeight =
    headerNav && (headerNav === null || headerNav === void 0 ? void 0 : headerNav.length) > 0 && headerNav.offsetHeight;
    mainCointainer && (
    mainCointainer.style["padding-top"] = headerNavHeight + "px");

    // Set same height for events-item
    if (
    $(window).width() >= 576 &&
    $(document).find(".event-results").length > 0)
    {
      $(document).
      find(".event-results .event-item:not(.full-width)").
      equalHeight();
    }
  });

  $(document).ready(function () {
    // left margin for main container
    const menu = $(document).find(".main-header .navbar .container"),
    margin_left = menu.length > 0 ? menu.offset().left : "auto",
    home_banner_content = $(document).find(
    ".features-banner-home .banner-content-wrapper");


    // home banner set left marging
    if (
    $(window).width() >= 1164 &&
    $(document).find(".event-results").length > 0)
    {
      home_banner_content.length > 0 &&
      home_banner_content.css({ "margin-left": margin_left + "px" });
    }

    // Customize inputs
    $('input[name="dates"]').daterangepicker({
      locale: {
        format: "YYYY.MM.DD" } });


    $("#date-of-birth").datepicker({
      dateFormat: "dd/mm/yy" });

    $('input[name="dates"]').val("");
    $('input[name="dates"]').attr("placeholder");

    $(".search-select").selectize({
      onInitialize: function () {
        $("#select-country-selectized").attr(
        "data-parsley-errors-container",
        "#errors");

      } });


    /* Inicialize Tooltip */
    $('[data-bs-toggle="tooltip"]').tooltip();

    // replace init action on collapse button
    $(".nav-item").on("click", function (e) {
      const currentItem = $(this),
      link = currentItem.find(".nav-link"),
      linkHref = link.attr("href");

      if (currentItem.hasClass("collapse-item")) {
        const newPath = `${window.location.origin}/dist/${linkHref}`;
        window.location.href = newPath;
      }
    });

    /* Inicialize Tables */
    // $('#dtBasicExample').DataTable();
  });

  $(document).on('click', '.filter-toggle', function () {
    if ($(".form-events-filter").length > 0) {
      $(".form-events-filter").toggleClass("active");
    }
    if ($(".form-news-filter").length > 0) {
      $(".form-news-filter").toggleClass("active");
    }

  });

  const event_menu = $('#event-nav'),
  menu_item = $('#event-nav .menu-item a'),
  event_menu_btn = $('.event-nav-toggle span');
  if (event_menu) {
    let current_li = $(event_menu).find('li.active>a');
    $(event_menu_btn).text($(current_li).text());
  }

  $(document).on('click', '.event-nav-toggle', function () {
    $('#event-nav').toggleClass('show');
  });


  $(document).on('click', function (e) {
    if (!$(e.target).closest(".event-menu").length) {
      $('#event-nav').removeClass('show');
    }
  });
  $(menu_item).on('click', function (e) {
    $('#event-nav').removeClass('show');
    $(event_menu_btn).text($(this).text());
  });


  $(function () {
    $('.event-menu a').click(function () {

      // Check for active
      $('.event-menu li').removeClass('active');
      $(this).parent().addClass('active');

      // Display active tab
      let currentTab = $(this).attr('data-tabs');
      let currentTab2 = $(this).attr('data-tabs2');
      $('.tabs-content .tab-item-content').removeClass('active');
      $(currentTab).addClass('active');
      $(currentTab2).addClass('active');
      return false;
    });
  });


  $(document).on('mouseenter', '.general_info-button a', function () {
    const name = $(this).data('hover');
    $(this).text(name);
  });

  $(document).on('mouseout', '.general_info-button a', function () {
    const name = $(this).data('value');
    $(this).text(name);
  });


  $('#search-member-admin').selectize({
    searchField: ['text'],
    render: {
      option: function (item, escape) {
        if (item.type == 'user') {
          return '<div><span class="search-image"><img src="' + item.image + '"></span><span>' + item.text + '</span></div>';
        }
        if (item.type == 'event') {
          return '<div><span class="search-image-event"><img src="' + item.image + '"></span><span>' + item.text + '</span></div>';
        }
      } } });




  $('#spoken-language').select2({
    placeholder: {
      id: '-1', // the value of the option
      text: 'Add more' } }).


  on('select2:close', function (e) {
    $('.select2-search__field').attr('placeholder', 'Add more');
  });

  $('.event-slider').slick({
    dots: true,
    infinite: false,
    autoplay: false,
    prevArrow: $('.prev'),
    nextArrow: $('.next'),
    appendDots: $('.slick-slider-dots'),
    speed: 300,
    slidesToShow: 4,
    slidesToScroll: 4,
    customPaging: function (slider, i) {
      let current_i = i + 1;
      let item_li = $(i).length;
      console.log(slider);
      return '<button class="tab">' + current_i + ' of ' + 3 + '</button>';
    },
    responsive: [
    {
      breakpoint: 1401,
      settings: {
        slidesToShow: 3,
        slidesToScroll: 3,
        infinite: true,
        dots: true } },


    {
      breakpoint: 1024,
      settings: {
        slidesToShow: 2,
        slidesToScroll: 2 } },


    {
      breakpoint: 600,
      settings: {
        slidesToShow: 1,
        slidesToScroll: 1 } }


    // You can unslick at a given breakpoint now by adding:
    // settings: "unslick"
    // instead of a settings object
    ] });



})(jQuery);

/***/ }),

/***/ "./src/assets/js/components/main.js":
/*!******************************************!*\
  !*** ./src/assets/js/components/main.js ***!
  \******************************************/
/***/ (function() {

(function mainScript() {
  "use strict";

  /* OffCanvas */
  const offcanvasToggle = document.querySelector(
  '[data-bs-toggle="offcanvas"]');

  const offcanvasToggleClose = document.querySelector(
  '[data-bs-toggle="close-offcanvas"]');

  const offcanvasCollapse = document.querySelector(".offcanvas-collapse");

  offcanvasToggle && offcanvasToggle.addEventListener("click", function () {
    const headerNav = document.querySelector('.main-header > nav.navbar');
    /* Add Height of navbar */
    if (headerNav && (headerNav === null || headerNav === void 0 ? void 0 : headerNav.length) > 0 && offcanvasCollapse.classList.contains('open')) {
      offcanvasCollapse.style.top = 0;
    } else if (headerNav && (headerNav === null || headerNav === void 0 ? void 0 : headerNav.length) > 0 && !offcanvasCollapse.classList.contains('open')) {
      console.log(headerNav.offsetHeight);
      offcanvasCollapse.style.top = headerNav.offsetHeight + 'px';
    }
    // main action
    offcanvasCollapse.classList.toggle("open");

  });

  offcanvasToggleClose && offcanvasToggleClose.addEventListener("click", function () {
    const headerNav = document.querySelector('.main-header > nav.navbar');
    /* Add Height of navbar */
    if (headerNav && (headerNav === null || headerNav === void 0 ? void 0 : headerNav.length) > 0 && offcanvasCollapse.classList.contains('open')) {
      offcanvasCollapse.style.top = 0;
    } else if (headerNav && (headerNav === null || headerNav === void 0 ? void 0 : headerNav.length) > 0 && !offcanvasCollapse.classList.contains('open')) {
      console.log(headerNav.offsetHeight);
      offcanvasCollapse.style.top = headerNav.offsetHeight + 'px';
    }
    // main action
    offcanvasCollapse.classList.toggle("open");
  });

  /* Header Search Bar */
  const searchbarToggle = document.querySelector(
  '[data-bs-toggle="searchbar"]');

  const searchbarCollapse = document.querySelector(".searchbar-collapse");
  searchbarToggle && searchbarToggle.addEventListener("click", function () {
    const searchInput = searchbarCollapse.querySelector('[type="search"]'),
    headerNav = document.querySelector('.main-header > nav.navbar'),
    headerNavHeight = headerNav && headerNav.offsetHeight;
    if (headerNav && (headerNav === null || headerNav === void 0 ? void 0 : headerNav.length) > 0 && searchbarCollapse.classList.contains('open')) {
      searchbarCollapse.style.top = 0;
    } else if (headerNav && (headerNav === null || headerNav === void 0 ? void 0 : headerNav.length) > 0 && !searchbarCollapse.classList.contains('open')) {
      searchbarCollapse.style.top = headerNavHeight + 'px';
    }
    // main action
    searchbarCollapse.classList.toggle("open");
    searchInput.focus();
  });


})();

/***/ }),

/***/ "./src/assets/js/components/podcastMedia.js":
/*!**************************************************!*\
  !*** ./src/assets/js/components/podcastMedia.js ***!
  \**************************************************/
/***/ (function() {

(function podcastMedia() {
  "use strict";

  const options = {
    defaultSpeed: '1.00',
    loop: false,
    features: [
    "playpause",
    "progress",
    "current",
    "duration"] };



  const podcastsPlayer = document.querySelectorAll(".mejs__podcast");

  podcastsPlayer.forEach(function (podcastAudio) {
    let player = new MediaElementPlayer(
    podcastAudio,
    options);


    /*    console.log('podcastAudio', podcastAudio);
       console.log('player', player); */

    /* const elementTop = document.createElement('div');
      const elementBottom = document.createElement('div');
      elementTop.classList.add('mejs-prepended-buttons');
      elementBottom.classList.add('mejs-appended-buttons');
      const controls = player.controls;
       //const controls = document.querySelector('.mejs__controls');
      controls.prepend(elementTop);
      controls.append(elementBottom);
        const controlsChildren = Array.from(controls.childNodes).filter(v => v.className.startsWith("mejs__"));
      console.log(controlsChildren)
      controlsChildren.slice(0, 3).forEach(elem => {
        elementTop.append(elem)
      });
        controlsChildren.slice(3, controlsChildren.length).forEach(elem => {
        elementBottom.append(elem)
      }) */




  });

  const podcastsPlayerPage = document.querySelectorAll(".mejs__podcast-page");

  podcastsPlayerPage.forEach(function (podcastAudio) {
    let player = new MediaElementPlayer(
    podcastAudio,
    options);

  });



})();

/***/ }),

/***/ "./src/assets/js/components/select2.min.js":
/*!*************************************************!*\
  !*** ./src/assets/js/components/select2.min.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! Select2 4.0.13 | https://github.com/select2/select2/blob/master/LICENSE.md */
!function (n) { true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery")], __WEBPACK_AMD_DEFINE_FACTORY__ = (n),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;}(function (u) {var e = function () {if (u && u.fn && u.fn.select2 && u.fn.select2.amd) var e = u.fn.select2.amd;var t, n, r, h, o, s, f, g, m, v, y, _, i, a, b;function w(e, t) {return i.call(e, t);}function l(e, t) {var n,r,i,o,s,a,l,c,u,d,p,h = t && t.split("/"),f = y.map,g = f && f["*"] || {};if (e) {for (s = (e = e.split("/")).length - 1, y.nodeIdCompat && b.test(e[s]) && (e[s] = e[s].replace(b, "")), "." === e[0].charAt(0) && h && (e = h.slice(0, h.length - 1).concat(e)), u = 0; u < e.length; u++) if ("." === (p = e[u])) e.splice(u, 1), --u;else if (".." === p) {if (0 === u || 1 === u && ".." === e[2] || ".." === e[u - 1]) continue;0 < u && (e.splice(u - 1, 2), u -= 2);}e = e.join("/");}if ((h || g) && f) {for (u = (n = e.split("/")).length; 0 < u; --u) {if (r = n.slice(0, u).join("/"), h) for (d = h.length; 0 < d; --d) if (i = (i = f[h.slice(0, d).join("/")]) && i[r]) {o = i, a = u;break;}if (o) break;!l && g && g[r] && (l = g[r], c = u);}!o && l && (o = l, a = c), o && (n.splice(0, a, o), e = n.join("/"));}return e;}function A(t, n) {return function () {var e = a.call(arguments, 0);return "string" != typeof e[0] && 1 === e.length && e.push(null), s.apply(h, e.concat([t, n]));};}function x(t) {return function (e) {m[t] = e;};}function D(e) {if (w(v, e)) {var t = v[e];delete v[e], _[e] = !0, o.apply(h, t);}if (!w(m, e) && !w(_, e)) throw new Error("No " + e);return m[e];}function c(e) {var t,n = e ? e.indexOf("!") : -1;return -1 < n && (t = e.substring(0, n), e = e.substring(n + 1, e.length)), [t, e];}function S(e) {return e ? c(e) : [];}return e && e.requirejs || (e ? n = e : e = {}, m = {}, v = {}, y = {}, _ = {}, i = Object.prototype.hasOwnProperty, a = [].slice, b = /\.js$/, f = function (e, t) {var n,r,i = c(e),o = i[0],s = t[1];return e = i[1], o && (n = D(o = l(o, s))), o ? e = n && n.normalize ? n.normalize(e, (r = s, function (e) {return l(e, r);})) : l(e, s) : (o = (i = c(e = l(e, s)))[0], e = i[1], o && (n = D(o))), { f: o ? o + "!" + e : e, n: e, pr: o, p: n };}, g = { require: function (e) {return A(e);}, exports: function (e) {var t = m[e];return void 0 !== t ? t : m[e] = {};}, module: function (e) {return { id: e, uri: "", exports: m[e], config: (t = e, function () {return y && y.config && y.config[t] || {};}) };var t;} }, o = function (e, t, n, r) {var i,o,s,a,l,c,u,d = [],p = typeof n;if (c = S(r = r || e), "undefined" == p || "function" == p) {for (t = !t.length && n.length ? ["require", "exports", "module"] : t, l = 0; l < t.length; l += 1) if ("require" === (o = (a = f(t[l], c)).f)) d[l] = g.require(e);else if ("exports" === o) d[l] = g.exports(e), u = !0;else if ("module" === o) i = d[l] = g.module(e);else if (w(m, o) || w(v, o) || w(_, o)) d[l] = D(o);else {if (!a.p) throw new Error(e + " missing " + o);a.p.load(a.n, A(r, !0), x(o), {}), d[l] = m[o];}s = n ? n.apply(m[e], d) : void 0, e && (i && i.exports !== h && i.exports !== m[e] ? m[e] = i.exports : s === h && u || (m[e] = s));} else e && (m[e] = n);}, t = n = s = function (e, t, n, r, i) {if ("string" == typeof e) return g[e] ? g[e](t) : D(f(e, S(t)).f);if (!e.splice) {if ((y = e).deps && s(y.deps, y.callback), !t) return;t.splice ? (e = t, t = n, n = null) : e = h;}return t = t || function () {}, "function" == typeof n && (n = r, r = i), r ? o(h, e, t, n) : setTimeout(function () {o(h, e, t, n);}, 4), s;}, s.config = function (e) {return s(e);}, t._defined = m, (r = function (e, t, n) {if ("string" != typeof e) throw new Error("See almond README: incorrect module build, no module name");t.splice || (n = t, t = []), w(m, e) || w(v, e) || (v[e] = [e, t, n]);}).amd = { jQuery: !0 }, e.requirejs = t, e.require = n, e.define = r), e.define("almond", function () {}), e.define("jquery", [], function () {var e = u || $;return null == e && console && console.error && console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."), e;}), e.define("select2/utils", ["jquery"], function (o) {var i = {};function u(e) {var t = e.prototype,n = [];for (var r in t) {"function" == typeof t[r] && "constructor" !== r && n.push(r);}return n;}i.Extend = function (e, t) {var n = {}.hasOwnProperty;function r() {this.constructor = e;}for (var i in t) n.call(t, i) && (e[i] = t[i]);return r.prototype = t.prototype, e.prototype = new r(), e.__super__ = t.prototype, e;}, i.Decorate = function (r, i) {var e = u(i),t = u(r);function o() {var e = Array.prototype.unshift,t = i.prototype.constructor.length,n = r.prototype.constructor;0 < t && (e.call(arguments, r.prototype.constructor), n = i.prototype.constructor), n.apply(this, arguments);}i.displayName = r.displayName, o.prototype = new function () {this.constructor = o;}();for (var n = 0; n < t.length; n++) {var s = t[n];o.prototype[s] = r.prototype[s];}function a(e) {var t = function () {};e in o.prototype && (t = o.prototype[e]);var n = i.prototype[e];return function () {return Array.prototype.unshift.call(arguments, t), n.apply(this, arguments);};}for (var l = 0; l < e.length; l++) {var c = e[l];o.prototype[c] = a(c);}return o;};function e() {this.listeners = {};}e.prototype.on = function (e, t) {this.listeners = this.listeners || {}, e in this.listeners ? this.listeners[e].push(t) : this.listeners[e] = [t];}, e.prototype.trigger = function (e) {var t = Array.prototype.slice,n = t.call(arguments, 1);this.listeners = this.listeners || {}, null == n && (n = []), 0 === n.length && n.push({}), (n[0]._type = e) in this.listeners && this.invoke(this.listeners[e], t.call(arguments, 1)), "*" in this.listeners && this.invoke(this.listeners["*"], arguments);}, e.prototype.invoke = function (e, t) {for (var n = 0, r = e.length; n < r; n++) e[n].apply(this, t);}, i.Observable = e, i.generateChars = function (e) {for (var t = "", n = 0; n < e; n++) {t += Math.floor(36 * Math.random()).toString(36);}return t;}, i.bind = function (e, t) {return function () {e.apply(t, arguments);};}, i._convertData = function (e) {for (var t in e) {var n = t.split("-"),r = e;if (1 !== n.length) {for (var i = 0; i < n.length; i++) {var o = n[i];(o = o.substring(0, 1).toLowerCase() + o.substring(1)) in r || (r[o] = {}), i == n.length - 1 && (r[o] = e[t]), r = r[o];}delete e[t];}}return e;}, i.hasScroll = function (e, t) {var n = o(t),r = t.style.overflowX,i = t.style.overflowY;return (r !== i || "hidden" !== i && "visible" !== i) && ("scroll" === r || "scroll" === i || n.innerHeight() < t.scrollHeight || n.innerWidth() < t.scrollWidth);}, i.escapeMarkup = function (e) {var t = { "\\": "&#92;", "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;", "/": "&#47;" };return "string" != typeof e ? e : String(e).replace(/[&<>"'\/\\]/g, function (e) {return t[e];});}, i.appendMany = function (e, t) {if ("1.7" === o.fn.jquery.substr(0, 3)) {var n = o();o.map(t, function (e) {n = n.add(e);}), t = n;}e.append(t);}, i.__cache = {};var n = 0;return i.GetUniqueElementId = function (e) {var t = e.getAttribute("data-select2-id");return null == t && (e.id ? (t = e.id, e.setAttribute("data-select2-id", t)) : (e.setAttribute("data-select2-id", ++n), t = n.toString())), t;}, i.StoreData = function (e, t, n) {var r = i.GetUniqueElementId(e);i.__cache[r] || (i.__cache[r] = {}), i.__cache[r][t] = n;}, i.GetData = function (e, t) {var n = i.GetUniqueElementId(e);return t ? i.__cache[n] && null != i.__cache[n][t] ? i.__cache[n][t] : o(e).data(t) : i.__cache[n];}, i.RemoveData = function (e) {var t = i.GetUniqueElementId(e);null != i.__cache[t] && delete i.__cache[t], e.removeAttribute("data-select2-id");}, i;}), e.define("select2/results", ["jquery", "./utils"], function (h, f) {function r(e, t, n) {this.$element = e, this.data = n, this.options = t, r.__super__.constructor.call(this);}return f.Extend(r, f.Observable), r.prototype.render = function () {var e = h('<ul class="select2-results__options" role="listbox"></ul>');return this.options.get("multiple") && e.attr("aria-multiselectable", "true"), this.$results = e;}, r.prototype.clear = function () {this.$results.empty();}, r.prototype.displayMessage = function (e) {var t = this.options.get("escapeMarkup");this.clear(), this.hideLoading();var n = h('<li role="alert" aria-live="assertive" class="select2-results__option"></li>'),r = this.options.get("translations").get(e.message);n.append(t(r(e.args))), n[0].className += " select2-results__message", this.$results.append(n);}, r.prototype.hideMessages = function () {this.$results.find(".select2-results__message").remove();}, r.prototype.append = function (e) {this.hideLoading();var t = [];if (null != e.results && 0 !== e.results.length) {e.results = this.sort(e.results);for (var n = 0; n < e.results.length; n++) {var r = e.results[n],i = this.option(r);t.push(i);}this.$results.append(t);} else 0 === this.$results.children().length && this.trigger("results:message", { message: "noResults" });}, r.prototype.position = function (e, t) {t.find(".select2-results").append(e);}, r.prototype.sort = function (e) {return this.options.get("sorter")(e);}, r.prototype.highlightFirstItem = function () {var e = this.$results.find(".select2-results__option[aria-selected]"),t = e.filter("[aria-selected=true]");0 < t.length ? t.first().trigger("mouseenter") : e.first().trigger("mouseenter"), this.ensureHighlightVisible();}, r.prototype.setClasses = function () {var t = this;this.data.current(function (e) {var r = h.map(e, function (e) {return e.id.toString();});t.$results.find(".select2-results__option[aria-selected]").each(function () {var e = h(this),t = f.GetData(this, "data"),n = "" + t.id;null != t.element && t.element.selected || null == t.element && -1 < h.inArray(n, r) ? e.attr("aria-selected", "true") : e.attr("aria-selected", "false");});});}, r.prototype.showLoading = function (e) {this.hideLoading();var t = { disabled: !0, loading: !0, text: this.options.get("translations").get("searching")(e) },n = this.option(t);n.className += " loading-results", this.$results.prepend(n);}, r.prototype.hideLoading = function () {this.$results.find(".loading-results").remove();}, r.prototype.option = function (e) {var t = document.createElement("li");t.className = "select2-results__option";var n = { role: "option", "aria-selected": "false" },r = window.Element.prototype.matches || window.Element.prototype.msMatchesSelector || window.Element.prototype.webkitMatchesSelector;for (var i in (null != e.element && r.call(e.element, ":disabled") || null == e.element && e.disabled) && (delete n["aria-selected"], n["aria-disabled"] = "true"), null == e.id && delete n["aria-selected"], null != e._resultId && (t.id = e._resultId), e.title && (t.title = e.title), e.children && (n.role = "group", n["aria-label"] = e.text, delete n["aria-selected"]), n) {var o = n[i];t.setAttribute(i, o);}if (e.children) {var s = h(t),a = document.createElement("strong");a.className = "select2-results__group";h(a);this.template(e, a);for (var l = [], c = 0; c < e.children.length; c++) {var u = e.children[c],d = this.option(u);l.push(d);}var p = h("<ul></ul>", { class: "select2-results__options select2-results__options--nested" });p.append(l), s.append(a), s.append(p);} else this.template(e, t);return f.StoreData(t, "data", e), t;}, r.prototype.bind = function (t, e) {var l = this,n = t.id + "-results";this.$results.attr("id", n), t.on("results:all", function (e) {l.clear(), l.append(e.data), t.isOpen() && (l.setClasses(), l.highlightFirstItem());}), t.on("results:append", function (e) {l.append(e.data), t.isOpen() && l.setClasses();}), t.on("query", function (e) {l.hideMessages(), l.showLoading(e);}), t.on("select", function () {t.isOpen() && (l.setClasses(), l.options.get("scrollAfterSelect") && l.highlightFirstItem());}), t.on("unselect", function () {t.isOpen() && (l.setClasses(), l.options.get("scrollAfterSelect") && l.highlightFirstItem());}), t.on("open", function () {l.$results.attr("aria-expanded", "true"), l.$results.attr("aria-hidden", "false"), l.setClasses(), l.ensureHighlightVisible();}), t.on("close", function () {l.$results.attr("aria-expanded", "false"), l.$results.attr("aria-hidden", "true"), l.$results.removeAttr("aria-activedescendant");}), t.on("results:toggle", function () {var e = l.getHighlightedResults();0 !== e.length && e.trigger("mouseup");}), t.on("results:select", function () {var e = l.getHighlightedResults();if (0 !== e.length) {var t = f.GetData(e[0], "data");"true" == e.attr("aria-selected") ? l.trigger("close", {}) : l.trigger("select", { data: t });}}), t.on("results:previous", function () {var e = l.getHighlightedResults(),t = l.$results.find("[aria-selected]"),n = t.index(e);if (!(n <= 0)) {var r = n - 1;0 === e.length && (r = 0);var i = t.eq(r);i.trigger("mouseenter");var o = l.$results.offset().top,s = i.offset().top,a = l.$results.scrollTop() + (s - o);0 === r ? l.$results.scrollTop(0) : s - o < 0 && l.$results.scrollTop(a);}}), t.on("results:next", function () {var e = l.getHighlightedResults(),t = l.$results.find("[aria-selected]"),n = t.index(e) + 1;if (!(n >= t.length)) {var r = t.eq(n);r.trigger("mouseenter");var i = l.$results.offset().top + l.$results.outerHeight(!1),o = r.offset().top + r.outerHeight(!1),s = l.$results.scrollTop() + o - i;0 === n ? l.$results.scrollTop(0) : i < o && l.$results.scrollTop(s);}}), t.on("results:focus", function (e) {e.element.addClass("select2-results__option--highlighted");}), t.on("results:message", function (e) {l.displayMessage(e);}), h.fn.mousewheel && this.$results.on("mousewheel", function (e) {var t = l.$results.scrollTop(),n = l.$results.get(0).scrollHeight - t + e.deltaY,r = 0 < e.deltaY && t - e.deltaY <= 0,i = e.deltaY < 0 && n <= l.$results.height();r ? (l.$results.scrollTop(0), e.preventDefault(), e.stopPropagation()) : i && (l.$results.scrollTop(l.$results.get(0).scrollHeight - l.$results.height()), e.preventDefault(), e.stopPropagation());}), this.$results.on("mouseup", ".select2-results__option[aria-selected]", function (e) {var t = h(this),n = f.GetData(this, "data");"true" !== t.attr("aria-selected") ? l.trigger("select", { originalEvent: e, data: n }) : l.options.get("multiple") ? l.trigger("unselect", { originalEvent: e, data: n }) : l.trigger("close", {});}), this.$results.on("mouseenter", ".select2-results__option[aria-selected]", function (e) {var t = f.GetData(this, "data");l.getHighlightedResults().removeClass("select2-results__option--highlighted"), l.trigger("results:focus", { data: t, element: h(this) });});}, r.prototype.getHighlightedResults = function () {return this.$results.find(".select2-results__option--highlighted");}, r.prototype.destroy = function () {this.$results.remove();}, r.prototype.ensureHighlightVisible = function () {var e = this.getHighlightedResults();if (0 !== e.length) {var t = this.$results.find("[aria-selected]").index(e),n = this.$results.offset().top,r = e.offset().top,i = this.$results.scrollTop() + (r - n),o = r - n;i -= 2 * e.outerHeight(!1), t <= 2 ? this.$results.scrollTop(0) : (o > this.$results.outerHeight() || o < 0) && this.$results.scrollTop(i);}}, r.prototype.template = function (e, t) {var n = this.options.get("templateResult"),r = this.options.get("escapeMarkup"),i = n(e, t);null == i ? t.style.display = "none" : "string" == typeof i ? t.innerHTML = r(i) : h(t).append(i);}, r;}), e.define("select2/keys", [], function () {return { BACKSPACE: 8, TAB: 9, ENTER: 13, SHIFT: 16, CTRL: 17, ALT: 18, ESC: 27, SPACE: 32, PAGE_UP: 33, PAGE_DOWN: 34, END: 35, HOME: 36, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, DELETE: 46 };}), e.define("select2/selection/base", ["jquery", "../utils", "../keys"], function (n, r, i) {function o(e, t) {this.$element = e, this.options = t, o.__super__.constructor.call(this);}return r.Extend(o, r.Observable), o.prototype.render = function () {var e = n('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>');return this._tabindex = 0, null != r.GetData(this.$element[0], "old-tabindex") ? this._tabindex = r.GetData(this.$element[0], "old-tabindex") : null != this.$element.attr("tabindex") && (this._tabindex = this.$element.attr("tabindex")), e.attr("title", this.$element.attr("title")), e.attr("tabindex", this._tabindex), e.attr("aria-disabled", "false"), this.$selection = e;}, o.prototype.bind = function (e, t) {var n = this,r = e.id + "-results";this.container = e, this.$selection.on("focus", function (e) {n.trigger("focus", e);}), this.$selection.on("blur", function (e) {n._handleBlur(e);}), this.$selection.on("keydown", function (e) {n.trigger("keypress", e), e.which === i.SPACE && e.preventDefault();}), e.on("results:focus", function (e) {n.$selection.attr("aria-activedescendant", e.data._resultId);}), e.on("selection:update", function (e) {n.update(e.data);}), e.on("open", function () {n.$selection.attr("aria-expanded", "true"), n.$selection.attr("aria-owns", r), n._attachCloseHandler(e);}), e.on("close", function () {n.$selection.attr("aria-expanded", "false"), n.$selection.removeAttr("aria-activedescendant"), n.$selection.removeAttr("aria-owns"), n.$selection.trigger("focus"), n._detachCloseHandler(e);}), e.on("enable", function () {n.$selection.attr("tabindex", n._tabindex), n.$selection.attr("aria-disabled", "false");}), e.on("disable", function () {n.$selection.attr("tabindex", "-1"), n.$selection.attr("aria-disabled", "true");});}, o.prototype._handleBlur = function (e) {var t = this;window.setTimeout(function () {document.activeElement == t.$selection[0] || n.contains(t.$selection[0], document.activeElement) || t.trigger("blur", e);}, 1);}, o.prototype._attachCloseHandler = function (e) {n(document.body).on("mousedown.select2." + e.id, function (e) {var t = n(e.target).closest(".select2");n(".select2.select2-container--open").each(function () {this != t[0] && r.GetData(this, "element").select2("close");});});}, o.prototype._detachCloseHandler = function (e) {n(document.body).off("mousedown.select2." + e.id);}, o.prototype.position = function (e, t) {t.find(".selection").append(e);}, o.prototype.destroy = function () {this._detachCloseHandler(this.container);}, o.prototype.update = function (e) {throw new Error("The `update` method must be defined in child classes.");}, o.prototype.isEnabled = function () {return !this.isDisabled();}, o.prototype.isDisabled = function () {return this.options.get("disabled");}, o;}), e.define("select2/selection/single", ["jquery", "./base", "../utils", "../keys"], function (e, t, n, r) {function i() {i.__super__.constructor.apply(this, arguments);}return n.Extend(i, t), i.prototype.render = function () {var e = i.__super__.render.call(this);return e.addClass("select2-selection--single"), e.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'), e;}, i.prototype.bind = function (t, e) {var n = this;i.__super__.bind.apply(this, arguments);var r = t.id + "-container";this.$selection.find(".select2-selection__rendered").attr("id", r).attr("role", "textbox").attr("aria-readonly", "true"), this.$selection.attr("aria-labelledby", r), this.$selection.on("mousedown", function (e) {1 === e.which && n.trigger("toggle", { originalEvent: e });}), this.$selection.on("focus", function (e) {}), this.$selection.on("blur", function (e) {}), t.on("focus", function (e) {t.isOpen() || n.$selection.trigger("focus");});}, i.prototype.clear = function () {var e = this.$selection.find(".select2-selection__rendered");e.empty(), e.removeAttr("title");}, i.prototype.display = function (e, t) {var n = this.options.get("templateSelection");return this.options.get("escapeMarkup")(n(e, t));}, i.prototype.selectionContainer = function () {return e("<span></span>");}, i.prototype.update = function (e) {if (0 !== e.length) {var t = e[0],n = this.$selection.find(".select2-selection__rendered"),r = this.display(t, n);n.empty().append(r);var i = t.title || t.text;i ? n.attr("title", i) : n.removeAttr("title");} else this.clear();}, i;}), e.define("select2/selection/multiple", ["jquery", "./base", "../utils"], function (i, e, l) {function n(e, t) {n.__super__.constructor.apply(this, arguments);}return l.Extend(n, e), n.prototype.render = function () {var e = n.__super__.render.call(this);return e.addClass("select2-selection--multiple"), e.html('<ul class="select2-selection__rendered"></ul>'), e;}, n.prototype.bind = function (e, t) {var r = this;n.__super__.bind.apply(this, arguments), this.$selection.on("click", function (e) {r.trigger("toggle", { originalEvent: e });}), this.$selection.on("click", ".select2-selection__choice__remove", function (e) {if (!r.isDisabled()) {var t = i(this).parent(),n = l.GetData(t[0], "data");r.trigger("unselect", { originalEvent: e, data: n });}});}, n.prototype.clear = function () {var e = this.$selection.find(".select2-selection__rendered");e.empty(), e.removeAttr("title");}, n.prototype.display = function (e, t) {var n = this.options.get("templateSelection");return this.options.get("escapeMarkup")(n(e, t));}, n.prototype.selectionContainer = function () {return i('<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>');}, n.prototype.update = function (e) {if (this.clear(), 0 !== e.length) {for (var t = [], n = 0; n < e.length; n++) {var r = e[n],i = this.selectionContainer(),o = this.display(r, i);i.append(o);var s = r.title || r.text;s && i.attr("title", s), l.StoreData(i[0], "data", r), t.push(i);}var a = this.$selection.find(".select2-selection__rendered");l.appendMany(a, t);}}, n;}), e.define("select2/selection/placeholder", ["../utils"], function (e) {function t(e, t, n) {this.placeholder = this.normalizePlaceholder(n.get("placeholder")), e.call(this, t, n);}return t.prototype.normalizePlaceholder = function (e, t) {return "string" == typeof t && (t = { id: "", text: t }), t;}, t.prototype.createPlaceholder = function (e, t) {var n = this.selectionContainer();return n.html(this.display(t)), n.addClass("select2-selection__placeholder").removeClass("select2-selection__choice"), n;}, t.prototype.update = function (e, t) {var n = 1 == t.length && t[0].id != this.placeholder.id;if (1 < t.length || n) return e.call(this, t);this.clear();var r = this.createPlaceholder(this.placeholder);this.$selection.find(".select2-selection__rendered").append(r);}, t;}), e.define("select2/selection/allowClear", ["jquery", "../keys", "../utils"], function (i, r, a) {function e() {}return e.prototype.bind = function (e, t, n) {var r = this;e.call(this, t, n), null == this.placeholder && this.options.get("debug") && window.console && console.error && console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option."), this.$selection.on("mousedown", ".select2-selection__clear", function (e) {r._handleClear(e);}), t.on("keypress", function (e) {r._handleKeyboardClear(e, t);});}, e.prototype._handleClear = function (e, t) {if (!this.isDisabled()) {var n = this.$selection.find(".select2-selection__clear");if (0 !== n.length) {t.stopPropagation();var r = a.GetData(n[0], "data"),i = this.$element.val();this.$element.val(this.placeholder.id);var o = { data: r };if (this.trigger("clear", o), o.prevented) this.$element.val(i);else {for (var s = 0; s < r.length; s++) if (o = { data: r[s] }, this.trigger("unselect", o), o.prevented) return void this.$element.val(i);this.$element.trigger("input").trigger("change"), this.trigger("toggle", {});}}}}, e.prototype._handleKeyboardClear = function (e, t, n) {n.isOpen() || t.which != r.DELETE && t.which != r.BACKSPACE || this._handleClear(t);}, e.prototype.update = function (e, t) {if (e.call(this, t), !(0 < this.$selection.find(".select2-selection__placeholder").length || 0 === t.length)) {var n = this.options.get("translations").get("removeAllItems"),r = i('<span class="select2-selection__clear" title="' + n() + '">&times;</span>');a.StoreData(r[0], "data", t), this.$selection.find(".select2-selection__rendered").prepend(r);}}, e;}), e.define("select2/selection/search", ["jquery", "../utils", "../keys"], function (r, a, l) {function e(e, t, n) {e.call(this, t, n);}return e.prototype.render = function (e) {var t = r('<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" /></li>');this.$searchContainer = t, this.$search = t.find("input");var n = e.call(this);return this._transferTabIndex(), n;}, e.prototype.bind = function (e, t, n) {var r = this,i = t.id + "-results";e.call(this, t, n), t.on("open", function () {r.$search.attr("aria-controls", i), r.$search.trigger("focus");}), t.on("close", function () {r.$search.val(""), r.$search.removeAttr("aria-controls"), r.$search.removeAttr("aria-activedescendant"), r.$search.trigger("focus");}), t.on("enable", function () {r.$search.prop("disabled", !1), r._transferTabIndex();}), t.on("disable", function () {r.$search.prop("disabled", !0);}), t.on("focus", function (e) {r.$search.trigger("focus");}), t.on("results:focus", function (e) {e.data._resultId ? r.$search.attr("aria-activedescendant", e.data._resultId) : r.$search.removeAttr("aria-activedescendant");}), this.$selection.on("focusin", ".select2-search--inline", function (e) {r.trigger("focus", e);}), this.$selection.on("focusout", ".select2-search--inline", function (e) {r._handleBlur(e);}), this.$selection.on("keydown", ".select2-search--inline", function (e) {if (e.stopPropagation(), r.trigger("keypress", e), r._keyUpPrevented = e.isDefaultPrevented(), e.which === l.BACKSPACE && "" === r.$search.val()) {var t = r.$searchContainer.prev(".select2-selection__choice");if (0 < t.length) {var n = a.GetData(t[0], "data");r.searchRemoveChoice(n), e.preventDefault();}}}), this.$selection.on("click", ".select2-search--inline", function (e) {r.$search.val() && e.stopPropagation();});var o = document.documentMode,s = o && o <= 11;this.$selection.on("input.searchcheck", ".select2-search--inline", function (e) {s ? r.$selection.off("input.search input.searchcheck") : r.$selection.off("keyup.search");}), this.$selection.on("keyup.search input.search", ".select2-search--inline", function (e) {if (s && "input" === e.type) r.$selection.off("input.search input.searchcheck");else {var t = e.which;t != l.SHIFT && t != l.CTRL && t != l.ALT && t != l.TAB && r.handleSearch(e);}});}, e.prototype._transferTabIndex = function (e) {this.$search.attr("tabindex", this.$selection.attr("tabindex")), this.$selection.attr("tabindex", "-1");}, e.prototype.createPlaceholder = function (e, t) {this.$search.attr("placeholder", t.text);}, e.prototype.update = function (e, t) {var n = this.$search[0] == document.activeElement;this.$search.attr("placeholder", ""), e.call(this, t), this.$selection.find(".select2-selection__rendered").append(this.$searchContainer), this.resizeSearch(), n && this.$search.trigger("focus");}, e.prototype.handleSearch = function () {if (this.resizeSearch(), !this._keyUpPrevented) {var e = this.$search.val();this.trigger("query", { term: e });}this._keyUpPrevented = !1;}, e.prototype.searchRemoveChoice = function (e, t) {this.trigger("unselect", { data: t }), this.$search.val(t.text), this.handleSearch();}, e.prototype.resizeSearch = function () {this.$search.css("width", "25px");var e = "";"" !== this.$search.attr("placeholder") ? e = this.$selection.find(".select2-selection__rendered").width() : e = .75 * (this.$search.val().length + 1) + "em";this.$search.css("width", e);}, e;}), e.define("select2/selection/eventRelay", ["jquery"], function (s) {function e() {}return e.prototype.bind = function (e, t, n) {var r = this,i = ["open", "opening", "close", "closing", "select", "selecting", "unselect", "unselecting", "clear", "clearing"],o = ["opening", "closing", "selecting", "unselecting", "clearing"];e.call(this, t, n), t.on("*", function (e, t) {if (-1 !== s.inArray(e, i)) {t = t || {};var n = s.Event("select2:" + e, { params: t });r.$element.trigger(n), -1 !== s.inArray(e, o) && (t.prevented = n.isDefaultPrevented());}});}, e;}), e.define("select2/translation", ["jquery", "require"], function (t, n) {function r(e) {this.dict = e || {};}return r.prototype.all = function () {return this.dict;}, r.prototype.get = function (e) {return this.dict[e];}, r.prototype.extend = function (e) {this.dict = t.extend({}, e.all(), this.dict);}, r._cache = {}, r.loadPath = function (e) {if (!(e in r._cache)) {var t = n(e);r._cache[e] = t;}return new r(r._cache[e]);}, r;}), e.define("select2/diacritics", [], function () {return { "Ⓐ": "A", "Ａ": "A", "À": "A", "Á": "A", "Â": "A", "Ầ": "A", "Ấ": "A", "Ẫ": "A", "Ẩ": "A", "Ã": "A", "Ā": "A", "Ă": "A", "Ằ": "A", "Ắ": "A", "Ẵ": "A", "Ẳ": "A", "Ȧ": "A", "Ǡ": "A", "Ä": "A", "Ǟ": "A", "Ả": "A", "Å": "A", "Ǻ": "A", "Ǎ": "A", "Ȁ": "A", "Ȃ": "A", "Ạ": "A", "Ậ": "A", "Ặ": "A", "Ḁ": "A", "Ą": "A", "Ⱥ": "A", "Ɐ": "A", "Ꜳ": "AA", "Æ": "AE", "Ǽ": "AE", "Ǣ": "AE", "Ꜵ": "AO", "Ꜷ": "AU", "Ꜹ": "AV", "Ꜻ": "AV", "Ꜽ": "AY", "Ⓑ": "B", "Ｂ": "B", "Ḃ": "B", "Ḅ": "B", "Ḇ": "B", "Ƀ": "B", "Ƃ": "B", "Ɓ": "B", "Ⓒ": "C", "Ｃ": "C", "Ć": "C", "Ĉ": "C", "Ċ": "C", "Č": "C", "Ç": "C", "Ḉ": "C", "Ƈ": "C", "Ȼ": "C", "Ꜿ": "C", "Ⓓ": "D", "Ｄ": "D", "Ḋ": "D", "Ď": "D", "Ḍ": "D", "Ḑ": "D", "Ḓ": "D", "Ḏ": "D", "Đ": "D", "Ƌ": "D", "Ɗ": "D", "Ɖ": "D", "Ꝺ": "D", "Ǳ": "DZ", "Ǆ": "DZ", "ǲ": "Dz", "ǅ": "Dz", "Ⓔ": "E", "Ｅ": "E", "È": "E", "É": "E", "Ê": "E", "Ề": "E", "Ế": "E", "Ễ": "E", "Ể": "E", "Ẽ": "E", "Ē": "E", "Ḕ": "E", "Ḗ": "E", "Ĕ": "E", "Ė": "E", "Ë": "E", "Ẻ": "E", "Ě": "E", "Ȅ": "E", "Ȇ": "E", "Ẹ": "E", "Ệ": "E", "Ȩ": "E", "Ḝ": "E", "Ę": "E", "Ḙ": "E", "Ḛ": "E", "Ɛ": "E", "Ǝ": "E", "Ⓕ": "F", "Ｆ": "F", "Ḟ": "F", "Ƒ": "F", "Ꝼ": "F", "Ⓖ": "G", "Ｇ": "G", "Ǵ": "G", "Ĝ": "G", "Ḡ": "G", "Ğ": "G", "Ġ": "G", "Ǧ": "G", "Ģ": "G", "Ǥ": "G", "Ɠ": "G", "Ꞡ": "G", "Ᵹ": "G", "Ꝿ": "G", "Ⓗ": "H", "Ｈ": "H", "Ĥ": "H", "Ḣ": "H", "Ḧ": "H", "Ȟ": "H", "Ḥ": "H", "Ḩ": "H", "Ḫ": "H", "Ħ": "H", "Ⱨ": "H", "Ⱶ": "H", "Ɥ": "H", "Ⓘ": "I", "Ｉ": "I", "Ì": "I", "Í": "I", "Î": "I", "Ĩ": "I", "Ī": "I", "Ĭ": "I", "İ": "I", "Ï": "I", "Ḯ": "I", "Ỉ": "I", "Ǐ": "I", "Ȉ": "I", "Ȋ": "I", "Ị": "I", "Į": "I", "Ḭ": "I", "Ɨ": "I", "Ⓙ": "J", "Ｊ": "J", "Ĵ": "J", "Ɉ": "J", "Ⓚ": "K", "Ｋ": "K", "Ḱ": "K", "Ǩ": "K", "Ḳ": "K", "Ķ": "K", "Ḵ": "K", "Ƙ": "K", "Ⱪ": "K", "Ꝁ": "K", "Ꝃ": "K", "Ꝅ": "K", "Ꞣ": "K", "Ⓛ": "L", "Ｌ": "L", "Ŀ": "L", "Ĺ": "L", "Ľ": "L", "Ḷ": "L", "Ḹ": "L", "Ļ": "L", "Ḽ": "L", "Ḻ": "L", "Ł": "L", "Ƚ": "L", "Ɫ": "L", "Ⱡ": "L", "Ꝉ": "L", "Ꝇ": "L", "Ꞁ": "L", "Ǉ": "LJ", "ǈ": "Lj", "Ⓜ": "M", "Ｍ": "M", "Ḿ": "M", "Ṁ": "M", "Ṃ": "M", "Ɱ": "M", "Ɯ": "M", "Ⓝ": "N", "Ｎ": "N", "Ǹ": "N", "Ń": "N", "Ñ": "N", "Ṅ": "N", "Ň": "N", "Ṇ": "N", "Ņ": "N", "Ṋ": "N", "Ṉ": "N", "Ƞ": "N", "Ɲ": "N", "Ꞑ": "N", "Ꞥ": "N", "Ǌ": "NJ", "ǋ": "Nj", "Ⓞ": "O", "Ｏ": "O", "Ò": "O", "Ó": "O", "Ô": "O", "Ồ": "O", "Ố": "O", "Ỗ": "O", "Ổ": "O", "Õ": "O", "Ṍ": "O", "Ȭ": "O", "Ṏ": "O", "Ō": "O", "Ṑ": "O", "Ṓ": "O", "Ŏ": "O", "Ȯ": "O", "Ȱ": "O", "Ö": "O", "Ȫ": "O", "Ỏ": "O", "Ő": "O", "Ǒ": "O", "Ȍ": "O", "Ȏ": "O", "Ơ": "O", "Ờ": "O", "Ớ": "O", "Ỡ": "O", "Ở": "O", "Ợ": "O", "Ọ": "O", "Ộ": "O", "Ǫ": "O", "Ǭ": "O", "Ø": "O", "Ǿ": "O", "Ɔ": "O", "Ɵ": "O", "Ꝋ": "O", "Ꝍ": "O", "Œ": "OE", "Ƣ": "OI", "Ꝏ": "OO", "Ȣ": "OU", "Ⓟ": "P", "Ｐ": "P", "Ṕ": "P", "Ṗ": "P", "Ƥ": "P", "Ᵽ": "P", "Ꝑ": "P", "Ꝓ": "P", "Ꝕ": "P", "Ⓠ": "Q", "Ｑ": "Q", "Ꝗ": "Q", "Ꝙ": "Q", "Ɋ": "Q", "Ⓡ": "R", "Ｒ": "R", "Ŕ": "R", "Ṙ": "R", "Ř": "R", "Ȑ": "R", "Ȓ": "R", "Ṛ": "R", "Ṝ": "R", "Ŗ": "R", "Ṟ": "R", "Ɍ": "R", "Ɽ": "R", "Ꝛ": "R", "Ꞧ": "R", "Ꞃ": "R", "Ⓢ": "S", "Ｓ": "S", "ẞ": "S", "Ś": "S", "Ṥ": "S", "Ŝ": "S", "Ṡ": "S", "Š": "S", "Ṧ": "S", "Ṣ": "S", "Ṩ": "S", "Ș": "S", "Ş": "S", "Ȿ": "S", "Ꞩ": "S", "Ꞅ": "S", "Ⓣ": "T", "Ｔ": "T", "Ṫ": "T", "Ť": "T", "Ṭ": "T", "Ț": "T", "Ţ": "T", "Ṱ": "T", "Ṯ": "T", "Ŧ": "T", "Ƭ": "T", "Ʈ": "T", "Ⱦ": "T", "Ꞇ": "T", "Ꜩ": "TZ", "Ⓤ": "U", "Ｕ": "U", "Ù": "U", "Ú": "U", "Û": "U", "Ũ": "U", "Ṹ": "U", "Ū": "U", "Ṻ": "U", "Ŭ": "U", "Ü": "U", "Ǜ": "U", "Ǘ": "U", "Ǖ": "U", "Ǚ": "U", "Ủ": "U", "Ů": "U", "Ű": "U", "Ǔ": "U", "Ȕ": "U", "Ȗ": "U", "Ư": "U", "Ừ": "U", "Ứ": "U", "Ữ": "U", "Ử": "U", "Ự": "U", "Ụ": "U", "Ṳ": "U", "Ų": "U", "Ṷ": "U", "Ṵ": "U", "Ʉ": "U", "Ⓥ": "V", "Ｖ": "V", "Ṽ": "V", "Ṿ": "V", "Ʋ": "V", "Ꝟ": "V", "Ʌ": "V", "Ꝡ": "VY", "Ⓦ": "W", "Ｗ": "W", "Ẁ": "W", "Ẃ": "W", "Ŵ": "W", "Ẇ": "W", "Ẅ": "W", "Ẉ": "W", "Ⱳ": "W", "Ⓧ": "X", "Ｘ": "X", "Ẋ": "X", "Ẍ": "X", "Ⓨ": "Y", "Ｙ": "Y", "Ỳ": "Y", "Ý": "Y", "Ŷ": "Y", "Ỹ": "Y", "Ȳ": "Y", "Ẏ": "Y", "Ÿ": "Y", "Ỷ": "Y", "Ỵ": "Y", "Ƴ": "Y", "Ɏ": "Y", "Ỿ": "Y", "Ⓩ": "Z", "Ｚ": "Z", "Ź": "Z", "Ẑ": "Z", "Ż": "Z", "Ž": "Z", "Ẓ": "Z", "Ẕ": "Z", "Ƶ": "Z", "Ȥ": "Z", "Ɀ": "Z", "Ⱬ": "Z", "Ꝣ": "Z", "ⓐ": "a", "ａ": "a", "ẚ": "a", "à": "a", "á": "a", "â": "a", "ầ": "a", "ấ": "a", "ẫ": "a", "ẩ": "a", "ã": "a", "ā": "a", "ă": "a", "ằ": "a", "ắ": "a", "ẵ": "a", "ẳ": "a", "ȧ": "a", "ǡ": "a", "ä": "a", "ǟ": "a", "ả": "a", "å": "a", "ǻ": "a", "ǎ": "a", "ȁ": "a", "ȃ": "a", "ạ": "a", "ậ": "a", "ặ": "a", "ḁ": "a", "ą": "a", "ⱥ": "a", "ɐ": "a", "ꜳ": "aa", "æ": "ae", "ǽ": "ae", "ǣ": "ae", "ꜵ": "ao", "ꜷ": "au", "ꜹ": "av", "ꜻ": "av", "ꜽ": "ay", "ⓑ": "b", "ｂ": "b", "ḃ": "b", "ḅ": "b", "ḇ": "b", "ƀ": "b", "ƃ": "b", "ɓ": "b", "ⓒ": "c", "ｃ": "c", "ć": "c", "ĉ": "c", "ċ": "c", "č": "c", "ç": "c", "ḉ": "c", "ƈ": "c", "ȼ": "c", "ꜿ": "c", "ↄ": "c", "ⓓ": "d", "ｄ": "d", "ḋ": "d", "ď": "d", "ḍ": "d", "ḑ": "d", "ḓ": "d", "ḏ": "d", "đ": "d", "ƌ": "d", "ɖ": "d", "ɗ": "d", "ꝺ": "d", "ǳ": "dz", "ǆ": "dz", "ⓔ": "e", "ｅ": "e", "è": "e", "é": "e", "ê": "e", "ề": "e", "ế": "e", "ễ": "e", "ể": "e", "ẽ": "e", "ē": "e", "ḕ": "e", "ḗ": "e", "ĕ": "e", "ė": "e", "ë": "e", "ẻ": "e", "ě": "e", "ȅ": "e", "ȇ": "e", "ẹ": "e", "ệ": "e", "ȩ": "e", "ḝ": "e", "ę": "e", "ḙ": "e", "ḛ": "e", "ɇ": "e", "ɛ": "e", "ǝ": "e", "ⓕ": "f", "ｆ": "f", "ḟ": "f", "ƒ": "f", "ꝼ": "f", "ⓖ": "g", "ｇ": "g", "ǵ": "g", "ĝ": "g", "ḡ": "g", "ğ": "g", "ġ": "g", "ǧ": "g", "ģ": "g", "ǥ": "g", "ɠ": "g", "ꞡ": "g", "ᵹ": "g", "ꝿ": "g", "ⓗ": "h", "ｈ": "h", "ĥ": "h", "ḣ": "h", "ḧ": "h", "ȟ": "h", "ḥ": "h", "ḩ": "h", "ḫ": "h", "ẖ": "h", "ħ": "h", "ⱨ": "h", "ⱶ": "h", "ɥ": "h", "ƕ": "hv", "ⓘ": "i", "ｉ": "i", "ì": "i", "í": "i", "î": "i", "ĩ": "i", "ī": "i", "ĭ": "i", "ï": "i", "ḯ": "i", "ỉ": "i", "ǐ": "i", "ȉ": "i", "ȋ": "i", "ị": "i", "į": "i", "ḭ": "i", "ɨ": "i", "ı": "i", "ⓙ": "j", "ｊ": "j", "ĵ": "j", "ǰ": "j", "ɉ": "j", "ⓚ": "k", "ｋ": "k", "ḱ": "k", "ǩ": "k", "ḳ": "k", "ķ": "k", "ḵ": "k", "ƙ": "k", "ⱪ": "k", "ꝁ": "k", "ꝃ": "k", "ꝅ": "k", "ꞣ": "k", "ⓛ": "l", "ｌ": "l", "ŀ": "l", "ĺ": "l", "ľ": "l", "ḷ": "l", "ḹ": "l", "ļ": "l", "ḽ": "l", "ḻ": "l", "ſ": "l", "ł": "l", "ƚ": "l", "ɫ": "l", "ⱡ": "l", "ꝉ": "l", "ꞁ": "l", "ꝇ": "l", "ǉ": "lj", "ⓜ": "m", "ｍ": "m", "ḿ": "m", "ṁ": "m", "ṃ": "m", "ɱ": "m", "ɯ": "m", "ⓝ": "n", "ｎ": "n", "ǹ": "n", "ń": "n", "ñ": "n", "ṅ": "n", "ň": "n", "ṇ": "n", "ņ": "n", "ṋ": "n", "ṉ": "n", "ƞ": "n", "ɲ": "n", "ŉ": "n", "ꞑ": "n", "ꞥ": "n", "ǌ": "nj", "ⓞ": "o", "ｏ": "o", "ò": "o", "ó": "o", "ô": "o", "ồ": "o", "ố": "o", "ỗ": "o", "ổ": "o", "õ": "o", "ṍ": "o", "ȭ": "o", "ṏ": "o", "ō": "o", "ṑ": "o", "ṓ": "o", "ŏ": "o", "ȯ": "o", "ȱ": "o", "ö": "o", "ȫ": "o", "ỏ": "o", "ő": "o", "ǒ": "o", "ȍ": "o", "ȏ": "o", "ơ": "o", "ờ": "o", "ớ": "o", "ỡ": "o", "ở": "o", "ợ": "o", "ọ": "o", "ộ": "o", "ǫ": "o", "ǭ": "o", "ø": "o", "ǿ": "o", "ɔ": "o", "ꝋ": "o", "ꝍ": "o", "ɵ": "o", "œ": "oe", "ƣ": "oi", "ȣ": "ou", "ꝏ": "oo", "ⓟ": "p", "ｐ": "p", "ṕ": "p", "ṗ": "p", "ƥ": "p", "ᵽ": "p", "ꝑ": "p", "ꝓ": "p", "ꝕ": "p", "ⓠ": "q", "ｑ": "q", "ɋ": "q", "ꝗ": "q", "ꝙ": "q", "ⓡ": "r", "ｒ": "r", "ŕ": "r", "ṙ": "r", "ř": "r", "ȑ": "r", "ȓ": "r", "ṛ": "r", "ṝ": "r", "ŗ": "r", "ṟ": "r", "ɍ": "r", "ɽ": "r", "ꝛ": "r", "ꞧ": "r", "ꞃ": "r", "ⓢ": "s", "ｓ": "s", "ß": "s", "ś": "s", "ṥ": "s", "ŝ": "s", "ṡ": "s", "š": "s", "ṧ": "s", "ṣ": "s", "ṩ": "s", "ș": "s", "ş": "s", "ȿ": "s", "ꞩ": "s", "ꞅ": "s", "ẛ": "s", "ⓣ": "t", "ｔ": "t", "ṫ": "t", "ẗ": "t", "ť": "t", "ṭ": "t", "ț": "t", "ţ": "t", "ṱ": "t", "ṯ": "t", "ŧ": "t", "ƭ": "t", "ʈ": "t", "ⱦ": "t", "ꞇ": "t", "ꜩ": "tz", "ⓤ": "u", "ｕ": "u", "ù": "u", "ú": "u", "û": "u", "ũ": "u", "ṹ": "u", "ū": "u", "ṻ": "u", "ŭ": "u", "ü": "u", "ǜ": "u", "ǘ": "u", "ǖ": "u", "ǚ": "u", "ủ": "u", "ů": "u", "ű": "u", "ǔ": "u", "ȕ": "u", "ȗ": "u", "ư": "u", "ừ": "u", "ứ": "u", "ữ": "u", "ử": "u", "ự": "u", "ụ": "u", "ṳ": "u", "ų": "u", "ṷ": "u", "ṵ": "u", "ʉ": "u", "ⓥ": "v", "ｖ": "v", "ṽ": "v", "ṿ": "v", "ʋ": "v", "ꝟ": "v", "ʌ": "v", "ꝡ": "vy", "ⓦ": "w", "ｗ": "w", "ẁ": "w", "ẃ": "w", "ŵ": "w", "ẇ": "w", "ẅ": "w", "ẘ": "w", "ẉ": "w", "ⱳ": "w", "ⓧ": "x", "ｘ": "x", "ẋ": "x", "ẍ": "x", "ⓨ": "y", "ｙ": "y", "ỳ": "y", "ý": "y", "ŷ": "y", "ỹ": "y", "ȳ": "y", "ẏ": "y", "ÿ": "y", "ỷ": "y", "ẙ": "y", "ỵ": "y", "ƴ": "y", "ɏ": "y", "ỿ": "y", "ⓩ": "z", "ｚ": "z", "ź": "z", "ẑ": "z", "ż": "z", "ž": "z", "ẓ": "z", "ẕ": "z", "ƶ": "z", "ȥ": "z", "ɀ": "z", "ⱬ": "z", "ꝣ": "z", "Ά": "Α", "Έ": "Ε", "Ή": "Η", "Ί": "Ι", "Ϊ": "Ι", "Ό": "Ο", "Ύ": "Υ", "Ϋ": "Υ", "Ώ": "Ω", "ά": "α", "έ": "ε", "ή": "η", "ί": "ι", "ϊ": "ι", "ΐ": "ι", "ό": "ο", "ύ": "υ", "ϋ": "υ", "ΰ": "υ", "ώ": "ω", "ς": "σ", "’": "'" };}), e.define("select2/data/base", ["../utils"], function (r) {function n(e, t) {n.__super__.constructor.call(this);}return r.Extend(n, r.Observable), n.prototype.current = function (e) {throw new Error("The `current` method must be defined in child classes.");}, n.prototype.query = function (e, t) {throw new Error("The `query` method must be defined in child classes.");}, n.prototype.bind = function (e, t) {}, n.prototype.destroy = function () {}, n.prototype.generateResultId = function (e, t) {var n = e.id + "-result-";return n += r.generateChars(4), null != t.id ? n += "-" + t.id.toString() : n += "-" + r.generateChars(4), n;}, n;}), e.define("select2/data/select", ["./base", "../utils", "jquery"], function (e, a, l) {function n(e, t) {this.$element = e, this.options = t, n.__super__.constructor.call(this);}return a.Extend(n, e), n.prototype.current = function (e) {var n = [],r = this;this.$element.find(":selected").each(function () {var e = l(this),t = r.item(e);n.push(t);}), e(n);}, n.prototype.select = function (i) {var o = this;if (i.selected = !0, l(i.element).is("option")) return i.element.selected = !0, void this.$element.trigger("input").trigger("change");if (this.$element.prop("multiple")) this.current(function (e) {var t = [];(i = [i]).push.apply(i, e);for (var n = 0; n < i.length; n++) {var r = i[n].id;-1 === l.inArray(r, t) && t.push(r);}o.$element.val(t), o.$element.trigger("input").trigger("change");});else {var e = i.id;this.$element.val(e), this.$element.trigger("input").trigger("change");}}, n.prototype.unselect = function (i) {var o = this;if (this.$element.prop("multiple")) {if (i.selected = !1, l(i.element).is("option")) return i.element.selected = !1, void this.$element.trigger("input").trigger("change");this.current(function (e) {for (var t = [], n = 0; n < e.length; n++) {var r = e[n].id;r !== i.id && -1 === l.inArray(r, t) && t.push(r);}o.$element.val(t), o.$element.trigger("input").trigger("change");});}}, n.prototype.bind = function (e, t) {var n = this;(this.container = e).on("select", function (e) {n.select(e.data);}), e.on("unselect", function (e) {n.unselect(e.data);});}, n.prototype.destroy = function () {this.$element.find("*").each(function () {a.RemoveData(this);});}, n.prototype.query = function (r, e) {var i = [],o = this;this.$element.children().each(function () {var e = l(this);if (e.is("option") || e.is("optgroup")) {var t = o.item(e),n = o.matches(r, t);null !== n && i.push(n);}}), e({ results: i });}, n.prototype.addOptions = function (e) {a.appendMany(this.$element, e);}, n.prototype.option = function (e) {var t;e.children ? (t = document.createElement("optgroup")).label = e.text : void 0 !== (t = document.createElement("option")).textContent ? t.textContent = e.text : t.innerText = e.text, void 0 !== e.id && (t.value = e.id), e.disabled && (t.disabled = !0), e.selected && (t.selected = !0), e.title && (t.title = e.title);var n = l(t),r = this._normalizeItem(e);return r.element = t, a.StoreData(t, "data", r), n;}, n.prototype.item = function (e) {var t = {};if (null != (t = a.GetData(e[0], "data"))) return t;if (e.is("option")) t = { id: e.val(), text: e.text(), disabled: e.prop("disabled"), selected: e.prop("selected"), title: e.prop("title") };else if (e.is("optgroup")) {t = { text: e.prop("label"), children: [], title: e.prop("title") };for (var n = e.children("option"), r = [], i = 0; i < n.length; i++) {var o = l(n[i]),s = this.item(o);r.push(s);}t.children = r;}return (t = this._normalizeItem(t)).element = e[0], a.StoreData(e[0], "data", t), t;}, n.prototype._normalizeItem = function (e) {e !== Object(e) && (e = { id: e, text: e });return null != (e = l.extend({}, { text: "" }, e)).id && (e.id = e.id.toString()), null != e.text && (e.text = e.text.toString()), null == e._resultId && e.id && null != this.container && (e._resultId = this.generateResultId(this.container, e)), l.extend({}, { selected: !1, disabled: !1 }, e);}, n.prototype.matches = function (e, t) {return this.options.get("matcher")(e, t);}, n;}), e.define("select2/data/array", ["./select", "../utils", "jquery"], function (e, f, g) {function r(e, t) {this._dataToConvert = t.get("data") || [], r.__super__.constructor.call(this, e, t);}return f.Extend(r, e), r.prototype.bind = function (e, t) {r.__super__.bind.call(this, e, t), this.addOptions(this.convertToOptions(this._dataToConvert));}, r.prototype.select = function (n) {var e = this.$element.find("option").filter(function (e, t) {return t.value == n.id.toString();});0 === e.length && (e = this.option(n), this.addOptions(e)), r.__super__.select.call(this, n);}, r.prototype.convertToOptions = function (e) {var t = this,n = this.$element.find("option"),r = n.map(function () {return t.item(g(this)).id;}).get(),i = [];function o(e) {return function () {return g(this).val() == e.id;};}for (var s = 0; s < e.length; s++) {var a = this._normalizeItem(e[s]);if (0 <= g.inArray(a.id, r)) {var l = n.filter(o(a)),c = this.item(l),u = g.extend(!0, {}, a, c),d = this.option(u);l.replaceWith(d);} else {var p = this.option(a);if (a.children) {var h = this.convertToOptions(a.children);f.appendMany(p, h);}i.push(p);}}return i;}, r;}), e.define("select2/data/ajax", ["./array", "../utils", "jquery"], function (e, t, o) {function n(e, t) {this.ajaxOptions = this._applyDefaults(t.get("ajax")), null != this.ajaxOptions.processResults && (this.processResults = this.ajaxOptions.processResults), n.__super__.constructor.call(this, e, t);}return t.Extend(n, e), n.prototype._applyDefaults = function (e) {var t = { data: function (e) {return o.extend({}, e, { q: e.term });}, transport: function (e, t, n) {var r = o.ajax(e);return r.then(t), r.fail(n), r;} };return o.extend({}, t, e, !0);}, n.prototype.processResults = function (e) {return e;}, n.prototype.query = function (n, r) {var i = this;null != this._request && (o.isFunction(this._request.abort) && this._request.abort(), this._request = null);var t = o.extend({ type: "GET" }, this.ajaxOptions);function e() {var e = t.transport(t, function (e) {var t = i.processResults(e, n);i.options.get("debug") && window.console && console.error && (t && t.results && o.isArray(t.results) || console.error("Select2: The AJAX results did not return an array in the `results` key of the response.")), r(t);}, function () {"status" in e && (0 === e.status || "0" === e.status) || i.trigger("results:message", { message: "errorLoading" });});i._request = e;}"function" == typeof t.url && (t.url = t.url.call(this.$element, n)), "function" == typeof t.data && (t.data = t.data.call(this.$element, n)), this.ajaxOptions.delay && null != n.term ? (this._queryTimeout && window.clearTimeout(this._queryTimeout), this._queryTimeout = window.setTimeout(e, this.ajaxOptions.delay)) : e();}, n;}), e.define("select2/data/tags", ["jquery"], function (u) {function e(e, t, n) {var r = n.get("tags"),i = n.get("createTag");void 0 !== i && (this.createTag = i);var o = n.get("insertTag");if (void 0 !== o && (this.insertTag = o), e.call(this, t, n), u.isArray(r)) for (var s = 0; s < r.length; s++) {var a = r[s],l = this._normalizeItem(a),c = this.option(l);this.$element.append(c);}}return e.prototype.query = function (e, c, u) {var d = this;this._removeOldTags(), null != c.term && null == c.page ? e.call(this, c, function e(t, n) {for (var r = t.results, i = 0; i < r.length; i++) {var o = r[i],s = null != o.children && !e({ results: o.children }, !0);if ((o.text || "").toUpperCase() === (c.term || "").toUpperCase() || s) return !n && (t.data = r, void u(t));}if (n) return !0;var a = d.createTag(c);if (null != a) {var l = d.option(a);l.attr("data-select2-tag", !0), d.addOptions([l]), d.insertTag(r, a);}t.results = r, u(t);}) : e.call(this, c, u);}, e.prototype.createTag = function (e, t) {var n = u.trim(t.term);return "" === n ? null : { id: n, text: n };}, e.prototype.insertTag = function (e, t, n) {t.unshift(n);}, e.prototype._removeOldTags = function (e) {this.$element.find("option[data-select2-tag]").each(function () {this.selected || u(this).remove();});}, e;}), e.define("select2/data/tokenizer", ["jquery"], function (d) {function e(e, t, n) {var r = n.get("tokenizer");void 0 !== r && (this.tokenizer = r), e.call(this, t, n);}return e.prototype.bind = function (e, t, n) {e.call(this, t, n), this.$search = t.dropdown.$search || t.selection.$search || n.find(".select2-search__field");}, e.prototype.query = function (e, t, n) {var i = this;t.term = t.term || "";var r = this.tokenizer(t, this.options, function (e) {var t,n = i._normalizeItem(e);if (!i.$element.find("option").filter(function () {return d(this).val() === n.id;}).length) {var r = i.option(n);r.attr("data-select2-tag", !0), i._removeOldTags(), i.addOptions([r]);}t = n, i.trigger("select", { data: t });});r.term !== t.term && (this.$search.length && (this.$search.val(r.term), this.$search.trigger("focus")), t.term = r.term), e.call(this, t, n);}, e.prototype.tokenizer = function (e, t, n, r) {for (var i = n.get("tokenSeparators") || [], o = t.term, s = 0, a = this.createTag || function (e) {return { id: e.term, text: e.term };}; s < o.length;) {var l = o[s];if (-1 !== d.inArray(l, i)) {var c = o.substr(0, s),u = a(d.extend({}, t, { term: c }));null != u ? (r(u), o = o.substr(s + 1) || "", s = 0) : s++;} else s++;}return { term: o };}, e;}), e.define("select2/data/minimumInputLength", [], function () {function e(e, t, n) {this.minimumInputLength = n.get("minimumInputLength"), e.call(this, t, n);}return e.prototype.query = function (e, t, n) {t.term = t.term || "", t.term.length < this.minimumInputLength ? this.trigger("results:message", { message: "inputTooShort", args: { minimum: this.minimumInputLength, input: t.term, params: t } }) : e.call(this, t, n);}, e;}), e.define("select2/data/maximumInputLength", [], function () {function e(e, t, n) {this.maximumInputLength = n.get("maximumInputLength"), e.call(this, t, n);}return e.prototype.query = function (e, t, n) {t.term = t.term || "", 0 < this.maximumInputLength && t.term.length > this.maximumInputLength ? this.trigger("results:message", { message: "inputTooLong", args: { maximum: this.maximumInputLength, input: t.term, params: t } }) : e.call(this, t, n);}, e;}), e.define("select2/data/maximumSelectionLength", [], function () {function e(e, t, n) {this.maximumSelectionLength = n.get("maximumSelectionLength"), e.call(this, t, n);}return e.prototype.bind = function (e, t, n) {var r = this;e.call(this, t, n), t.on("select", function () {r._checkIfMaximumSelected();});}, e.prototype.query = function (e, t, n) {var r = this;this._checkIfMaximumSelected(function () {e.call(r, t, n);});}, e.prototype._checkIfMaximumSelected = function (e, n) {var r = this;this.current(function (e) {var t = null != e ? e.length : 0;0 < r.maximumSelectionLength && t >= r.maximumSelectionLength ? r.trigger("results:message", { message: "maximumSelected", args: { maximum: r.maximumSelectionLength } }) : n && n();});}, e;}), e.define("select2/dropdown", ["jquery", "./utils"], function (t, e) {function n(e, t) {this.$element = e, this.options = t, n.__super__.constructor.call(this);}return e.Extend(n, e.Observable), n.prototype.render = function () {var e = t('<span class="select2-dropdown"><span class="select2-results"></span></span>');return e.attr("dir", this.options.get("dir")), this.$dropdown = e;}, n.prototype.bind = function () {}, n.prototype.position = function (e, t) {}, n.prototype.destroy = function () {this.$dropdown.remove();}, n;}), e.define("select2/dropdown/search", ["jquery", "../utils"], function (o, e) {function t() {}return t.prototype.render = function (e) {var t = e.call(this),n = o('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" /></span>');return this.$searchContainer = n, this.$search = n.find("input"), t.prepend(n), t;}, t.prototype.bind = function (e, t, n) {var r = this,i = t.id + "-results";e.call(this, t, n), this.$search.on("keydown", function (e) {r.trigger("keypress", e), r._keyUpPrevented = e.isDefaultPrevented();}), this.$search.on("input", function (e) {o(this).off("keyup");}), this.$search.on("keyup input", function (e) {r.handleSearch(e);}), t.on("open", function () {r.$search.attr("tabindex", 0), r.$search.attr("aria-controls", i), r.$search.trigger("focus"), window.setTimeout(function () {r.$search.trigger("focus");}, 0);}), t.on("close", function () {r.$search.attr("tabindex", -1), r.$search.removeAttr("aria-controls"), r.$search.removeAttr("aria-activedescendant"), r.$search.val(""), r.$search.trigger("blur");}), t.on("focus", function () {t.isOpen() || r.$search.trigger("focus");}), t.on("results:all", function (e) {null != e.query.term && "" !== e.query.term || (r.showSearch(e) ? r.$searchContainer.removeClass("select2-search--hide") : r.$searchContainer.addClass("select2-search--hide"));}), t.on("results:focus", function (e) {e.data._resultId ? r.$search.attr("aria-activedescendant", e.data._resultId) : r.$search.removeAttr("aria-activedescendant");});}, t.prototype.handleSearch = function (e) {if (!this._keyUpPrevented) {var t = this.$search.val();this.trigger("query", { term: t });}this._keyUpPrevented = !1;}, t.prototype.showSearch = function (e, t) {return !0;}, t;}), e.define("select2/dropdown/hidePlaceholder", [], function () {function e(e, t, n, r) {this.placeholder = this.normalizePlaceholder(n.get("placeholder")), e.call(this, t, n, r);}return e.prototype.append = function (e, t) {t.results = this.removePlaceholder(t.results), e.call(this, t);}, e.prototype.normalizePlaceholder = function (e, t) {return "string" == typeof t && (t = { id: "", text: t }), t;}, e.prototype.removePlaceholder = function (e, t) {for (var n = t.slice(0), r = t.length - 1; 0 <= r; r--) {var i = t[r];this.placeholder.id === i.id && n.splice(r, 1);}return n;}, e;}), e.define("select2/dropdown/infiniteScroll", ["jquery"], function (n) {function e(e, t, n, r) {this.lastParams = {}, e.call(this, t, n, r), this.$loadingMore = this.createLoadingMore(), this.loading = !1;}return e.prototype.append = function (e, t) {this.$loadingMore.remove(), this.loading = !1, e.call(this, t), this.showLoadingMore(t) && (this.$results.append(this.$loadingMore), this.loadMoreIfNeeded());}, e.prototype.bind = function (e, t, n) {var r = this;e.call(this, t, n), t.on("query", function (e) {r.lastParams = e, r.loading = !0;}), t.on("query:append", function (e) {r.lastParams = e, r.loading = !0;}), this.$results.on("scroll", this.loadMoreIfNeeded.bind(this));}, e.prototype.loadMoreIfNeeded = function () {var e = n.contains(document.documentElement, this.$loadingMore[0]);if (!this.loading && e) {var t = this.$results.offset().top + this.$results.outerHeight(!1);this.$loadingMore.offset().top + this.$loadingMore.outerHeight(!1) <= t + 50 && this.loadMore();}}, e.prototype.loadMore = function () {this.loading = !0;var e = n.extend({}, { page: 1 }, this.lastParams);e.page++, this.trigger("query:append", e);}, e.prototype.showLoadingMore = function (e, t) {return t.pagination && t.pagination.more;}, e.prototype.createLoadingMore = function () {var e = n('<li class="select2-results__option select2-results__option--load-more"role="option" aria-disabled="true"></li>'),t = this.options.get("translations").get("loadingMore");return e.html(t(this.lastParams)), e;}, e;}), e.define("select2/dropdown/attachBody", ["jquery", "../utils"], function (f, a) {function e(e, t, n) {this.$dropdownParent = f(n.get("dropdownParent") || document.body), e.call(this, t, n);}return e.prototype.bind = function (e, t, n) {var r = this;e.call(this, t, n), t.on("open", function () {r._showDropdown(), r._attachPositioningHandler(t), r._bindContainerResultHandlers(t);}), t.on("close", function () {r._hideDropdown(), r._detachPositioningHandler(t);}), this.$dropdownContainer.on("mousedown", function (e) {e.stopPropagation();});}, e.prototype.destroy = function (e) {e.call(this), this.$dropdownContainer.remove();}, e.prototype.position = function (e, t, n) {t.attr("class", n.attr("class")), t.removeClass("select2"), t.addClass("select2-container--open"), t.css({ position: "absolute", top: -999999 }), this.$container = n;}, e.prototype.render = function (e) {var t = f("<span></span>"),n = e.call(this);return t.append(n), this.$dropdownContainer = t;}, e.prototype._hideDropdown = function (e) {this.$dropdownContainer.detach();}, e.prototype._bindContainerResultHandlers = function (e, t) {if (!this._containerResultsHandlersBound) {var n = this;t.on("results:all", function () {n._positionDropdown(), n._resizeDropdown();}), t.on("results:append", function () {n._positionDropdown(), n._resizeDropdown();}), t.on("results:message", function () {n._positionDropdown(), n._resizeDropdown();}), t.on("select", function () {n._positionDropdown(), n._resizeDropdown();}), t.on("unselect", function () {n._positionDropdown(), n._resizeDropdown();}), this._containerResultsHandlersBound = !0;}}, e.prototype._attachPositioningHandler = function (e, t) {var n = this,r = "scroll.select2." + t.id,i = "resize.select2." + t.id,o = "orientationchange.select2." + t.id,s = this.$container.parents().filter(a.hasScroll);s.each(function () {a.StoreData(this, "select2-scroll-position", { x: f(this).scrollLeft(), y: f(this).scrollTop() });}), s.on(r, function (e) {var t = a.GetData(this, "select2-scroll-position");f(this).scrollTop(t.y);}), f(window).on(r + " " + i + " " + o, function (e) {n._positionDropdown(), n._resizeDropdown();});}, e.prototype._detachPositioningHandler = function (e, t) {var n = "scroll.select2." + t.id,r = "resize.select2." + t.id,i = "orientationchange.select2." + t.id;this.$container.parents().filter(a.hasScroll).off(n), f(window).off(n + " " + r + " " + i);}, e.prototype._positionDropdown = function () {var e = f(window),t = this.$dropdown.hasClass("select2-dropdown--above"),n = this.$dropdown.hasClass("select2-dropdown--below"),r = null,i = this.$container.offset();i.bottom = i.top + this.$container.outerHeight(!1);var o = { height: this.$container.outerHeight(!1) };o.top = i.top, o.bottom = i.top + o.height;var s = this.$dropdown.outerHeight(!1),a = e.scrollTop(),l = e.scrollTop() + e.height(),c = a < i.top - s,u = l > i.bottom + s,d = { left: i.left, top: o.bottom },p = this.$dropdownParent;"static" === p.css("position") && (p = p.offsetParent());var h = { top: 0, left: 0 };(f.contains(document.body, p[0]) || p[0].isConnected) && (h = p.offset()), d.top -= h.top, d.left -= h.left, t || n || (r = "below"), u || !c || t ? !c && u && t && (r = "below") : r = "above", ("above" == r || t && "below" !== r) && (d.top = o.top - h.top - s), null != r && (this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--" + r), this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--" + r)), this.$dropdownContainer.css(d);}, e.prototype._resizeDropdown = function () {var e = { width: this.$container.outerWidth(!1) + "px" };this.options.get("dropdownAutoWidth") && (e.minWidth = e.width, e.position = "relative", e.width = "auto"), this.$dropdown.css(e);}, e.prototype._showDropdown = function (e) {this.$dropdownContainer.appendTo(this.$dropdownParent), this._positionDropdown(), this._resizeDropdown();}, e;}), e.define("select2/dropdown/minimumResultsForSearch", [], function () {function e(e, t, n, r) {this.minimumResultsForSearch = n.get("minimumResultsForSearch"), this.minimumResultsForSearch < 0 && (this.minimumResultsForSearch = 1 / 0), e.call(this, t, n, r);}return e.prototype.showSearch = function (e, t) {return !(function e(t) {for (var n = 0, r = 0; r < t.length; r++) {var i = t[r];i.children ? n += e(i.children) : n++;}return n;}(t.data.results) < this.minimumResultsForSearch) && e.call(this, t);}, e;}), e.define("select2/dropdown/selectOnClose", ["../utils"], function (o) {function e() {}return e.prototype.bind = function (e, t, n) {var r = this;e.call(this, t, n), t.on("close", function (e) {r._handleSelectOnClose(e);});}, e.prototype._handleSelectOnClose = function (e, t) {if (t && null != t.originalSelect2Event) {var n = t.originalSelect2Event;if ("select" === n._type || "unselect" === n._type) return;}var r = this.getHighlightedResults();if (!(r.length < 1)) {var i = o.GetData(r[0], "data");null != i.element && i.element.selected || null == i.element && i.selected || this.trigger("select", { data: i });}}, e;}), e.define("select2/dropdown/closeOnSelect", [], function () {function e() {}return e.prototype.bind = function (e, t, n) {var r = this;e.call(this, t, n), t.on("select", function (e) {r._selectTriggered(e);}), t.on("unselect", function (e) {r._selectTriggered(e);});}, e.prototype._selectTriggered = function (e, t) {var n = t.originalEvent;n && (n.ctrlKey || n.metaKey) || this.trigger("close", { originalEvent: n, originalSelect2Event: t });}, e;}), e.define("select2/i18n/en", [], function () {return { errorLoading: function () {return "The results could not be loaded.";}, inputTooLong: function (e) {var t = e.input.length - e.maximum,n = "Please delete " + t + " character";return 1 != t && (n += "s"), n;}, inputTooShort: function (e) {return "Please enter " + (e.minimum - e.input.length) + " or more characters";}, loadingMore: function () {return "Loading more results…";}, maximumSelected: function (e) {var t = "You can only select " + e.maximum + " item";return 1 != e.maximum && (t += "s"), t;}, noResults: function () {return "No results found";}, searching: function () {return "Searching…";}, removeAllItems: function () {return "Remove all items";} };}), e.define("select2/defaults", ["jquery", "require", "./results", "./selection/single", "./selection/multiple", "./selection/placeholder", "./selection/allowClear", "./selection/search", "./selection/eventRelay", "./utils", "./translation", "./diacritics", "./data/select", "./data/array", "./data/ajax", "./data/tags", "./data/tokenizer", "./data/minimumInputLength", "./data/maximumInputLength", "./data/maximumSelectionLength", "./dropdown", "./dropdown/search", "./dropdown/hidePlaceholder", "./dropdown/infiniteScroll", "./dropdown/attachBody", "./dropdown/minimumResultsForSearch", "./dropdown/selectOnClose", "./dropdown/closeOnSelect", "./i18n/en"], function (c, u, d, p, h, f, g, m, v, y, s, t, _, $, b, w, A, x, D, S, E, C, O, T, q, L, I, j, e) {function n() {this.reset();}return n.prototype.apply = function (e) {if (null == (e = c.extend(!0, {}, this.defaults, e)).dataAdapter) {if (null != e.ajax ? e.dataAdapter = b : null != e.data ? e.dataAdapter = $ : e.dataAdapter = _, 0 < e.minimumInputLength && (e.dataAdapter = y.Decorate(e.dataAdapter, x)), 0 < e.maximumInputLength && (e.dataAdapter = y.Decorate(e.dataAdapter, D)), 0 < e.maximumSelectionLength && (e.dataAdapter = y.Decorate(e.dataAdapter, S)), e.tags && (e.dataAdapter = y.Decorate(e.dataAdapter, w)), null == e.tokenSeparators && null == e.tokenizer || (e.dataAdapter = y.Decorate(e.dataAdapter, A)), null != e.query) {var t = u(e.amdBase + "compat/query");e.dataAdapter = y.Decorate(e.dataAdapter, t);}if (null != e.initSelection) {var n = u(e.amdBase + "compat/initSelection");e.dataAdapter = y.Decorate(e.dataAdapter, n);}}if (null == e.resultsAdapter && (e.resultsAdapter = d, null != e.ajax && (e.resultsAdapter = y.Decorate(e.resultsAdapter, T)), null != e.placeholder && (e.resultsAdapter = y.Decorate(e.resultsAdapter, O)), e.selectOnClose && (e.resultsAdapter = y.Decorate(e.resultsAdapter, I))), null == e.dropdownAdapter) {if (e.multiple) e.dropdownAdapter = E;else {var r = y.Decorate(E, C);e.dropdownAdapter = r;}if (0 !== e.minimumResultsForSearch && (e.dropdownAdapter = y.Decorate(e.dropdownAdapter, L)), e.closeOnSelect && (e.dropdownAdapter = y.Decorate(e.dropdownAdapter, j)), null != e.dropdownCssClass || null != e.dropdownCss || null != e.adaptDropdownCssClass) {var i = u(e.amdBase + "compat/dropdownCss");e.dropdownAdapter = y.Decorate(e.dropdownAdapter, i);}e.dropdownAdapter = y.Decorate(e.dropdownAdapter, q);}if (null == e.selectionAdapter) {if (e.multiple ? e.selectionAdapter = h : e.selectionAdapter = p, null != e.placeholder && (e.selectionAdapter = y.Decorate(e.selectionAdapter, f)), e.allowClear && (e.selectionAdapter = y.Decorate(e.selectionAdapter, g)), e.multiple && (e.selectionAdapter = y.Decorate(e.selectionAdapter, m)), null != e.containerCssClass || null != e.containerCss || null != e.adaptContainerCssClass) {var o = u(e.amdBase + "compat/containerCss");e.selectionAdapter = y.Decorate(e.selectionAdapter, o);}e.selectionAdapter = y.Decorate(e.selectionAdapter, v);}e.language = this._resolveLanguage(e.language), e.language.push("en");for (var s = [], a = 0; a < e.language.length; a++) {var l = e.language[a];-1 === s.indexOf(l) && s.push(l);}return e.language = s, e.translations = this._processTranslations(e.language, e.debug), e;}, n.prototype.reset = function () {function a(e) {return e.replace(/[^\u0000-\u007E]/g, function (e) {return t[e] || e;});}this.defaults = { amdBase: "./", amdLanguageBase: "./i18n/", closeOnSelect: !0, debug: !1, dropdownAutoWidth: !1, escapeMarkup: y.escapeMarkup, language: {}, matcher: function e(t, n) {if ("" === c.trim(t.term)) return n;if (n.children && 0 < n.children.length) {for (var r = c.extend(!0, {}, n), i = n.children.length - 1; 0 <= i; i--) null == e(t, n.children[i]) && r.children.splice(i, 1);return 0 < r.children.length ? r : e(t, r);}var o = a(n.text).toUpperCase(),s = a(t.term).toUpperCase();return -1 < o.indexOf(s) ? n : null;}, minimumInputLength: 0, maximumInputLength: 0, maximumSelectionLength: 0, minimumResultsForSearch: 0, selectOnClose: !1, scrollAfterSelect: !1, sorter: function (e) {return e;}, templateResult: function (e) {return e.text;}, templateSelection: function (e) {return e.text;}, theme: "default", width: "resolve" };}, n.prototype.applyFromElement = function (e, t) {var n = e.language,r = this.defaults.language,i = t.prop("lang"),o = t.closest("[lang]").prop("lang"),s = Array.prototype.concat.call(this._resolveLanguage(i), this._resolveLanguage(n), this._resolveLanguage(r), this._resolveLanguage(o));return e.language = s, e;}, n.prototype._resolveLanguage = function (e) {if (!e) return [];if (c.isEmptyObject(e)) return [];if (c.isPlainObject(e)) return [e];var t;t = c.isArray(e) ? e : [e];for (var n = [], r = 0; r < t.length; r++) if (n.push(t[r]), "string" == typeof t[r] && 0 < t[r].indexOf("-")) {var i = t[r].split("-")[0];n.push(i);}return n;}, n.prototype._processTranslations = function (e, t) {for (var n = new s(), r = 0; r < e.length; r++) {var i = new s(),o = e[r];if ("string" == typeof o) try {i = s.loadPath(o);} catch (e) {try {o = this.defaults.amdLanguageBase + o, i = s.loadPath(o);} catch (e) {t && window.console && console.warn && console.warn('Select2: The language file for "' + o + '" could not be automatically loaded. A fallback will be used instead.');}} else i = c.isPlainObject(o) ? new s(o) : o;n.extend(i);}return n;}, n.prototype.set = function (e, t) {var n = {};n[c.camelCase(e)] = t;var r = y._convertData(n);c.extend(!0, this.defaults, r);}, new n();}), e.define("select2/options", ["require", "jquery", "./defaults", "./utils"], function (r, d, i, p) {function e(e, t) {if (this.options = e, null != t && this.fromElement(t), null != t && (this.options = i.applyFromElement(this.options, t)), this.options = i.apply(this.options), t && t.is("input")) {var n = r(this.get("amdBase") + "compat/inputData");this.options.dataAdapter = p.Decorate(this.options.dataAdapter, n);}}return e.prototype.fromElement = function (e) {var t = ["select2"];null == this.options.multiple && (this.options.multiple = e.prop("multiple")), null == this.options.disabled && (this.options.disabled = e.prop("disabled")), null == this.options.dir && (e.prop("dir") ? this.options.dir = e.prop("dir") : e.closest("[dir]").prop("dir") ? this.options.dir = e.closest("[dir]").prop("dir") : this.options.dir = "ltr"), e.prop("disabled", this.options.disabled), e.prop("multiple", this.options.multiple), p.GetData(e[0], "select2Tags") && (this.options.debug && window.console && console.warn && console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'), p.StoreData(e[0], "data", p.GetData(e[0], "select2Tags")), p.StoreData(e[0], "tags", !0)), p.GetData(e[0], "ajaxUrl") && (this.options.debug && window.console && console.warn && console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."), e.attr("ajax--url", p.GetData(e[0], "ajaxUrl")), p.StoreData(e[0], "ajax-Url", p.GetData(e[0], "ajaxUrl")));var n = {};function r(e, t) {return t.toUpperCase();}for (var i = 0; i < e[0].attributes.length; i++) {var o = e[0].attributes[i].name,s = "data-";if (o.substr(0, s.length) == s) {var a = o.substring(s.length),l = p.GetData(e[0], a);n[a.replace(/-([a-z])/g, r)] = l;}}d.fn.jquery && "1." == d.fn.jquery.substr(0, 2) && e[0].dataset && (n = d.extend(!0, {}, e[0].dataset, n));var c = d.extend(!0, {}, p.GetData(e[0]), n);for (var u in c = p._convertData(c)) -1 < d.inArray(u, t) || (d.isPlainObject(this.options[u]) ? d.extend(this.options[u], c[u]) : this.options[u] = c[u]);return this;}, e.prototype.get = function (e) {return this.options[e];}, e.prototype.set = function (e, t) {this.options[e] = t;}, e;}), e.define("select2/core", ["jquery", "./options", "./utils", "./keys"], function (o, c, u, r) {var d = function (e, t) {null != u.GetData(e[0], "select2") && u.GetData(e[0], "select2").destroy(), this.$element = e, this.id = this._generateId(e), t = t || {}, this.options = new c(t, e), d.__super__.constructor.call(this);var n = e.attr("tabindex") || 0;u.StoreData(e[0], "old-tabindex", n), e.attr("tabindex", "-1");var r = this.options.get("dataAdapter");this.dataAdapter = new r(e, this.options);var i = this.render();this._placeContainer(i);var o = this.options.get("selectionAdapter");this.selection = new o(e, this.options), this.$selection = this.selection.render(), this.selection.position(this.$selection, i);var s = this.options.get("dropdownAdapter");this.dropdown = new s(e, this.options), this.$dropdown = this.dropdown.render(), this.dropdown.position(this.$dropdown, i);var a = this.options.get("resultsAdapter");this.results = new a(e, this.options, this.dataAdapter), this.$results = this.results.render(), this.results.position(this.$results, this.$dropdown);var l = this;this._bindAdapters(), this._registerDomEvents(), this._registerDataEvents(), this._registerSelectionEvents(), this._registerDropdownEvents(), this._registerResultsEvents(), this._registerEvents(), this.dataAdapter.current(function (e) {l.trigger("selection:update", { data: e });}), e.addClass("select2-hidden-accessible"), e.attr("aria-hidden", "true"), this._syncAttributes(), u.StoreData(e[0], "select2", this), e.data("select2", this);};return u.Extend(d, u.Observable), d.prototype._generateId = function (e) {return "select2-" + (null != e.attr("id") ? e.attr("id") : null != e.attr("name") ? e.attr("name") + "-" + u.generateChars(2) : u.generateChars(4)).replace(/(:|\.|\[|\]|,)/g, "");}, d.prototype._placeContainer = function (e) {e.insertAfter(this.$element);var t = this._resolveWidth(this.$element, this.options.get("width"));null != t && e.css("width", t);}, d.prototype._resolveWidth = function (e, t) {var n = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;if ("resolve" == t) {var r = this._resolveWidth(e, "style");return null != r ? r : this._resolveWidth(e, "element");}if ("element" == t) {var i = e.outerWidth(!1);return i <= 0 ? "auto" : i + "px";}if ("style" != t) return "computedstyle" != t ? t : window.getComputedStyle(e[0]).width;var o = e.attr("style");if ("string" != typeof o) return null;for (var s = o.split(";"), a = 0, l = s.length; a < l; a += 1) {var c = s[a].replace(/\s/g, "").match(n);if (null !== c && 1 <= c.length) return c[1];}return null;}, d.prototype._bindAdapters = function () {this.dataAdapter.bind(this, this.$container), this.selection.bind(this, this.$container), this.dropdown.bind(this, this.$container), this.results.bind(this, this.$container);}, d.prototype._registerDomEvents = function () {var t = this;this.$element.on("change.select2", function () {t.dataAdapter.current(function (e) {t.trigger("selection:update", { data: e });});}), this.$element.on("focus.select2", function (e) {t.trigger("focus", e);}), this._syncA = u.bind(this._syncAttributes, this), this._syncS = u.bind(this._syncSubtree, this), this.$element[0].attachEvent && this.$element[0].attachEvent("onpropertychange", this._syncA);var e = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;null != e ? (this._observer = new e(function (e) {t._syncA(), t._syncS(null, e);}), this._observer.observe(this.$element[0], { attributes: !0, childList: !0, subtree: !1 })) : this.$element[0].addEventListener && (this.$element[0].addEventListener("DOMAttrModified", t._syncA, !1), this.$element[0].addEventListener("DOMNodeInserted", t._syncS, !1), this.$element[0].addEventListener("DOMNodeRemoved", t._syncS, !1));}, d.prototype._registerDataEvents = function () {var n = this;this.dataAdapter.on("*", function (e, t) {n.trigger(e, t);});}, d.prototype._registerSelectionEvents = function () {var n = this,r = ["toggle", "focus"];this.selection.on("toggle", function () {n.toggleDropdown();}), this.selection.on("focus", function (e) {n.focus(e);}), this.selection.on("*", function (e, t) {-1 === o.inArray(e, r) && n.trigger(e, t);});}, d.prototype._registerDropdownEvents = function () {var n = this;this.dropdown.on("*", function (e, t) {n.trigger(e, t);});}, d.prototype._registerResultsEvents = function () {var n = this;this.results.on("*", function (e, t) {n.trigger(e, t);});}, d.prototype._registerEvents = function () {var n = this;this.on("open", function () {n.$container.addClass("select2-container--open");}), this.on("close", function () {n.$container.removeClass("select2-container--open");}), this.on("enable", function () {n.$container.removeClass("select2-container--disabled");}), this.on("disable", function () {n.$container.addClass("select2-container--disabled");}), this.on("blur", function () {n.$container.removeClass("select2-container--focus");}), this.on("query", function (t) {n.isOpen() || n.trigger("open", {}), this.dataAdapter.query(t, function (e) {n.trigger("results:all", { data: e, query: t });});}), this.on("query:append", function (t) {this.dataAdapter.query(t, function (e) {n.trigger("results:append", { data: e, query: t });});}), this.on("keypress", function (e) {var t = e.which;n.isOpen() ? t === r.ESC || t === r.TAB || t === r.UP && e.altKey ? (n.close(e), e.preventDefault()) : t === r.ENTER ? (n.trigger("results:select", {}), e.preventDefault()) : t === r.SPACE && e.ctrlKey ? (n.trigger("results:toggle", {}), e.preventDefault()) : t === r.UP ? (n.trigger("results:previous", {}), e.preventDefault()) : t === r.DOWN && (n.trigger("results:next", {}), e.preventDefault()) : (t === r.ENTER || t === r.SPACE || t === r.DOWN && e.altKey) && (n.open(), e.preventDefault());});}, d.prototype._syncAttributes = function () {this.options.set("disabled", this.$element.prop("disabled")), this.isDisabled() ? (this.isOpen() && this.close(), this.trigger("disable", {})) : this.trigger("enable", {});}, d.prototype._isChangeMutation = function (e, t) {var n = !1,r = this;if (!e || !e.target || "OPTION" === e.target.nodeName || "OPTGROUP" === e.target.nodeName) {if (t) {if (t.addedNodes && 0 < t.addedNodes.length) for (var i = 0; i < t.addedNodes.length; i++) {t.addedNodes[i].selected && (n = !0);} else t.removedNodes && 0 < t.removedNodes.length ? n = !0 : o.isArray(t) && o.each(t, function (e, t) {if (r._isChangeMutation(e, t)) return !(n = !0);});} else n = !0;return n;}}, d.prototype._syncSubtree = function (e, t) {var n = this._isChangeMutation(e, t),r = this;n && this.dataAdapter.current(function (e) {r.trigger("selection:update", { data: e });});}, d.prototype.trigger = function (e, t) {var n = d.__super__.trigger,r = { open: "opening", close: "closing", select: "selecting", unselect: "unselecting", clear: "clearing" };if (void 0 === t && (t = {}), e in r) {var i = r[e],o = { prevented: !1, name: e, args: t };if (n.call(this, i, o), o.prevented) return void (t.prevented = !0);}n.call(this, e, t);}, d.prototype.toggleDropdown = function () {this.isDisabled() || (this.isOpen() ? this.close() : this.open());}, d.prototype.open = function () {this.isOpen() || this.isDisabled() || this.trigger("query", {});}, d.prototype.close = function (e) {this.isOpen() && this.trigger("close", { originalEvent: e });}, d.prototype.isEnabled = function () {return !this.isDisabled();}, d.prototype.isDisabled = function () {return this.options.get("disabled");}, d.prototype.isOpen = function () {return this.$container.hasClass("select2-container--open");}, d.prototype.hasFocus = function () {return this.$container.hasClass("select2-container--focus");}, d.prototype.focus = function (e) {this.hasFocus() || (this.$container.addClass("select2-container--focus"), this.trigger("focus", {}));}, d.prototype.enable = function (e) {this.options.get("debug") && window.console && console.warn && console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'), null != e && 0 !== e.length || (e = [!0]);var t = !e[0];this.$element.prop("disabled", t);}, d.prototype.data = function () {this.options.get("debug") && 0 < arguments.length && window.console && console.warn && console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.');var t = [];return this.dataAdapter.current(function (e) {t = e;}), t;}, d.prototype.val = function (e) {if (this.options.get("debug") && window.console && console.warn && console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'), null == e || 0 === e.length) return this.$element.val();var t = e[0];o.isArray(t) && (t = o.map(t, function (e) {return e.toString();})), this.$element.val(t).trigger("input").trigger("change");}, d.prototype.destroy = function () {this.$container.remove(), this.$element[0].detachEvent && this.$element[0].detachEvent("onpropertychange", this._syncA), null != this._observer ? (this._observer.disconnect(), this._observer = null) : this.$element[0].removeEventListener && (this.$element[0].removeEventListener("DOMAttrModified", this._syncA, !1), this.$element[0].removeEventListener("DOMNodeInserted", this._syncS, !1), this.$element[0].removeEventListener("DOMNodeRemoved", this._syncS, !1)), this._syncA = null, this._syncS = null, this.$element.off(".select2"), this.$element.attr("tabindex", u.GetData(this.$element[0], "old-tabindex")), this.$element.removeClass("select2-hidden-accessible"), this.$element.attr("aria-hidden", "false"), u.RemoveData(this.$element[0]), this.$element.removeData("select2"), this.dataAdapter.destroy(), this.selection.destroy(), this.dropdown.destroy(), this.results.destroy(), this.dataAdapter = null, this.selection = null, this.dropdown = null, this.results = null;}, d.prototype.render = function () {var e = o('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');return e.attr("dir", this.options.get("dir")), this.$container = e, this.$container.addClass("select2-container--" + this.options.get("theme")), u.StoreData(e[0], "element", this.$element), e;}, d;}), e.define("jquery-mousewheel", ["jquery"], function (e) {return e;}), e.define("jquery.select2", ["jquery", "jquery-mousewheel", "./select2/core", "./select2/defaults", "./select2/utils"], function (i, e, o, t, s) {if (null == i.fn.select2) {var a = ["open", "close", "destroy"];i.fn.select2 = function (t) {if ("object" == typeof (t = t || {})) return this.each(function () {var e = i.extend(!0, {}, t);new o(i(this), e);}), this;if ("string" != typeof t) throw new Error("Invalid arguments for Select2: " + t);var n,r = Array.prototype.slice.call(arguments, 1);return this.each(function () {var e = s.GetData(this, "select2");null == e && window.console && console.error && console.error("The select2('" + t + "') method was called on an element that is not using Select2."), n = e[t].apply(e, r);}), -1 < i.inArray(t, a) ? this : n;};}return null == i.fn.select2.defaults && (i.fn.select2.defaults = t), o;}), { define: e.define, require: e.require };}(),t = e.require("jquery.select2");return u.fn.select2.amd = e, t;});

/***/ }),

/***/ "./src/assets/js/lib/slick.min.js":
/*!****************************************!*\
  !*** ./src/assets/js/lib/slick.min.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function (i) {"use strict"; true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery")], __WEBPACK_AMD_DEFINE_FACTORY__ = (i),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;}(function (i) {"use strict";var e = window.Slick || {};(e = function () {var e = 0;return function (t, o) {var s,n = this;n.defaults = { accessibility: !0, adaptiveHeight: !1, appendArrows: i(t), appendDots: i(t), arrows: !0, asNavFor: null, prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>', nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>', autoplay: !1, autoplaySpeed: 3e3, centerMode: !1, centerPadding: "50px", cssEase: "ease", customPaging: function (e, t) {return i('<button type="button" />').text(t + 1);}, dots: !1, dotsClass: "slick-dots", draggable: !0, easing: "linear", edgeFriction: .35, fade: !1, focusOnSelect: !1, focusOnChange: !1, infinite: !0, initialSlide: 0, lazyLoad: "ondemand", mobileFirst: !1, pauseOnHover: !0, pauseOnFocus: !0, pauseOnDotsHover: !1, respondTo: "window", responsive: null, rows: 1, rtl: !1, slide: "", slidesPerRow: 1, slidesToShow: 1, slidesToScroll: 1, speed: 500, swipe: !0, swipeToSlide: !1, touchMove: !0, touchThreshold: 5, useCSS: !0, useTransform: !0, variableWidth: !1, vertical: !1, verticalSwiping: !1, waitForAnimate: !0, zIndex: 1e3 }, n.initials = { animating: !1, dragging: !1, autoPlayTimer: null, currentDirection: 0, currentLeft: null, currentSlide: 0, direction: 1, $dots: null, listWidth: null, listHeight: null, loadIndex: 0, $nextArrow: null, $prevArrow: null, scrolling: !1, slideCount: null, slideWidth: null, $slideTrack: null, $slides: null, sliding: !1, slideOffset: 0, swipeLeft: null, swiping: !1, $list: null, touchObject: {}, transformsEnabled: !1, unslicked: !1 }, i.extend(n, n.initials), n.activeBreakpoint = null, n.animType = null, n.animProp = null, n.breakpoints = [], n.breakpointSettings = [], n.cssTransitions = !1, n.focussed = !1, n.interrupted = !1, n.hidden = "hidden", n.paused = !0, n.positionProp = null, n.respondTo = null, n.rowCount = 1, n.shouldClick = !0, n.$slider = i(t), n.$slidesCache = null, n.transformType = null, n.transitionType = null, n.visibilityChange = "visibilitychange", n.windowWidth = 0, n.windowTimer = null, s = i(t).data("slick") || {}, n.options = i.extend({}, n.defaults, o, s), n.currentSlide = n.options.initialSlide, n.originalSettings = n.options, void 0 !== document.mozHidden ? (n.hidden = "mozHidden", n.visibilityChange = "mozvisibilitychange") : void 0 !== document.webkitHidden && (n.hidden = "webkitHidden", n.visibilityChange = "webkitvisibilitychange"), n.autoPlay = i.proxy(n.autoPlay, n), n.autoPlayClear = i.proxy(n.autoPlayClear, n), n.autoPlayIterator = i.proxy(n.autoPlayIterator, n), n.changeSlide = i.proxy(n.changeSlide, n), n.clickHandler = i.proxy(n.clickHandler, n), n.selectHandler = i.proxy(n.selectHandler, n), n.setPosition = i.proxy(n.setPosition, n), n.swipeHandler = i.proxy(n.swipeHandler, n), n.dragHandler = i.proxy(n.dragHandler, n), n.keyHandler = i.proxy(n.keyHandler, n), n.instanceUid = e++, n.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/, n.registerBreakpoints(), n.init(!0);};}()).prototype.activateADA = function () {this.$slideTrack.find(".slick-active").attr({ "aria-hidden": "false" }).find("a, input, button, select").attr({ tabindex: "0" });}, e.prototype.addSlide = e.prototype.slickAdd = function (e, t, o) {var s = this;if ("boolean" == typeof t) o = t, t = null;else if (t < 0 || t >= s.slideCount) return !1;s.unload(), "number" == typeof t ? 0 === t && 0 === s.$slides.length ? i(e).appendTo(s.$slideTrack) : o ? i(e).insertBefore(s.$slides.eq(t)) : i(e).insertAfter(s.$slides.eq(t)) : !0 === o ? i(e).prependTo(s.$slideTrack) : i(e).appendTo(s.$slideTrack), s.$slides = s.$slideTrack.children(this.options.slide), s.$slideTrack.children(this.options.slide).detach(), s.$slideTrack.append(s.$slides), s.$slides.each(function (e, t) {i(t).attr("data-slick-index", e);}), s.$slidesCache = s.$slides, s.reinit();}, e.prototype.animateHeight = function () {var i = this;if (1 === i.options.slidesToShow && !0 === i.options.adaptiveHeight && !1 === i.options.vertical) {var e = i.$slides.eq(i.currentSlide).outerHeight(!0);i.$list.animate({ height: e }, i.options.speed);}}, e.prototype.animateSlide = function (e, t) {var o = {},s = this;s.animateHeight(), !0 === s.options.rtl && !1 === s.options.vertical && (e = -e), !1 === s.transformsEnabled ? !1 === s.options.vertical ? s.$slideTrack.animate({ left: e }, s.options.speed, s.options.easing, t) : s.$slideTrack.animate({ top: e }, s.options.speed, s.options.easing, t) : !1 === s.cssTransitions ? (!0 === s.options.rtl && (s.currentLeft = -s.currentLeft), i({ animStart: s.currentLeft }).animate({ animStart: e }, { duration: s.options.speed, easing: s.options.easing, step: function (i) {i = Math.ceil(i), !1 === s.options.vertical ? (o[s.animType] = "translate(" + i + "px, 0px)", s.$slideTrack.css(o)) : (o[s.animType] = "translate(0px," + i + "px)", s.$slideTrack.css(o));}, complete: function () {t && t.call();} })) : (s.applyTransition(), e = Math.ceil(e), !1 === s.options.vertical ? o[s.animType] = "translate3d(" + e + "px, 0px, 0px)" : o[s.animType] = "translate3d(0px," + e + "px, 0px)", s.$slideTrack.css(o), t && setTimeout(function () {s.disableTransition(), t.call();}, s.options.speed));}, e.prototype.getNavTarget = function () {var e = this,t = e.options.asNavFor;return t && null !== t && (t = i(t).not(e.$slider)), t;}, e.prototype.asNavFor = function (e) {var t = this.getNavTarget();null !== t && "object" == typeof t && t.each(function () {var t = i(this).slick("getSlick");t.unslicked || t.slideHandler(e, !0);});}, e.prototype.applyTransition = function (i) {var e = this,t = {};!1 === e.options.fade ? t[e.transitionType] = e.transformType + " " + e.options.speed + "ms " + e.options.cssEase : t[e.transitionType] = "opacity " + e.options.speed + "ms " + e.options.cssEase, !1 === e.options.fade ? e.$slideTrack.css(t) : e.$slides.eq(i).css(t);}, e.prototype.autoPlay = function () {var i = this;i.autoPlayClear(), i.slideCount > i.options.slidesToShow && (i.autoPlayTimer = setInterval(i.autoPlayIterator, i.options.autoplaySpeed));}, e.prototype.autoPlayClear = function () {var i = this;i.autoPlayTimer && clearInterval(i.autoPlayTimer);}, e.prototype.autoPlayIterator = function () {var i = this,e = i.currentSlide + i.options.slidesToScroll;i.paused || i.interrupted || i.focussed || (!1 === i.options.infinite && (1 === i.direction && i.currentSlide + 1 === i.slideCount - 1 ? i.direction = 0 : 0 === i.direction && (e = i.currentSlide - i.options.slidesToScroll, i.currentSlide - 1 == 0 && (i.direction = 1))), i.slideHandler(e));}, e.prototype.buildArrows = function () {var e = this;!0 === e.options.arrows && (e.$prevArrow = i(e.options.prevArrow).addClass("slick-arrow"), e.$nextArrow = i(e.options.nextArrow).addClass("slick-arrow"), e.slideCount > e.options.slidesToShow ? (e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), e.htmlExpr.test(e.options.prevArrow) && e.$prevArrow.prependTo(e.options.appendArrows), e.htmlExpr.test(e.options.nextArrow) && e.$nextArrow.appendTo(e.options.appendArrows), !0 !== e.options.infinite && e.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true")) : e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({ "aria-disabled": "true", tabindex: "-1" }));}, e.prototype.buildDots = function () {var e,t,o = this;if (!0 === o.options.dots) {for (o.$slider.addClass("slick-dotted"), t = i("<ul />").addClass(o.options.dotsClass), e = 0; e <= o.getDotCount(); e += 1) t.append(i("<li />").append(o.options.customPaging.call(this, o, e)));o.$dots = t.appendTo(o.options.appendDots), o.$dots.find("li").first().addClass("slick-active");}}, e.prototype.buildOut = function () {var e = this;e.$slides = e.$slider.children(e.options.slide + ":not(.slick-cloned)").addClass("slick-slide"), e.slideCount = e.$slides.length, e.$slides.each(function (e, t) {i(t).attr("data-slick-index", e).data("originalStyling", i(t).attr("style") || "");}), e.$slider.addClass("slick-slider"), e.$slideTrack = 0 === e.slideCount ? i('<div class="slick-track"/>').appendTo(e.$slider) : e.$slides.wrapAll('<div class="slick-track"/>').parent(), e.$list = e.$slideTrack.wrap('<div class="slick-list"/>').parent(), e.$slideTrack.css("opacity", 0), !0 !== e.options.centerMode && !0 !== e.options.swipeToSlide || (e.options.slidesToScroll = 1), i("img[data-lazy]", e.$slider).not("[src]").addClass("slick-loading"), e.setupInfinite(), e.buildArrows(), e.buildDots(), e.updateDots(), e.setSlideClasses("number" == typeof e.currentSlide ? e.currentSlide : 0), !0 === e.options.draggable && e.$list.addClass("draggable");}, e.prototype.buildRows = function () {var i,e,t,o,s,n,r,l = this;if (o = document.createDocumentFragment(), n = l.$slider.children(), l.options.rows > 1) {for (r = l.options.slidesPerRow * l.options.rows, s = Math.ceil(n.length / r), i = 0; i < s; i++) {var d = document.createElement("div");for (e = 0; e < l.options.rows; e++) {var a = document.createElement("div");for (t = 0; t < l.options.slidesPerRow; t++) {var c = i * r + (e * l.options.slidesPerRow + t);n.get(c) && a.appendChild(n.get(c));}d.appendChild(a);}o.appendChild(d);}l.$slider.empty().append(o), l.$slider.children().children().children().css({ width: 100 / l.options.slidesPerRow + "%", display: "inline-block" });}}, e.prototype.checkResponsive = function (e, t) {var o,s,n,r = this,l = !1,d = r.$slider.width(),a = window.innerWidth || i(window).width();if ("window" === r.respondTo ? n = a : "slider" === r.respondTo ? n = d : "min" === r.respondTo && (n = Math.min(a, d)), r.options.responsive && r.options.responsive.length && null !== r.options.responsive) {s = null;for (o in r.breakpoints) r.breakpoints.hasOwnProperty(o) && (!1 === r.originalSettings.mobileFirst ? n < r.breakpoints[o] && (s = r.breakpoints[o]) : n > r.breakpoints[o] && (s = r.breakpoints[o]));null !== s ? null !== r.activeBreakpoint ? (s !== r.activeBreakpoint || t) && (r.activeBreakpoint = s, "unslick" === r.breakpointSettings[s] ? r.unslick(s) : (r.options = i.extend({}, r.originalSettings, r.breakpointSettings[s]), !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e)), l = s) : (r.activeBreakpoint = s, "unslick" === r.breakpointSettings[s] ? r.unslick(s) : (r.options = i.extend({}, r.originalSettings, r.breakpointSettings[s]), !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e)), l = s) : null !== r.activeBreakpoint && (r.activeBreakpoint = null, r.options = r.originalSettings, !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e), l = s), e || !1 === l || r.$slider.trigger("breakpoint", [r, l]);}}, e.prototype.changeSlide = function (e, t) {var o,s,n,r = this,l = i(e.currentTarget);switch (l.is("a") && e.preventDefault(), l.is("li") || (l = l.closest("li")), n = r.slideCount % r.options.slidesToScroll != 0, o = n ? 0 : (r.slideCount - r.currentSlide) % r.options.slidesToScroll, e.data.message) {case "previous":s = 0 === o ? r.options.slidesToScroll : r.options.slidesToShow - o, r.slideCount > r.options.slidesToShow && r.slideHandler(r.currentSlide - s, !1, t);break;case "next":s = 0 === o ? r.options.slidesToScroll : o, r.slideCount > r.options.slidesToShow && r.slideHandler(r.currentSlide + s, !1, t);break;case "index":var d = 0 === e.data.index ? 0 : e.data.index || l.index() * r.options.slidesToScroll;r.slideHandler(r.checkNavigable(d), !1, t), l.children().trigger("focus");break;default:return;}}, e.prototype.checkNavigable = function (i) {var e, t;if (e = this.getNavigableIndexes(), t = 0, i > e[e.length - 1]) i = e[e.length - 1];else for (var o in e) {if (i < e[o]) {i = t;break;}t = e[o];}return i;}, e.prototype.cleanUpEvents = function () {var e = this;e.options.dots && null !== e.$dots && (i("li", e.$dots).off("click.slick", e.changeSlide).off("mouseenter.slick", i.proxy(e.interrupt, e, !0)).off("mouseleave.slick", i.proxy(e.interrupt, e, !1)), !0 === e.options.accessibility && e.$dots.off("keydown.slick", e.keyHandler)), e.$slider.off("focus.slick blur.slick"), !0 === e.options.arrows && e.slideCount > e.options.slidesToShow && (e.$prevArrow && e.$prevArrow.off("click.slick", e.changeSlide), e.$nextArrow && e.$nextArrow.off("click.slick", e.changeSlide), !0 === e.options.accessibility && (e.$prevArrow && e.$prevArrow.off("keydown.slick", e.keyHandler), e.$nextArrow && e.$nextArrow.off("keydown.slick", e.keyHandler))), e.$list.off("touchstart.slick mousedown.slick", e.swipeHandler), e.$list.off("touchmove.slick mousemove.slick", e.swipeHandler), e.$list.off("touchend.slick mouseup.slick", e.swipeHandler), e.$list.off("touchcancel.slick mouseleave.slick", e.swipeHandler), e.$list.off("click.slick", e.clickHandler), i(document).off(e.visibilityChange, e.visibility), e.cleanUpSlideEvents(), !0 === e.options.accessibility && e.$list.off("keydown.slick", e.keyHandler), !0 === e.options.focusOnSelect && i(e.$slideTrack).children().off("click.slick", e.selectHandler), i(window).off("orientationchange.slick.slick-" + e.instanceUid, e.orientationChange), i(window).off("resize.slick.slick-" + e.instanceUid, e.resize), i("[draggable!=true]", e.$slideTrack).off("dragstart", e.preventDefault), i(window).off("load.slick.slick-" + e.instanceUid, e.setPosition);}, e.prototype.cleanUpSlideEvents = function () {var e = this;e.$list.off("mouseenter.slick", i.proxy(e.interrupt, e, !0)), e.$list.off("mouseleave.slick", i.proxy(e.interrupt, e, !1));}, e.prototype.cleanUpRows = function () {var i,e = this;e.options.rows > 1 && ((i = e.$slides.children().children()).removeAttr("style"), e.$slider.empty().append(i));}, e.prototype.clickHandler = function (i) {!1 === this.shouldClick && (i.stopImmediatePropagation(), i.stopPropagation(), i.preventDefault());}, e.prototype.destroy = function (e) {var t = this;t.autoPlayClear(), t.touchObject = {}, t.cleanUpEvents(), i(".slick-cloned", t.$slider).detach(), t.$dots && t.$dots.remove(), t.$prevArrow && t.$prevArrow.length && (t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), t.htmlExpr.test(t.options.prevArrow) && t.$prevArrow.remove()), t.$nextArrow && t.$nextArrow.length && (t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), t.htmlExpr.test(t.options.nextArrow) && t.$nextArrow.remove()), t.$slides && (t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function () {i(this).attr("style", i(this).data("originalStyling"));}), t.$slideTrack.children(this.options.slide).detach(), t.$slideTrack.detach(), t.$list.detach(), t.$slider.append(t.$slides)), t.cleanUpRows(), t.$slider.removeClass("slick-slider"), t.$slider.removeClass("slick-initialized"), t.$slider.removeClass("slick-dotted"), t.unslicked = !0, e || t.$slider.trigger("destroy", [t]);}, e.prototype.disableTransition = function (i) {var e = this,t = {};t[e.transitionType] = "", !1 === e.options.fade ? e.$slideTrack.css(t) : e.$slides.eq(i).css(t);}, e.prototype.fadeSlide = function (i, e) {var t = this;!1 === t.cssTransitions ? (t.$slides.eq(i).css({ zIndex: t.options.zIndex }), t.$slides.eq(i).animate({ opacity: 1 }, t.options.speed, t.options.easing, e)) : (t.applyTransition(i), t.$slides.eq(i).css({ opacity: 1, zIndex: t.options.zIndex }), e && setTimeout(function () {t.disableTransition(i), e.call();}, t.options.speed));}, e.prototype.fadeSlideOut = function (i) {var e = this;!1 === e.cssTransitions ? e.$slides.eq(i).animate({ opacity: 0, zIndex: e.options.zIndex - 2 }, e.options.speed, e.options.easing) : (e.applyTransition(i), e.$slides.eq(i).css({ opacity: 0, zIndex: e.options.zIndex - 2 }));}, e.prototype.filterSlides = e.prototype.slickFilter = function (i) {var e = this;null !== i && (e.$slidesCache = e.$slides, e.unload(), e.$slideTrack.children(this.options.slide).detach(), e.$slidesCache.filter(i).appendTo(e.$slideTrack), e.reinit());}, e.prototype.focusHandler = function () {var e = this;e.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick", "*", function (t) {t.stopImmediatePropagation();var o = i(this);setTimeout(function () {e.options.pauseOnFocus && (e.focussed = o.is(":focus"), e.autoPlay());}, 0);});}, e.prototype.getCurrent = e.prototype.slickCurrentSlide = function () {return this.currentSlide;}, e.prototype.getDotCount = function () {var i = this,e = 0,t = 0,o = 0;if (!0 === i.options.infinite) {if (i.slideCount <= i.options.slidesToShow) ++o;else for (; e < i.slideCount;) ++o, e = t + i.options.slidesToScroll, t += i.options.slidesToScroll <= i.options.slidesToShow ? i.options.slidesToScroll : i.options.slidesToShow;} else if (!0 === i.options.centerMode) o = i.slideCount;else if (i.options.asNavFor) for (; e < i.slideCount;) ++o, e = t + i.options.slidesToScroll, t += i.options.slidesToScroll <= i.options.slidesToShow ? i.options.slidesToScroll : i.options.slidesToShow;else o = 1 + Math.ceil((i.slideCount - i.options.slidesToShow) / i.options.slidesToScroll);return o - 1;}, e.prototype.getLeft = function (i) {var e,t,o,s,n = this,r = 0;return n.slideOffset = 0, t = n.$slides.first().outerHeight(!0), !0 === n.options.infinite ? (n.slideCount > n.options.slidesToShow && (n.slideOffset = n.slideWidth * n.options.slidesToShow * -1, s = -1, !0 === n.options.vertical && !0 === n.options.centerMode && (2 === n.options.slidesToShow ? s = -1.5 : 1 === n.options.slidesToShow && (s = -2)), r = t * n.options.slidesToShow * s), n.slideCount % n.options.slidesToScroll != 0 && i + n.options.slidesToScroll > n.slideCount && n.slideCount > n.options.slidesToShow && (i > n.slideCount ? (n.slideOffset = (n.options.slidesToShow - (i - n.slideCount)) * n.slideWidth * -1, r = (n.options.slidesToShow - (i - n.slideCount)) * t * -1) : (n.slideOffset = n.slideCount % n.options.slidesToScroll * n.slideWidth * -1, r = n.slideCount % n.options.slidesToScroll * t * -1))) : i + n.options.slidesToShow > n.slideCount && (n.slideOffset = (i + n.options.slidesToShow - n.slideCount) * n.slideWidth, r = (i + n.options.slidesToShow - n.slideCount) * t), n.slideCount <= n.options.slidesToShow && (n.slideOffset = 0, r = 0), !0 === n.options.centerMode && n.slideCount <= n.options.slidesToShow ? n.slideOffset = n.slideWidth * Math.floor(n.options.slidesToShow) / 2 - n.slideWidth * n.slideCount / 2 : !0 === n.options.centerMode && !0 === n.options.infinite ? n.slideOffset += n.slideWidth * Math.floor(n.options.slidesToShow / 2) - n.slideWidth : !0 === n.options.centerMode && (n.slideOffset = 0, n.slideOffset += n.slideWidth * Math.floor(n.options.slidesToShow / 2)), e = !1 === n.options.vertical ? i * n.slideWidth * -1 + n.slideOffset : i * t * -1 + r, !0 === n.options.variableWidth && (o = n.slideCount <= n.options.slidesToShow || !1 === n.options.infinite ? n.$slideTrack.children(".slick-slide").eq(i) : n.$slideTrack.children(".slick-slide").eq(i + n.options.slidesToShow), e = !0 === n.options.rtl ? o[0] ? -1 * (n.$slideTrack.width() - o[0].offsetLeft - o.width()) : 0 : o[0] ? -1 * o[0].offsetLeft : 0, !0 === n.options.centerMode && (o = n.slideCount <= n.options.slidesToShow || !1 === n.options.infinite ? n.$slideTrack.children(".slick-slide").eq(i) : n.$slideTrack.children(".slick-slide").eq(i + n.options.slidesToShow + 1), e = !0 === n.options.rtl ? o[0] ? -1 * (n.$slideTrack.width() - o[0].offsetLeft - o.width()) : 0 : o[0] ? -1 * o[0].offsetLeft : 0, e += (n.$list.width() - o.outerWidth()) / 2)), e;}, e.prototype.getOption = e.prototype.slickGetOption = function (i) {return this.options[i];}, e.prototype.getNavigableIndexes = function () {var i,e = this,t = 0,o = 0,s = [];for (!1 === e.options.infinite ? i = e.slideCount : (t = -1 * e.options.slidesToScroll, o = -1 * e.options.slidesToScroll, i = 2 * e.slideCount); t < i;) s.push(t), t = o + e.options.slidesToScroll, o += e.options.slidesToScroll <= e.options.slidesToShow ? e.options.slidesToScroll : e.options.slidesToShow;return s;}, e.prototype.getSlick = function () {return this;}, e.prototype.getSlideCount = function () {var e,t,o = this;return t = !0 === o.options.centerMode ? o.slideWidth * Math.floor(o.options.slidesToShow / 2) : 0, !0 === o.options.swipeToSlide ? (o.$slideTrack.find(".slick-slide").each(function (s, n) {if (n.offsetLeft - t + i(n).outerWidth() / 2 > -1 * o.swipeLeft) return e = n, !1;}), Math.abs(i(e).attr("data-slick-index") - o.currentSlide) || 1) : o.options.slidesToScroll;}, e.prototype.goTo = e.prototype.slickGoTo = function (i, e) {this.changeSlide({ data: { message: "index", index: parseInt(i) } }, e);}, e.prototype.init = function (e) {var t = this;i(t.$slider).hasClass("slick-initialized") || (i(t.$slider).addClass("slick-initialized"), t.buildRows(), t.buildOut(), t.setProps(), t.startLoad(), t.loadSlider(), t.initializeEvents(), t.updateArrows(), t.updateDots(), t.checkResponsive(!0), t.focusHandler()), e && t.$slider.trigger("init", [t]), !0 === t.options.accessibility && t.initADA(), t.options.autoplay && (t.paused = !1, t.autoPlay());}, e.prototype.initADA = function () {var e = this,t = Math.ceil(e.slideCount / e.options.slidesToShow),o = e.getNavigableIndexes().filter(function (i) {return i >= 0 && i < e.slideCount;});e.$slides.add(e.$slideTrack.find(".slick-cloned")).attr({ "aria-hidden": "true", tabindex: "-1" }).find("a, input, button, select").attr({ tabindex: "-1" }), null !== e.$dots && (e.$slides.not(e.$slideTrack.find(".slick-cloned")).each(function (t) {var s = o.indexOf(t);i(this).attr({ role: "tabpanel", id: "slick-slide" + e.instanceUid + t, tabindex: -1 }), -1 !== s && i(this).attr({ "aria-describedby": "slick-slide-control" + e.instanceUid + s });}), e.$dots.attr("role", "tablist").find("li").each(function (s) {var n = o[s];i(this).attr({ role: "presentation" }), i(this).find("button").first().attr({ role: "tab", id: "slick-slide-control" + e.instanceUid + s, "aria-controls": "slick-slide" + e.instanceUid + n, "aria-label": s + 1 + " of " + t, "aria-selected": null, tabindex: "-1" });}).eq(e.currentSlide).find("button").attr({ "aria-selected": "true", tabindex: "0" }).end());for (var s = e.currentSlide, n = s + e.options.slidesToShow; s < n; s++) e.$slides.eq(s).attr("tabindex", 0);e.activateADA();}, e.prototype.initArrowEvents = function () {var i = this;!0 === i.options.arrows && i.slideCount > i.options.slidesToShow && (i.$prevArrow.off("click.slick").on("click.slick", { message: "previous" }, i.changeSlide), i.$nextArrow.off("click.slick").on("click.slick", { message: "next" }, i.changeSlide), !0 === i.options.accessibility && (i.$prevArrow.on("keydown.slick", i.keyHandler), i.$nextArrow.on("keydown.slick", i.keyHandler)));}, e.prototype.initDotEvents = function () {var e = this;!0 === e.options.dots && (i("li", e.$dots).on("click.slick", { message: "index" }, e.changeSlide), !0 === e.options.accessibility && e.$dots.on("keydown.slick", e.keyHandler)), !0 === e.options.dots && !0 === e.options.pauseOnDotsHover && i("li", e.$dots).on("mouseenter.slick", i.proxy(e.interrupt, e, !0)).on("mouseleave.slick", i.proxy(e.interrupt, e, !1));}, e.prototype.initSlideEvents = function () {var e = this;e.options.pauseOnHover && (e.$list.on("mouseenter.slick", i.proxy(e.interrupt, e, !0)), e.$list.on("mouseleave.slick", i.proxy(e.interrupt, e, !1)));}, e.prototype.initializeEvents = function () {var e = this;e.initArrowEvents(), e.initDotEvents(), e.initSlideEvents(), e.$list.on("touchstart.slick mousedown.slick", { action: "start" }, e.swipeHandler), e.$list.on("touchmove.slick mousemove.slick", { action: "move" }, e.swipeHandler), e.$list.on("touchend.slick mouseup.slick", { action: "end" }, e.swipeHandler), e.$list.on("touchcancel.slick mouseleave.slick", { action: "end" }, e.swipeHandler), e.$list.on("click.slick", e.clickHandler), i(document).on(e.visibilityChange, i.proxy(e.visibility, e)), !0 === e.options.accessibility && e.$list.on("keydown.slick", e.keyHandler), !0 === e.options.focusOnSelect && i(e.$slideTrack).children().on("click.slick", e.selectHandler), i(window).on("orientationchange.slick.slick-" + e.instanceUid, i.proxy(e.orientationChange, e)), i(window).on("resize.slick.slick-" + e.instanceUid, i.proxy(e.resize, e)), i("[draggable!=true]", e.$slideTrack).on("dragstart", e.preventDefault), i(window).on("load.slick.slick-" + e.instanceUid, e.setPosition), i(e.setPosition);}, e.prototype.initUI = function () {var i = this;!0 === i.options.arrows && i.slideCount > i.options.slidesToShow && (i.$prevArrow.show(), i.$nextArrow.show()), !0 === i.options.dots && i.slideCount > i.options.slidesToShow && i.$dots.show();}, e.prototype.keyHandler = function (i) {var e = this;i.target.tagName.match("TEXTAREA|INPUT|SELECT") || (37 === i.keyCode && !0 === e.options.accessibility ? e.changeSlide({ data: { message: !0 === e.options.rtl ? "next" : "previous" } }) : 39 === i.keyCode && !0 === e.options.accessibility && e.changeSlide({ data: { message: !0 === e.options.rtl ? "previous" : "next" } }));}, e.prototype.lazyLoad = function () {function e(e) {i("img[data-lazy]", e).each(function () {var e = i(this),t = i(this).attr("data-lazy"),o = i(this).attr("data-srcset"),s = i(this).attr("data-sizes") || n.$slider.attr("data-sizes"),r = document.createElement("img");r.onload = function () {e.animate({ opacity: 0 }, 100, function () {o && (e.attr("srcset", o), s && e.attr("sizes", s)), e.attr("src", t).animate({ opacity: 1 }, 200, function () {e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading");}), n.$slider.trigger("lazyLoaded", [n, e, t]);});}, r.onerror = function () {e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), n.$slider.trigger("lazyLoadError", [n, e, t]);}, r.src = t;});}var t,o,s,n = this;if (!0 === n.options.centerMode ? !0 === n.options.infinite ? s = (o = n.currentSlide + (n.options.slidesToShow / 2 + 1)) + n.options.slidesToShow + 2 : (o = Math.max(0, n.currentSlide - (n.options.slidesToShow / 2 + 1)), s = n.options.slidesToShow / 2 + 1 + 2 + n.currentSlide) : (o = n.options.infinite ? n.options.slidesToShow + n.currentSlide : n.currentSlide, s = Math.ceil(o + n.options.slidesToShow), !0 === n.options.fade && (o > 0 && o--, s <= n.slideCount && s++)), t = n.$slider.find(".slick-slide").slice(o, s), "anticipated" === n.options.lazyLoad) for (var r = o - 1, l = s, d = n.$slider.find(".slick-slide"), a = 0; a < n.options.slidesToScroll; a++) r < 0 && (r = n.slideCount - 1), t = (t = t.add(d.eq(r))).add(d.eq(l)), r--, l++;e(t), n.slideCount <= n.options.slidesToShow ? e(n.$slider.find(".slick-slide")) : n.currentSlide >= n.slideCount - n.options.slidesToShow ? e(n.$slider.find(".slick-cloned").slice(0, n.options.slidesToShow)) : 0 === n.currentSlide && e(n.$slider.find(".slick-cloned").slice(-1 * n.options.slidesToShow));}, e.prototype.loadSlider = function () {var i = this;i.setPosition(), i.$slideTrack.css({ opacity: 1 }), i.$slider.removeClass("slick-loading"), i.initUI(), "progressive" === i.options.lazyLoad && i.progressiveLazyLoad();}, e.prototype.next = e.prototype.slickNext = function () {this.changeSlide({ data: { message: "next" } });}, e.prototype.orientationChange = function () {var i = this;i.checkResponsive(), i.setPosition();}, e.prototype.pause = e.prototype.slickPause = function () {var i = this;i.autoPlayClear(), i.paused = !0;}, e.prototype.play = e.prototype.slickPlay = function () {var i = this;i.autoPlay(), i.options.autoplay = !0, i.paused = !1, i.focussed = !1, i.interrupted = !1;}, e.prototype.postSlide = function (e) {var t = this;t.unslicked || (t.$slider.trigger("afterChange", [t, e]), t.animating = !1, t.slideCount > t.options.slidesToShow && t.setPosition(), t.swipeLeft = null, t.options.autoplay && t.autoPlay(), !0 === t.options.accessibility && (t.initADA(), t.options.focusOnChange && i(t.$slides.get(t.currentSlide)).attr("tabindex", 0).focus()));}, e.prototype.prev = e.prototype.slickPrev = function () {this.changeSlide({ data: { message: "previous" } });}, e.prototype.preventDefault = function (i) {i.preventDefault();}, e.prototype.progressiveLazyLoad = function (e) {e = e || 1;var t,o,s,n,r,l = this,d = i("img[data-lazy]", l.$slider);d.length ? (t = d.first(), o = t.attr("data-lazy"), s = t.attr("data-srcset"), n = t.attr("data-sizes") || l.$slider.attr("data-sizes"), (r = document.createElement("img")).onload = function () {s && (t.attr("srcset", s), n && t.attr("sizes", n)), t.attr("src", o).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"), !0 === l.options.adaptiveHeight && l.setPosition(), l.$slider.trigger("lazyLoaded", [l, t, o]), l.progressiveLazyLoad();}, r.onerror = function () {e < 3 ? setTimeout(function () {l.progressiveLazyLoad(e + 1);}, 500) : (t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), l.$slider.trigger("lazyLoadError", [l, t, o]), l.progressiveLazyLoad());}, r.src = o) : l.$slider.trigger("allImagesLoaded", [l]);}, e.prototype.refresh = function (e) {var t,o,s = this;o = s.slideCount - s.options.slidesToShow, !s.options.infinite && s.currentSlide > o && (s.currentSlide = o), s.slideCount <= s.options.slidesToShow && (s.currentSlide = 0), t = s.currentSlide, s.destroy(!0), i.extend(s, s.initials, { currentSlide: t }), s.init(), e || s.changeSlide({ data: { message: "index", index: t } }, !1);}, e.prototype.registerBreakpoints = function () {var e,t,o,s = this,n = s.options.responsive || null;if ("array" === i.type(n) && n.length) {s.respondTo = s.options.respondTo || "window";for (e in n) if (o = s.breakpoints.length - 1, n.hasOwnProperty(e)) {for (t = n[e].breakpoint; o >= 0;) s.breakpoints[o] && s.breakpoints[o] === t && s.breakpoints.splice(o, 1), o--;s.breakpoints.push(t), s.breakpointSettings[t] = n[e].settings;}s.breakpoints.sort(function (i, e) {return s.options.mobileFirst ? i - e : e - i;});}}, e.prototype.reinit = function () {var e = this;e.$slides = e.$slideTrack.children(e.options.slide).addClass("slick-slide"), e.slideCount = e.$slides.length, e.currentSlide >= e.slideCount && 0 !== e.currentSlide && (e.currentSlide = e.currentSlide - e.options.slidesToScroll), e.slideCount <= e.options.slidesToShow && (e.currentSlide = 0), e.registerBreakpoints(), e.setProps(), e.setupInfinite(), e.buildArrows(), e.updateArrows(), e.initArrowEvents(), e.buildDots(), e.updateDots(), e.initDotEvents(), e.cleanUpSlideEvents(), e.initSlideEvents(), e.checkResponsive(!1, !0), !0 === e.options.focusOnSelect && i(e.$slideTrack).children().on("click.slick", e.selectHandler), e.setSlideClasses("number" == typeof e.currentSlide ? e.currentSlide : 0), e.setPosition(), e.focusHandler(), e.paused = !e.options.autoplay, e.autoPlay(), e.$slider.trigger("reInit", [e]);}, e.prototype.resize = function () {var e = this;i(window).width() !== e.windowWidth && (clearTimeout(e.windowDelay), e.windowDelay = window.setTimeout(function () {e.windowWidth = i(window).width(), e.checkResponsive(), e.unslicked || e.setPosition();}, 50));}, e.prototype.removeSlide = e.prototype.slickRemove = function (i, e, t) {var o = this;if (i = "boolean" == typeof i ? !0 === (e = i) ? 0 : o.slideCount - 1 : !0 === e ? --i : i, o.slideCount < 1 || i < 0 || i > o.slideCount - 1) return !1;o.unload(), !0 === t ? o.$slideTrack.children().remove() : o.$slideTrack.children(this.options.slide).eq(i).remove(), o.$slides = o.$slideTrack.children(this.options.slide), o.$slideTrack.children(this.options.slide).detach(), o.$slideTrack.append(o.$slides), o.$slidesCache = o.$slides, o.reinit();}, e.prototype.setCSS = function (i) {var e,t,o = this,s = {};!0 === o.options.rtl && (i = -i), e = "left" == o.positionProp ? Math.ceil(i) + "px" : "0px", t = "top" == o.positionProp ? Math.ceil(i) + "px" : "0px", s[o.positionProp] = i, !1 === o.transformsEnabled ? o.$slideTrack.css(s) : (s = {}, !1 === o.cssTransitions ? (s[o.animType] = "translate(" + e + ", " + t + ")", o.$slideTrack.css(s)) : (s[o.animType] = "translate3d(" + e + ", " + t + ", 0px)", o.$slideTrack.css(s)));}, e.prototype.setDimensions = function () {var i = this;!1 === i.options.vertical ? !0 === i.options.centerMode && i.$list.css({ padding: "0px " + i.options.centerPadding }) : (i.$list.height(i.$slides.first().outerHeight(!0) * i.options.slidesToShow), !0 === i.options.centerMode && i.$list.css({ padding: i.options.centerPadding + " 0px" })), i.listWidth = i.$list.width(), i.listHeight = i.$list.height(), !1 === i.options.vertical && !1 === i.options.variableWidth ? (i.slideWidth = Math.ceil(i.listWidth / i.options.slidesToShow), i.$slideTrack.width(Math.ceil(i.slideWidth * i.$slideTrack.children(".slick-slide").length))) : !0 === i.options.variableWidth ? i.$slideTrack.width(5e3 * i.slideCount) : (i.slideWidth = Math.ceil(i.listWidth), i.$slideTrack.height(Math.ceil(i.$slides.first().outerHeight(!0) * i.$slideTrack.children(".slick-slide").length)));var e = i.$slides.first().outerWidth(!0) - i.$slides.first().width();!1 === i.options.variableWidth && i.$slideTrack.children(".slick-slide").width(i.slideWidth - e);}, e.prototype.setFade = function () {var e,t = this;t.$slides.each(function (o, s) {e = t.slideWidth * o * -1, !0 === t.options.rtl ? i(s).css({ position: "relative", right: e, top: 0, zIndex: t.options.zIndex - 2, opacity: 0 }) : i(s).css({ position: "relative", left: e, top: 0, zIndex: t.options.zIndex - 2, opacity: 0 });}), t.$slides.eq(t.currentSlide).css({ zIndex: t.options.zIndex - 1, opacity: 1 });}, e.prototype.setHeight = function () {var i = this;if (1 === i.options.slidesToShow && !0 === i.options.adaptiveHeight && !1 === i.options.vertical) {var e = i.$slides.eq(i.currentSlide).outerHeight(!0);i.$list.css("height", e);}}, e.prototype.setOption = e.prototype.slickSetOption = function () {var e,t,o,s,n,r = this,l = !1;if ("object" === i.type(arguments[0]) ? (o = arguments[0], l = arguments[1], n = "multiple") : "string" === i.type(arguments[0]) && (o = arguments[0], s = arguments[1], l = arguments[2], "responsive" === arguments[0] && "array" === i.type(arguments[1]) ? n = "responsive" : void 0 !== arguments[1] && (n = "single")), "single" === n) r.options[o] = s;else if ("multiple" === n) i.each(o, function (i, e) {r.options[i] = e;});else if ("responsive" === n) for (t in s) if ("array" !== i.type(r.options.responsive)) r.options.responsive = [s[t]];else {for (e = r.options.responsive.length - 1; e >= 0;) r.options.responsive[e].breakpoint === s[t].breakpoint && r.options.responsive.splice(e, 1), e--;r.options.responsive.push(s[t]);}l && (r.unload(), r.reinit());}, e.prototype.setPosition = function () {var i = this;i.setDimensions(), i.setHeight(), !1 === i.options.fade ? i.setCSS(i.getLeft(i.currentSlide)) : i.setFade(), i.$slider.trigger("setPosition", [i]);}, e.prototype.setProps = function () {var i = this,e = document.body.style;i.positionProp = !0 === i.options.vertical ? "top" : "left", "top" === i.positionProp ? i.$slider.addClass("slick-vertical") : i.$slider.removeClass("slick-vertical"), void 0 === e.WebkitTransition && void 0 === e.MozTransition && void 0 === e.msTransition || !0 === i.options.useCSS && (i.cssTransitions = !0), i.options.fade && ("number" == typeof i.options.zIndex ? i.options.zIndex < 3 && (i.options.zIndex = 3) : i.options.zIndex = i.defaults.zIndex), void 0 !== e.OTransform && (i.animType = "OTransform", i.transformType = "-o-transform", i.transitionType = "OTransition", void 0 === e.perspectiveProperty && void 0 === e.webkitPerspective && (i.animType = !1)), void 0 !== e.MozTransform && (i.animType = "MozTransform", i.transformType = "-moz-transform", i.transitionType = "MozTransition", void 0 === e.perspectiveProperty && void 0 === e.MozPerspective && (i.animType = !1)), void 0 !== e.webkitTransform && (i.animType = "webkitTransform", i.transformType = "-webkit-transform", i.transitionType = "webkitTransition", void 0 === e.perspectiveProperty && void 0 === e.webkitPerspective && (i.animType = !1)), void 0 !== e.msTransform && (i.animType = "msTransform", i.transformType = "-ms-transform", i.transitionType = "msTransition", void 0 === e.msTransform && (i.animType = !1)), void 0 !== e.transform && !1 !== i.animType && (i.animType = "transform", i.transformType = "transform", i.transitionType = "transition"), i.transformsEnabled = i.options.useTransform && null !== i.animType && !1 !== i.animType;}, e.prototype.setSlideClasses = function (i) {var e,t,o,s,n = this;if (t = n.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true"), n.$slides.eq(i).addClass("slick-current"), !0 === n.options.centerMode) {var r = n.options.slidesToShow % 2 == 0 ? 1 : 0;e = Math.floor(n.options.slidesToShow / 2), !0 === n.options.infinite && (i >= e && i <= n.slideCount - 1 - e ? n.$slides.slice(i - e + r, i + e + 1).addClass("slick-active").attr("aria-hidden", "false") : (o = n.options.slidesToShow + i, t.slice(o - e + 1 + r, o + e + 2).addClass("slick-active").attr("aria-hidden", "false")), 0 === i ? t.eq(t.length - 1 - n.options.slidesToShow).addClass("slick-center") : i === n.slideCount - 1 && t.eq(n.options.slidesToShow).addClass("slick-center")), n.$slides.eq(i).addClass("slick-center");} else i >= 0 && i <= n.slideCount - n.options.slidesToShow ? n.$slides.slice(i, i + n.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false") : t.length <= n.options.slidesToShow ? t.addClass("slick-active").attr("aria-hidden", "false") : (s = n.slideCount % n.options.slidesToShow, o = !0 === n.options.infinite ? n.options.slidesToShow + i : i, n.options.slidesToShow == n.options.slidesToScroll && n.slideCount - i < n.options.slidesToShow ? t.slice(o - (n.options.slidesToShow - s), o + s).addClass("slick-active").attr("aria-hidden", "false") : t.slice(o, o + n.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false"));"ondemand" !== n.options.lazyLoad && "anticipated" !== n.options.lazyLoad || n.lazyLoad();}, e.prototype.setupInfinite = function () {var e,t,o,s = this;if (!0 === s.options.fade && (s.options.centerMode = !1), !0 === s.options.infinite && !1 === s.options.fade && (t = null, s.slideCount > s.options.slidesToShow)) {for (o = !0 === s.options.centerMode ? s.options.slidesToShow + 1 : s.options.slidesToShow, e = s.slideCount; e > s.slideCount - o; e -= 1) t = e - 1, i(s.$slides[t]).clone(!0).attr("id", "").attr("data-slick-index", t - s.slideCount).prependTo(s.$slideTrack).addClass("slick-cloned");for (e = 0; e < o + s.slideCount; e += 1) t = e, i(s.$slides[t]).clone(!0).attr("id", "").attr("data-slick-index", t + s.slideCount).appendTo(s.$slideTrack).addClass("slick-cloned");s.$slideTrack.find(".slick-cloned").find("[id]").each(function () {i(this).attr("id", "");});}}, e.prototype.interrupt = function (i) {var e = this;i || e.autoPlay(), e.interrupted = i;}, e.prototype.selectHandler = function (e) {var t = this,o = i(e.target).is(".slick-slide") ? i(e.target) : i(e.target).parents(".slick-slide"),s = parseInt(o.attr("data-slick-index"));s || (s = 0), t.slideCount <= t.options.slidesToShow ? t.slideHandler(s, !1, !0) : t.slideHandler(s);}, e.prototype.slideHandler = function (i, e, t) {var o,s,n,r,l,d = null,a = this;if (e = e || !1, !(!0 === a.animating && !0 === a.options.waitForAnimate || !0 === a.options.fade && a.currentSlide === i)) if (!1 === e && a.asNavFor(i), o = i, d = a.getLeft(o), r = a.getLeft(a.currentSlide), a.currentLeft = null === a.swipeLeft ? r : a.swipeLeft, !1 === a.options.infinite && !1 === a.options.centerMode && (i < 0 || i > a.getDotCount() * a.options.slidesToScroll)) !1 === a.options.fade && (o = a.currentSlide, !0 !== t ? a.animateSlide(r, function () {a.postSlide(o);}) : a.postSlide(o));else if (!1 === a.options.infinite && !0 === a.options.centerMode && (i < 0 || i > a.slideCount - a.options.slidesToScroll)) !1 === a.options.fade && (o = a.currentSlide, !0 !== t ? a.animateSlide(r, function () {a.postSlide(o);}) : a.postSlide(o));else {if (a.options.autoplay && clearInterval(a.autoPlayTimer), s = o < 0 ? a.slideCount % a.options.slidesToScroll != 0 ? a.slideCount - a.slideCount % a.options.slidesToScroll : a.slideCount + o : o >= a.slideCount ? a.slideCount % a.options.slidesToScroll != 0 ? 0 : o - a.slideCount : o, a.animating = !0, a.$slider.trigger("beforeChange", [a, a.currentSlide, s]), n = a.currentSlide, a.currentSlide = s, a.setSlideClasses(a.currentSlide), a.options.asNavFor && (l = (l = a.getNavTarget()).slick("getSlick")).slideCount <= l.options.slidesToShow && l.setSlideClasses(a.currentSlide), a.updateDots(), a.updateArrows(), !0 === a.options.fade) return !0 !== t ? (a.fadeSlideOut(n), a.fadeSlide(s, function () {a.postSlide(s);})) : a.postSlide(s), void a.animateHeight();!0 !== t ? a.animateSlide(d, function () {a.postSlide(s);}) : a.postSlide(s);}}, e.prototype.startLoad = function () {var i = this;!0 === i.options.arrows && i.slideCount > i.options.slidesToShow && (i.$prevArrow.hide(), i.$nextArrow.hide()), !0 === i.options.dots && i.slideCount > i.options.slidesToShow && i.$dots.hide(), i.$slider.addClass("slick-loading");}, e.prototype.swipeDirection = function () {var i,e,t,o,s = this;return i = s.touchObject.startX - s.touchObject.curX, e = s.touchObject.startY - s.touchObject.curY, t = Math.atan2(e, i), (o = Math.round(180 * t / Math.PI)) < 0 && (o = 360 - Math.abs(o)), o <= 45 && o >= 0 ? !1 === s.options.rtl ? "left" : "right" : o <= 360 && o >= 315 ? !1 === s.options.rtl ? "left" : "right" : o >= 135 && o <= 225 ? !1 === s.options.rtl ? "right" : "left" : !0 === s.options.verticalSwiping ? o >= 35 && o <= 135 ? "down" : "up" : "vertical";}, e.prototype.swipeEnd = function (i) {var e,t,o = this;if (o.dragging = !1, o.swiping = !1, o.scrolling) return o.scrolling = !1, !1;if (o.interrupted = !1, o.shouldClick = !(o.touchObject.swipeLength > 10), void 0 === o.touchObject.curX) return !1;if (!0 === o.touchObject.edgeHit && o.$slider.trigger("edge", [o, o.swipeDirection()]), o.touchObject.swipeLength >= o.touchObject.minSwipe) {switch (t = o.swipeDirection()) {case "left":case "down":e = o.options.swipeToSlide ? o.checkNavigable(o.currentSlide + o.getSlideCount()) : o.currentSlide + o.getSlideCount(), o.currentDirection = 0;break;case "right":case "up":e = o.options.swipeToSlide ? o.checkNavigable(o.currentSlide - o.getSlideCount()) : o.currentSlide - o.getSlideCount(), o.currentDirection = 1;}"vertical" != t && (o.slideHandler(e), o.touchObject = {}, o.$slider.trigger("swipe", [o, t]));} else o.touchObject.startX !== o.touchObject.curX && (o.slideHandler(o.currentSlide), o.touchObject = {});}, e.prototype.swipeHandler = function (i) {var e = this;if (!(!1 === e.options.swipe || "ontouchend" in document && !1 === e.options.swipe || !1 === e.options.draggable && -1 !== i.type.indexOf("mouse"))) switch (e.touchObject.fingerCount = i.originalEvent && void 0 !== i.originalEvent.touches ? i.originalEvent.touches.length : 1, e.touchObject.minSwipe = e.listWidth / e.options.touchThreshold, !0 === e.options.verticalSwiping && (e.touchObject.minSwipe = e.listHeight / e.options.touchThreshold), i.data.action) {case "start":e.swipeStart(i);break;case "move":e.swipeMove(i);break;case "end":e.swipeEnd(i);}}, e.prototype.swipeMove = function (i) {var e,t,o,s,n,r,l = this;return n = void 0 !== i.originalEvent ? i.originalEvent.touches : null, !(!l.dragging || l.scrolling || n && 1 !== n.length) && (e = l.getLeft(l.currentSlide), l.touchObject.curX = void 0 !== n ? n[0].pageX : i.clientX, l.touchObject.curY = void 0 !== n ? n[0].pageY : i.clientY, l.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(l.touchObject.curX - l.touchObject.startX, 2))), r = Math.round(Math.sqrt(Math.pow(l.touchObject.curY - l.touchObject.startY, 2))), !l.options.verticalSwiping && !l.swiping && r > 4 ? (l.scrolling = !0, !1) : (!0 === l.options.verticalSwiping && (l.touchObject.swipeLength = r), t = l.swipeDirection(), void 0 !== i.originalEvent && l.touchObject.swipeLength > 4 && (l.swiping = !0, i.preventDefault()), s = (!1 === l.options.rtl ? 1 : -1) * (l.touchObject.curX > l.touchObject.startX ? 1 : -1), !0 === l.options.verticalSwiping && (s = l.touchObject.curY > l.touchObject.startY ? 1 : -1), o = l.touchObject.swipeLength, l.touchObject.edgeHit = !1, !1 === l.options.infinite && (0 === l.currentSlide && "right" === t || l.currentSlide >= l.getDotCount() && "left" === t) && (o = l.touchObject.swipeLength * l.options.edgeFriction, l.touchObject.edgeHit = !0), !1 === l.options.vertical ? l.swipeLeft = e + o * s : l.swipeLeft = e + o * (l.$list.height() / l.listWidth) * s, !0 === l.options.verticalSwiping && (l.swipeLeft = e + o * s), !0 !== l.options.fade && !1 !== l.options.touchMove && (!0 === l.animating ? (l.swipeLeft = null, !1) : void l.setCSS(l.swipeLeft))));}, e.prototype.swipeStart = function (i) {var e,t = this;if (t.interrupted = !0, 1 !== t.touchObject.fingerCount || t.slideCount <= t.options.slidesToShow) return t.touchObject = {}, !1;void 0 !== i.originalEvent && void 0 !== i.originalEvent.touches && (e = i.originalEvent.touches[0]), t.touchObject.startX = t.touchObject.curX = void 0 !== e ? e.pageX : i.clientX, t.touchObject.startY = t.touchObject.curY = void 0 !== e ? e.pageY : i.clientY, t.dragging = !0;}, e.prototype.unfilterSlides = e.prototype.slickUnfilter = function () {var i = this;null !== i.$slidesCache && (i.unload(), i.$slideTrack.children(this.options.slide).detach(), i.$slidesCache.appendTo(i.$slideTrack), i.reinit());}, e.prototype.unload = function () {var e = this;i(".slick-cloned", e.$slider).remove(), e.$dots && e.$dots.remove(), e.$prevArrow && e.htmlExpr.test(e.options.prevArrow) && e.$prevArrow.remove(), e.$nextArrow && e.htmlExpr.test(e.options.nextArrow) && e.$nextArrow.remove(), e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "");}, e.prototype.unslick = function (i) {var e = this;e.$slider.trigger("unslick", [e, i]), e.destroy();}, e.prototype.updateArrows = function () {var i = this;Math.floor(i.options.slidesToShow / 2), !0 === i.options.arrows && i.slideCount > i.options.slidesToShow && !i.options.infinite && (i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), i.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), 0 === i.currentSlide ? (i.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true"), i.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : i.currentSlide >= i.slideCount - i.options.slidesToShow && !1 === i.options.centerMode ? (i.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : i.currentSlide >= i.slideCount - 1 && !0 === i.options.centerMode && (i.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")));}, e.prototype.updateDots = function () {var i = this;null !== i.$dots && (i.$dots.find("li").removeClass("slick-active").end(), i.$dots.find("li").eq(Math.floor(i.currentSlide / i.options.slidesToScroll)).addClass("slick-active"));}, e.prototype.visibility = function () {var i = this;i.options.autoplay && (document[i.hidden] ? i.interrupted = !0 : i.interrupted = !1);}, i.fn.slick = function () {var i,t,o = this,s = arguments[0],n = Array.prototype.slice.call(arguments, 1),r = o.length;for (i = 0; i < r; i++) if ("object" == typeof s || void 0 === s ? o[i].slick = new e(o[i], s) : t = o[i].slick[s].apply(o[i].slick, n), void 0 !== t) return t;return o;};});

/***/ }),

/***/ "./node_modules/what-input/dist/what-input.js":
/*!****************************************************!*\
  !*** ./node_modules/what-input/dist/what-input.js ***!
  \****************************************************/
/***/ (function(module) {

/**
 * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).
 * @version v4.3.1
 * @link https://github.com/ten1seven/what-input
 * @license MIT
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __nested_webpack_require_737__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_737__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__nested_webpack_require_737__.m = modules;

/******/ 	// expose the module cache
/******/ 	__nested_webpack_require_737__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__nested_webpack_require_737__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __nested_webpack_require_737__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function () {
	  /*
	   * variables
	   */

	  // last used input type
	  var currentInput = 'initial';

	  // last used input intent
	  var currentIntent = null;

	  // cache document.documentElement
	  var doc = document.documentElement;

	  // form input types
	  var formInputs = ['input', 'select', 'textarea'];

	  var functionList = [];

	  // list of modifier keys commonly used with the mouse and
	  // can be safely ignored to prevent false keyboard detection
	  var ignoreMap = [16, // shift
	  17, // control
	  18, // alt
	  91, // Windows key / left Apple cmd
	  93 // Windows menu / right Apple cmd
	  ];

	  // list of keys for which we change intent even for form inputs
	  var changeIntentMap = [9 // tab
	  ];

	  // mapping of events to input types
	  var inputMap = {
	    keydown: 'keyboard',
	    keyup: 'keyboard',
	    mousedown: 'mouse',
	    mousemove: 'mouse',
	    MSPointerDown: 'pointer',
	    MSPointerMove: 'pointer',
	    pointerdown: 'pointer',
	    pointermove: 'pointer',
	    touchstart: 'touch'
	  };

	  // array of all used input types
	  var inputTypes = [];

	  // boolean: true if touch buffer is active
	  var isBuffering = false;

	  // boolean: true if the page is being scrolled
	  var isScrolling = false;

	  // store current mouse position
	  var mousePos = {
	    x: null,
	    y: null
	  };

	  // map of IE 10 pointer events
	  var pointerMap = {
	    2: 'touch',
	    3: 'touch', // treat pen like touch
	    4: 'mouse'
	  };

	  var supportsPassive = false;

	  try {
	    var opts = Object.defineProperty({}, 'passive', {
	      get: function get() {
	        supportsPassive = true;
	      }
	    });

	    window.addEventListener('test', null, opts);
	  } catch (e) {}

	  /*
	   * set up
	   */

	  var setUp = function setUp() {
	    // add correct mouse wheel event mapping to `inputMap`
	    inputMap[detectWheel()] = 'mouse';

	    addListeners();
	    setInput();
	  };

	  /*
	   * events
	   */

	  var addListeners = function addListeners() {
	    // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding
	    // can only demonstrate potential, but not actual, interaction
	    // and are treated separately
	    var options = supportsPassive ? { passive: true } : false;

	    // pointer events (mouse, pen, touch)
	    if (window.PointerEvent) {
	      doc.addEventListener('pointerdown', updateInput);
	      doc.addEventListener('pointermove', setIntent);
	    } else if (window.MSPointerEvent) {
	      doc.addEventListener('MSPointerDown', updateInput);
	      doc.addEventListener('MSPointerMove', setIntent);
	    } else {
	      // mouse events
	      doc.addEventListener('mousedown', updateInput);
	      doc.addEventListener('mousemove', setIntent);

	      // touch events
	      if ('ontouchstart' in window) {
	        doc.addEventListener('touchstart', touchBuffer, options);
	        doc.addEventListener('touchend', touchBuffer);
	      }
	    }

	    // mouse wheel
	    doc.addEventListener(detectWheel(), setIntent, options);

	    // keyboard events
	    doc.addEventListener('keydown', updateInput);
	    doc.addEventListener('keyup', updateInput);
	  };

	  // checks conditions before updating new input
	  var updateInput = function updateInput(event) {
	    // only execute if the touch buffer timer isn't running
	    if (!isBuffering) {
	      var eventKey = event.which;
	      var value = inputMap[event.type];
	      if (value === 'pointer') value = pointerType(event);

	      if (currentInput !== value || currentIntent !== value) {
	        var activeElem = document.activeElement;
	        var activeInput = false;
	        var notFormInput = activeElem && activeElem.nodeName && formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1;

	        if (notFormInput || changeIntentMap.indexOf(eventKey) !== -1) {
	          activeInput = true;
	        }

	        if (value === 'touch' ||
	        // ignore mouse modifier keys
	        value === 'mouse' ||
	        // don't switch if the current element is a form input
	        value === 'keyboard' && eventKey && activeInput && ignoreMap.indexOf(eventKey) === -1) {
	          // set the current and catch-all variable
	          currentInput = currentIntent = value;

	          setInput();
	        }
	      }
	    }
	  };

	  // updates the doc and `inputTypes` array with new input
	  var setInput = function setInput() {
	    doc.setAttribute('data-whatinput', currentInput);
	    doc.setAttribute('data-whatintent', currentInput);

	    if (inputTypes.indexOf(currentInput) === -1) {
	      inputTypes.push(currentInput);
	      doc.className += ' whatinput-types-' + currentInput;
	    }

	    fireFunctions('input');
	  };

	  // updates input intent for `mousemove` and `pointermove`
	  var setIntent = function setIntent(event) {
	    // test to see if `mousemove` happened relative to the screen
	    // to detect scrolling versus mousemove
	    if (mousePos['x'] !== event.screenX || mousePos['y'] !== event.screenY) {
	      isScrolling = false;

	      mousePos['x'] = event.screenX;
	      mousePos['y'] = event.screenY;
	    } else {
	      isScrolling = true;
	    }

	    // only execute if the touch buffer timer isn't running
	    // or scrolling isn't happening
	    if (!isBuffering && !isScrolling) {
	      var value = inputMap[event.type];
	      if (value === 'pointer') value = pointerType(event);

	      if (currentIntent !== value) {
	        currentIntent = value;

	        doc.setAttribute('data-whatintent', currentIntent);

	        fireFunctions('intent');
	      }
	    }
	  };

	  // buffers touch events because they frequently also fire mouse events
	  var touchBuffer = function touchBuffer(event) {
	    if (event.type === 'touchstart') {
	      isBuffering = false;

	      // set the current input
	      updateInput(event);
	    } else {
	      isBuffering = true;
	    }
	  };

	  var fireFunctions = function fireFunctions(type) {
	    for (var i = 0, len = functionList.length; i < len; i++) {
	      if (functionList[i].type === type) {
	        functionList[i].fn.call(undefined, currentIntent);
	      }
	    }
	  };

	  /*
	   * utilities
	   */

	  var pointerType = function pointerType(event) {
	    if (typeof event.pointerType === 'number') {
	      return pointerMap[event.pointerType];
	    } else {
	      // treat pen like touch
	      return event.pointerType === 'pen' ? 'touch' : event.pointerType;
	    }
	  };

	  // detect version of mouse wheel event to use
	  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel
	  var detectWheel = function detectWheel() {
	    var wheelType = void 0;

	    // Modern browsers support "wheel"
	    if ('onwheel' in document.createElement('div')) {
	      wheelType = 'wheel';
	    } else {
	      // Webkit and IE support at least "mousewheel"
	      // or assume that remaining browsers are older Firefox
	      wheelType = document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';
	    }

	    return wheelType;
	  };

	  var objPos = function objPos(match) {
	    for (var i = 0, len = functionList.length; i < len; i++) {
	      if (functionList[i].fn === match) {
	        return i;
	      }
	    }
	  };

	  /*
	   * init
	   */

	  // don't start script unless browser cuts the mustard
	  // (also passes if polyfills are used)
	  if ('addEventListener' in window && Array.prototype.indexOf) {
	    setUp();
	  }

	  /*
	   * api
	   */

	  return {
	    // returns string: the current input type
	    // opt: 'loose'|'strict'
	    // 'strict' (default): returns the same value as the `data-whatinput` attribute
	    // 'loose': includes `data-whatintent` value if it's more current than `data-whatinput`
	    ask: function ask(opt) {
	      return opt === 'loose' ? currentIntent : currentInput;
	    },

	    // returns array: all the detected input types
	    types: function types() {
	      return inputTypes;
	    },

	    // overwrites ignored keys with provided array
	    ignoreKeys: function ignoreKeys(arr) {
	      ignoreMap = arr;
	    },

	    // attach functions to input and intent "events"
	    // funct: function to fire on change
	    // eventType: 'input'|'intent'
	    registerOnChange: function registerOnChange(fn, eventType) {
	      functionList.push({
	        fn: fn,
	        type: eventType || 'input'
	      });
	    },

	    unRegisterOnChange: function unRegisterOnChange(fn) {
	      var position = objPos(fn);

	      if (position) {
	        functionList.splice(position, 1);
	      }
	    }
	  };
	}();

/***/ }
/******/ ])
});
;

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/***/ (function(module) {

"use strict";
module.exports = jQuery;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";
/*!*******************************!*\
  !*** ./src/assets/js/main.js ***!
  \*******************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var what_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! what-input */ "./node_modules/what-input/dist/what-input.js");
/* harmony import */ var what_input__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(what_input__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _lib_slick_min__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/slick.min */ "./src/assets/js/lib/slick.min.js");
/* harmony import */ var _lib_slick_min__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_lib_slick_min__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _bootstrap_bootstrap_bundle_min__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bootstrap/bootstrap.bundle.min */ "./src/assets/js/bootstrap/bootstrap.bundle.min.js");
/* harmony import */ var _bootstrap_bootstrap_bundle_min__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_bootstrap_bootstrap_bundle_min__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _components_select2_min__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/select2.min */ "./src/assets/js/components/select2.min.js");
/* harmony import */ var _components_select2_min__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_components_select2_min__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _components_main__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/main */ "./src/assets/js/components/main.js");
/* harmony import */ var _components_main__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_components_main__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _components_custom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/custom */ "./src/assets/js/components/custom.js");
/* harmony import */ var _components_custom__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_components_custom__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _components_podcastMedia__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/podcastMedia */ "./src/assets/js/components/podcastMedia.js");
/* harmony import */ var _components_podcastMedia__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_components_podcastMedia__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _components_chat__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/chat */ "./src/assets/js/components/chat.js");
/* harmony import */ var _components_chat__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_components_chat__WEBPACK_IMPORTED_MODULE_8__);



window.$ = (jquery__WEBPACK_IMPORTED_MODULE_0___default());

// lib



// Bootstrap 5

// components





}();
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnREFBZ0QsU0FBUztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxnREFBZ0QsU0FBUztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLE1BQU07O0FBRU47QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsQ0FBQztBQUNEOzs7Ozs7Ozs7OztBQzNYQTs7Ozs7O1VDQUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTs7VUFFQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTs7Ozs7V0N0QkE7V0FDQTtXQUNBO1dBQ0EsZUFBZSw0QkFBNEI7V0FDM0MsZUFBZTtXQUNmLGlDQUFpQyxXQUFXO1dBQzVDO1dBQ0E7Ozs7O1dDUEE7V0FDQTtXQUNBO1dBQ0E7V0FDQSx5Q0FBeUMsd0NBQXdDO1dBQ2pGO1dBQ0E7V0FDQTs7Ozs7V0NQQSw4Q0FBOEM7Ozs7O1dDQTlDO1dBQ0E7V0FDQTtXQUNBLHVEQUF1RCxpQkFBaUI7V0FDeEU7V0FDQSxnREFBZ0QsYUFBYTtXQUM3RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDTkE7QUFDQTs7QUFFQWxuQyxNQUFNLENBQUN1RCxDQUFQLEdBQVdBLCtDQUFYOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL2pzL3NyYy9kb20vc2VsZWN0b3ItZW5naW5lLmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9qcy9zcmMvdXRpbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vanMvc3JjL2RvbS9ldmVudC1oYW5kbGVyLmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9qcy9zcmMvZG9tL2RhdGEuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL2pzL3NyYy9iYXNlLWNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vanMvc3JjL2FsZXJ0LmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9qcy9zcmMvYnV0dG9uLmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9qcy9zcmMvZG9tL21hbmlwdWxhdG9yLmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9qcy9zcmMvY2Fyb3VzZWwuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL2pzL3NyYy9jb2xsYXBzZS5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9lbnVtcy5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvdy5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9jb250YWlucy5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNUYWJsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0UGFyZW50Tm9kZS5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tYXRoLmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3dpdGhpbi5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tZXJnZVBhZGRpbmdPYmplY3QuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvYXJyb3cuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2NvbXB1dGVTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzLmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50LmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50LmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGwuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbEJhclguanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzU2Nyb2xsUGFyZW50LmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9saXN0U2Nyb2xsUGFyZW50cy5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0U2Nyb2xsUGFyZW50LmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Vmlld3BvcnRSZWN0LmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0VmFyaWF0aW9uLmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2NvbXB1dGVPZmZzZXRzLmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9mbGlwLmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9oaWRlLmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9vZmZzZXQuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL3BvcHBlck9mZnNldHMuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL3ByZXZlbnRPdmVyZmxvdy5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRBbHRBeGlzLmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wb3NpdGVSZWN0LmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlU2Nyb2xsLmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRIVE1MRWxlbWVudFNjcm9sbC5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9jcmVhdGVQb3BwZXIuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWVyZ2VCeU5hbWUuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvb3JkZXJNb2RpZmllcnMuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvcG9wcGVyLWxpdGUuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvcG9wcGVyLmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9qcy9zcmMvZHJvcGRvd24uanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL2pzL3NyYy91dGlsL3Njcm9sbGJhci5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vanMvc3JjL3V0aWwvYmFja2Ryb3AuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL2pzL3NyYy9tb2RhbC5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vanMvc3JjL29mZmNhbnZhcy5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vanMvc3JjL3V0aWwvc2FuaXRpemVyLmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uLi8uLi9qcy9zcmMvdG9vbHRpcC5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vanMvc3JjL3BvcG92ZXIuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL2pzL3NyYy9zY3JvbGxzcHkuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL2pzL3NyYy90YWIuanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4uLy4uL2pzL3NyYy90b2FzdC5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi4vLi4vanMvaW5kZXgudW1kLmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uL3NyYy9hc3NldHMvanMvY29tcG9uZW50cy9jaGF0LmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uL3NyYy9hc3NldHMvanMvY29tcG9uZW50cy9jdXN0b20uanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4vc3JjL2Fzc2V0cy9qcy9jb21wb25lbnRzL21haW4uanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4vc3JjL2Fzc2V0cy9qcy9jb21wb25lbnRzL3BvZGNhc3RNZWRpYS5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvLi9zcmMvYXNzZXRzL2pzL2NvbXBvbmVudHMvc2VsZWN0Mi5taW4uanMiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2Ly4vc3JjL2Fzc2V0cy9qcy9saWIvc2xpY2subWluLmpzIiwid2VicGFjazovL2Rlc2lnbmRldi8uL25vZGVfbW9kdWxlcy93aGF0LWlucHV0L2Rpc3Qvd2hhdC1pbnB1dC5qcyIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvZXh0ZXJuYWwgdmFyIFwialF1ZXJ5XCIiLCJ3ZWJwYWNrOi8vZGVzaWduZGV2L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Rlc2lnbmRldi93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9kZXNpZ25kZXYvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2Rlc2lnbmRldi93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Rlc2lnbmRldi93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2Rlc2lnbmRldi8uL3NyYy9hc3NldHMvanMvbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjAuMik6IGRvbS9zZWxlY3Rvci1lbmdpbmUuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOT0RFX1RFWFQgPSAzXG5cbmNvbnN0IFNlbGVjdG9yRW5naW5lID0ge1xuICBmaW5kKHNlbGVjdG9yLCBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdCguLi5FbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsLmNhbGwoZWxlbWVudCwgc2VsZWN0b3IpKVxuICB9LFxuXG4gIGZpbmRPbmUoc2VsZWN0b3IsIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICByZXR1cm4gRWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3Rvci5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKVxuICB9LFxuXG4gIGNoaWxkcmVuKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdCguLi5lbGVtZW50LmNoaWxkcmVuKVxuICAgICAgLmZpbHRlcihjaGlsZCA9PiBjaGlsZC5tYXRjaGVzKHNlbGVjdG9yKSlcbiAgfSxcblxuICBwYXJlbnRzKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgY29uc3QgcGFyZW50cyA9IFtdXG5cbiAgICBsZXQgYW5jZXN0b3IgPSBlbGVtZW50LnBhcmVudE5vZGVcblxuICAgIHdoaWxlIChhbmNlc3RvciAmJiBhbmNlc3Rvci5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgYW5jZXN0b3Iubm9kZVR5cGUgIT09IE5PREVfVEVYVCkge1xuICAgICAgaWYgKGFuY2VzdG9yLm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHBhcmVudHMucHVzaChhbmNlc3RvcilcbiAgICAgIH1cblxuICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnROb2RlXG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmVudHNcbiAgfSxcblxuICBwcmV2KGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgbGV0IHByZXZpb3VzID0gZWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXG5cbiAgICB3aGlsZSAocHJldmlvdXMpIHtcbiAgICAgIGlmIChwcmV2aW91cy5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gW3ByZXZpb3VzXVxuICAgICAgfVxuXG4gICAgICBwcmV2aW91cyA9IHByZXZpb3VzLnByZXZpb3VzRWxlbWVudFNpYmxpbmdcbiAgICB9XG5cbiAgICByZXR1cm4gW11cbiAgfSxcblxuICBuZXh0KGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgbGV0IG5leHQgPSBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZ1xuXG4gICAgd2hpbGUgKG5leHQpIHtcbiAgICAgIGlmIChuZXh0Lm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBbbmV4dF1cbiAgICAgIH1cblxuICAgICAgbmV4dCA9IG5leHQubmV4dEVsZW1lbnRTaWJsaW5nXG4gICAgfVxuXG4gICAgcmV0dXJuIFtdXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0b3JFbmdpbmVcbiIsImltcG9ydCBTZWxlY3RvckVuZ2luZSBmcm9tICcuLi9kb20vc2VsZWN0b3ItZW5naW5lJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjAuMik6IHV0aWwvaW5kZXguanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBNQVhfVUlEID0gMTAwMDAwMFxuY29uc3QgTUlMTElTRUNPTkRTX01VTFRJUExJRVIgPSAxMDAwXG5jb25zdCBUUkFOU0lUSU9OX0VORCA9ICd0cmFuc2l0aW9uZW5kJ1xuXG4vLyBTaG91dG91dCBBbmd1c0Nyb2xsIChodHRwczovL2dvby5nbC9weHdRR3ApXG5jb25zdCB0b1R5cGUgPSBvYmogPT4ge1xuICBpZiAob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGAke29ian1gXG4gIH1cblxuICByZXR1cm4ge30udG9TdHJpbmcuY2FsbChvYmopLm1hdGNoKC9cXHMoW2Etel0rKS9pKVsxXS50b0xvd2VyQ2FzZSgpXG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFB1YmxpYyBVdGlsIEFwaVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBnZXRVSUQgPSBwcmVmaXggPT4ge1xuICBkbyB7XG4gICAgcHJlZml4ICs9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1BWF9VSUQpXG4gIH0gd2hpbGUgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHByZWZpeCkpXG5cbiAgcmV0dXJuIHByZWZpeFxufVxuXG5jb25zdCBnZXRTZWxlY3RvciA9IGVsZW1lbnQgPT4ge1xuICBsZXQgc2VsZWN0b3IgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1icy10YXJnZXQnKVxuXG4gIGlmICghc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09ICcjJykge1xuICAgIGxldCBocmVmQXR0ciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJylcblxuICAgIC8vIFRoZSBvbmx5IHZhbGlkIGNvbnRlbnQgdGhhdCBjb3VsZCBkb3VibGUgYXMgYSBzZWxlY3RvciBhcmUgSURzIG9yIGNsYXNzZXMsXG4gICAgLy8gc28gZXZlcnl0aGluZyBzdGFydGluZyB3aXRoIGAjYCBvciBgLmAuIElmIGEgXCJyZWFsXCIgVVJMIGlzIHVzZWQgYXMgdGhlIHNlbGVjdG9yLFxuICAgIC8vIGBkb2N1bWVudC5xdWVyeVNlbGVjdG9yYCB3aWxsIHJpZ2h0ZnVsbHkgY29tcGxhaW4gaXQgaXMgaW52YWxpZC5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8zMjI3M1xuICAgIGlmICghaHJlZkF0dHIgfHwgKCFocmVmQXR0ci5pbmNsdWRlcygnIycpICYmICFocmVmQXR0ci5zdGFydHNXaXRoKCcuJykpKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIC8vIEp1c3QgaW4gY2FzZSBzb21lIENNUyBwdXRzIG91dCBhIGZ1bGwgVVJMIHdpdGggdGhlIGFuY2hvciBhcHBlbmRlZFxuICAgIGlmIChocmVmQXR0ci5pbmNsdWRlcygnIycpICYmICFocmVmQXR0ci5zdGFydHNXaXRoKCcjJykpIHtcbiAgICAgIGhyZWZBdHRyID0gYCMke2hyZWZBdHRyLnNwbGl0KCcjJylbMV19YFxuICAgIH1cblxuICAgIHNlbGVjdG9yID0gaHJlZkF0dHIgJiYgaHJlZkF0dHIgIT09ICcjJyA/IGhyZWZBdHRyLnRyaW0oKSA6IG51bGxcbiAgfVxuXG4gIHJldHVybiBzZWxlY3RvclxufVxuXG5jb25zdCBnZXRTZWxlY3RvckZyb21FbGVtZW50ID0gZWxlbWVudCA9PiB7XG4gIGNvbnN0IHNlbGVjdG9yID0gZ2V0U2VsZWN0b3IoZWxlbWVudClcblxuICBpZiAoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgPyBzZWxlY3RvciA6IG51bGxcbiAgfVxuXG4gIHJldHVybiBudWxsXG59XG5cbmNvbnN0IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IgPSBlbGVtZW50ID0+IHtcbiAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihlbGVtZW50KVxuXG4gIHJldHVybiBzZWxlY3RvciA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIDogbnVsbFxufVxuXG5jb25zdCBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCA9IGVsZW1lbnQgPT4ge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gMFxuICB9XG5cbiAgLy8gR2V0IHRyYW5zaXRpb24tZHVyYXRpb24gb2YgdGhlIGVsZW1lbnRcbiAgbGV0IHsgdHJhbnNpdGlvbkR1cmF0aW9uLCB0cmFuc2l0aW9uRGVsYXkgfSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpXG5cbiAgY29uc3QgZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24gPSBOdW1iZXIucGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pXG4gIGNvbnN0IGZsb2F0VHJhbnNpdGlvbkRlbGF5ID0gTnVtYmVyLnBhcnNlRmxvYXQodHJhbnNpdGlvbkRlbGF5KVxuXG4gIC8vIFJldHVybiAwIGlmIGVsZW1lbnQgb3IgdHJhbnNpdGlvbiBkdXJhdGlvbiBpcyBub3QgZm91bmRcbiAgaWYgKCFmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiAmJiAhZmxvYXRUcmFuc2l0aW9uRGVsYXkpIHtcbiAgICByZXR1cm4gMFxuICB9XG5cbiAgLy8gSWYgbXVsdGlwbGUgZHVyYXRpb25zIGFyZSBkZWZpbmVkLCB0YWtlIHRoZSBmaXJzdFxuICB0cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb24uc3BsaXQoJywnKVswXVxuICB0cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXkuc3BsaXQoJywnKVswXVxuXG4gIHJldHVybiAoTnVtYmVyLnBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKSArIE51bWJlci5wYXJzZUZsb2F0KHRyYW5zaXRpb25EZWxheSkpICogTUlMTElTRUNPTkRTX01VTFRJUExJRVJcbn1cblxuY29uc3QgdHJpZ2dlclRyYW5zaXRpb25FbmQgPSBlbGVtZW50ID0+IHtcbiAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChUUkFOU0lUSU9OX0VORCkpXG59XG5cbmNvbnN0IGlzRWxlbWVudCA9IG9iaiA9PiB7XG4gIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBpZiAodHlwZW9mIG9iai5qcXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgb2JqID0gb2JqWzBdXG4gIH1cblxuICByZXR1cm4gdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gJ3VuZGVmaW5lZCdcbn1cblxuY29uc3QgZ2V0RWxlbWVudCA9IG9iaiA9PiB7XG4gIGlmIChpc0VsZW1lbnQob2JqKSkgeyAvLyBpdCdzIGEgalF1ZXJ5IG9iamVjdCBvciBhIG5vZGUgZWxlbWVudFxuICAgIHJldHVybiBvYmouanF1ZXJ5ID8gb2JqWzBdIDogb2JqXG4gIH1cblxuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycgJiYgb2JqLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShvYmopXG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG5jb25zdCB0eXBlQ2hlY2tDb25maWcgPSAoY29tcG9uZW50TmFtZSwgY29uZmlnLCBjb25maWdUeXBlcykgPT4ge1xuICBPYmplY3Qua2V5cyhjb25maWdUeXBlcykuZm9yRWFjaChwcm9wZXJ0eSA9PiB7XG4gICAgY29uc3QgZXhwZWN0ZWRUeXBlcyA9IGNvbmZpZ1R5cGVzW3Byb3BlcnR5XVxuICAgIGNvbnN0IHZhbHVlID0gY29uZmlnW3Byb3BlcnR5XVxuICAgIGNvbnN0IHZhbHVlVHlwZSA9IHZhbHVlICYmIGlzRWxlbWVudCh2YWx1ZSkgPyAnZWxlbWVudCcgOiB0b1R5cGUodmFsdWUpXG5cbiAgICBpZiAoIW5ldyBSZWdFeHAoZXhwZWN0ZWRUeXBlcykudGVzdCh2YWx1ZVR5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBgJHtjb21wb25lbnROYW1lLnRvVXBwZXJDYXNlKCl9OiBPcHRpb24gXCIke3Byb3BlcnR5fVwiIHByb3ZpZGVkIHR5cGUgXCIke3ZhbHVlVHlwZX1cIiBidXQgZXhwZWN0ZWQgdHlwZSBcIiR7ZXhwZWN0ZWRUeXBlc31cIi5gXG4gICAgICApXG4gICAgfVxuICB9KVxufVxuXG5jb25zdCBpc1Zpc2libGUgPSBlbGVtZW50ID0+IHtcbiAgaWYgKCFpc0VsZW1lbnQoZWxlbWVudCkgfHwgZWxlbWVudC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZSgndmlzaWJpbGl0eScpID09PSAndmlzaWJsZSdcbn1cblxuY29uc3QgaXNEaXNhYmxlZCA9IGVsZW1lbnQgPT4ge1xuICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudC5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGlmICh0eXBlb2YgZWxlbWVudC5kaXNhYmxlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZWxlbWVudC5kaXNhYmxlZFxuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkaXNhYmxlZCcpICE9PSAnZmFsc2UnXG59XG5cbmNvbnN0IGZpbmRTaGFkb3dSb290ID0gZWxlbWVudCA9PiB7XG4gIGlmICghZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmF0dGFjaFNoYWRvdykge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvLyBDYW4gZmluZCB0aGUgc2hhZG93IHJvb3Qgb3RoZXJ3aXNlIGl0J2xsIHJldHVybiB0aGUgZG9jdW1lbnRcbiAgaWYgKHR5cGVvZiBlbGVtZW50LmdldFJvb3ROb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3Qgcm9vdCA9IGVsZW1lbnQuZ2V0Um9vdE5vZGUoKVxuICAgIHJldHVybiByb290IGluc3RhbmNlb2YgU2hhZG93Um9vdCA/IHJvb3QgOiBudWxsXG4gIH1cblxuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpIHtcbiAgICByZXR1cm4gZWxlbWVudFxuICB9XG5cbiAgLy8gd2hlbiB3ZSBkb24ndCBmaW5kIGEgc2hhZG93IHJvb3RcbiAgaWYgKCFlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIGZpbmRTaGFkb3dSb290KGVsZW1lbnQucGFyZW50Tm9kZSlcbn1cblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9XG5cbmNvbnN0IHJlZmxvdyA9IGVsZW1lbnQgPT4gZWxlbWVudC5vZmZzZXRIZWlnaHRcblxuY29uc3QgZ2V0alF1ZXJ5ID0gKCkgPT4ge1xuICBjb25zdCB7IGpRdWVyeSB9ID0gd2luZG93XG5cbiAgaWYgKGpRdWVyeSAmJiAhZG9jdW1lbnQuYm9keS5oYXNBdHRyaWJ1dGUoJ2RhdGEtYnMtbm8tanF1ZXJ5JykpIHtcbiAgICByZXR1cm4galF1ZXJ5XG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG5jb25zdCBET01Db250ZW50TG9hZGVkQ2FsbGJhY2tzID0gW11cblxuY29uc3Qgb25ET01Db250ZW50TG9hZGVkID0gY2FsbGJhY2sgPT4ge1xuICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgLy8gYWRkIGxpc3RlbmVyIG9uIHRoZSBmaXJzdCBjYWxsIHdoZW4gdGhlIGRvY3VtZW50IGlzIGluIGxvYWRpbmcgc3RhdGVcbiAgICBpZiAoIURPTUNvbnRlbnRMb2FkZWRDYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgICAgICBET01Db250ZW50TG9hZGVkQ2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soKSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgRE9NQ29udGVudExvYWRlZENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKVxuICB9IGVsc2Uge1xuICAgIGNhbGxiYWNrKClcbiAgfVxufVxuXG5jb25zdCBpc1JUTCA9ICgpID0+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kaXIgPT09ICdydGwnXG5cbmNvbnN0IGRlZmluZUpRdWVyeVBsdWdpbiA9IHBsdWdpbiA9PiB7XG4gIG9uRE9NQ29udGVudExvYWRlZCgoKSA9PiB7XG4gICAgY29uc3QgJCA9IGdldGpRdWVyeSgpXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCQpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBwbHVnaW4uTkFNRVxuICAgICAgY29uc3QgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltuYW1lXVxuICAgICAgJC5mbltuYW1lXSA9IHBsdWdpbi5qUXVlcnlJbnRlcmZhY2VcbiAgICAgICQuZm5bbmFtZV0uQ29uc3RydWN0b3IgPSBwbHVnaW5cbiAgICAgICQuZm5bbmFtZV0ubm9Db25mbGljdCA9ICgpID0+IHtcbiAgICAgICAgJC5mbltuYW1lXSA9IEpRVUVSWV9OT19DT05GTElDVFxuICAgICAgICByZXR1cm4gcGx1Z2luLmpRdWVyeUludGVyZmFjZVxuICAgICAgfVxuICAgIH1cbiAgfSlcbn1cblxuY29uc3QgZXhlY3V0ZSA9IGNhbGxiYWNrID0+IHtcbiAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrKClcbiAgfVxufVxuXG5jb25zdCBleGVjdXRlQWZ0ZXJUcmFuc2l0aW9uID0gKGNhbGxiYWNrLCB0cmFuc2l0aW9uRWxlbWVudCwgd2FpdEZvclRyYW5zaXRpb24gPSB0cnVlKSA9PiB7XG4gIGlmICghd2FpdEZvclRyYW5zaXRpb24pIHtcbiAgICBleGVjdXRlKGNhbGxiYWNrKVxuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgZHVyYXRpb25QYWRkaW5nID0gNVxuICBjb25zdCBlbXVsYXRlZER1cmF0aW9uID0gZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodHJhbnNpdGlvbkVsZW1lbnQpICsgZHVyYXRpb25QYWRkaW5nXG5cbiAgbGV0IGNhbGxlZCA9IGZhbHNlXG5cbiAgY29uc3QgaGFuZGxlciA9ICh7IHRhcmdldCB9KSA9PiB7XG4gICAgaWYgKHRhcmdldCAhPT0gdHJhbnNpdGlvbkVsZW1lbnQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNhbGxlZCA9IHRydWVcbiAgICB0cmFuc2l0aW9uRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFRSQU5TSVRJT05fRU5ELCBoYW5kbGVyKVxuICAgIGV4ZWN1dGUoY2FsbGJhY2spXG4gIH1cblxuICB0cmFuc2l0aW9uRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFRSQU5TSVRJT05fRU5ELCBoYW5kbGVyKVxuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgdHJpZ2dlclRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkVsZW1lbnQpXG4gICAgfVxuICB9LCBlbXVsYXRlZER1cmF0aW9uKVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgcHJldmlvdXMvbmV4dCBlbGVtZW50IG9mIGEgbGlzdC5cbiAqXG4gKiBAcGFyYW0ge2FycmF5fSBsaXN0ICAgIFRoZSBsaXN0IG9mIGVsZW1lbnRzXG4gKiBAcGFyYW0gYWN0aXZlRWxlbWVudCAgIFRoZSBhY3RpdmUgZWxlbWVudFxuICogQHBhcmFtIHNob3VsZEdldE5leHQgICBDaG9vc2UgdG8gZ2V0IG5leHQgb3IgcHJldmlvdXMgZWxlbWVudFxuICogQHBhcmFtIGlzQ3ljbGVBbGxvd2VkXG4gKiBAcmV0dXJuIHtFbGVtZW50fGVsZW19IFRoZSBwcm9wZXIgZWxlbWVudFxuICovXG5jb25zdCBnZXROZXh0QWN0aXZlRWxlbWVudCA9IChsaXN0LCBhY3RpdmVFbGVtZW50LCBzaG91bGRHZXROZXh0LCBpc0N5Y2xlQWxsb3dlZCkgPT4ge1xuICBsZXQgaW5kZXggPSBsaXN0LmluZGV4T2YoYWN0aXZlRWxlbWVudClcblxuICAvLyBpZiB0aGUgZWxlbWVudCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgbGlzdCByZXR1cm4gYW4gZWxlbWVudCBkZXBlbmRpbmcgb24gdGhlIGRpcmVjdGlvbiBhbmQgaWYgY3ljbGUgaXMgYWxsb3dlZFxuICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgcmV0dXJuIGxpc3RbIXNob3VsZEdldE5leHQgJiYgaXNDeWNsZUFsbG93ZWQgPyBsaXN0Lmxlbmd0aCAtIDEgOiAwXVxuICB9XG5cbiAgY29uc3QgbGlzdExlbmd0aCA9IGxpc3QubGVuZ3RoXG5cbiAgaW5kZXggKz0gc2hvdWxkR2V0TmV4dCA/IDEgOiAtMVxuXG4gIGlmIChpc0N5Y2xlQWxsb3dlZCkge1xuICAgIGluZGV4ID0gKGluZGV4ICsgbGlzdExlbmd0aCkgJSBsaXN0TGVuZ3RoXG4gIH1cblxuICByZXR1cm4gbGlzdFtNYXRoLm1heCgwLCBNYXRoLm1pbihpbmRleCwgbGlzdExlbmd0aCAtIDEpKV1cbn1cblxuZXhwb3J0IHtcbiAgZ2V0RWxlbWVudCxcbiAgZ2V0VUlELFxuICBnZXRTZWxlY3RvckZyb21FbGVtZW50LFxuICBnZXRFbGVtZW50RnJvbVNlbGVjdG9yLFxuICBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCxcbiAgdHJpZ2dlclRyYW5zaXRpb25FbmQsXG4gIGlzRWxlbWVudCxcbiAgdHlwZUNoZWNrQ29uZmlnLFxuICBpc1Zpc2libGUsXG4gIGlzRGlzYWJsZWQsXG4gIGZpbmRTaGFkb3dSb290LFxuICBub29wLFxuICBnZXROZXh0QWN0aXZlRWxlbWVudCxcbiAgcmVmbG93LFxuICBnZXRqUXVlcnksXG4gIG9uRE9NQ29udGVudExvYWRlZCxcbiAgaXNSVEwsXG4gIGRlZmluZUpRdWVyeVBsdWdpbixcbiAgZXhlY3V0ZSxcbiAgZXhlY3V0ZUFmdGVyVHJhbnNpdGlvblxufVxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiBkb20vZXZlbnQtaGFuZGxlci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7IGdldGpRdWVyeSB9IGZyb20gJy4uL3V0aWwvaW5kZXgnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IG5hbWVzcGFjZVJlZ2V4ID0gL1teLl0qKD89XFwuLiopXFwufC4qL1xuY29uc3Qgc3RyaXBOYW1lUmVnZXggPSAvXFwuLiovXG5jb25zdCBzdHJpcFVpZFJlZ2V4ID0gLzo6XFxkKyQvXG5jb25zdCBldmVudFJlZ2lzdHJ5ID0ge30gLy8gRXZlbnRzIHN0b3JhZ2VcbmxldCB1aWRFdmVudCA9IDFcbmNvbnN0IGN1c3RvbUV2ZW50cyA9IHtcbiAgbW91c2VlbnRlcjogJ21vdXNlb3ZlcicsXG4gIG1vdXNlbGVhdmU6ICdtb3VzZW91dCdcbn1cbmNvbnN0IGN1c3RvbUV2ZW50c1JlZ2V4ID0gL14obW91c2VlbnRlcnxtb3VzZWxlYXZlKS9pXG5jb25zdCBuYXRpdmVFdmVudHMgPSBuZXcgU2V0KFtcbiAgJ2NsaWNrJyxcbiAgJ2RibGNsaWNrJyxcbiAgJ21vdXNldXAnLFxuICAnbW91c2Vkb3duJyxcbiAgJ2NvbnRleHRtZW51JyxcbiAgJ21vdXNld2hlZWwnLFxuICAnRE9NTW91c2VTY3JvbGwnLFxuICAnbW91c2VvdmVyJyxcbiAgJ21vdXNlb3V0JyxcbiAgJ21vdXNlbW92ZScsXG4gICdzZWxlY3RzdGFydCcsXG4gICdzZWxlY3RlbmQnLFxuICAna2V5ZG93bicsXG4gICdrZXlwcmVzcycsXG4gICdrZXl1cCcsXG4gICdvcmllbnRhdGlvbmNoYW5nZScsXG4gICd0b3VjaHN0YXJ0JyxcbiAgJ3RvdWNobW92ZScsXG4gICd0b3VjaGVuZCcsXG4gICd0b3VjaGNhbmNlbCcsXG4gICdwb2ludGVyZG93bicsXG4gICdwb2ludGVybW92ZScsXG4gICdwb2ludGVydXAnLFxuICAncG9pbnRlcmxlYXZlJyxcbiAgJ3BvaW50ZXJjYW5jZWwnLFxuICAnZ2VzdHVyZXN0YXJ0JyxcbiAgJ2dlc3R1cmVjaGFuZ2UnLFxuICAnZ2VzdHVyZWVuZCcsXG4gICdmb2N1cycsXG4gICdibHVyJyxcbiAgJ2NoYW5nZScsXG4gICdyZXNldCcsXG4gICdzZWxlY3QnLFxuICAnc3VibWl0JyxcbiAgJ2ZvY3VzaW4nLFxuICAnZm9jdXNvdXQnLFxuICAnbG9hZCcsXG4gICd1bmxvYWQnLFxuICAnYmVmb3JldW5sb2FkJyxcbiAgJ3Jlc2l6ZScsXG4gICdtb3ZlJyxcbiAgJ0RPTUNvbnRlbnRMb2FkZWQnLFxuICAncmVhZHlzdGF0ZWNoYW5nZScsXG4gICdlcnJvcicsXG4gICdhYm9ydCcsXG4gICdzY3JvbGwnXG5dKVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUHJpdmF0ZSBtZXRob2RzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5mdW5jdGlvbiBnZXRVaWRFdmVudChlbGVtZW50LCB1aWQpIHtcbiAgcmV0dXJuICh1aWQgJiYgYCR7dWlkfTo6JHt1aWRFdmVudCsrfWApIHx8IGVsZW1lbnQudWlkRXZlbnQgfHwgdWlkRXZlbnQrK1xufVxuXG5mdW5jdGlvbiBnZXRFdmVudChlbGVtZW50KSB7XG4gIGNvbnN0IHVpZCA9IGdldFVpZEV2ZW50KGVsZW1lbnQpXG5cbiAgZWxlbWVudC51aWRFdmVudCA9IHVpZFxuICBldmVudFJlZ2lzdHJ5W3VpZF0gPSBldmVudFJlZ2lzdHJ5W3VpZF0gfHwge31cblxuICByZXR1cm4gZXZlbnRSZWdpc3RyeVt1aWRdXG59XG5cbmZ1bmN0aW9uIGJvb3RzdHJhcEhhbmRsZXIoZWxlbWVudCwgZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQpIHtcbiAgICBldmVudC5kZWxlZ2F0ZVRhcmdldCA9IGVsZW1lbnRcblxuICAgIGlmIChoYW5kbGVyLm9uZU9mZikge1xuICAgICAgRXZlbnRIYW5kbGVyLm9mZihlbGVtZW50LCBldmVudC50eXBlLCBmbilcbiAgICB9XG5cbiAgICByZXR1cm4gZm4uYXBwbHkoZWxlbWVudCwgW2V2ZW50XSlcbiAgfVxufVxuXG5mdW5jdGlvbiBib290c3RyYXBEZWxlZ2F0aW9uSGFuZGxlcihlbGVtZW50LCBzZWxlY3RvciwgZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQpIHtcbiAgICBjb25zdCBkb21FbGVtZW50cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcilcblxuICAgIGZvciAobGV0IHsgdGFyZ2V0IH0gPSBldmVudDsgdGFyZ2V0ICYmIHRhcmdldCAhPT0gdGhpczsgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGUpIHtcbiAgICAgIGZvciAobGV0IGkgPSBkb21FbGVtZW50cy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgaWYgKGRvbUVsZW1lbnRzW2ldID09PSB0YXJnZXQpIHtcbiAgICAgICAgICBldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRhcmdldFxuXG4gICAgICAgICAgaWYgKGhhbmRsZXIub25lT2ZmKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9jb25zaXN0ZW50LWRlc3RydWN0dXJpbmdcbiAgICAgICAgICAgIEV2ZW50SGFuZGxlci5vZmYoZWxlbWVudCwgZXZlbnQudHlwZSwgc2VsZWN0b3IsIGZuKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0YXJnZXQsIFtldmVudF0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUbyBwbGVhc2UgRVNMaW50XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kSGFuZGxlcihldmVudHMsIGhhbmRsZXIsIGRlbGVnYXRpb25TZWxlY3RvciA9IG51bGwpIHtcbiAgY29uc3QgdWlkRXZlbnRMaXN0ID0gT2JqZWN0LmtleXMoZXZlbnRzKVxuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSB1aWRFdmVudExpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBldmVudCA9IGV2ZW50c1t1aWRFdmVudExpc3RbaV1dXG5cbiAgICBpZiAoZXZlbnQub3JpZ2luYWxIYW5kbGVyID09PSBoYW5kbGVyICYmIGV2ZW50LmRlbGVnYXRpb25TZWxlY3RvciA9PT0gZGVsZWdhdGlvblNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gZXZlbnRcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVQYXJhbXMob3JpZ2luYWxUeXBlRXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25Gbikge1xuICBjb25zdCBkZWxlZ2F0aW9uID0gdHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnXG4gIGNvbnN0IG9yaWdpbmFsSGFuZGxlciA9IGRlbGVnYXRpb24gPyBkZWxlZ2F0aW9uRm4gOiBoYW5kbGVyXG5cbiAgbGV0IHR5cGVFdmVudCA9IGdldFR5cGVFdmVudChvcmlnaW5hbFR5cGVFdmVudClcbiAgY29uc3QgaXNOYXRpdmUgPSBuYXRpdmVFdmVudHMuaGFzKHR5cGVFdmVudClcblxuICBpZiAoIWlzTmF0aXZlKSB7XG4gICAgdHlwZUV2ZW50ID0gb3JpZ2luYWxUeXBlRXZlbnRcbiAgfVxuXG4gIHJldHVybiBbZGVsZWdhdGlvbiwgb3JpZ2luYWxIYW5kbGVyLCB0eXBlRXZlbnRdXG59XG5cbmZ1bmN0aW9uIGFkZEhhbmRsZXIoZWxlbWVudCwgb3JpZ2luYWxUeXBlRXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25Gbiwgb25lT2ZmKSB7XG4gIGlmICh0eXBlb2Ygb3JpZ2luYWxUeXBlRXZlbnQgIT09ICdzdHJpbmcnIHx8ICFlbGVtZW50KSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAoIWhhbmRsZXIpIHtcbiAgICBoYW5kbGVyID0gZGVsZWdhdGlvbkZuXG4gICAgZGVsZWdhdGlvbkZuID0gbnVsbFxuICB9XG5cbiAgLy8gaW4gY2FzZSBvZiBtb3VzZWVudGVyIG9yIG1vdXNlbGVhdmUgd3JhcCB0aGUgaGFuZGxlciB3aXRoaW4gYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBmb3IgaXRzIERPTSBwb3NpdGlvblxuICAvLyB0aGlzIHByZXZlbnRzIHRoZSBoYW5kbGVyIGZyb20gYmVpbmcgZGlzcGF0Y2hlZCB0aGUgc2FtZSB3YXkgYXMgbW91c2VvdmVyIG9yIG1vdXNlb3V0IGRvZXNcbiAgaWYgKGN1c3RvbUV2ZW50c1JlZ2V4LnRlc3Qob3JpZ2luYWxUeXBlRXZlbnQpKSB7XG4gICAgY29uc3Qgd3JhcEZuID0gZm4gPT4ge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoIWV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgKGV2ZW50LnJlbGF0ZWRUYXJnZXQgIT09IGV2ZW50LmRlbGVnYXRlVGFyZ2V0ICYmICFldmVudC5kZWxlZ2F0ZVRhcmdldC5jb250YWlucyhldmVudC5yZWxhdGVkVGFyZ2V0KSkpIHtcbiAgICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkZWxlZ2F0aW9uRm4pIHtcbiAgICAgIGRlbGVnYXRpb25GbiA9IHdyYXBGbihkZWxlZ2F0aW9uRm4pXG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZXIgPSB3cmFwRm4oaGFuZGxlcilcbiAgICB9XG4gIH1cblxuICBjb25zdCBbZGVsZWdhdGlvbiwgb3JpZ2luYWxIYW5kbGVyLCB0eXBlRXZlbnRdID0gbm9ybWFsaXplUGFyYW1zKG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4pXG4gIGNvbnN0IGV2ZW50cyA9IGdldEV2ZW50KGVsZW1lbnQpXG4gIGNvbnN0IGhhbmRsZXJzID0gZXZlbnRzW3R5cGVFdmVudF0gfHwgKGV2ZW50c1t0eXBlRXZlbnRdID0ge30pXG4gIGNvbnN0IHByZXZpb3VzRm4gPSBmaW5kSGFuZGxlcihoYW5kbGVycywgb3JpZ2luYWxIYW5kbGVyLCBkZWxlZ2F0aW9uID8gaGFuZGxlciA6IG51bGwpXG5cbiAgaWYgKHByZXZpb3VzRm4pIHtcbiAgICBwcmV2aW91c0ZuLm9uZU9mZiA9IHByZXZpb3VzRm4ub25lT2ZmICYmIG9uZU9mZlxuXG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCB1aWQgPSBnZXRVaWRFdmVudChvcmlnaW5hbEhhbmRsZXIsIG9yaWdpbmFsVHlwZUV2ZW50LnJlcGxhY2UobmFtZXNwYWNlUmVnZXgsICcnKSlcbiAgY29uc3QgZm4gPSBkZWxlZ2F0aW9uID9cbiAgICBib290c3RyYXBEZWxlZ2F0aW9uSGFuZGxlcihlbGVtZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4pIDpcbiAgICBib290c3RyYXBIYW5kbGVyKGVsZW1lbnQsIGhhbmRsZXIpXG5cbiAgZm4uZGVsZWdhdGlvblNlbGVjdG9yID0gZGVsZWdhdGlvbiA/IGhhbmRsZXIgOiBudWxsXG4gIGZuLm9yaWdpbmFsSGFuZGxlciA9IG9yaWdpbmFsSGFuZGxlclxuICBmbi5vbmVPZmYgPSBvbmVPZmZcbiAgZm4udWlkRXZlbnQgPSB1aWRcbiAgaGFuZGxlcnNbdWlkXSA9IGZuXG5cbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGVFdmVudCwgZm4sIGRlbGVnYXRpb24pXG59XG5cbmZ1bmN0aW9uIHJlbW92ZUhhbmRsZXIoZWxlbWVudCwgZXZlbnRzLCB0eXBlRXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25TZWxlY3Rvcikge1xuICBjb25zdCBmbiA9IGZpbmRIYW5kbGVyKGV2ZW50c1t0eXBlRXZlbnRdLCBoYW5kbGVyLCBkZWxlZ2F0aW9uU2VsZWN0b3IpXG5cbiAgaWYgKCFmbikge1xuICAgIHJldHVyblxuICB9XG5cbiAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGVFdmVudCwgZm4sIEJvb2xlYW4oZGVsZWdhdGlvblNlbGVjdG9yKSlcbiAgZGVsZXRlIGV2ZW50c1t0eXBlRXZlbnRdW2ZuLnVpZEV2ZW50XVxufVxuXG5mdW5jdGlvbiByZW1vdmVOYW1lc3BhY2VkSGFuZGxlcnMoZWxlbWVudCwgZXZlbnRzLCB0eXBlRXZlbnQsIG5hbWVzcGFjZSkge1xuICBjb25zdCBzdG9yZUVsZW1lbnRFdmVudCA9IGV2ZW50c1t0eXBlRXZlbnRdIHx8IHt9XG5cbiAgT2JqZWN0LmtleXMoc3RvcmVFbGVtZW50RXZlbnQpLmZvckVhY2goaGFuZGxlcktleSA9PiB7XG4gICAgaWYgKGhhbmRsZXJLZXkuaW5jbHVkZXMobmFtZXNwYWNlKSkge1xuICAgICAgY29uc3QgZXZlbnQgPSBzdG9yZUVsZW1lbnRFdmVudFtoYW5kbGVyS2V5XVxuXG4gICAgICByZW1vdmVIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBldmVudC5vcmlnaW5hbEhhbmRsZXIsIGV2ZW50LmRlbGVnYXRpb25TZWxlY3RvcilcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIGdldFR5cGVFdmVudChldmVudCkge1xuICAvLyBhbGxvdyB0byBnZXQgdGhlIG5hdGl2ZSBldmVudHMgZnJvbSBuYW1lc3BhY2VkIGV2ZW50cyAoJ2NsaWNrLmJzLmJ1dHRvbicgLS0+ICdjbGljaycpXG4gIGV2ZW50ID0gZXZlbnQucmVwbGFjZShzdHJpcE5hbWVSZWdleCwgJycpXG4gIHJldHVybiBjdXN0b21FdmVudHNbZXZlbnRdIHx8IGV2ZW50XG59XG5cbmNvbnN0IEV2ZW50SGFuZGxlciA9IHtcbiAgb24oZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25Gbikge1xuICAgIGFkZEhhbmRsZXIoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25GbiwgZmFsc2UpXG4gIH0sXG5cbiAgb25lKGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4pIHtcbiAgICBhZGRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4sIHRydWUpXG4gIH0sXG5cbiAgb2ZmKGVsZW1lbnQsIG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4pIHtcbiAgICBpZiAodHlwZW9mIG9yaWdpbmFsVHlwZUV2ZW50ICE9PSAnc3RyaW5nJyB8fCAhZWxlbWVudCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgW2RlbGVnYXRpb24sIG9yaWdpbmFsSGFuZGxlciwgdHlwZUV2ZW50XSA9IG5vcm1hbGl6ZVBhcmFtcyhvcmlnaW5hbFR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuKVxuICAgIGNvbnN0IGluTmFtZXNwYWNlID0gdHlwZUV2ZW50ICE9PSBvcmlnaW5hbFR5cGVFdmVudFxuICAgIGNvbnN0IGV2ZW50cyA9IGdldEV2ZW50KGVsZW1lbnQpXG4gICAgY29uc3QgaXNOYW1lc3BhY2UgPSBvcmlnaW5hbFR5cGVFdmVudC5zdGFydHNXaXRoKCcuJylcblxuICAgIGlmICh0eXBlb2Ygb3JpZ2luYWxIYW5kbGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gU2ltcGxlc3QgY2FzZTogaGFuZGxlciBpcyBwYXNzZWQsIHJlbW92ZSB0aGF0IGxpc3RlbmVyIE9OTFkuXG4gICAgICBpZiAoIWV2ZW50cyB8fCAhZXZlbnRzW3R5cGVFdmVudF0pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIHJlbW92ZUhhbmRsZXIoZWxlbWVudCwgZXZlbnRzLCB0eXBlRXZlbnQsIG9yaWdpbmFsSGFuZGxlciwgZGVsZWdhdGlvbiA/IGhhbmRsZXIgOiBudWxsKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGlzTmFtZXNwYWNlKSB7XG4gICAgICBPYmplY3Qua2V5cyhldmVudHMpLmZvckVhY2goZWxlbWVudEV2ZW50ID0+IHtcbiAgICAgICAgcmVtb3ZlTmFtZXNwYWNlZEhhbmRsZXJzKGVsZW1lbnQsIGV2ZW50cywgZWxlbWVudEV2ZW50LCBvcmlnaW5hbFR5cGVFdmVudC5zbGljZSgxKSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmVFbGVtZW50RXZlbnQgPSBldmVudHNbdHlwZUV2ZW50XSB8fCB7fVxuICAgIE9iamVjdC5rZXlzKHN0b3JlRWxlbWVudEV2ZW50KS5mb3JFYWNoKGtleUhhbmRsZXJzID0+IHtcbiAgICAgIGNvbnN0IGhhbmRsZXJLZXkgPSBrZXlIYW5kbGVycy5yZXBsYWNlKHN0cmlwVWlkUmVnZXgsICcnKVxuXG4gICAgICBpZiAoIWluTmFtZXNwYWNlIHx8IG9yaWdpbmFsVHlwZUV2ZW50LmluY2x1ZGVzKGhhbmRsZXJLZXkpKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gc3RvcmVFbGVtZW50RXZlbnRba2V5SGFuZGxlcnNdXG5cbiAgICAgICAgcmVtb3ZlSGFuZGxlcihlbGVtZW50LCBldmVudHMsIHR5cGVFdmVudCwgZXZlbnQub3JpZ2luYWxIYW5kbGVyLCBldmVudC5kZWxlZ2F0aW9uU2VsZWN0b3IpXG4gICAgICB9XG4gICAgfSlcbiAgfSxcblxuICB0cmlnZ2VyKGVsZW1lbnQsIGV2ZW50LCBhcmdzKSB7XG4gICAgaWYgKHR5cGVvZiBldmVudCAhPT0gJ3N0cmluZycgfHwgIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgY29uc3QgJCA9IGdldGpRdWVyeSgpXG4gICAgY29uc3QgdHlwZUV2ZW50ID0gZ2V0VHlwZUV2ZW50KGV2ZW50KVxuICAgIGNvbnN0IGluTmFtZXNwYWNlID0gZXZlbnQgIT09IHR5cGVFdmVudFxuICAgIGNvbnN0IGlzTmF0aXZlID0gbmF0aXZlRXZlbnRzLmhhcyh0eXBlRXZlbnQpXG5cbiAgICBsZXQgalF1ZXJ5RXZlbnRcbiAgICBsZXQgYnViYmxlcyA9IHRydWVcbiAgICBsZXQgbmF0aXZlRGlzcGF0Y2ggPSB0cnVlXG4gICAgbGV0IGRlZmF1bHRQcmV2ZW50ZWQgPSBmYWxzZVxuICAgIGxldCBldnQgPSBudWxsXG5cbiAgICBpZiAoaW5OYW1lc3BhY2UgJiYgJCkge1xuICAgICAgalF1ZXJ5RXZlbnQgPSAkLkV2ZW50KGV2ZW50LCBhcmdzKVxuXG4gICAgICAkKGVsZW1lbnQpLnRyaWdnZXIoalF1ZXJ5RXZlbnQpXG4gICAgICBidWJibGVzID0gIWpRdWVyeUV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKClcbiAgICAgIG5hdGl2ZURpc3BhdGNoID0gIWpRdWVyeUV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKClcbiAgICAgIGRlZmF1bHRQcmV2ZW50ZWQgPSBqUXVlcnlFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKVxuICAgIH1cblxuICAgIGlmIChpc05hdGl2ZSkge1xuICAgICAgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKVxuICAgICAgZXZ0LmluaXRFdmVudCh0eXBlRXZlbnQsIGJ1YmJsZXMsIHRydWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIGV2dCA9IG5ldyBDdXN0b21FdmVudChldmVudCwge1xuICAgICAgICBidWJibGVzLFxuICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIG1lcmdlIGN1c3RvbSBpbmZvcm1hdGlvbiBpbiBvdXIgZXZlbnRcbiAgICBpZiAodHlwZW9mIGFyZ3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBPYmplY3Qua2V5cyhhcmdzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldnQsIGtleSwge1xuICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmdzW2tleV1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKVxuICAgIH1cblxuICAgIGlmIChuYXRpdmVEaXNwYXRjaCkge1xuICAgICAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2dClcbiAgICB9XG5cbiAgICBpZiAoZXZ0LmRlZmF1bHRQcmV2ZW50ZWQgJiYgdHlwZW9mIGpRdWVyeUV2ZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgalF1ZXJ5RXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIH1cblxuICAgIHJldHVybiBldnRcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFdmVudEhhbmRsZXJcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4yKTogZG9tL2RhdGEuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBlbGVtZW50TWFwID0gbmV3IE1hcCgpXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0KGVsZW1lbnQsIGtleSwgaW5zdGFuY2UpIHtcbiAgICBpZiAoIWVsZW1lbnRNYXAuaGFzKGVsZW1lbnQpKSB7XG4gICAgICBlbGVtZW50TWFwLnNldChlbGVtZW50LCBuZXcgTWFwKCkpXG4gICAgfVxuXG4gICAgY29uc3QgaW5zdGFuY2VNYXAgPSBlbGVtZW50TWFwLmdldChlbGVtZW50KVxuXG4gICAgLy8gbWFrZSBpdCBjbGVhciB3ZSBvbmx5IHdhbnQgb25lIGluc3RhbmNlIHBlciBlbGVtZW50XG4gICAgLy8gY2FuIGJlIHJlbW92ZWQgbGF0ZXIgd2hlbiBtdWx0aXBsZSBrZXkvaW5zdGFuY2VzIGFyZSBmaW5lIHRvIGJlIHVzZWRcbiAgICBpZiAoIWluc3RhbmNlTWFwLmhhcyhrZXkpICYmIGluc3RhbmNlTWFwLnNpemUgIT09IDApIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLmVycm9yKGBCb290c3RyYXAgZG9lc24ndCBhbGxvdyBtb3JlIHRoYW4gb25lIGluc3RhbmNlIHBlciBlbGVtZW50LiBCb3VuZCBpbnN0YW5jZTogJHtBcnJheS5mcm9tKGluc3RhbmNlTWFwLmtleXMoKSlbMF19LmApXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpbnN0YW5jZU1hcC5zZXQoa2V5LCBpbnN0YW5jZSlcbiAgfSxcblxuICBnZXQoZWxlbWVudCwga2V5KSB7XG4gICAgaWYgKGVsZW1lbnRNYXAuaGFzKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gZWxlbWVudE1hcC5nZXQoZWxlbWVudCkuZ2V0KGtleSkgfHwgbnVsbFxuICAgIH1cblxuICAgIHJldHVybiBudWxsXG4gIH0sXG5cbiAgcmVtb3ZlKGVsZW1lbnQsIGtleSkge1xuICAgIGlmICghZWxlbWVudE1hcC5oYXMoZWxlbWVudCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGluc3RhbmNlTWFwID0gZWxlbWVudE1hcC5nZXQoZWxlbWVudClcblxuICAgIGluc3RhbmNlTWFwLmRlbGV0ZShrZXkpXG5cbiAgICAvLyBmcmVlIHVwIGVsZW1lbnQgcmVmZXJlbmNlcyBpZiB0aGVyZSBhcmUgbm8gaW5zdGFuY2VzIGxlZnQgZm9yIGFuIGVsZW1lbnRcbiAgICBpZiAoaW5zdGFuY2VNYXAuc2l6ZSA9PT0gMCkge1xuICAgICAgZWxlbWVudE1hcC5kZWxldGUoZWxlbWVudClcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4yKTogYmFzZS1jb21wb25lbnQuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgRGF0YSBmcm9tICcuL2RvbS9kYXRhJ1xuaW1wb3J0IHtcbiAgZXhlY3V0ZUFmdGVyVHJhbnNpdGlvbixcbiAgZ2V0RWxlbWVudFxufSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXInXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IFZFUlNJT04gPSAnNS4wLjInXG5cbmNsYXNzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgZWxlbWVudCA9IGdldEVsZW1lbnQoZWxlbWVudClcblxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnRcbiAgICBEYXRhLnNldCh0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLCB0aGlzKVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBEYXRhLnJlbW92ZSh0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZKVxuICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FVkVOVF9LRVkpXG5cbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKS5mb3JFYWNoKHByb3BlcnR5TmFtZSA9PiB7XG4gICAgICB0aGlzW3Byb3BlcnR5TmFtZV0gPSBudWxsXG4gICAgfSlcbiAgfVxuXG4gIF9xdWV1ZUNhbGxiYWNrKGNhbGxiYWNrLCBlbGVtZW50LCBpc0FuaW1hdGVkID0gdHJ1ZSkge1xuICAgIGV4ZWN1dGVBZnRlclRyYW5zaXRpb24oY2FsbGJhY2ssIGVsZW1lbnQsIGlzQW5pbWF0ZWQpXG4gIH1cblxuICAvKiogU3RhdGljICovXG5cbiAgc3RhdGljIGdldEluc3RhbmNlKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gRGF0YS5nZXQoZWxlbWVudCwgdGhpcy5EQVRBX0tFWSlcbiAgfVxuXG4gIHN0YXRpYyBnZXRPckNyZWF0ZUluc3RhbmNlKGVsZW1lbnQsIGNvbmZpZyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SW5zdGFuY2UoZWxlbWVudCkgfHwgbmV3IHRoaXMoZWxlbWVudCwgdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiBudWxsKVxuICB9XG5cbiAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgIHJldHVybiBWRVJTSU9OXG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgaGF2ZSB0byBpbXBsZW1lbnQgdGhlIHN0YXRpYyBtZXRob2QgXCJOQU1FXCIsIGZvciBlYWNoIGNvbXBvbmVudCEnKVxuICB9XG5cbiAgc3RhdGljIGdldCBEQVRBX0tFWSgpIHtcbiAgICByZXR1cm4gYGJzLiR7dGhpcy5OQU1FfWBcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRVZFTlRfS0VZKCkge1xuICAgIHJldHVybiBgLiR7dGhpcy5EQVRBX0tFWX1gXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmFzZUNvbXBvbmVudFxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiBhbGVydC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7XG4gIGRlZmluZUpRdWVyeVBsdWdpbixcbiAgZ2V0RWxlbWVudEZyb21TZWxlY3RvclxufSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXInXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50J1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FID0gJ2FsZXJ0J1xuY29uc3QgREFUQV9LRVkgPSAnYnMuYWxlcnQnXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSdcblxuY29uc3QgU0VMRUNUT1JfRElTTUlTUyA9ICdbZGF0YS1icy1kaXNtaXNzPVwiYWxlcnRcIl0nXG5cbmNvbnN0IEVWRU5UX0NMT1NFID0gYGNsb3NlJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfQ0xPU0VEID0gYGNsb3NlZCR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0NMSUNLX0RBVEFfQVBJID0gYGNsaWNrJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxuXG5jb25zdCBDTEFTU19OQU1FX0FMRVJUID0gJ2FsZXJ0J1xuY29uc3QgQ0xBU1NfTkFNRV9GQURFID0gJ2ZhZGUnXG5jb25zdCBDTEFTU19OQU1FX1NIT1cgPSAnc2hvdydcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIEFsZXJ0IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUVcbiAgfVxuXG4gIC8vIFB1YmxpY1xuXG4gIGNsb3NlKGVsZW1lbnQpIHtcbiAgICBjb25zdCByb290RWxlbWVudCA9IGVsZW1lbnQgPyB0aGlzLl9nZXRSb290RWxlbWVudChlbGVtZW50KSA6IHRoaXMuX2VsZW1lbnRcbiAgICBjb25zdCBjdXN0b21FdmVudCA9IHRoaXMuX3RyaWdnZXJDbG9zZUV2ZW50KHJvb3RFbGVtZW50KVxuXG4gICAgaWYgKGN1c3RvbUV2ZW50ID09PSBudWxsIHx8IGN1c3RvbUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX3JlbW92ZUVsZW1lbnQocm9vdEVsZW1lbnQpXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldFJvb3RFbGVtZW50KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0RWxlbWVudEZyb21TZWxlY3RvcihlbGVtZW50KSB8fCBlbGVtZW50LmNsb3Nlc3QoYC4ke0NMQVNTX05BTUVfQUxFUlR9YClcbiAgfVxuXG4gIF90cmlnZ2VyQ2xvc2VFdmVudChlbGVtZW50KSB7XG4gICAgcmV0dXJuIEV2ZW50SGFuZGxlci50cmlnZ2VyKGVsZW1lbnQsIEVWRU5UX0NMT1NFKVxuICB9XG5cbiAgX3JlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG5cbiAgICBjb25zdCBpc0FuaW1hdGVkID0gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9GQURFKVxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCkgPT4gdGhpcy5fZGVzdHJveUVsZW1lbnQoZWxlbWVudCksIGVsZW1lbnQsIGlzQW5pbWF0ZWQpXG4gIH1cblxuICBfZGVzdHJveUVsZW1lbnQoZWxlbWVudCkge1xuICAgIGVsZW1lbnQucmVtb3ZlKClcblxuICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKGVsZW1lbnQsIEVWRU5UX0NMT1NFRClcbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gQWxlcnQuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzKVxuXG4gICAgICBpZiAoY29uZmlnID09PSAnY2xvc2UnKSB7XG4gICAgICAgIGRhdGFbY29uZmlnXSh0aGlzKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBzdGF0aWMgaGFuZGxlRGlzbWlzcyhhbGVydEluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIH1cblxuICAgICAgYWxlcnRJbnN0YW5jZS5jbG9zZSh0aGlzKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEksIFNFTEVDVE9SX0RJU01JU1MsIEFsZXJ0LmhhbmRsZURpc21pc3MobmV3IEFsZXJ0KCkpKVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuQWxlcnQgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oQWxlcnQpXG5cbmV4cG9ydCBkZWZhdWx0IEFsZXJ0XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjAuMik6IGJ1dHRvbi5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7IGRlZmluZUpRdWVyeVBsdWdpbiB9IGZyb20gJy4vdXRpbC9pbmRleCdcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gJy4vYmFzZS1jb21wb25lbnQnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUgPSAnYnV0dG9uJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMuYnV0dG9uJ1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknXG5cbmNvbnN0IENMQVNTX05BTUVfQUNUSVZFID0gJ2FjdGl2ZSdcblxuY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEUgPSAnW2RhdGEtYnMtdG9nZ2xlPVwiYnV0dG9uXCJdJ1xuXG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSA9IGBjbGljayR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIEJ1dHRvbiBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcblxuICB0b2dnbGUoKSB7XG4gICAgLy8gVG9nZ2xlIGNsYXNzIGFuZCBzeW5jIHRoZSBgYXJpYS1wcmVzc2VkYCBhdHRyaWJ1dGUgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgLnRvZ2dsZSgpYCBtZXRob2RcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKENMQVNTX05BTUVfQUNUSVZFKSlcbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gQnV0dG9uLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcylcblxuICAgICAgaWYgKGNvbmZpZyA9PT0gJ3RvZ2dsZScpIHtcbiAgICAgICAgZGF0YVtjb25maWddKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSwgU0VMRUNUT1JfREFUQV9UT0dHTEUsIGV2ZW50ID0+IHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gIGNvbnN0IGJ1dHRvbiA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KFNFTEVDVE9SX0RBVEFfVE9HR0xFKVxuICBjb25zdCBkYXRhID0gQnV0dG9uLmdldE9yQ3JlYXRlSW5zdGFuY2UoYnV0dG9uKVxuXG4gIGRhdGEudG9nZ2xlKClcbn0pXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5CdXR0b24gdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oQnV0dG9uKVxuXG5leHBvcnQgZGVmYXVsdCBCdXR0b25cbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4yKTogZG9tL21hbmlwdWxhdG9yLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplRGF0YSh2YWwpIHtcbiAgaWYgKHZhbCA9PT0gJ3RydWUnKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGlmICh2YWwgPT09ICdmYWxzZScpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGlmICh2YWwgPT09IE51bWJlcih2YWwpLnRvU3RyaW5nKCkpIHtcbiAgICByZXR1cm4gTnVtYmVyKHZhbClcbiAgfVxuXG4gIGlmICh2YWwgPT09ICcnIHx8IHZhbCA9PT0gJ251bGwnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplRGF0YUtleShrZXkpIHtcbiAgcmV0dXJuIGtleS5yZXBsYWNlKC9bQS1aXS9nLCBjaHIgPT4gYC0ke2Noci50b0xvd2VyQ2FzZSgpfWApXG59XG5cbmNvbnN0IE1hbmlwdWxhdG9yID0ge1xuICBzZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsIGtleSwgdmFsdWUpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShgZGF0YS1icy0ke25vcm1hbGl6ZURhdGFLZXkoa2V5KX1gLCB2YWx1ZSlcbiAgfSxcblxuICByZW1vdmVEYXRhQXR0cmlidXRlKGVsZW1lbnQsIGtleSkge1xuICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGBkYXRhLWJzLSR7bm9ybWFsaXplRGF0YUtleShrZXkpfWApXG4gIH0sXG5cbiAgZ2V0RGF0YUF0dHJpYnV0ZXMoZWxlbWVudCkge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuIHt9XG4gICAgfVxuXG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHt9XG5cbiAgICBPYmplY3Qua2V5cyhlbGVtZW50LmRhdGFzZXQpXG4gICAgICAuZmlsdGVyKGtleSA9PiBrZXkuc3RhcnRzV2l0aCgnYnMnKSlcbiAgICAgIC5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGxldCBwdXJlS2V5ID0ga2V5LnJlcGxhY2UoL15icy8sICcnKVxuICAgICAgICBwdXJlS2V5ID0gcHVyZUtleS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHB1cmVLZXkuc2xpY2UoMSwgcHVyZUtleS5sZW5ndGgpXG4gICAgICAgIGF0dHJpYnV0ZXNbcHVyZUtleV0gPSBub3JtYWxpemVEYXRhKGVsZW1lbnQuZGF0YXNldFtrZXldKVxuICAgICAgfSlcblxuICAgIHJldHVybiBhdHRyaWJ1dGVzXG4gIH0sXG5cbiAgZ2V0RGF0YUF0dHJpYnV0ZShlbGVtZW50LCBrZXkpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplRGF0YShlbGVtZW50LmdldEF0dHJpYnV0ZShgZGF0YS1icy0ke25vcm1hbGl6ZURhdGFLZXkoa2V5KX1gKSlcbiAgfSxcblxuICBvZmZzZXQoZWxlbWVudCkge1xuICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG5cbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiByZWN0LnRvcCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wLFxuICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0XG4gICAgfVxuICB9LFxuXG4gIHBvc2l0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICAgIGxlZnQ6IGVsZW1lbnQub2Zmc2V0TGVmdFxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNYW5pcHVsYXRvclxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiBjYXJvdXNlbC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7XG4gIGRlZmluZUpRdWVyeVBsdWdpbixcbiAgZ2V0RWxlbWVudEZyb21TZWxlY3RvcixcbiAgaXNSVEwsXG4gIGlzVmlzaWJsZSxcbiAgZ2V0TmV4dEFjdGl2ZUVsZW1lbnQsXG4gIHJlZmxvdyxcbiAgdHJpZ2dlclRyYW5zaXRpb25FbmQsXG4gIHR5cGVDaGVja0NvbmZpZ1xufSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXInXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSAnLi9kb20vbWFuaXB1bGF0b3InXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi9kb20vc2VsZWN0b3ItZW5naW5lJ1xuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSAnLi9iYXNlLWNvbXBvbmVudCdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSA9ICdjYXJvdXNlbCdcbmNvbnN0IERBVEFfS0VZID0gJ2JzLmNhcm91c2VsJ1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknXG5cbmNvbnN0IEFSUk9XX0xFRlRfS0VZID0gJ0Fycm93TGVmdCdcbmNvbnN0IEFSUk9XX1JJR0hUX0tFWSA9ICdBcnJvd1JpZ2h0J1xuY29uc3QgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCA9IDUwMCAvLyBUaW1lIGZvciBtb3VzZSBjb21wYXQgZXZlbnRzIHRvIGZpcmUgYWZ0ZXIgdG91Y2hcbmNvbnN0IFNXSVBFX1RIUkVTSE9MRCA9IDQwXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIGludGVydmFsOiA1MDAwLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgc2xpZGU6IGZhbHNlLFxuICBwYXVzZTogJ2hvdmVyJyxcbiAgd3JhcDogdHJ1ZSxcbiAgdG91Y2g6IHRydWVcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIGludGVydmFsOiAnKG51bWJlcnxib29sZWFuKScsXG4gIGtleWJvYXJkOiAnYm9vbGVhbicsXG4gIHNsaWRlOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gIHBhdXNlOiAnKHN0cmluZ3xib29sZWFuKScsXG4gIHdyYXA6ICdib29sZWFuJyxcbiAgdG91Y2g6ICdib29sZWFuJ1xufVxuXG5jb25zdCBPUkRFUl9ORVhUID0gJ25leHQnXG5jb25zdCBPUkRFUl9QUkVWID0gJ3ByZXYnXG5jb25zdCBESVJFQ1RJT05fTEVGVCA9ICdsZWZ0J1xuY29uc3QgRElSRUNUSU9OX1JJR0hUID0gJ3JpZ2h0J1xuXG5jb25zdCBLRVlfVE9fRElSRUNUSU9OID0ge1xuICBbQVJST1dfTEVGVF9LRVldOiBESVJFQ1RJT05fUklHSFQsXG4gIFtBUlJPV19SSUdIVF9LRVldOiBESVJFQ1RJT05fTEVGVFxufVxuXG5jb25zdCBFVkVOVF9TTElERSA9IGBzbGlkZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1NMSUQgPSBgc2xpZCR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0tFWURPV04gPSBga2V5ZG93biR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX01PVVNFRU5URVIgPSBgbW91c2VlbnRlciR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX01PVVNFTEVBVkUgPSBgbW91c2VsZWF2ZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1RPVUNIU1RBUlQgPSBgdG91Y2hzdGFydCR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1RPVUNITU9WRSA9IGB0b3VjaG1vdmUke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9UT1VDSEVORCA9IGB0b3VjaGVuZCR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1BPSU5URVJET1dOID0gYHBvaW50ZXJkb3duJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfUE9JTlRFUlVQID0gYHBvaW50ZXJ1cCR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0RSQUdfU1RBUlQgPSBgZHJhZ3N0YXJ0JHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfTE9BRF9EQVRBX0FQSSA9IGBsb2FkJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkgPSBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5cbmNvbnN0IENMQVNTX05BTUVfQ0FST1VTRUwgPSAnY2Fyb3VzZWwnXG5jb25zdCBDTEFTU19OQU1FX0FDVElWRSA9ICdhY3RpdmUnXG5jb25zdCBDTEFTU19OQU1FX1NMSURFID0gJ3NsaWRlJ1xuY29uc3QgQ0xBU1NfTkFNRV9FTkQgPSAnY2Fyb3VzZWwtaXRlbS1lbmQnXG5jb25zdCBDTEFTU19OQU1FX1NUQVJUID0gJ2Nhcm91c2VsLWl0ZW0tc3RhcnQnXG5jb25zdCBDTEFTU19OQU1FX05FWFQgPSAnY2Fyb3VzZWwtaXRlbS1uZXh0J1xuY29uc3QgQ0xBU1NfTkFNRV9QUkVWID0gJ2Nhcm91c2VsLWl0ZW0tcHJldidcbmNvbnN0IENMQVNTX05BTUVfUE9JTlRFUl9FVkVOVCA9ICdwb2ludGVyLWV2ZW50J1xuXG5jb25zdCBTRUxFQ1RPUl9BQ1RJVkUgPSAnLmFjdGl2ZSdcbmNvbnN0IFNFTEVDVE9SX0FDVElWRV9JVEVNID0gJy5hY3RpdmUuY2Fyb3VzZWwtaXRlbSdcbmNvbnN0IFNFTEVDVE9SX0lURU0gPSAnLmNhcm91c2VsLWl0ZW0nXG5jb25zdCBTRUxFQ1RPUl9JVEVNX0lNRyA9ICcuY2Fyb3VzZWwtaXRlbSBpbWcnXG5jb25zdCBTRUxFQ1RPUl9ORVhUX1BSRVYgPSAnLmNhcm91c2VsLWl0ZW0tbmV4dCwgLmNhcm91c2VsLWl0ZW0tcHJldidcbmNvbnN0IFNFTEVDVE9SX0lORElDQVRPUlMgPSAnLmNhcm91c2VsLWluZGljYXRvcnMnXG5jb25zdCBTRUxFQ1RPUl9JTkRJQ0FUT1IgPSAnW2RhdGEtYnMtdGFyZ2V0XSdcbmNvbnN0IFNFTEVDVE9SX0RBVEFfU0xJREUgPSAnW2RhdGEtYnMtc2xpZGVdLCBbZGF0YS1icy1zbGlkZS10b10nXG5jb25zdCBTRUxFQ1RPUl9EQVRBX1JJREUgPSAnW2RhdGEtYnMtcmlkZT1cImNhcm91c2VsXCJdJ1xuXG5jb25zdCBQT0lOVEVSX1RZUEVfVE9VQ0ggPSAndG91Y2gnXG5jb25zdCBQT0lOVEVSX1RZUEVfUEVOID0gJ3BlbidcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5jbGFzcyBDYXJvdXNlbCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50KVxuXG4gICAgdGhpcy5faXRlbXMgPSBudWxsXG4gICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsXG4gICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGxcbiAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlXG4gICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2VcbiAgICB0aGlzLnRvdWNoVGltZW91dCA9IG51bGxcbiAgICB0aGlzLnRvdWNoU3RhcnRYID0gMFxuICAgIHRoaXMudG91Y2hEZWx0YVggPSAwXG5cbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9JTkRJQ0FUT1JTLCB0aGlzLl9lbGVtZW50KVxuICAgIHRoaXMuX3RvdWNoU3VwcG9ydGVkID0gJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDBcbiAgICB0aGlzLl9wb2ludGVyRXZlbnQgPSBCb29sZWFuKHdpbmRvdy5Qb2ludGVyRXZlbnQpXG5cbiAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpXG4gIH1cblxuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUVcbiAgfVxuXG4gIC8vIFB1YmxpY1xuXG4gIG5leHQoKSB7XG4gICAgdGhpcy5fc2xpZGUoT1JERVJfTkVYVClcbiAgfVxuXG4gIG5leHRXaGVuVmlzaWJsZSgpIHtcbiAgICAvLyBEb24ndCBjYWxsIG5leHQgd2hlbiB0aGUgcGFnZSBpc24ndCB2aXNpYmxlXG4gICAgLy8gb3IgdGhlIGNhcm91c2VsIG9yIGl0cyBwYXJlbnQgaXNuJ3QgdmlzaWJsZVxuICAgIGlmICghZG9jdW1lbnQuaGlkZGVuICYmIGlzVmlzaWJsZSh0aGlzLl9lbGVtZW50KSkge1xuICAgICAgdGhpcy5uZXh0KClcbiAgICB9XG4gIH1cblxuICBwcmV2KCkge1xuICAgIHRoaXMuX3NsaWRlKE9SREVSX1BSRVYpXG4gIH1cblxuICBwYXVzZShldmVudCkge1xuICAgIGlmICghZXZlbnQpIHtcbiAgICAgIHRoaXMuX2lzUGF1c2VkID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX05FWFRfUFJFViwgdGhpcy5fZWxlbWVudCkpIHtcbiAgICAgIHRyaWdnZXJUcmFuc2l0aW9uRW5kKHRoaXMuX2VsZW1lbnQpXG4gICAgICB0aGlzLmN5Y2xlKHRydWUpXG4gICAgfVxuXG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbClcbiAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGxcbiAgfVxuXG4gIGN5Y2xlKGV2ZW50KSB7XG4gICAgaWYgKCFldmVudCkge1xuICAgICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9pbnRlcnZhbCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbClcbiAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb25maWcgJiYgdGhpcy5fY29uZmlnLmludGVydmFsICYmICF0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgdGhpcy5fdXBkYXRlSW50ZXJ2YWwoKVxuXG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IHNldEludGVydmFsKFxuICAgICAgICAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID8gdGhpcy5uZXh0V2hlblZpc2libGUgOiB0aGlzLm5leHQpLmJpbmQodGhpcyksXG4gICAgICAgIHRoaXMuX2NvbmZpZy5pbnRlcnZhbFxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIHRvKGluZGV4KSB7XG4gICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfQUNUSVZFX0lURU0sIHRoaXMuX2VsZW1lbnQpXG4gICAgY29uc3QgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fYWN0aXZlRWxlbWVudClcblxuICAgIGlmIChpbmRleCA+IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDEgfHwgaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICBFdmVudEhhbmRsZXIub25lKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NMSUQsICgpID0+IHRoaXMudG8oaW5kZXgpKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZUluZGV4ID09PSBpbmRleCkge1xuICAgICAgdGhpcy5wYXVzZSgpXG4gICAgICB0aGlzLmN5Y2xlKClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IG9yZGVyID0gaW5kZXggPiBhY3RpdmVJbmRleCA/XG4gICAgICBPUkRFUl9ORVhUIDpcbiAgICAgIE9SREVSX1BSRVZcblxuICAgIHRoaXMuX3NsaWRlKG9yZGVyLCB0aGlzLl9pdGVtc1tpbmRleF0pXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi5EZWZhdWx0LFxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiB7fSlcbiAgICB9XG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2hhbmRsZVN3aXBlKCkge1xuICAgIGNvbnN0IGFic0RlbHRheCA9IE1hdGguYWJzKHRoaXMudG91Y2hEZWx0YVgpXG5cbiAgICBpZiAoYWJzRGVsdGF4IDw9IFNXSVBFX1RIUkVTSE9MRCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgZGlyZWN0aW9uID0gYWJzRGVsdGF4IC8gdGhpcy50b3VjaERlbHRhWFxuXG4gICAgdGhpcy50b3VjaERlbHRhWCA9IDBcblxuICAgIGlmICghZGlyZWN0aW9uKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9zbGlkZShkaXJlY3Rpb24gPiAwID8gRElSRUNUSU9OX1JJR0hUIDogRElSRUNUSU9OX0xFRlQpXG4gIH1cblxuICBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKHRoaXMuX2NvbmZpZy5rZXlib2FyZCkge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0tFWURPV04sIGV2ZW50ID0+IHRoaXMuX2tleWRvd24oZXZlbnQpKVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb25maWcucGF1c2UgPT09ICdob3ZlcicpIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9NT1VTRUVOVEVSLCBldmVudCA9PiB0aGlzLnBhdXNlKGV2ZW50KSlcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9NT1VTRUxFQVZFLCBldmVudCA9PiB0aGlzLmN5Y2xlKGV2ZW50KSlcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnRvdWNoICYmIHRoaXMuX3RvdWNoU3VwcG9ydGVkKSB7XG4gICAgICB0aGlzLl9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzKClcbiAgICB9XG4gIH1cblxuICBfYWRkVG91Y2hFdmVudExpc3RlbmVycygpIHtcbiAgICBjb25zdCBzdGFydCA9IGV2ZW50ID0+IHtcbiAgICAgIGlmICh0aGlzLl9wb2ludGVyRXZlbnQgJiYgKGV2ZW50LnBvaW50ZXJUeXBlID09PSBQT0lOVEVSX1RZUEVfUEVOIHx8IGV2ZW50LnBvaW50ZXJUeXBlID09PSBQT0lOVEVSX1RZUEVfVE9VQ0gpKSB7XG4gICAgICAgIHRoaXMudG91Y2hTdGFydFggPSBldmVudC5jbGllbnRYXG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLl9wb2ludGVyRXZlbnQpIHtcbiAgICAgICAgdGhpcy50b3VjaFN0YXJ0WCA9IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WFxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG1vdmUgPSBldmVudCA9PiB7XG4gICAgICAvLyBlbnN1cmUgc3dpcGluZyB3aXRoIG9uZSB0b3VjaCBhbmQgbm90IHBpbmNoaW5nXG4gICAgICB0aGlzLnRvdWNoRGVsdGFYID0gZXZlbnQudG91Y2hlcyAmJiBldmVudC50b3VjaGVzLmxlbmd0aCA+IDEgP1xuICAgICAgICAwIDpcbiAgICAgICAgZXZlbnQudG91Y2hlc1swXS5jbGllbnRYIC0gdGhpcy50b3VjaFN0YXJ0WFxuICAgIH1cblxuICAgIGNvbnN0IGVuZCA9IGV2ZW50ID0+IHtcbiAgICAgIGlmICh0aGlzLl9wb2ludGVyRXZlbnQgJiYgKGV2ZW50LnBvaW50ZXJUeXBlID09PSBQT0lOVEVSX1RZUEVfUEVOIHx8IGV2ZW50LnBvaW50ZXJUeXBlID09PSBQT0lOVEVSX1RZUEVfVE9VQ0gpKSB7XG4gICAgICAgIHRoaXMudG91Y2hEZWx0YVggPSBldmVudC5jbGllbnRYIC0gdGhpcy50b3VjaFN0YXJ0WFxuICAgICAgfVxuXG4gICAgICB0aGlzLl9oYW5kbGVTd2lwZSgpXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnBhdXNlID09PSAnaG92ZXInKSB7XG4gICAgICAgIC8vIElmIGl0J3MgYSB0b3VjaC1lbmFibGVkIGRldmljZSwgbW91c2VlbnRlci9sZWF2ZSBhcmUgZmlyZWQgYXNcbiAgICAgICAgLy8gcGFydCBvZiB0aGUgbW91c2UgY29tcGF0aWJpbGl0eSBldmVudHMgb24gZmlyc3QgdGFwIC0gdGhlIGNhcm91c2VsXG4gICAgICAgIC8vIHdvdWxkIHN0b3AgY3ljbGluZyB1bnRpbCB1c2VyIHRhcHBlZCBvdXQgb2YgaXQ7XG4gICAgICAgIC8vIGhlcmUsIHdlIGxpc3RlbiBmb3IgdG91Y2hlbmQsIGV4cGxpY2l0bHkgcGF1c2UgdGhlIGNhcm91c2VsXG4gICAgICAgIC8vIChhcyBpZiBpdCdzIHRoZSBzZWNvbmQgdGltZSB3ZSB0YXAgb24gaXQsIG1vdXNlZW50ZXIgY29tcGF0IGV2ZW50XG4gICAgICAgIC8vIGlzIE5PVCBmaXJlZCkgYW5kIGFmdGVyIGEgdGltZW91dCAodG8gYWxsb3cgZm9yIG1vdXNlIGNvbXBhdGliaWxpdHlcbiAgICAgICAgLy8gZXZlbnRzIHRvIGZpcmUpIHdlIGV4cGxpY2l0bHkgcmVzdGFydCBjeWNsaW5nXG5cbiAgICAgICAgdGhpcy5wYXVzZSgpXG4gICAgICAgIGlmICh0aGlzLnRvdWNoVGltZW91dCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRvdWNoVGltZW91dClcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudG91Y2hUaW1lb3V0ID0gc2V0VGltZW91dChldmVudCA9PiB0aGlzLmN5Y2xlKGV2ZW50KSwgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCArIHRoaXMuX2NvbmZpZy5pbnRlcnZhbClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0lURU1fSU1HLCB0aGlzLl9lbGVtZW50KS5mb3JFYWNoKGl0ZW1JbWcgPT4ge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKGl0ZW1JbWcsIEVWRU5UX0RSQUdfU1RBUlQsIGUgPT4gZS5wcmV2ZW50RGVmYXVsdCgpKVxuICAgIH0pXG5cbiAgICBpZiAodGhpcy5fcG9pbnRlckV2ZW50KSB7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfUE9JTlRFUkRPV04sIGV2ZW50ID0+IHN0YXJ0KGV2ZW50KSlcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9QT0lOVEVSVVAsIGV2ZW50ID0+IGVuZChldmVudCkpXG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1BPSU5URVJfRVZFTlQpXG4gICAgfSBlbHNlIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9UT1VDSFNUQVJULCBldmVudCA9PiBzdGFydChldmVudCkpXG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfVE9VQ0hNT1ZFLCBldmVudCA9PiBtb3ZlKGV2ZW50KSlcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9UT1VDSEVORCwgZXZlbnQgPT4gZW5kKGV2ZW50KSlcbiAgICB9XG4gIH1cblxuICBfa2V5ZG93bihldmVudCkge1xuICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgZGlyZWN0aW9uID0gS0VZX1RPX0RJUkVDVElPTltldmVudC5rZXldXG4gICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgdGhpcy5fc2xpZGUoZGlyZWN0aW9uKVxuICAgIH1cbiAgfVxuXG4gIF9nZXRJdGVtSW5kZXgoZWxlbWVudCkge1xuICAgIHRoaXMuX2l0ZW1zID0gZWxlbWVudCAmJiBlbGVtZW50LnBhcmVudE5vZGUgP1xuICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9JVEVNLCBlbGVtZW50LnBhcmVudE5vZGUpIDpcbiAgICAgIFtdXG5cbiAgICByZXR1cm4gdGhpcy5faXRlbXMuaW5kZXhPZihlbGVtZW50KVxuICB9XG5cbiAgX2dldEl0ZW1CeU9yZGVyKG9yZGVyLCBhY3RpdmVFbGVtZW50KSB7XG4gICAgY29uc3QgaXNOZXh0ID0gb3JkZXIgPT09IE9SREVSX05FWFRcbiAgICByZXR1cm4gZ2V0TmV4dEFjdGl2ZUVsZW1lbnQodGhpcy5faXRlbXMsIGFjdGl2ZUVsZW1lbnQsIGlzTmV4dCwgdGhpcy5fY29uZmlnLndyYXApXG4gIH1cblxuICBfdHJpZ2dlclNsaWRlRXZlbnQocmVsYXRlZFRhcmdldCwgZXZlbnREaXJlY3Rpb25OYW1lKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgocmVsYXRlZFRhcmdldClcbiAgICBjb25zdCBmcm9tSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9BQ1RJVkVfSVRFTSwgdGhpcy5fZWxlbWVudCkpXG5cbiAgICByZXR1cm4gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0xJREUsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQsXG4gICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcbiAgICAgIGZyb206IGZyb21JbmRleCxcbiAgICAgIHRvOiB0YXJnZXRJbmRleFxuICAgIH0pXG4gIH1cblxuICBfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgaWYgKHRoaXMuX2luZGljYXRvcnNFbGVtZW50KSB7XG4gICAgICBjb25zdCBhY3RpdmVJbmRpY2F0b3IgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0FDVElWRSwgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpXG5cbiAgICAgIGFjdGl2ZUluZGljYXRvci5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFKVxuICAgICAgYWN0aXZlSW5kaWNhdG9yLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50JylcblxuICAgICAgY29uc3QgaW5kaWNhdG9ycyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfSU5ESUNBVE9SLCB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudClcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRpY2F0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChOdW1iZXIucGFyc2VJbnQoaW5kaWNhdG9yc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtc2xpZGUtdG8nKSwgMTApID09PSB0aGlzLl9nZXRJdGVtSW5kZXgoZWxlbWVudCkpIHtcbiAgICAgICAgICBpbmRpY2F0b3JzW2ldLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUpXG4gICAgICAgICAgaW5kaWNhdG9yc1tpXS5zZXRBdHRyaWJ1dGUoJ2FyaWEtY3VycmVudCcsICd0cnVlJylcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3VwZGF0ZUludGVydmFsKCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9hY3RpdmVFbGVtZW50IHx8IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfQUNUSVZFX0lURU0sIHRoaXMuX2VsZW1lbnQpXG5cbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGVsZW1lbnRJbnRlcnZhbCA9IE51bWJlci5wYXJzZUludChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1icy1pbnRlcnZhbCcpLCAxMClcblxuICAgIGlmIChlbGVtZW50SW50ZXJ2YWwpIHtcbiAgICAgIHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgPSB0aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsIHx8IHRoaXMuX2NvbmZpZy5pbnRlcnZhbFxuICAgICAgdGhpcy5fY29uZmlnLmludGVydmFsID0gZWxlbWVudEludGVydmFsXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCA9IHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgfHwgdGhpcy5fY29uZmlnLmludGVydmFsXG4gICAgfVxuICB9XG5cbiAgX3NsaWRlKGRpcmVjdGlvbk9yT3JkZXIsIGVsZW1lbnQpIHtcbiAgICBjb25zdCBvcmRlciA9IHRoaXMuX2RpcmVjdGlvblRvT3JkZXIoZGlyZWN0aW9uT3JPcmRlcilcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9BQ1RJVkVfSVRFTSwgdGhpcy5fZWxlbWVudClcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudClcbiAgICBjb25zdCBuZXh0RWxlbWVudCA9IGVsZW1lbnQgfHwgdGhpcy5fZ2V0SXRlbUJ5T3JkZXIob3JkZXIsIGFjdGl2ZUVsZW1lbnQpXG5cbiAgICBjb25zdCBuZXh0RWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KG5leHRFbGVtZW50KVxuICAgIGNvbnN0IGlzQ3ljbGluZyA9IEJvb2xlYW4odGhpcy5faW50ZXJ2YWwpXG5cbiAgICBjb25zdCBpc05leHQgPSBvcmRlciA9PT0gT1JERVJfTkVYVFxuICAgIGNvbnN0IGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gaXNOZXh0ID8gQ0xBU1NfTkFNRV9TVEFSVCA6IENMQVNTX05BTUVfRU5EXG4gICAgY29uc3Qgb3JkZXJDbGFzc05hbWUgPSBpc05leHQgPyBDTEFTU19OQU1FX05FWFQgOiBDTEFTU19OQU1FX1BSRVZcbiAgICBjb25zdCBldmVudERpcmVjdGlvbk5hbWUgPSB0aGlzLl9vcmRlclRvRGlyZWN0aW9uKG9yZGVyKVxuXG4gICAgaWYgKG5leHRFbGVtZW50ICYmIG5leHRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0FDVElWRSkpIHtcbiAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzbGlkZUV2ZW50ID0gdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobmV4dEVsZW1lbnQsIGV2ZW50RGlyZWN0aW9uTmFtZSlcbiAgICBpZiAoc2xpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoIWFjdGl2ZUVsZW1lbnQgfHwgIW5leHRFbGVtZW50KSB7XG4gICAgICAvLyBTb21lIHdlaXJkbmVzcyBpcyBoYXBwZW5pbmcsIHNvIHdlIGJhaWxcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2lzU2xpZGluZyA9IHRydWVcblxuICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgIHRoaXMucGF1c2UoKVxuICAgIH1cblxuICAgIHRoaXMuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQobmV4dEVsZW1lbnQpXG4gICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG5leHRFbGVtZW50XG5cbiAgICBjb25zdCB0cmlnZ2VyU2xpZEV2ZW50ID0gKCkgPT4ge1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0xJRCwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBuZXh0RWxlbWVudCxcbiAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICAgIGZyb206IGFjdGl2ZUVsZW1lbnRJbmRleCxcbiAgICAgICAgdG86IG5leHRFbGVtZW50SW5kZXhcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0xJREUpKSB7XG4gICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKG9yZGVyQ2xhc3NOYW1lKVxuXG4gICAgICByZWZsb3cobmV4dEVsZW1lbnQpXG5cbiAgICAgIGFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChkaXJlY3Rpb25hbENsYXNzTmFtZSlcbiAgICAgIG5leHRFbGVtZW50LmNsYXNzTGlzdC5hZGQoZGlyZWN0aW9uYWxDbGFzc05hbWUpXG5cbiAgICAgIGNvbnN0IGNvbXBsZXRlQ2FsbEJhY2sgPSAoKSA9PiB7XG4gICAgICAgIG5leHRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoZGlyZWN0aW9uYWxDbGFzc05hbWUsIG9yZGVyQ2xhc3NOYW1lKVxuICAgICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFKVxuXG4gICAgICAgIGFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0FDVElWRSwgb3JkZXJDbGFzc05hbWUsIGRpcmVjdGlvbmFsQ2xhc3NOYW1lKVxuXG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlXG5cbiAgICAgICAgc2V0VGltZW91dCh0cmlnZ2VyU2xpZEV2ZW50LCAwKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlQ2FsbEJhY2ssIGFjdGl2ZUVsZW1lbnQsIHRydWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0FDVElWRSlcbiAgICAgIG5leHRFbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUpXG5cbiAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlXG4gICAgICB0cmlnZ2VyU2xpZEV2ZW50KClcbiAgICB9XG5cbiAgICBpZiAoaXNDeWNsaW5nKSB7XG4gICAgICB0aGlzLmN5Y2xlKClcbiAgICB9XG4gIH1cblxuICBfZGlyZWN0aW9uVG9PcmRlcihkaXJlY3Rpb24pIHtcbiAgICBpZiAoIVtESVJFQ1RJT05fUklHSFQsIERJUkVDVElPTl9MRUZUXS5pbmNsdWRlcyhkaXJlY3Rpb24pKSB7XG4gICAgICByZXR1cm4gZGlyZWN0aW9uXG4gICAgfVxuXG4gICAgaWYgKGlzUlRMKCkpIHtcbiAgICAgIHJldHVybiBkaXJlY3Rpb24gPT09IERJUkVDVElPTl9MRUZUID8gT1JERVJfUFJFViA6IE9SREVSX05FWFRcbiAgICB9XG5cbiAgICByZXR1cm4gZGlyZWN0aW9uID09PSBESVJFQ1RJT05fTEVGVCA/IE9SREVSX05FWFQgOiBPUkRFUl9QUkVWXG4gIH1cblxuICBfb3JkZXJUb0RpcmVjdGlvbihvcmRlcikge1xuICAgIGlmICghW09SREVSX05FWFQsIE9SREVSX1BSRVZdLmluY2x1ZGVzKG9yZGVyKSkge1xuICAgICAgcmV0dXJuIG9yZGVyXG4gICAgfVxuXG4gICAgaWYgKGlzUlRMKCkpIHtcbiAgICAgIHJldHVybiBvcmRlciA9PT0gT1JERVJfUFJFViA/IERJUkVDVElPTl9MRUZUIDogRElSRUNUSU9OX1JJR0hUXG4gICAgfVxuXG4gICAgcmV0dXJuIG9yZGVyID09PSBPUkRFUl9QUkVWID8gRElSRUNUSU9OX1JJR0hUIDogRElSRUNUSU9OX0xFRlRcbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBjYXJvdXNlbEludGVyZmFjZShlbGVtZW50LCBjb25maWcpIHtcbiAgICBjb25zdCBkYXRhID0gQ2Fyb3VzZWwuZ2V0T3JDcmVhdGVJbnN0YW5jZShlbGVtZW50LCBjb25maWcpXG5cbiAgICBsZXQgeyBfY29uZmlnIH0gPSBkYXRhXG4gICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnKSB7XG4gICAgICBfY29uZmlnID0ge1xuICAgICAgICAuLi5fY29uZmlnLFxuICAgICAgICAuLi5jb25maWdcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBhY3Rpb24gPSB0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJyA/IGNvbmZpZyA6IF9jb25maWcuc2xpZGVcblxuICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJykge1xuICAgICAgZGF0YS50byhjb25maWcpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHR5cGVvZiBkYXRhW2FjdGlvbl0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7YWN0aW9ufVwiYClcbiAgICAgIH1cblxuICAgICAgZGF0YVthY3Rpb25dKClcbiAgICB9IGVsc2UgaWYgKF9jb25maWcuaW50ZXJ2YWwgJiYgX2NvbmZpZy5yaWRlKSB7XG4gICAgICBkYXRhLnBhdXNlKClcbiAgICAgIGRhdGEuY3ljbGUoKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBDYXJvdXNlbC5jYXJvdXNlbEludGVyZmFjZSh0aGlzLCBjb25maWcpXG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBkYXRhQXBpQ2xpY2tIYW5kbGVyKGV2ZW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0aGlzKVxuXG4gICAgaWYgKCF0YXJnZXQgfHwgIXRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9DQVJPVVNFTCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgIC4uLk1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRhcmdldCksXG4gICAgICAuLi5NYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzKVxuICAgIH1cbiAgICBjb25zdCBzbGlkZUluZGV4ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtc2xpZGUtdG8nKVxuXG4gICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgIGNvbmZpZy5pbnRlcnZhbCA9IGZhbHNlXG4gICAgfVxuXG4gICAgQ2Fyb3VzZWwuY2Fyb3VzZWxJbnRlcmZhY2UodGFyZ2V0LCBjb25maWcpXG5cbiAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgQ2Fyb3VzZWwuZ2V0SW5zdGFuY2UodGFyZ2V0KS50byhzbGlkZUluZGV4KVxuICAgIH1cblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEksIFNFTEVDVE9SX0RBVEFfU0xJREUsIENhcm91c2VsLmRhdGFBcGlDbGlja0hhbmRsZXIpXG5cbkV2ZW50SGFuZGxlci5vbih3aW5kb3csIEVWRU5UX0xPQURfREFUQV9BUEksICgpID0+IHtcbiAgY29uc3QgY2Fyb3VzZWxzID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EQVRBX1JJREUpXG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNhcm91c2Vscy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIENhcm91c2VsLmNhcm91c2VsSW50ZXJmYWNlKGNhcm91c2Vsc1tpXSwgQ2Fyb3VzZWwuZ2V0SW5zdGFuY2UoY2Fyb3VzZWxzW2ldKSlcbiAgfVxufSlcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBhZGQgLkNhcm91c2VsIHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKENhcm91c2VsKVxuXG5leHBvcnQgZGVmYXVsdCBDYXJvdXNlbFxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiBjb2xsYXBzZS5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7XG4gIGRlZmluZUpRdWVyeVBsdWdpbixcbiAgZ2V0RWxlbWVudCxcbiAgZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCxcbiAgZ2V0RWxlbWVudEZyb21TZWxlY3RvcixcbiAgcmVmbG93LFxuICB0eXBlQ2hlY2tDb25maWdcbn0gZnJvbSAnLi91dGlsL2luZGV4J1xuaW1wb3J0IERhdGEgZnJvbSAnLi9kb20vZGF0YSdcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCBNYW5pcHVsYXRvciBmcm9tICcuL2RvbS9tYW5pcHVsYXRvcidcbmltcG9ydCBTZWxlY3RvckVuZ2luZSBmcm9tICcuL2RvbS9zZWxlY3Rvci1lbmdpbmUnXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50J1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FID0gJ2NvbGxhcHNlJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMuY29sbGFwc2UnXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSdcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgdG9nZ2xlOiB0cnVlLFxuICBwYXJlbnQ6ICcnXG59XG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICB0b2dnbGU6ICdib29sZWFuJyxcbiAgcGFyZW50OiAnKHN0cmluZ3xlbGVtZW50KSdcbn1cblxuY29uc3QgRVZFTlRfU0hPVyA9IGBzaG93JHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0hPV04gPSBgc2hvd24ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9ISURFID0gYGhpZGUke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9ISURERU4gPSBgaGlkZGVuJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkgPSBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5cbmNvbnN0IENMQVNTX05BTUVfU0hPVyA9ICdzaG93J1xuY29uc3QgQ0xBU1NfTkFNRV9DT0xMQVBTRSA9ICdjb2xsYXBzZSdcbmNvbnN0IENMQVNTX05BTUVfQ09MTEFQU0lORyA9ICdjb2xsYXBzaW5nJ1xuY29uc3QgQ0xBU1NfTkFNRV9DT0xMQVBTRUQgPSAnY29sbGFwc2VkJ1xuXG5jb25zdCBXSURUSCA9ICd3aWR0aCdcbmNvbnN0IEhFSUdIVCA9ICdoZWlnaHQnXG5cbmNvbnN0IFNFTEVDVE9SX0FDVElWRVMgPSAnLnNob3csIC5jb2xsYXBzaW5nJ1xuY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEUgPSAnW2RhdGEtYnMtdG9nZ2xlPVwiY29sbGFwc2VcIl0nXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBDb2xsYXBzZSBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50KVxuXG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2VcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgIHRoaXMuX3RyaWdnZXJBcnJheSA9IFNlbGVjdG9yRW5naW5lLmZpbmQoXG4gICAgICBgJHtTRUxFQ1RPUl9EQVRBX1RPR0dMRX1baHJlZj1cIiMke3RoaXMuX2VsZW1lbnQuaWR9XCJdLGAgK1xuICAgICAgYCR7U0VMRUNUT1JfREFUQV9UT0dHTEV9W2RhdGEtYnMtdGFyZ2V0PVwiIyR7dGhpcy5fZWxlbWVudC5pZH1cIl1gXG4gICAgKVxuXG4gICAgY29uc3QgdG9nZ2xlTGlzdCA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9UT0dHTEUpXG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdG9nZ2xlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgZWxlbSA9IHRvZ2dsZUxpc3RbaV1cbiAgICAgIGNvbnN0IHNlbGVjdG9yID0gZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtKVxuICAgICAgY29uc3QgZmlsdGVyRWxlbWVudCA9IFNlbGVjdG9yRW5naW5lLmZpbmQoc2VsZWN0b3IpXG4gICAgICAgIC5maWx0ZXIoZm91bmRFbGVtID0+IGZvdW5kRWxlbSA9PT0gdGhpcy5fZWxlbWVudClcblxuICAgICAgaWYgKHNlbGVjdG9yICE9PSBudWxsICYmIGZpbHRlckVsZW1lbnQubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3JcbiAgICAgICAgdGhpcy5fdHJpZ2dlckFycmF5LnB1c2goZWxlbSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9wYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50ID8gdGhpcy5fZ2V0UGFyZW50KCkgOiBudWxsXG5cbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5wYXJlbnQpIHtcbiAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl9lbGVtZW50LCB0aGlzLl90cmlnZ2VyQXJyYXkpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy50b2dnbGUpIHtcbiAgICAgIHRoaXMudG9nZ2xlKClcbiAgICB9XG4gIH1cblxuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUVcbiAgfVxuXG4gIC8vIFB1YmxpY1xuXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKSkge1xuICAgICAgdGhpcy5oaWRlKClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zaG93KClcbiAgICB9XG4gIH1cblxuICBzaG93KCkge1xuICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IGFjdGl2ZXNcbiAgICBsZXQgYWN0aXZlc0RhdGFcblxuICAgIGlmICh0aGlzLl9wYXJlbnQpIHtcbiAgICAgIGFjdGl2ZXMgPSBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0FDVElWRVMsIHRoaXMuX3BhcmVudClcbiAgICAgICAgLmZpbHRlcihlbGVtID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5wYXJlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtcGFyZW50JykgPT09IHRoaXMuX2NvbmZpZy5wYXJlbnRcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9DT0xMQVBTRSlcbiAgICAgICAgfSlcblxuICAgICAgaWYgKGFjdGl2ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGFjdGl2ZXMgPSBudWxsXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY29udGFpbmVyID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZSh0aGlzLl9zZWxlY3RvcilcbiAgICBpZiAoYWN0aXZlcykge1xuICAgICAgY29uc3QgdGVtcEFjdGl2ZURhdGEgPSBhY3RpdmVzLmZpbmQoZWxlbSA9PiBjb250YWluZXIgIT09IGVsZW0pXG4gICAgICBhY3RpdmVzRGF0YSA9IHRlbXBBY3RpdmVEYXRhID8gQ29sbGFwc2UuZ2V0SW5zdGFuY2UodGVtcEFjdGl2ZURhdGEpIDogbnVsbFxuXG4gICAgICBpZiAoYWN0aXZlc0RhdGEgJiYgYWN0aXZlc0RhdGEuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzdGFydEV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVylcbiAgICBpZiAoc3RhcnRFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoYWN0aXZlcykge1xuICAgICAgYWN0aXZlcy5mb3JFYWNoKGVsZW1BY3RpdmUgPT4ge1xuICAgICAgICBpZiAoY29udGFpbmVyICE9PSBlbGVtQWN0aXZlKSB7XG4gICAgICAgICAgQ29sbGFwc2UuY29sbGFwc2VJbnRlcmZhY2UoZWxlbUFjdGl2ZSwgJ2hpZGUnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhY3RpdmVzRGF0YSkge1xuICAgICAgICAgIERhdGEuc2V0KGVsZW1BY3RpdmUsIERBVEFfS0VZLCBudWxsKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpXG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9DT0xMQVBTRSlcbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9DT0xMQVBTSU5HKVxuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gMFxuXG4gICAgaWYgKHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3RyaWdnZXJBcnJheS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9DT0xMQVBTRUQpXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKHRydWUpXG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0NPTExBUFNJTkcpXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9DT0xMQVBTRSwgQ0xBU1NfTkFNRV9TSE9XKVxuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAnJ1xuXG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcoZmFsc2UpXG5cbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1dOKVxuICAgIH1cblxuICAgIGNvbnN0IGNhcGl0YWxpemVkRGltZW5zaW9uID0gZGltZW5zaW9uWzBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoMSlcbiAgICBjb25zdCBzY3JvbGxTaXplID0gYHNjcm9sbCR7Y2FwaXRhbGl6ZWREaW1lbnNpb259YFxuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgdGhpcy5fZWxlbWVudCwgdHJ1ZSlcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSBgJHt0aGlzLl9lbGVtZW50W3Njcm9sbFNpemVdfXB4YFxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1cpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzdGFydEV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElERSlcbiAgICBpZiAoc3RhcnRFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKVxuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gYCR7dGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtkaW1lbnNpb25dfXB4YFxuXG4gICAgcmVmbG93KHRoaXMuX2VsZW1lbnQpXG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9DT0xMQVBTSU5HKVxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0NPTExBUFNFLCBDTEFTU19OQU1FX1NIT1cpXG5cbiAgICBjb25zdCB0cmlnZ2VyQXJyYXlMZW5ndGggPSB0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoXG4gICAgaWYgKHRyaWdnZXJBcnJheUxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpZ2dlckFycmF5TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdHJpZ2dlciA9IHRoaXMuX3RyaWdnZXJBcnJheVtpXVxuICAgICAgICBjb25zdCBlbGVtID0gZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0cmlnZ2VyKVxuXG4gICAgICAgIGlmIChlbGVtICYmICFlbGVtLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1cpKSB7XG4gICAgICAgICAgdHJpZ2dlci5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQ09MTEFQU0VEKVxuICAgICAgICAgIHRyaWdnZXIuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSlcblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKVxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0lORylcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNFKVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElEREVOKVxuICAgIH1cblxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnXG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLl9lbGVtZW50LCB0cnVlKVxuICB9XG5cbiAgc2V0VHJhbnNpdGlvbmluZyhpc1RyYW5zaXRpb25pbmcpIHtcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBpc1RyYW5zaXRpb25pbmdcbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHtcbiAgICAgIC4uLkRlZmF1bHQsXG4gICAgICAuLi5jb25maWdcbiAgICB9XG4gICAgY29uZmlnLnRvZ2dsZSA9IEJvb2xlYW4oY29uZmlnLnRvZ2dsZSkgLy8gQ29lcmNlIHN0cmluZyB2YWx1ZXNcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSlcbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfZ2V0RGltZW5zaW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhXSURUSCkgPyBXSURUSCA6IEhFSUdIVFxuICB9XG5cbiAgX2dldFBhcmVudCgpIHtcbiAgICBsZXQgeyBwYXJlbnQgfSA9IHRoaXMuX2NvbmZpZ1xuXG4gICAgcGFyZW50ID0gZ2V0RWxlbWVudChwYXJlbnQpXG5cbiAgICBjb25zdCBzZWxlY3RvciA9IGAke1NFTEVDVE9SX0RBVEFfVE9HR0xFfVtkYXRhLWJzLXBhcmVudD1cIiR7cGFyZW50fVwiXWBcblxuICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoc2VsZWN0b3IsIHBhcmVudClcbiAgICAgIC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICBjb25zdCBzZWxlY3RlZCA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IoZWxlbWVudClcblxuICAgICAgICB0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoXG4gICAgICAgICAgc2VsZWN0ZWQsXG4gICAgICAgICAgW2VsZW1lbnRdXG4gICAgICAgIClcbiAgICAgIH0pXG5cbiAgICByZXR1cm4gcGFyZW50XG4gIH1cblxuICBfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGVsZW1lbnQsIHRyaWdnZXJBcnJheSkge1xuICAgIGlmICghZWxlbWVudCB8fCAhdHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgaXNPcGVuID0gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKVxuXG4gICAgdHJpZ2dlckFycmF5LmZvckVhY2goZWxlbSA9PiB7XG4gICAgICBpZiAoaXNPcGVuKSB7XG4gICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0NPTExBUFNFRClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNFRClcbiAgICAgIH1cblxuICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pXG4gICAgfSlcbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBjb2xsYXBzZUludGVyZmFjZShlbGVtZW50LCBjb25maWcpIHtcbiAgICBsZXQgZGF0YSA9IENvbGxhcHNlLmdldEluc3RhbmNlKGVsZW1lbnQpXG4gICAgY29uc3QgX2NvbmZpZyA9IHtcbiAgICAgIC4uLkRlZmF1bHQsXG4gICAgICAuLi5NYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyhlbGVtZW50KSxcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSlcbiAgICB9XG5cbiAgICBpZiAoIWRhdGEgJiYgX2NvbmZpZy50b2dnbGUgJiYgdHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycgJiYgL3Nob3d8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICBfY29uZmlnLnRvZ2dsZSA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICBkYXRhID0gbmV3IENvbGxhcHNlKGVsZW1lbnQsIF9jb25maWcpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10oKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBDb2xsYXBzZS5jb2xsYXBzZUludGVyZmFjZSh0aGlzLCBjb25maWcpXG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEksIFNFTEVDVE9SX0RBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgLy8gcHJldmVudERlZmF1bHQgb25seSBmb3IgPGE+IGVsZW1lbnRzICh3aGljaCBjaGFuZ2UgdGhlIFVSTCkgbm90IGluc2lkZSB0aGUgY29sbGFwc2libGUgZWxlbWVudFxuICBpZiAoZXZlbnQudGFyZ2V0LnRhZ05hbWUgPT09ICdBJyB8fCAoZXZlbnQuZGVsZWdhdGVUYXJnZXQgJiYgZXZlbnQuZGVsZWdhdGVUYXJnZXQudGFnTmFtZSA9PT0gJ0EnKSkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIGNvbnN0IHRyaWdnZXJEYXRhID0gTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcylcbiAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpXG4gIGNvbnN0IHNlbGVjdG9yRWxlbWVudHMgPSBTZWxlY3RvckVuZ2luZS5maW5kKHNlbGVjdG9yKVxuXG4gIHNlbGVjdG9yRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICBjb25zdCBkYXRhID0gQ29sbGFwc2UuZ2V0SW5zdGFuY2UoZWxlbWVudClcbiAgICBsZXQgY29uZmlnXG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgYXR0cmlidXRlXG4gICAgICBpZiAoZGF0YS5fcGFyZW50ID09PSBudWxsICYmIHR5cGVvZiB0cmlnZ2VyRGF0YS5wYXJlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGRhdGEuX2NvbmZpZy5wYXJlbnQgPSB0cmlnZ2VyRGF0YS5wYXJlbnRcbiAgICAgICAgZGF0YS5fcGFyZW50ID0gZGF0YS5fZ2V0UGFyZW50KClcbiAgICAgIH1cblxuICAgICAgY29uZmlnID0gJ3RvZ2dsZSdcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnID0gdHJpZ2dlckRhdGFcbiAgICB9XG5cbiAgICBDb2xsYXBzZS5jb2xsYXBzZUludGVyZmFjZShlbGVtZW50LCBjb25maWcpXG4gIH0pXG59KVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuQ29sbGFwc2UgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oQ29sbGFwc2UpXG5cbmV4cG9ydCBkZWZhdWx0IENvbGxhcHNlXG4iLCJleHBvcnQgdmFyIHRvcCA9ICd0b3AnO1xuZXhwb3J0IHZhciBib3R0b20gPSAnYm90dG9tJztcbmV4cG9ydCB2YXIgcmlnaHQgPSAncmlnaHQnO1xuZXhwb3J0IHZhciBsZWZ0ID0gJ2xlZnQnO1xuZXhwb3J0IHZhciBhdXRvID0gJ2F1dG8nO1xuZXhwb3J0IHZhciBiYXNlUGxhY2VtZW50cyA9IFt0b3AsIGJvdHRvbSwgcmlnaHQsIGxlZnRdO1xuZXhwb3J0IHZhciBzdGFydCA9ICdzdGFydCc7XG5leHBvcnQgdmFyIGVuZCA9ICdlbmQnO1xuZXhwb3J0IHZhciBjbGlwcGluZ1BhcmVudHMgPSAnY2xpcHBpbmdQYXJlbnRzJztcbmV4cG9ydCB2YXIgdmlld3BvcnQgPSAndmlld3BvcnQnO1xuZXhwb3J0IHZhciBwb3BwZXIgPSAncG9wcGVyJztcbmV4cG9ydCB2YXIgcmVmZXJlbmNlID0gJ3JlZmVyZW5jZSc7XG5leHBvcnQgdmFyIHZhcmlhdGlvblBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovYmFzZVBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICByZXR1cm4gYWNjLmNvbmNhdChbcGxhY2VtZW50ICsgXCItXCIgKyBzdGFydCwgcGxhY2VtZW50ICsgXCItXCIgKyBlbmRdKTtcbn0sIFtdKTtcbmV4cG9ydCB2YXIgcGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9bXS5jb25jYXQoYmFzZVBsYWNlbWVudHMsIFthdXRvXSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICByZXR1cm4gYWNjLmNvbmNhdChbcGxhY2VtZW50LCBwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pOyAvLyBtb2RpZmllcnMgdGhhdCBuZWVkIHRvIHJlYWQgdGhlIERPTVxuXG5leHBvcnQgdmFyIGJlZm9yZVJlYWQgPSAnYmVmb3JlUmVhZCc7XG5leHBvcnQgdmFyIHJlYWQgPSAncmVhZCc7XG5leHBvcnQgdmFyIGFmdGVyUmVhZCA9ICdhZnRlclJlYWQnOyAvLyBwdXJlLWxvZ2ljIG1vZGlmaWVyc1xuXG5leHBvcnQgdmFyIGJlZm9yZU1haW4gPSAnYmVmb3JlTWFpbic7XG5leHBvcnQgdmFyIG1haW4gPSAnbWFpbic7XG5leHBvcnQgdmFyIGFmdGVyTWFpbiA9ICdhZnRlck1haW4nOyAvLyBtb2RpZmllciB3aXRoIHRoZSBwdXJwb3NlIHRvIHdyaXRlIHRvIHRoZSBET00gKG9yIHdyaXRlIGludG8gYSBmcmFtZXdvcmsgc3RhdGUpXG5cbmV4cG9ydCB2YXIgYmVmb3JlV3JpdGUgPSAnYmVmb3JlV3JpdGUnO1xuZXhwb3J0IHZhciB3cml0ZSA9ICd3cml0ZSc7XG5leHBvcnQgdmFyIGFmdGVyV3JpdGUgPSAnYWZ0ZXJXcml0ZSc7XG5leHBvcnQgdmFyIG1vZGlmaWVyUGhhc2VzID0gW2JlZm9yZVJlYWQsIHJlYWQsIGFmdGVyUmVhZCwgYmVmb3JlTWFpbiwgbWFpbiwgYWZ0ZXJNYWluLCBiZWZvcmVXcml0ZSwgd3JpdGUsIGFmdGVyV3JpdGVdOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVOYW1lKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQgPyAoZWxlbWVudC5ub2RlTmFtZSB8fCAnJykudG9Mb3dlckNhc2UoKSA6IG51bGw7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93KG5vZGUpIHtcbiAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cblxuICBpZiAobm9kZS50b1N0cmluZygpICE9PSAnW29iamVjdCBXaW5kb3ddJykge1xuICAgIHZhciBvd25lckRvY3VtZW50ID0gbm9kZS5vd25lckRvY3VtZW50O1xuICAgIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cgOiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuXG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5FbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5IVE1MRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaXNTaGFkb3dSb290KG5vZGUpIHtcbiAgLy8gSUUgMTEgaGFzIG5vIFNoYWRvd1Jvb3RcbiAgaWYgKHR5cGVvZiBTaGFkb3dSb290ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLlNoYWRvd1Jvb3Q7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgU2hhZG93Um9vdDtcbn1cblxuZXhwb3J0IHsgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50LCBpc1NoYWRvd1Jvb3QgfTsiLCJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4uL2RvbS11dGlscy9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiOyAvLyBUaGlzIG1vZGlmaWVyIHRha2VzIHRoZSBzdHlsZXMgcHJlcGFyZWQgYnkgdGhlIGBjb21wdXRlU3R5bGVzYCBtb2RpZmllclxuLy8gYW5kIGFwcGxpZXMgdGhlbSB0byB0aGUgSFRNTEVsZW1lbnRzIHN1Y2ggYXMgcG9wcGVyIGFuZCBhcnJvd1xuXG5mdW5jdGlvbiBhcHBseVN0eWxlcyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGU7XG4gIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHN0eWxlID0gc3RhdGUuc3R5bGVzW25hbWVdIHx8IHt9O1xuICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZsb3cgZG9lc24ndCBzdXBwb3J0IHRvIGV4dGVuZCB0aGlzIHByb3BlcnR5LCBidXQgaXQncyB0aGUgbW9zdFxuICAgIC8vIGVmZmVjdGl2ZSB3YXkgdG8gYXBwbHkgc3R5bGVzIHRvIGFuIEhUTUxFbGVtZW50XG4gICAgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG5cblxuICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlO1xuICB2YXIgaW5pdGlhbFN0eWxlcyA9IHtcbiAgICBwb3BwZXI6IHtcbiAgICAgIHBvc2l0aW9uOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgbGVmdDogJzAnLFxuICAgICAgdG9wOiAnMCcsXG4gICAgICBtYXJnaW46ICcwJ1xuICAgIH0sXG4gICAgYXJyb3c6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgfSxcbiAgICByZWZlcmVuY2U6IHt9XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMucG9wcGVyLnN0eWxlLCBpbml0aWFsU3R5bGVzLnBvcHBlcik7XG4gIHN0YXRlLnN0eWxlcyA9IGluaXRpYWxTdHlsZXM7XG5cbiAgaWYgKHN0YXRlLmVsZW1lbnRzLmFycm93KSB7XG4gICAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5hcnJvdy5zdHlsZSwgaW5pdGlhbFN0eWxlcy5hcnJvdyk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdO1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuICAgICAgdmFyIHN0eWxlUHJvcGVydGllcyA9IE9iamVjdC5rZXlzKHN0YXRlLnN0eWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IHN0YXRlLnN0eWxlc1tuYW1lXSA6IGluaXRpYWxTdHlsZXNbbmFtZV0pOyAvLyBTZXQgYWxsIHZhbHVlcyB0byBhbiBlbXB0eSBzdHJpbmcgdG8gdW5zZXQgdGhlbVxuXG4gICAgICB2YXIgc3R5bGUgPSBzdHlsZVByb3BlcnRpZXMucmVkdWNlKGZ1bmN0aW9uIChzdHlsZSwgcHJvcGVydHkpIHtcbiAgICAgICAgc3R5bGVbcHJvcGVydHldID0gJyc7XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH0sIHt9KTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcHBseVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogYXBwbHlTdHlsZXMsXG4gIGVmZmVjdDogZWZmZWN0LFxuICByZXF1aXJlczogWydjb21wdXRlU3R5bGVzJ11cbn07IiwiaW1wb3J0IHsgYXV0byB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgIHRvcDogcmVjdC50b3AsXG4gICAgcmlnaHQ6IHJlY3QucmlnaHQsXG4gICAgYm90dG9tOiByZWN0LmJvdHRvbSxcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgeDogcmVjdC5sZWZ0LFxuICAgIHk6IHJlY3QudG9wXG4gIH07XG59IiwiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjsgLy8gUmV0dXJucyB0aGUgbGF5b3V0IHJlY3Qgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgb2Zmc2V0UGFyZW50LiBMYXlvdXRcbi8vIG1lYW5zIGl0IGRvZXNuJ3QgdGFrZSBpbnRvIGFjY291bnQgdHJhbnNmb3Jtcy5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TGF5b3V0UmVjdChlbGVtZW50KSB7XG4gIHZhciBjbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpOyAvLyBVc2UgdGhlIGNsaWVudFJlY3Qgc2l6ZXMgaWYgaXQncyBub3QgYmVlbiB0cmFuc2Zvcm1lZC5cbiAgLy8gRml4ZXMgaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy8xMjIzXG5cbiAgdmFyIHdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXG4gIGlmIChNYXRoLmFicyhjbGllbnRSZWN0LndpZHRoIC0gd2lkdGgpIDw9IDEpIHtcbiAgICB3aWR0aCA9IGNsaWVudFJlY3Qud2lkdGg7XG4gIH1cblxuICBpZiAoTWF0aC5hYnMoY2xpZW50UmVjdC5oZWlnaHQgLSBoZWlnaHQpIDw9IDEpIHtcbiAgICBoZWlnaHQgPSBjbGllbnRSZWN0LmhlaWdodDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogZWxlbWVudC5vZmZzZXRMZWZ0LFxuICAgIHk6IGVsZW1lbnQub2Zmc2V0VG9wLFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xufSIsImltcG9ydCB7IGlzU2hhZG93Um9vdCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRhaW5zKHBhcmVudCwgY2hpbGQpIHtcbiAgdmFyIHJvb3ROb2RlID0gY2hpbGQuZ2V0Um9vdE5vZGUgJiYgY2hpbGQuZ2V0Um9vdE5vZGUoKTsgLy8gRmlyc3QsIGF0dGVtcHQgd2l0aCBmYXN0ZXIgbmF0aXZlIG1ldGhvZFxuXG4gIGlmIChwYXJlbnQuY29udGFpbnMoY2hpbGQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gdGhlbiBmYWxsYmFjayB0byBjdXN0b20gaW1wbGVtZW50YXRpb24gd2l0aCBTaGFkb3cgRE9NIHN1cHBvcnRcbiAgZWxzZSBpZiAocm9vdE5vZGUgJiYgaXNTaGFkb3dSb290KHJvb3ROb2RlKSkge1xuICAgICAgdmFyIG5leHQgPSBjaGlsZDtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAobmV4dCAmJiBwYXJlbnQuaXNTYW1lTm9kZShuZXh0KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXTogbmVlZCBhIGJldHRlciB3YXkgdG8gaGFuZGxlIHRoaXMuLi5cblxuXG4gICAgICAgIG5leHQgPSBuZXh0LnBhcmVudE5vZGUgfHwgbmV4dC5ob3N0O1xuICAgICAgfSB3aGlsZSAobmV4dCk7XG4gICAgfSAvLyBHaXZlIHVwLCB0aGUgcmVzdWx0IGlzIGZhbHNlXG5cblxuICByZXR1cm4gZmFsc2U7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICByZXR1cm4gZ2V0V2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG59IiwiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1RhYmxlRWxlbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBbJ3RhYmxlJywgJ3RkJywgJ3RoJ10uaW5kZXhPZihnZXROb2RlTmFtZShlbGVtZW50KSkgPj0gMDtcbn0iLCJpbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkge1xuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gIHJldHVybiAoKGlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQub3duZXJEb2N1bWVudCA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICBlbGVtZW50LmRvY3VtZW50KSB8fCB3aW5kb3cuZG9jdW1lbnQpLmRvY3VtZW50RWxlbWVudDtcbn0iLCJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgeyBpc1NoYWRvd1Jvb3QgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGdldE5vZGVOYW1lKGVsZW1lbnQpID09PSAnaHRtbCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiAoLy8gdGhpcyBpcyBhIHF1aWNrZXIgKGJ1dCBsZXNzIHR5cGUgc2FmZSkgd2F5IHRvIHNhdmUgcXVpdGUgc29tZSBieXRlcyBmcm9tIHRoZSBidW5kbGVcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgZWxlbWVudC5hc3NpZ25lZFNsb3QgfHwgLy8gc3RlcCBpbnRvIHRoZSBzaGFkb3cgRE9NIG9mIHRoZSBwYXJlbnQgb2YgYSBzbG90dGVkIG5vZGVcbiAgICBlbGVtZW50LnBhcmVudE5vZGUgfHwgKCAvLyBET00gRWxlbWVudCBkZXRlY3RlZFxuICAgIGlzU2hhZG93Um9vdChlbGVtZW50KSA/IGVsZW1lbnQuaG9zdCA6IG51bGwpIHx8IC8vIFNoYWRvd1Jvb3QgZGV0ZWN0ZWRcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXTogSFRNTEVsZW1lbnQgaXMgYSBOb2RlXG4gICAgZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIC8vIGZhbGxiYWNrXG5cbiAgKTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGlzVGFibGVFbGVtZW50IGZyb20gXCIuL2lzVGFibGVFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5cbmZ1bmN0aW9uIGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy84MzdcbiAgZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0UGFyZW50O1xufSAvLyBgLm9mZnNldFBhcmVudGAgcmVwb3J0cyBgbnVsbGAgZm9yIGZpeGVkIGVsZW1lbnRzLCB3aGlsZSBhYnNvbHV0ZSBlbGVtZW50c1xuLy8gcmV0dXJuIHRoZSBjb250YWluaW5nIGJsb2NrXG5cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHtcbiAgdmFyIGlzRmlyZWZveCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdmaXJlZm94JykgIT09IC0xO1xuICB2YXIgaXNJRSA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpICE9PSAtMTtcblxuICBpZiAoaXNJRSAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgLy8gSW4gSUUgOSwgMTAgYW5kIDExIGZpeGVkIGVsZW1lbnRzIGNvbnRhaW5pbmcgYmxvY2sgaXMgYWx3YXlzIGVzdGFibGlzaGVkIGJ5IHRoZSB2aWV3cG9ydFxuICAgIHZhciBlbGVtZW50Q3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcblxuICAgIGlmIChlbGVtZW50Q3NzLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICB2YXIgY3VycmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuXG4gIHdoaWxlIChpc0hUTUxFbGVtZW50KGN1cnJlbnROb2RlKSAmJiBbJ2h0bWwnLCAnYm9keSddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoY3VycmVudE5vZGUpKSA8IDApIHtcbiAgICB2YXIgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50Tm9kZSk7IC8vIFRoaXMgaXMgbm9uLWV4aGF1c3RpdmUgYnV0IGNvdmVycyB0aGUgbW9zdCBjb21tb24gQ1NTIHByb3BlcnRpZXMgdGhhdFxuICAgIC8vIGNyZWF0ZSBhIGNvbnRhaW5pbmcgYmxvY2suXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0NvbnRhaW5pbmdfYmxvY2sjaWRlbnRpZnlpbmdfdGhlX2NvbnRhaW5pbmdfYmxvY2tcblxuICAgIGlmIChjc3MudHJhbnNmb3JtICE9PSAnbm9uZScgfHwgY3NzLnBlcnNwZWN0aXZlICE9PSAnbm9uZScgfHwgY3NzLmNvbnRhaW4gPT09ICdwYWludCcgfHwgWyd0cmFuc2Zvcm0nLCAncGVyc3BlY3RpdmUnXS5pbmRleE9mKGNzcy53aWxsQ2hhbmdlKSAhPT0gLTEgfHwgaXNGaXJlZm94ICYmIGNzcy53aWxsQ2hhbmdlID09PSAnZmlsdGVyJyB8fCBpc0ZpcmVmb3ggJiYgY3NzLmZpbHRlciAmJiBjc3MuZmlsdGVyICE9PSAnbm9uZScpIHtcbiAgICAgIHJldHVybiBjdXJyZW50Tm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSAvLyBHZXRzIHRoZSBjbG9zZXN0IGFuY2VzdG9yIHBvc2l0aW9uZWQgZWxlbWVudC4gSGFuZGxlcyBzb21lIGVkZ2UgY2FzZXMsXG4vLyBzdWNoIGFzIHRhYmxlIGFuY2VzdG9ycyBhbmQgY3Jvc3MgYnJvd3NlciBidWdzLlxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpO1xuXG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgaXNUYWJsZUVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgaWYgKG9mZnNldFBhcmVudCAmJiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2h0bWwnIHx8IGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdib2R5JyAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSkge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB8fCB3aW5kb3c7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpID49IDAgPyAneCcgOiAneSc7XG59IiwiZXhwb3J0IHZhciBtYXggPSBNYXRoLm1heDtcbmV4cG9ydCB2YXIgbWluID0gTWF0aC5taW47XG5leHBvcnQgdmFyIHJvdW5kID0gTWF0aC5yb3VuZDsiLCJpbXBvcnQgeyBtYXggYXMgbWF0aE1heCwgbWluIGFzIG1hdGhNaW4gfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3aXRoaW4obWluLCB2YWx1ZSwgbWF4KSB7XG4gIHJldHVybiBtYXRoTWF4KG1pbiwgbWF0aE1pbih2YWx1ZSwgbWF4KSk7XG59IiwiaW1wb3J0IGdldEZyZXNoU2lkZU9iamVjdCBmcm9tIFwiLi9nZXRGcmVzaFNpZGVPYmplY3QuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlUGFkZGluZ09iamVjdChwYWRkaW5nT2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBnZXRGcmVzaFNpZGVPYmplY3QoKSwgcGFkZGluZ09iamVjdCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RnJlc2hTaWRlT2JqZWN0KCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMFxuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4cGFuZFRvSGFzaE1hcCh2YWx1ZSwga2V5cykge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGhhc2hNYXAsIGtleSkge1xuICAgIGhhc2hNYXBba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiBoYXNoTWFwO1xuICB9LCB7fSk7XG59IiwiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuLi9kb20tdXRpbHMvY29udGFpbnMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHdpdGhpbiBmcm9tIFwiLi4vdXRpbHMvd2l0aGluLmpzXCI7XG5pbXBvcnQgbWVyZ2VQYWRkaW5nT2JqZWN0IGZyb20gXCIuLi91dGlscy9tZXJnZVBhZGRpbmdPYmplY3QuanNcIjtcbmltcG9ydCBleHBhbmRUb0hhc2hNYXAgZnJvbSBcIi4uL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qc1wiO1xuaW1wb3J0IHsgbGVmdCwgcmlnaHQsIGJhc2VQbGFjZW1lbnRzLCB0b3AsIGJvdHRvbSB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciB0b1BhZGRpbmdPYmplY3QgPSBmdW5jdGlvbiB0b1BhZGRpbmdPYmplY3QocGFkZGluZywgc3RhdGUpIHtcbiAgcGFkZGluZyA9IHR5cGVvZiBwYWRkaW5nID09PSAnZnVuY3Rpb24nID8gcGFkZGluZyhPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHBhZGRpbmc7XG4gIHJldHVybiBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xufTtcblxuZnVuY3Rpb24gYXJyb3coX3JlZikge1xuICB2YXIgX3N0YXRlJG1vZGlmaWVyc0RhdGEkO1xuXG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBheGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwO1xuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBpZiAoIWFycm93RWxlbWVudCB8fCAhcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gdG9QYWRkaW5nT2JqZWN0KG9wdGlvbnMucGFkZGluZywgc3RhdGUpO1xuICB2YXIgYXJyb3dSZWN0ID0gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpO1xuICB2YXIgbWluUHJvcCA9IGF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gIHZhciBtYXhQcm9wID0gYXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gIHZhciBlbmREaWZmID0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2xlbl0gKyBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc10gLSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucG9wcGVyW2xlbl07XG4gIHZhciBzdGFydERpZmYgPSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdO1xuICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoYXJyb3dFbGVtZW50KTtcbiAgdmFyIGNsaWVudFNpemUgPSBhcnJvd09mZnNldFBhcmVudCA/IGF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggfHwgMCA6IDA7XG4gIHZhciBjZW50ZXJUb1JlZmVyZW5jZSA9IGVuZERpZmYgLyAyIC0gc3RhcnREaWZmIC8gMjsgLy8gTWFrZSBzdXJlIHRoZSBhcnJvdyBkb2Vzbid0IG92ZXJmbG93IHRoZSBwb3BwZXIgaWYgdGhlIGNlbnRlciBwb2ludCBpc1xuICAvLyBvdXRzaWRlIG9mIHRoZSBwb3BwZXIgYm91bmRzXG5cbiAgdmFyIG1pbiA9IHBhZGRpbmdPYmplY3RbbWluUHJvcF07XG4gIHZhciBtYXggPSBjbGllbnRTaXplIC0gYXJyb3dSZWN0W2xlbl0gLSBwYWRkaW5nT2JqZWN0W21heFByb3BdO1xuICB2YXIgY2VudGVyID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd1JlY3RbbGVuXSAvIDIgKyBjZW50ZXJUb1JlZmVyZW5jZTtcbiAgdmFyIG9mZnNldCA9IHdpdGhpbihtaW4sIGNlbnRlciwgbWF4KTsgLy8gUHJldmVudHMgYnJlYWtpbmcgc3ludGF4IGhpZ2hsaWdodGluZy4uLlxuXG4gIHZhciBheGlzUHJvcCA9IGF4aXM7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSAoX3N0YXRlJG1vZGlmaWVyc0RhdGEkID0ge30sIF9zdGF0ZSRtb2RpZmllcnNEYXRhJFtheGlzUHJvcF0gPSBvZmZzZXQsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJC5jZW50ZXJPZmZzZXQgPSBvZmZzZXQgLSBjZW50ZXIsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJCk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudCxcbiAgICAgIGFycm93RWxlbWVudCA9IF9vcHRpb25zJGVsZW1lbnQgPT09IHZvaWQgMCA/ICdbZGF0YS1wb3BwZXItYXJyb3ddJyA6IF9vcHRpb25zJGVsZW1lbnQ7XG5cbiAgaWYgKGFycm93RWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENTUyBzZWxlY3RvclxuXG5cbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmICghaXNIVE1MRWxlbWVudChhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImFycm93XCIgZWxlbWVudCBtdXN0IGJlIGFuIEhUTUxFbGVtZW50IChub3QgYW4gU1ZHRWxlbWVudCkuJywgJ1RvIHVzZSBhbiBTVkcgYXJyb3csIHdyYXAgaXQgaW4gYW4gSFRNTEVsZW1lbnQgdGhhdCB3aWxsIGJlIHVzZWQgYXMnLCAndGhlIGFycm93LiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb250YWlucyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIsIGFycm93RWxlbWVudCkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImFycm93XCIgbW9kaWZpZXJcXCdzIGBlbGVtZW50YCBtdXN0IGJlIGEgY2hpbGQgb2YgdGhlIHBvcHBlcicsICdlbGVtZW50LiddLmpvaW4oJyAnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3RhdGUuZWxlbWVudHMuYXJyb3cgPSBhcnJvd0VsZW1lbnQ7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcnJvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBhcnJvdyxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXVxufTsiLCJpbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgdW5zZXRTaWRlcyA9IHtcbiAgdG9wOiAnYXV0bycsXG4gIHJpZ2h0OiAnYXV0bycsXG4gIGJvdHRvbTogJ2F1dG8nLFxuICBsZWZ0OiAnYXV0bydcbn07IC8vIFJvdW5kIHRoZSBvZmZzZXRzIHRvIHRoZSBuZWFyZXN0IHN1aXRhYmxlIHN1YnBpeGVsIGJhc2VkIG9uIHRoZSBEUFIuXG4vLyBab29taW5nIGNhbiBjaGFuZ2UgdGhlIERQUiwgYnV0IGl0IHNlZW1zIHRvIHJlcG9ydCBhIHZhbHVlIHRoYXQgd2lsbFxuLy8gY2xlYW5seSBkaXZpZGUgdGhlIHZhbHVlcyBpbnRvIHRoZSBhcHByb3ByaWF0ZSBzdWJwaXhlbHMuXG5cbmZ1bmN0aW9uIHJvdW5kT2Zmc2V0c0J5RFBSKF9yZWYpIHtcbiAgdmFyIHggPSBfcmVmLngsXG4gICAgICB5ID0gX3JlZi55O1xuICB2YXIgd2luID0gd2luZG93O1xuICB2YXIgZHByID0gd2luLmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgcmV0dXJuIHtcbiAgICB4OiByb3VuZChyb3VuZCh4ICogZHByKSAvIGRwcikgfHwgMCxcbiAgICB5OiByb3VuZChyb3VuZCh5ICogZHByKSAvIGRwcikgfHwgMFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwVG9TdHlsZXMoX3JlZjIpIHtcbiAgdmFyIF9PYmplY3QkYXNzaWduMjtcblxuICB2YXIgcG9wcGVyID0gX3JlZjIucG9wcGVyLFxuICAgICAgcG9wcGVyUmVjdCA9IF9yZWYyLnBvcHBlclJlY3QsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmMi5wbGFjZW1lbnQsXG4gICAgICBvZmZzZXRzID0gX3JlZjIub2Zmc2V0cyxcbiAgICAgIHBvc2l0aW9uID0gX3JlZjIucG9zaXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfcmVmMi5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBhZGFwdGl2ZSA9IF9yZWYyLmFkYXB0aXZlLFxuICAgICAgcm91bmRPZmZzZXRzID0gX3JlZjIucm91bmRPZmZzZXRzO1xuXG4gIHZhciBfcmVmMyA9IHJvdW5kT2Zmc2V0cyA9PT0gdHJ1ZSA/IHJvdW5kT2Zmc2V0c0J5RFBSKG9mZnNldHMpIDogdHlwZW9mIHJvdW5kT2Zmc2V0cyA9PT0gJ2Z1bmN0aW9uJyA/IHJvdW5kT2Zmc2V0cyhvZmZzZXRzKSA6IG9mZnNldHMsXG4gICAgICBfcmVmMyR4ID0gX3JlZjMueCxcbiAgICAgIHggPSBfcmVmMyR4ID09PSB2b2lkIDAgPyAwIDogX3JlZjMkeCxcbiAgICAgIF9yZWYzJHkgPSBfcmVmMy55LFxuICAgICAgeSA9IF9yZWYzJHkgPT09IHZvaWQgMCA/IDAgOiBfcmVmMyR5O1xuXG4gIHZhciBoYXNYID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneCcpO1xuICB2YXIgaGFzWSA9IG9mZnNldHMuaGFzT3duUHJvcGVydHkoJ3knKTtcbiAgdmFyIHNpZGVYID0gbGVmdDtcbiAgdmFyIHNpZGVZID0gdG9wO1xuICB2YXIgd2luID0gd2luZG93O1xuXG4gIGlmIChhZGFwdGl2ZSkge1xuICAgIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKTtcbiAgICB2YXIgaGVpZ2h0UHJvcCA9ICdjbGllbnRIZWlnaHQnO1xuICAgIHZhciB3aWR0aFByb3AgPSAnY2xpZW50V2lkdGgnO1xuXG4gICAgaWYgKG9mZnNldFBhcmVudCA9PT0gZ2V0V2luZG93KHBvcHBlcikpIHtcbiAgICAgIG9mZnNldFBhcmVudCA9IGdldERvY3VtZW50RWxlbWVudChwb3BwZXIpO1xuXG4gICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uICE9PSAnc3RhdGljJykge1xuICAgICAgICBoZWlnaHRQcm9wID0gJ3Njcm9sbEhlaWdodCc7XG4gICAgICAgIHdpZHRoUHJvcCA9ICdzY3JvbGxXaWR0aCc7XG4gICAgICB9XG4gICAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYXN0XTogZm9yY2UgdHlwZSByZWZpbmVtZW50LCB3ZSBjb21wYXJlIG9mZnNldFBhcmVudCB3aXRoIHdpbmRvdyBhYm92ZSwgYnV0IEZsb3cgZG9lc24ndCBkZXRlY3QgaXRcblxuXG4gICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50O1xuXG4gICAgaWYgKHBsYWNlbWVudCA9PT0gdG9wKSB7XG4gICAgICBzaWRlWSA9IGJvdHRvbTsgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cbiAgICAgIHkgLT0gb2Zmc2V0UGFyZW50W2hlaWdodFByb3BdIC0gcG9wcGVyUmVjdC5oZWlnaHQ7XG4gICAgICB5ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSBsZWZ0KSB7XG4gICAgICBzaWRlWCA9IHJpZ2h0OyAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICAgICAgeCAtPSBvZmZzZXRQYXJlbnRbd2lkdGhQcm9wXSAtIHBvcHBlclJlY3Qud2lkdGg7XG4gICAgICB4ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgcG9zaXRpb246IHBvc2l0aW9uXG4gIH0sIGFkYXB0aXZlICYmIHVuc2V0U2lkZXMpO1xuXG4gIGlmIChncHVBY2NlbGVyYXRpb24pIHtcbiAgICB2YXIgX09iamVjdCRhc3NpZ247XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24gPSB7fSwgX09iamVjdCRhc3NpZ25bc2lkZVldID0gaGFzWSA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbltzaWRlWF0gPSBoYXNYID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduLnRyYW5zZm9ybSA9ICh3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKSA8IDIgPyBcInRyYW5zbGF0ZShcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4KVwiIDogXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4LCAwKVwiLCBfT2JqZWN0JGFzc2lnbikpO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywgKF9PYmplY3QkYXNzaWduMiA9IHt9LCBfT2JqZWN0JGFzc2lnbjJbc2lkZVldID0gaGFzWSA/IHkgKyBcInB4XCIgOiAnJywgX09iamVjdCRhc3NpZ24yW3NpZGVYXSA9IGhhc1ggPyB4ICsgXCJweFwiIDogJycsIF9PYmplY3QkYXNzaWduMi50cmFuc2Zvcm0gPSAnJywgX09iamVjdCRhc3NpZ24yKSk7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZXMoX3JlZjQpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjQuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjQub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGdwdUFjY2VsZXJhdCA9IG9wdGlvbnMuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgZ3B1QWNjZWxlcmF0aW9uID0gX29wdGlvbnMkZ3B1QWNjZWxlcmF0ID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkZ3B1QWNjZWxlcmF0LFxuICAgICAgX29wdGlvbnMkYWRhcHRpdmUgPSBvcHRpb25zLmFkYXB0aXZlLFxuICAgICAgYWRhcHRpdmUgPSBfb3B0aW9ucyRhZGFwdGl2ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGFkYXB0aXZlLFxuICAgICAgX29wdGlvbnMkcm91bmRPZmZzZXRzID0gb3B0aW9ucy5yb3VuZE9mZnNldHMsXG4gICAgICByb3VuZE9mZnNldHMgPSBfb3B0aW9ucyRyb3VuZE9mZnNldHMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRyb3VuZE9mZnNldHM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhciB0cmFuc2l0aW9uUHJvcGVydHkgPSBnZXRDb21wdXRlZFN0eWxlKHN0YXRlLmVsZW1lbnRzLnBvcHBlcikudHJhbnNpdGlvblByb3BlcnR5IHx8ICcnO1xuXG4gICAgaWYgKGFkYXB0aXZlICYmIFsndHJhbnNmb3JtJywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLnNvbWUoZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gdHJhbnNpdGlvblByb3BlcnR5LmluZGV4T2YocHJvcGVydHkpID49IDA7XG4gICAgfSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihbJ1BvcHBlcjogRGV0ZWN0ZWQgQ1NTIHRyYW5zaXRpb25zIG9uIGF0IGxlYXN0IG9uZSBvZiB0aGUgZm9sbG93aW5nJywgJ0NTUyBwcm9wZXJ0aWVzOiBcInRyYW5zZm9ybVwiLCBcInRvcFwiLCBcInJpZ2h0XCIsIFwiYm90dG9tXCIsIFwibGVmdFwiLicsICdcXG5cXG4nLCAnRGlzYWJsZSB0aGUgXCJjb21wdXRlU3R5bGVzXCIgbW9kaWZpZXJcXCdzIGBhZGFwdGl2ZWAgb3B0aW9uIHRvIGFsbG93JywgJ2ZvciBzbW9vdGggdHJhbnNpdGlvbnMsIG9yIHJlbW92ZSB0aGVzZSBwcm9wZXJ0aWVzIGZyb20gdGhlIENTUycsICd0cmFuc2l0aW9uIGRlY2xhcmF0aW9uIG9uIHRoZSBwb3BwZXIgZWxlbWVudCBpZiBvbmx5IHRyYW5zaXRpb25pbmcnLCAnb3BhY2l0eSBvciBiYWNrZ3JvdW5kLWNvbG9yIGZvciBleGFtcGxlLicsICdcXG5cXG4nLCAnV2UgcmVjb21tZW5kIHVzaW5nIHRoZSBwb3BwZXIgZWxlbWVudCBhcyBhIHdyYXBwZXIgYXJvdW5kIGFuIGlubmVyJywgJ2VsZW1lbnQgdGhhdCBjYW4gaGF2ZSBhbnkgQ1NTIHByb3BlcnR5IHRyYW5zaXRpb25lZCBmb3IgYW5pbWF0aW9ucy4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb21tb25TdHlsZXMgPSB7XG4gICAgcGxhY2VtZW50OiBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCksXG4gICAgcG9wcGVyOiBzdGF0ZS5lbGVtZW50cy5wb3BwZXIsXG4gICAgcG9wcGVyUmVjdDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIGdwdUFjY2VsZXJhdGlvbjogZ3B1QWNjZWxlcmF0aW9uXG4gIH07XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnN0eWxlcy5wb3BwZXIsIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLFxuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBhZGFwdGl2ZTogYWRhcHRpdmUsXG4gICAgICByb3VuZE9mZnNldHM6IHJvdW5kT2Zmc2V0c1xuICAgIH0pKSk7XG4gIH1cblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLmFycm93ID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLmFycm93LCBtYXBUb1N0eWxlcyhPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIHtcbiAgICAgIG9mZnNldHM6IHN0YXRlLm1vZGlmaWVyc0RhdGEuYXJyb3csXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGFkYXB0aXZlOiBmYWxzZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcGxhY2VtZW50Jzogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnY29tcHV0ZVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnYmVmb3JlV3JpdGUnLFxuICBmbjogY29tcHV0ZVN0eWxlcyxcbiAgZGF0YToge31cbn07IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciBwYXNzaXZlID0ge1xuICBwYXNzaXZlOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgaW5zdGFuY2UgPSBfcmVmLmluc3RhbmNlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJHNjcm9sbCA9IG9wdGlvbnMuc2Nyb2xsLFxuICAgICAgc2Nyb2xsID0gX29wdGlvbnMkc2Nyb2xsID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkc2Nyb2xsLFxuICAgICAgX29wdGlvbnMkcmVzaXplID0gb3B0aW9ucy5yZXNpemUsXG4gICAgICByZXNpemUgPSBfb3B0aW9ucyRyZXNpemUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRyZXNpemU7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coc3RhdGUuZWxlbWVudHMucG9wcGVyKTtcbiAgdmFyIHNjcm9sbFBhcmVudHMgPSBbXS5jb25jYXQoc3RhdGUuc2Nyb2xsUGFyZW50cy5yZWZlcmVuY2UsIHN0YXRlLnNjcm9sbFBhcmVudHMucG9wcGVyKTtcblxuICBpZiAoc2Nyb2xsKSB7XG4gICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JvbGxQYXJlbnQpIHtcbiAgICAgIHNjcm9sbFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJlc2l6ZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgICBzY3JvbGxQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXNpemUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH1cbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBmdW5jdGlvbiBmbigpIHt9LFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgZGF0YToge31cbn07IiwidmFyIGhhc2ggPSB7XG4gIGxlZnQ6ICdyaWdodCcsXG4gIHJpZ2h0OiAnbGVmdCcsXG4gIGJvdHRvbTogJ3RvcCcsXG4gIHRvcDogJ2JvdHRvbSdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59IiwidmFyIGhhc2ggPSB7XG4gIHN0YXJ0OiAnZW5kJyxcbiAgZW5kOiAnc3RhcnQnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvc3RhcnR8ZW5kL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGwobm9kZSkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KG5vZGUpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IHdpbi5wYWdlWE9mZnNldDtcbiAgdmFyIHNjcm9sbFRvcCA9IHdpbi5wYWdlWU9mZnNldDtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gIH07XG59IiwiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSB7XG4gIC8vIElmIDxodG1sPiBoYXMgYSBDU1Mgd2lkdGggZ3JlYXRlciB0aGFuIHRoZSB2aWV3cG9ydCwgdGhlbiB0aGlzIHdpbGwgYmVcbiAgLy8gaW5jb3JyZWN0IGZvciBSVEwuXG4gIC8vIFBvcHBlciAxIGlzIGJyb2tlbiBpbiB0aGlzIGNhc2UgYW5kIG5ldmVyIGhhZCBhIGJ1ZyByZXBvcnQgc28gbGV0J3MgYXNzdW1lXG4gIC8vIGl0J3Mgbm90IGFuIGlzc3VlLiBJIGRvbid0IHRoaW5rIGFueW9uZSBldmVyIHNwZWNpZmllcyB3aWR0aCBvbiA8aHRtbD5cbiAgLy8gYW55d2F5LlxuICAvLyBCcm93c2VycyB3aGVyZSB0aGUgbGVmdCBzY3JvbGxiYXIgZG9lc24ndCBjYXVzZSBhbiBpc3N1ZSByZXBvcnQgYDBgIGZvclxuICAvLyB0aGlzIChlLmcuIEVkZ2UgMjAxOSwgSUUxMSwgU2FmYXJpKVxuICByZXR1cm4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkubGVmdCArIGdldFdpbmRvd1Njcm9sbChlbGVtZW50KS5zY3JvbGxMZWZ0O1xufSIsImltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gRmlyZWZveCB3YW50cyB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WTtcblxuICByZXR1cm4gL2F1dG98c2Nyb2xsfG92ZXJsYXl8aGlkZGVuLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKTtcbn0iLCJpbXBvcnQgZ2V0U2Nyb2xsUGFyZW50IGZyb20gXCIuL2dldFNjcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuLypcbmdpdmVuIGEgRE9NIGVsZW1lbnQsIHJldHVybiB0aGUgbGlzdCBvZiBhbGwgc2Nyb2xsIHBhcmVudHMsIHVwIHRoZSBsaXN0IG9mIGFuY2Vzb3JzXG51bnRpbCB3ZSBnZXQgdG8gdGhlIHRvcCB3aW5kb3cgb2JqZWN0LiBUaGlzIGxpc3QgaXMgd2hhdCB3ZSBhdHRhY2ggc2Nyb2xsIGxpc3RlbmVyc1xudG8sIGJlY2F1c2UgaWYgYW55IG9mIHRoZXNlIHBhcmVudCBlbGVtZW50cyBzY3JvbGwsIHdlJ2xsIG5lZWQgdG8gcmUtY2FsY3VsYXRlIHRoZVxucmVmZXJlbmNlIGVsZW1lbnQncyBwb3NpdGlvbi5cbiovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3RTY3JvbGxQYXJlbnRzKGVsZW1lbnQsIGxpc3QpIHtcbiAgdmFyIF9lbGVtZW50JG93bmVyRG9jdW1lbjtcblxuICBpZiAobGlzdCA9PT0gdm9pZCAwKSB7XG4gICAgbGlzdCA9IFtdO1xuICB9XG5cbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChlbGVtZW50KTtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudCA9PT0gKChfZWxlbWVudCRvd25lckRvY3VtZW4gPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZWxlbWVudCRvd25lckRvY3VtZW4uYm9keSk7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coc2Nyb2xsUGFyZW50KTtcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IFt3aW5dLmNvbmNhdCh3aW4udmlzdWFsVmlld3BvcnQgfHwgW10sIGlzU2Nyb2xsUGFyZW50KHNjcm9sbFBhcmVudCkgPyBzY3JvbGxQYXJlbnQgOiBbXSkgOiBzY3JvbGxQYXJlbnQ7XG4gIHZhciB1cGRhdGVkTGlzdCA9IGxpc3QuY29uY2F0KHRhcmdldCk7XG4gIHJldHVybiBpc0JvZHkgPyB1cGRhdGVkTGlzdCA6IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBpc0JvZHkgdGVsbHMgdXMgdGFyZ2V0IHdpbGwgYmUgYW4gSFRNTEVsZW1lbnQgaGVyZVxuICB1cGRhdGVkTGlzdC5jb25jYXQobGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZSh0YXJnZXQpKSk7XG59IiwiaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQobm9kZSkge1xuICBpZiAoWydodG1sJywgJ2JvZHknLCAnI2RvY3VtZW50J10uaW5kZXhPZihnZXROb2RlTmFtZShub2RlKSkgPj0gMCkge1xuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBpZiAoaXNIVE1MRWxlbWVudChub2RlKSAmJiBpc1Njcm9sbFBhcmVudChub2RlKSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKG5vZGUpKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWN0VG9DbGllbnRSZWN0KHJlY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHJlY3QsIHtcbiAgICBsZWZ0OiByZWN0LngsXG4gICAgdG9wOiByZWN0LnksXG4gICAgcmlnaHQ6IHJlY3QueCArIHJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiByZWN0LnkgKyByZWN0LmhlaWdodFxuICB9KTtcbn0iLCJpbXBvcnQgeyB2aWV3cG9ydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldFZpZXdwb3J0UmVjdCBmcm9tIFwiLi9nZXRWaWV3cG9ydFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudFJlY3QgZnJvbSBcIi4vZ2V0RG9jdW1lbnRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vbGlzdFNjcm9sbFBhcmVudHMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4vZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBjb250YWlucyBmcm9tIFwiLi9jb250YWlucy5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgcmVjdFRvQ2xpZW50UmVjdCBmcm9tIFwiLi4vdXRpbHMvcmVjdFRvQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IHsgbWF4LCBtaW4gfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpO1xuICByZWN0LnRvcCA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRUb3A7XG4gIHJlY3QubGVmdCA9IHJlY3QubGVmdCArIGVsZW1lbnQuY2xpZW50TGVmdDtcbiAgcmVjdC5ib3R0b20gPSByZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICByZWN0LnJpZ2h0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC53aWR0aCA9IGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJlY3QuaGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QueCA9IHJlY3QubGVmdDtcbiAgcmVjdC55ID0gcmVjdC50b3A7XG4gIHJldHVybiByZWN0O1xufVxuXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCkge1xuICByZXR1cm4gY2xpcHBpbmdQYXJlbnQgPT09IHZpZXdwb3J0ID8gcmVjdFRvQ2xpZW50UmVjdChnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCkpIDogaXNIVE1MRWxlbWVudChjbGlwcGluZ1BhcmVudCkgPyBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChjbGlwcGluZ1BhcmVudCkgOiByZWN0VG9DbGllbnRSZWN0KGdldERvY3VtZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpKTtcbn0gLy8gQSBcImNsaXBwaW5nIHBhcmVudFwiIGlzIGFuIG92ZXJmbG93YWJsZSBjb250YWluZXIgd2l0aCB0aGUgY2hhcmFjdGVyaXN0aWMgb2Zcbi8vIGNsaXBwaW5nIChvciBoaWRpbmcpIG92ZXJmbG93aW5nIGVsZW1lbnRzIHdpdGggYSBwb3NpdGlvbiBkaWZmZXJlbnQgZnJvbVxuLy8gYGluaXRpYWxgXG5cblxuZnVuY3Rpb24gZ2V0Q2xpcHBpbmdQYXJlbnRzKGVsZW1lbnQpIHtcbiAgdmFyIGNsaXBwaW5nUGFyZW50cyA9IGxpc3RTY3JvbGxQYXJlbnRzKGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xuICB2YXIgY2FuRXNjYXBlQ2xpcHBpbmcgPSBbJ2Fic29sdXRlJywgJ2ZpeGVkJ10uaW5kZXhPZihnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uKSA+PSAwO1xuICB2YXIgY2xpcHBlckVsZW1lbnQgPSBjYW5Fc2NhcGVDbGlwcGluZyAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpID8gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIDogZWxlbWVudDtcblxuICBpZiAoIWlzRWxlbWVudChjbGlwcGVyRWxlbWVudCkpIHtcbiAgICByZXR1cm4gW107XG4gIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzE0MTRcblxuXG4gIHJldHVybiBjbGlwcGluZ1BhcmVudHMuZmlsdGVyKGZ1bmN0aW9uIChjbGlwcGluZ1BhcmVudCkge1xuICAgIHJldHVybiBpc0VsZW1lbnQoY2xpcHBpbmdQYXJlbnQpICYmIGNvbnRhaW5zKGNsaXBwaW5nUGFyZW50LCBjbGlwcGVyRWxlbWVudCkgJiYgZ2V0Tm9kZU5hbWUoY2xpcHBpbmdQYXJlbnQpICE9PSAnYm9keSc7XG4gIH0pO1xufSAvLyBHZXRzIHRoZSBtYXhpbXVtIGFyZWEgdGhhdCB0aGUgZWxlbWVudCBpcyB2aXNpYmxlIGluIGR1ZSB0byBhbnkgbnVtYmVyIG9mXG4vLyBjbGlwcGluZyBwYXJlbnRzXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q2xpcHBpbmdSZWN0KGVsZW1lbnQsIGJvdW5kYXJ5LCByb290Qm91bmRhcnkpIHtcbiAgdmFyIG1haW5DbGlwcGluZ1BhcmVudHMgPSBib3VuZGFyeSA9PT0gJ2NsaXBwaW5nUGFyZW50cycgPyBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkgOiBbXS5jb25jYXQoYm91bmRhcnkpO1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gW10uY29uY2F0KG1haW5DbGlwcGluZ1BhcmVudHMsIFtyb290Qm91bmRhcnldKTtcbiAgdmFyIGZpcnN0Q2xpcHBpbmdQYXJlbnQgPSBjbGlwcGluZ1BhcmVudHNbMF07XG4gIHZhciBjbGlwcGluZ1JlY3QgPSBjbGlwcGluZ1BhcmVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2NSZWN0LCBjbGlwcGluZ1BhcmVudCkge1xuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQpO1xuICAgIGFjY1JlY3QudG9wID0gbWF4KHJlY3QudG9wLCBhY2NSZWN0LnRvcCk7XG4gICAgYWNjUmVjdC5yaWdodCA9IG1pbihyZWN0LnJpZ2h0LCBhY2NSZWN0LnJpZ2h0KTtcbiAgICBhY2NSZWN0LmJvdHRvbSA9IG1pbihyZWN0LmJvdHRvbSwgYWNjUmVjdC5ib3R0b20pO1xuICAgIGFjY1JlY3QubGVmdCA9IG1heChyZWN0LmxlZnQsIGFjY1JlY3QubGVmdCk7XG4gICAgcmV0dXJuIGFjY1JlY3Q7XG4gIH0sIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGZpcnN0Q2xpcHBpbmdQYXJlbnQpKTtcbiAgY2xpcHBpbmdSZWN0LndpZHRoID0gY2xpcHBpbmdSZWN0LnJpZ2h0IC0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC5oZWlnaHQgPSBjbGlwcGluZ1JlY3QuYm90dG9tIC0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgY2xpcHBpbmdSZWN0LnggPSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LnkgPSBjbGlwcGluZ1JlY3QudG9wO1xuICByZXR1cm4gY2xpcHBpbmdSZWN0O1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB2aXN1YWxWaWV3cG9ydCA9IHdpbi52aXN1YWxWaWV3cG9ydDtcbiAgdmFyIHdpZHRoID0gaHRtbC5jbGllbnRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGh0bWwuY2xpZW50SGVpZ2h0O1xuICB2YXIgeCA9IDA7XG4gIHZhciB5ID0gMDsgLy8gTkI6IFRoaXMgaXNuJ3Qgc3VwcG9ydGVkIG9uIGlPUyA8PSAxMi4gSWYgdGhlIGtleWJvYXJkIGlzIG9wZW4sIHRoZSBwb3BwZXJcbiAgLy8gY2FuIGJlIG9ic2N1cmVkIHVuZGVybmVhdGggaXQuXG4gIC8vIEFsc28sIGBodG1sLmNsaWVudEhlaWdodGAgYWRkcyB0aGUgYm90dG9tIGJhciBoZWlnaHQgaW4gU2FmYXJpIGlPUywgZXZlblxuICAvLyBpZiBpdCBpc24ndCBvcGVuLCBzbyBpZiB0aGlzIGlzbid0IGF2YWlsYWJsZSwgdGhlIHBvcHBlciB3aWxsIGJlIGRldGVjdGVkXG4gIC8vIHRvIG92ZXJmbG93IHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbiB0b28gZWFybHkuXG5cbiAgaWYgKHZpc3VhbFZpZXdwb3J0KSB7XG4gICAgd2lkdGggPSB2aXN1YWxWaWV3cG9ydC53aWR0aDtcbiAgICBoZWlnaHQgPSB2aXN1YWxWaWV3cG9ydC5oZWlnaHQ7IC8vIFVzZXMgTGF5b3V0IFZpZXdwb3J0IChsaWtlIENocm9tZTsgU2FmYXJpIGRvZXMgbm90IGN1cnJlbnRseSlcbiAgICAvLyBJbiBDaHJvbWUsIGl0IHJldHVybnMgYSB2YWx1ZSB2ZXJ5IGNsb3NlIHRvIDAgKCsvLSkgYnV0IGNvbnRhaW5zIHJvdW5kaW5nXG4gICAgLy8gZXJyb3JzIGR1ZSB0byBmbG9hdGluZyBwb2ludCBudW1iZXJzLCBzbyB3ZSBuZWVkIHRvIGNoZWNrIHByZWNpc2lvbi5cbiAgICAvLyBTYWZhcmkgcmV0dXJucyBhIG51bWJlciA8PSAwLCB1c3VhbGx5IDwgLTEgd2hlbiBwaW5jaC16b29tZWRcbiAgICAvLyBGZWF0dXJlIGRldGVjdGlvbiBmYWlscyBpbiBtb2JpbGUgZW11bGF0aW9uIG1vZGUgaW4gQ2hyb21lLlxuICAgIC8vIE1hdGguYWJzKHdpbi5pbm5lcldpZHRoIC8gdmlzdWFsVmlld3BvcnQuc2NhbGUgLSB2aXN1YWxWaWV3cG9ydC53aWR0aCkgPFxuICAgIC8vIDAuMDAxXG4gICAgLy8gRmFsbGJhY2sgaGVyZTogXCJOb3QgU2FmYXJpXCIgdXNlckFnZW50XG5cbiAgICBpZiAoIS9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgIHggPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRMZWZ0O1xuICAgICAgeSA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiB4ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSxcbiAgICB5OiB5XG4gIH07XG59IiwiaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbEJhclguanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5pbXBvcnQgeyBtYXggfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiOyAvLyBHZXRzIHRoZSBlbnRpcmUgc2l6ZSBvZiB0aGUgc2Nyb2xsYWJsZSBkb2N1bWVudCBhcmVhLCBldmVuIGV4dGVuZGluZyBvdXRzaWRlXG4vLyBvZiB0aGUgYDxodG1sPmAgYW5kIGA8Ym9keT5gIHJlY3QgYm91bmRzIGlmIGhvcml6b250YWxseSBzY3JvbGxhYmxlXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciBfZWxlbWVudCRvd25lckRvY3VtZW47XG5cbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB3aW5TY3JvbGwgPSBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCk7XG4gIHZhciBib2R5ID0gKF9lbGVtZW50JG93bmVyRG9jdW1lbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5ib2R5O1xuICB2YXIgd2lkdGggPSBtYXgoaHRtbC5zY3JvbGxXaWR0aCwgaHRtbC5jbGllbnRXaWR0aCwgYm9keSA/IGJvZHkuc2Nyb2xsV2lkdGggOiAwLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApO1xuICB2YXIgaGVpZ2h0ID0gbWF4KGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLmNsaWVudEhlaWdodCwgYm9keSA/IGJvZHkuc2Nyb2xsSGVpZ2h0IDogMCwgYm9keSA/IGJvZHkuY2xpZW50SGVpZ2h0IDogMCk7XG4gIHZhciB4ID0gLXdpblNjcm9sbC5zY3JvbGxMZWZ0ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KTtcbiAgdmFyIHkgPSAtd2luU2Nyb2xsLnNjcm9sbFRvcDtcblxuICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShib2R5IHx8IGh0bWwpLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICB4ICs9IG1heChodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApIC0gd2lkdGg7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcbn0iLCJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgc3RhcnQsIGVuZCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZU9mZnNldHMoX3JlZikge1xuICB2YXIgcmVmZXJlbmNlID0gX3JlZi5yZWZlcmVuY2UsXG4gICAgICBlbGVtZW50ID0gX3JlZi5lbGVtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50ID8gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudCA/IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIGNvbW1vblggPSByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCAvIDIgLSBlbGVtZW50LndpZHRoIC8gMjtcbiAgdmFyIGNvbW1vblkgPSByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHQgLyAyIC0gZWxlbWVudC5oZWlnaHQgLyAyO1xuICB2YXIgb2Zmc2V0cztcblxuICBzd2l0Y2ggKGJhc2VQbGFjZW1lbnQpIHtcbiAgICBjYXNlIHRvcDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55IC0gZWxlbWVudC5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgYm90dG9tOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHJpZ2h0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgbGVmdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54IC0gZWxlbWVudC53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54LFxuICAgICAgICB5OiByZWZlcmVuY2UueVxuICAgICAgfTtcbiAgfVxuXG4gIHZhciBtYWluQXhpcyA9IGJhc2VQbGFjZW1lbnQgPyBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCkgOiBudWxsO1xuXG4gIGlmIChtYWluQXhpcyAhPSBudWxsKSB7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICBzd2l0Y2ggKHZhcmlhdGlvbikge1xuICAgICAgY2FzZSBzdGFydDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBvZmZzZXRzW21haW5BeGlzXSAtIChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgZW5kOlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdICsgKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn0iLCJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0Q2xpcHBpbmdSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSBcIi4vY29tcHV0ZU9mZnNldHMuanNcIjtcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gXCIuL3JlY3RUb0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCB7IGNsaXBwaW5nUGFyZW50cywgcmVmZXJlbmNlLCBwb3BwZXIsIGJvdHRvbSwgdG9wLCByaWdodCwgYmFzZVBsYWNlbWVudHMsIHZpZXdwb3J0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBtZXJnZVBhZGRpbmdPYmplY3QgZnJvbSBcIi4vbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuL2V4cGFuZFRvSGFzaE1hcC5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRldGVjdE92ZXJmbG93KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMkcGxhY2VtZW50ID09PSB2b2lkIDAgPyBzdGF0ZS5wbGFjZW1lbnQgOiBfb3B0aW9ucyRwbGFjZW1lbnQsXG4gICAgICBfb3B0aW9ucyRib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucyRib3VuZGFyeSA9PT0gdm9pZCAwID8gY2xpcHBpbmdQYXJlbnRzIDogX29wdGlvbnMkYm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRyb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucyRyb290Qm91bmRhcnkgPT09IHZvaWQgMCA/IHZpZXdwb3J0IDogX29wdGlvbnMkcm9vdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZWxlbWVudENvbnRlID0gX29wdGlvbnMuZWxlbWVudENvbnRleHQsXG4gICAgICBlbGVtZW50Q29udGV4dCA9IF9vcHRpb25zJGVsZW1lbnRDb250ZSA9PT0gdm9pZCAwID8gcG9wcGVyIDogX29wdGlvbnMkZWxlbWVudENvbnRlLFxuICAgICAgX29wdGlvbnMkYWx0Qm91bmRhcnkgPSBfb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMkYWx0Qm91bmRhcnkgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucyRwYWRkaW5nID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkcGFkZGluZztcbiAgdmFyIHBhZGRpbmdPYmplY3QgPSBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xuICB2YXIgYWx0Q29udGV4dCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyByZWZlcmVuY2UgOiBwb3BwZXI7XG4gIHZhciByZWZlcmVuY2VFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1thbHRCb3VuZGFyeSA/IGFsdENvbnRleHQgOiBlbGVtZW50Q29udGV4dF07XG4gIHZhciBjbGlwcGluZ0NsaWVudFJlY3QgPSBnZXRDbGlwcGluZ1JlY3QoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudCA6IGVsZW1lbnQuY29udGV4dEVsZW1lbnQgfHwgZ2V0RG9jdW1lbnRFbGVtZW50KHN0YXRlLmVsZW1lbnRzLnBvcHBlciksIGJvdW5kYXJ5LCByb290Qm91bmRhcnkpO1xuICB2YXIgcmVmZXJlbmNlQ2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChyZWZlcmVuY2VFbGVtZW50KTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiByZWZlcmVuY2VDbGllbnRSZWN0LFxuICAgIGVsZW1lbnQ6IHBvcHBlclJlY3QsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSk7XG4gIHZhciBwb3BwZXJDbGllbnRSZWN0ID0gcmVjdFRvQ2xpZW50UmVjdChPYmplY3QuYXNzaWduKHt9LCBwb3BwZXJSZWN0LCBwb3BwZXJPZmZzZXRzKSk7XG4gIHZhciBlbGVtZW50Q2xpZW50UmVjdCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyBwb3BwZXJDbGllbnRSZWN0IDogcmVmZXJlbmNlQ2xpZW50UmVjdDsgLy8gcG9zaXRpdmUgPSBvdmVyZmxvd2luZyB0aGUgY2xpcHBpbmcgcmVjdFxuICAvLyAwIG9yIG5lZ2F0aXZlID0gd2l0aGluIHRoZSBjbGlwcGluZyByZWN0XG5cbiAgdmFyIG92ZXJmbG93T2Zmc2V0cyA9IHtcbiAgICB0b3A6IGNsaXBwaW5nQ2xpZW50UmVjdC50b3AgLSBlbGVtZW50Q2xpZW50UmVjdC50b3AgKyBwYWRkaW5nT2JqZWN0LnRvcCxcbiAgICBib3R0b206IGVsZW1lbnRDbGllbnRSZWN0LmJvdHRvbSAtIGNsaXBwaW5nQ2xpZW50UmVjdC5ib3R0b20gKyBwYWRkaW5nT2JqZWN0LmJvdHRvbSxcbiAgICBsZWZ0OiBjbGlwcGluZ0NsaWVudFJlY3QubGVmdCAtIGVsZW1lbnRDbGllbnRSZWN0LmxlZnQgKyBwYWRkaW5nT2JqZWN0LmxlZnQsXG4gICAgcmlnaHQ6IGVsZW1lbnRDbGllbnRSZWN0LnJpZ2h0IC0gY2xpcHBpbmdDbGllbnRSZWN0LnJpZ2h0ICsgcGFkZGluZ09iamVjdC5yaWdodFxuICB9O1xuICB2YXIgb2Zmc2V0RGF0YSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0OyAvLyBPZmZzZXRzIGNhbiBiZSBhcHBsaWVkIG9ubHkgdG8gdGhlIHBvcHBlciBlbGVtZW50XG5cbiAgaWYgKGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgJiYgb2Zmc2V0RGF0YSkge1xuICAgIHZhciBvZmZzZXQgPSBvZmZzZXREYXRhW3BsYWNlbWVudF07XG4gICAgT2JqZWN0LmtleXMob3ZlcmZsb3dPZmZzZXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBtdWx0aXBseSA9IFtyaWdodCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/IDEgOiAtMTtcbiAgICAgIHZhciBheGlzID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/ICd5JyA6ICd4JztcbiAgICAgIG92ZXJmbG93T2Zmc2V0c1trZXldICs9IG9mZnNldFtheGlzXSAqIG11bHRpcGx5O1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG92ZXJmbG93T2Zmc2V0cztcbn0iLCJpbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IHsgdmFyaWF0aW9uUGxhY2VtZW50cywgYmFzZVBsYWNlbWVudHMsIHBsYWNlbWVudHMgYXMgYWxsUGxhY2VtZW50cyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBsYWNlbWVudCA9IF9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5ID0gX29wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMuZmxpcFZhcmlhdGlvbnMsXG4gICAgICBfb3B0aW9ucyRhbGxvd2VkQXV0b1AgPSBfb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBfb3B0aW9ucyRhbGxvd2VkQXV0b1AgPT09IHZvaWQgMCA/IGFsbFBsYWNlbWVudHMgOiBfb3B0aW9ucyRhbGxvd2VkQXV0b1A7XG4gIHZhciB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KTtcbiAgdmFyIHBsYWNlbWVudHMgPSB2YXJpYXRpb24gPyBmbGlwVmFyaWF0aW9ucyA/IHZhcmlhdGlvblBsYWNlbWVudHMgOiB2YXJpYXRpb25QbGFjZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSB2YXJpYXRpb247XG4gIH0pIDogYmFzZVBsYWNlbWVudHM7XG4gIHZhciBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWxsb3dlZEF1dG9QbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KSA+PSAwO1xuICB9KTtcblxuICBpZiAoYWxsb3dlZFBsYWNlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogVGhlIGBhbGxvd2VkQXV0b1BsYWNlbWVudHNgIG9wdGlvbiBkaWQgbm90IGFsbG93IGFueScsICdwbGFjZW1lbnRzLiBFbnN1cmUgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbiBtYXRjaGVzIHRoZSB2YXJpYXRpb24nLCAnb2YgdGhlIGFsbG93ZWQgcGxhY2VtZW50cy4nLCAnRm9yIGV4YW1wbGUsIFwiYXV0b1wiIGNhbm5vdCBiZSB1c2VkIHRvIGFsbG93IFwiYm90dG9tLXN0YXJ0XCIuJywgJ1VzZSBcImF1dG8tc3RhcnRcIiBpbnN0ZWFkLiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdOiBGbG93IHNlZW1zIHRvIGhhdmUgcHJvYmxlbXMgd2l0aCB0d28gYXJyYXkgdW5pb25zLi4uXG5cblxuICB2YXIgb3ZlcmZsb3dzID0gYWxsb3dlZFBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSlbZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpXTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvdmVyZmxvd3MpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dzW2FdIC0gb3ZlcmZsb3dzW2JdO1xuICB9KTtcbn0iLCJpbXBvcnQgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGNvbXB1dGVBdXRvUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgYm90dG9tLCB0b3AsIHN0YXJ0LCByaWdodCwgbGVmdCwgYXV0byB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZnVuY3Rpb24gZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocGxhY2VtZW50KSB7XG4gIGlmIChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgb3Bwb3NpdGVQbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICByZXR1cm4gW2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCksIG9wcG9zaXRlUGxhY2VtZW50LCBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChvcHBvc2l0ZVBsYWNlbWVudCldO1xufVxuXG5mdW5jdGlvbiBmbGlwKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhbHRBeGlzLFxuICAgICAgc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzID0gb3B0aW9ucy5mYWxsYmFja1BsYWNlbWVudHMsXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgYm91bmRhcnkgPSBvcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IG9wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPSBvcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRmbGlwVmFyaWF0aW8sXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBvcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cztcbiAgdmFyIHByZWZlcnJlZFBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9IGJhc2VQbGFjZW1lbnQgPT09IHByZWZlcnJlZFBsYWNlbWVudDtcbiAgdmFyIGZhbGxiYWNrUGxhY2VtZW50cyA9IHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyB8fCAoaXNCYXNlUGxhY2VtZW50IHx8ICFmbGlwVmFyaWF0aW9ucyA/IFtnZXRPcHBvc2l0ZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpXSA6IGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHByZWZlcnJlZFBsYWNlbWVudCkpO1xuICB2YXIgcGxhY2VtZW50cyA9IFtwcmVmZXJyZWRQbGFjZW1lbnRdLmNvbmNhdChmYWxsYmFja1BsYWNlbWVudHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8gPyBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9uczogZmxpcFZhcmlhdGlvbnMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHM6IGFsbG93ZWRBdXRvUGxhY2VtZW50c1xuICAgIH0pIDogcGxhY2VtZW50KTtcbiAgfSwgW10pO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBjaGVja3NNYXAgPSBuZXcgTWFwKCk7XG4gIHZhciBtYWtlRmFsbGJhY2tDaGVja3MgPSB0cnVlO1xuICB2YXIgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50c1swXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBsYWNlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGxhY2VtZW50ID0gcGxhY2VtZW50c1tpXTtcblxuICAgIHZhciBfYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBpc1N0YXJ0VmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHN0YXJ0O1xuICAgIHZhciBpc1ZlcnRpY2FsID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKF9iYXNlUGxhY2VtZW50KSA+PSAwO1xuICAgIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuICAgIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pO1xuICAgIHZhciBtYWluVmFyaWF0aW9uU2lkZSA9IGlzVmVydGljYWwgPyBpc1N0YXJ0VmFyaWF0aW9uID8gcmlnaHQgOiBsZWZ0IDogaXNTdGFydFZhcmlhdGlvbiA/IGJvdHRvbSA6IHRvcDtcblxuICAgIGlmIChyZWZlcmVuY2VSZWN0W2xlbl0gPiBwb3BwZXJSZWN0W2xlbl0pIHtcbiAgICAgIG1haW5WYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIH1cblxuICAgIHZhciBhbHRWYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIHZhciBjaGVja3MgPSBbXTtcblxuICAgIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgICBjaGVja3MucHVzaChvdmVyZmxvd1tfYmFzZVBsYWNlbWVudF0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbbWFpblZhcmlhdGlvblNpZGVdIDw9IDAsIG92ZXJmbG93W2FsdFZhcmlhdGlvblNpZGVdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja3MuZXZlcnkoZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgICByZXR1cm4gY2hlY2s7XG4gICAgfSkpIHtcbiAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudDtcbiAgICAgIG1ha2VGYWxsYmFja0NoZWNrcyA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY2hlY2tzTWFwLnNldChwbGFjZW1lbnQsIGNoZWNrcyk7XG4gIH1cblxuICBpZiAobWFrZUZhbGxiYWNrQ2hlY2tzKSB7XG4gICAgLy8gYDJgIG1heSBiZSBkZXNpcmVkIGluIHNvbWUgY2FzZXMg4oCTIHJlc2VhcmNoIGxhdGVyXG4gICAgdmFyIG51bWJlck9mQ2hlY2tzID0gZmxpcFZhcmlhdGlvbnMgPyAzIDogMTtcblxuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKF9pKSB7XG4gICAgICB2YXIgZml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHMuZmluZChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgICAgIHZhciBjaGVja3MgPSBjaGVja3NNYXAuZ2V0KHBsYWNlbWVudCk7XG5cbiAgICAgICAgaWYgKGNoZWNrcykge1xuICAgICAgICAgIHJldHVybiBjaGVja3Muc2xpY2UoMCwgX2kpLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICAgICAgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gZml0dGluZ1BsYWNlbWVudDtcbiAgICAgICAgcmV0dXJuIFwiYnJlYWtcIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgX2kgPSBudW1iZXJPZkNoZWNrczsgX2kgPiAwOyBfaS0tKSB7XG4gICAgICB2YXIgX3JldCA9IF9sb29wKF9pKTtcblxuICAgICAgaWYgKF9yZXQgPT09IFwiYnJlYWtcIikgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXRlLnBsYWNlbWVudCAhPT0gZmlyc3RGaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCA9IHRydWU7XG4gICAgc3RhdGUucGxhY2VtZW50ID0gZmlyc3RGaXR0aW5nUGxhY2VtZW50O1xuICAgIHN0YXRlLnJlc2V0ID0gdHJ1ZTtcbiAgfVxufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZmxpcCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBmbGlwLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddLFxuICBkYXRhOiB7XG4gICAgX3NraXA6IGZhbHNlXG4gIH1cbn07IiwiaW1wb3J0IHsgdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5cbmZ1bmN0aW9uIGdldFNpZGVPZmZzZXRzKG92ZXJmbG93LCByZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKSB7XG4gIGlmIChwcmV2ZW50ZWRPZmZzZXRzID09PSB2b2lkIDApIHtcbiAgICBwcmV2ZW50ZWRPZmZzZXRzID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDBcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IG92ZXJmbG93LnRvcCAtIHJlY3QuaGVpZ2h0IC0gcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIHJpZ2h0OiBvdmVyZmxvdy5yaWdodCAtIHJlY3Qud2lkdGggKyBwcmV2ZW50ZWRPZmZzZXRzLngsXG4gICAgYm90dG9tOiBvdmVyZmxvdy5ib3R0b20gLSByZWN0LmhlaWdodCArIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICBsZWZ0OiBvdmVyZmxvdy5sZWZ0IC0gcmVjdC53aWR0aCAtIHByZXZlbnRlZE9mZnNldHMueFxuICB9O1xufVxuXG5mdW5jdGlvbiBpc0FueVNpZGVGdWxseUNsaXBwZWQob3ZlcmZsb3cpIHtcbiAgcmV0dXJuIFt0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnRdLnNvbWUoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dbc2lkZV0gPj0gMDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhpZGUoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgcHJldmVudGVkT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucHJldmVudE92ZXJmbG93O1xuICB2YXIgcmVmZXJlbmNlT3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGVsZW1lbnRDb250ZXh0OiAncmVmZXJlbmNlJ1xuICB9KTtcbiAgdmFyIHBvcHBlckFsdE92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBhbHRCb3VuZGFyeTogdHJ1ZVxuICB9KTtcbiAgdmFyIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHJlZmVyZW5jZU92ZXJmbG93LCByZWZlcmVuY2VSZWN0KTtcbiAgdmFyIHBvcHBlckVzY2FwZU9mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhwb3BwZXJBbHRPdmVyZmxvdywgcG9wcGVyUmVjdCwgcHJldmVudGVkT2Zmc2V0cyk7XG4gIHZhciBpc1JlZmVyZW5jZUhpZGRlbiA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMpO1xuICB2YXIgaGFzUG9wcGVyRXNjYXBlZCA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChwb3BwZXJFc2NhcGVPZmZzZXRzKTtcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IHtcbiAgICByZWZlcmVuY2VDbGlwcGluZ09mZnNldHM6IHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyxcbiAgICBwb3BwZXJFc2NhcGVPZmZzZXRzOiBwb3BwZXJFc2NhcGVPZmZzZXRzLFxuICAgIGlzUmVmZXJlbmNlSGlkZGVuOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICBoYXNQb3BwZXJFc2NhcGVkOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH07XG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlbic6IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgICdkYXRhLXBvcHBlci1lc2NhcGVkJzogaGFzUG9wcGVyRXNjYXBlZFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2hpZGUnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddLFxuICBmbjogaGlkZVxufTsiLCJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgcGxhY2VtZW50cyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgcmVjdHMsIG9mZnNldCkge1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIGludmVydERpc3RhbmNlID0gW2xlZnQsIHRvcF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8gLTEgOiAxO1xuXG4gIHZhciBfcmVmID0gdHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IG9mZnNldChPYmplY3QuYXNzaWduKHt9LCByZWN0cywge1xuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pKSA6IG9mZnNldCxcbiAgICAgIHNraWRkaW5nID0gX3JlZlswXSxcbiAgICAgIGRpc3RhbmNlID0gX3JlZlsxXTtcblxuICBza2lkZGluZyA9IHNraWRkaW5nIHx8IDA7XG4gIGRpc3RhbmNlID0gKGRpc3RhbmNlIHx8IDApICogaW52ZXJ0RGlzdGFuY2U7XG4gIHJldHVybiBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IHtcbiAgICB4OiBkaXN0YW5jZSxcbiAgICB5OiBza2lkZGluZ1xuICB9IDoge1xuICAgIHg6IHNraWRkaW5nLFxuICAgIHk6IGRpc3RhbmNlXG4gIH07XG59XG5cbmZ1bmN0aW9uIG9mZnNldChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYyLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRvZmZzZXQgPSBvcHRpb25zLm9mZnNldCxcbiAgICAgIG9mZnNldCA9IF9vcHRpb25zJG9mZnNldCA9PT0gdm9pZCAwID8gWzAsIDBdIDogX29wdGlvbnMkb2Zmc2V0O1xuICB2YXIgZGF0YSA9IHBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCBzdGF0ZS5yZWN0cywgb2Zmc2V0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHZhciBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQgPSBkYXRhW3N0YXRlLnBsYWNlbWVudF0sXG4gICAgICB4ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50LngsXG4gICAgICB5ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50Lnk7XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnggKz0geDtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueSArPSB5O1xuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdvZmZzZXQnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIGZuOiBvZmZzZXRcbn07IiwiaW1wb3J0IGNvbXB1dGVPZmZzZXRzIGZyb20gXCIuLi91dGlscy9jb21wdXRlT2Zmc2V0cy5qc1wiO1xuXG5mdW5jdGlvbiBwb3BwZXJPZmZzZXRzKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIC8vIE9mZnNldHMgYXJlIHRoZSBhY3R1YWwgcG9zaXRpb24gdGhlIHBvcHBlciBuZWVkcyB0byBoYXZlIHRvIGJlXG4gIC8vIHByb3Blcmx5IHBvc2l0aW9uZWQgbmVhciBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBiYXNpYyBwbGFjZW1lbnQsIGFuZCB3aWxsIGJlIGFkanVzdGVkIGJ5XG4gIC8vIHRoZSBtb2RpZmllcnMgaW4gdGhlIG5leHQgc3RlcFxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogc3RhdGUucmVjdHMucmVmZXJlbmNlLFxuICAgIGVsZW1lbnQ6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3BvcHBlck9mZnNldHMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3JlYWQnLFxuICBmbjogcG9wcGVyT2Zmc2V0cyxcbiAgZGF0YToge31cbn07IiwiaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCBzdGFydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldEFsdEF4aXMgZnJvbSBcIi4uL3V0aWxzL2dldEFsdEF4aXMuanNcIjtcbmltcG9ydCB3aXRoaW4gZnJvbSBcIi4uL3V0aWxzL3dpdGhpbi5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCBnZXRGcmVzaFNpZGVPYmplY3QgZnJvbSBcIi4uL3V0aWxzL2dldEZyZXNoU2lkZU9iamVjdC5qc1wiO1xuaW1wb3J0IHsgbWF4IGFzIG1hdGhNYXgsIG1pbiBhcyBtYXRoTWluIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcblxuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICB2YXIgX29wdGlvbnMkbWFpbkF4aXMgPSBvcHRpb25zLm1haW5BeGlzLFxuICAgICAgY2hlY2tNYWluQXhpcyA9IF9vcHRpb25zJG1haW5BeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkbWFpbkF4aXMsXG4gICAgICBfb3B0aW9ucyRhbHRBeGlzID0gb3B0aW9ucy5hbHRBeGlzLFxuICAgICAgY2hlY2tBbHRBeGlzID0gX29wdGlvbnMkYWx0QXhpcyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRhbHRBeGlzLFxuICAgICAgYm91bmRhcnkgPSBvcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IG9wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgX29wdGlvbnMkdGV0aGVyID0gb3B0aW9ucy50ZXRoZXIsXG4gICAgICB0ZXRoZXIgPSBfb3B0aW9ucyR0ZXRoZXIgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyR0ZXRoZXIsXG4gICAgICBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPSBvcHRpb25zLnRldGhlck9mZnNldCxcbiAgICAgIHRldGhlck9mZnNldCA9IF9vcHRpb25zJHRldGhlck9mZnNldCA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJHRldGhlck9mZnNldDtcbiAgdmFyIG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgcGFkZGluZzogcGFkZGluZyxcbiAgICBhbHRCb3VuZGFyeTogYWx0Qm91bmRhcnlcbiAgfSk7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgdmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBpc0Jhc2VQbGFjZW1lbnQgPSAhdmFyaWF0aW9uO1xuICB2YXIgbWFpbkF4aXMgPSBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCk7XG4gIHZhciBhbHRBeGlzID0gZ2V0QWx0QXhpcyhtYWluQXhpcyk7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciB0ZXRoZXJPZmZzZXRWYWx1ZSA9IHR5cGVvZiB0ZXRoZXJPZmZzZXQgPT09ICdmdW5jdGlvbicgPyB0ZXRoZXJPZmZzZXQoT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiB0ZXRoZXJPZmZzZXQ7XG4gIHZhciBkYXRhID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmICghcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjaGVja01haW5BeGlzIHx8IGNoZWNrQWx0QXhpcykge1xuICAgIHZhciBtYWluU2lkZSA9IG1haW5BeGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICAgIHZhciBhbHRTaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICAgIHZhciBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBvZmZzZXQgPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXTtcbiAgICB2YXIgbWluID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gKyBvdmVyZmxvd1ttYWluU2lkZV07XG4gICAgdmFyIG1heCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdIC0gb3ZlcmZsb3dbYWx0U2lkZV07XG4gICAgdmFyIGFkZGl0aXZlID0gdGV0aGVyID8gLXBvcHBlclJlY3RbbGVuXSAvIDIgOiAwO1xuICAgIHZhciBtaW5MZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gcmVmZXJlbmNlUmVjdFtsZW5dIDogcG9wcGVyUmVjdFtsZW5dO1xuICAgIHZhciBtYXhMZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gLXBvcHBlclJlY3RbbGVuXSA6IC1yZWZlcmVuY2VSZWN0W2xlbl07IC8vIFdlIG5lZWQgdG8gaW5jbHVkZSB0aGUgYXJyb3cgaW4gdGhlIGNhbGN1bGF0aW9uIHNvIHRoZSBhcnJvdyBkb2Vzbid0IGdvXG4gICAgLy8gb3V0c2lkZSB0aGUgcmVmZXJlbmNlIGJvdW5kc1xuXG4gICAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICAgIHZhciBhcnJvd1JlY3QgPSB0ZXRoZXIgJiYgYXJyb3dFbGVtZW50ID8gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpIDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDBcbiAgICB9O1xuICAgIHZhciBhcnJvd1BhZGRpbmdPYmplY3QgPSBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10gPyBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10ucGFkZGluZyA6IGdldEZyZXNoU2lkZU9iamVjdCgpO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNaW4gPSBhcnJvd1BhZGRpbmdPYmplY3RbbWFpblNpZGVdO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNYXggPSBhcnJvd1BhZGRpbmdPYmplY3RbYWx0U2lkZV07IC8vIElmIHRoZSByZWZlcmVuY2UgbGVuZ3RoIGlzIHNtYWxsZXIgdGhhbiB0aGUgYXJyb3cgbGVuZ3RoLCB3ZSBkb24ndCB3YW50XG4gICAgLy8gdG8gaW5jbHVkZSBpdHMgZnVsbCBzaXplIGluIHRoZSBjYWxjdWxhdGlvbi4gSWYgdGhlIHJlZmVyZW5jZSBpcyBzbWFsbFxuICAgIC8vIGFuZCBuZWFyIHRoZSBlZGdlIG9mIGEgYm91bmRhcnksIHRoZSBwb3BwZXIgY2FuIG92ZXJmbG93IGV2ZW4gaWYgdGhlXG4gICAgLy8gcmVmZXJlbmNlIGlzIG5vdCBvdmVyZmxvd2luZyBhcyB3ZWxsIChlLmcuIHZpcnR1YWwgZWxlbWVudHMgd2l0aCBub1xuICAgIC8vIHdpZHRoIG9yIGhlaWdodClcblxuICAgIHZhciBhcnJvd0xlbiA9IHdpdGhpbigwLCByZWZlcmVuY2VSZWN0W2xlbl0sIGFycm93UmVjdFtsZW5dKTtcbiAgICB2YXIgbWluT2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50ID8gcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiAtIGFkZGl0aXZlIC0gYXJyb3dMZW4gLSBhcnJvd1BhZGRpbmdNaW4gLSB0ZXRoZXJPZmZzZXRWYWx1ZSA6IG1pbkxlbiAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gdGV0aGVyT2Zmc2V0VmFsdWU7XG4gICAgdmFyIG1heE9mZnNldCA9IGlzQmFzZVBsYWNlbWVudCA/IC1yZWZlcmVuY2VSZWN0W2xlbl0gLyAyICsgYWRkaXRpdmUgKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIHRldGhlck9mZnNldFZhbHVlIDogbWF4TGVuICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyB0ZXRoZXJPZmZzZXRWYWx1ZTtcbiAgICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdyAmJiBnZXRPZmZzZXRQYXJlbnQoc3RhdGUuZWxlbWVudHMuYXJyb3cpO1xuICAgIHZhciBjbGllbnRPZmZzZXQgPSBhcnJvd09mZnNldFBhcmVudCA/IG1haW5BeGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRUb3AgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudExlZnQgfHwgMCA6IDA7XG4gICAgdmFyIG9mZnNldE1vZGlmaWVyVmFsdWUgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldCA/IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0W3N0YXRlLnBsYWNlbWVudF1bbWFpbkF4aXNdIDogMDtcbiAgICB2YXIgdGV0aGVyTWluID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gKyBtaW5PZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlIC0gY2xpZW50T2Zmc2V0O1xuICAgIHZhciB0ZXRoZXJNYXggPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSArIG1heE9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWU7XG5cbiAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgdmFyIHByZXZlbnRlZE9mZnNldCA9IHdpdGhpbih0ZXRoZXIgPyBtYXRoTWluKG1pbiwgdGV0aGVyTWluKSA6IG1pbiwgb2Zmc2V0LCB0ZXRoZXIgPyBtYXRoTWF4KG1heCwgdGV0aGVyTWF4KSA6IG1heCk7XG4gICAgICBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldDtcbiAgICAgIGRhdGFbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0IC0gb2Zmc2V0O1xuICAgIH1cblxuICAgIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICAgIHZhciBfbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gdG9wIDogbGVmdDtcblxuICAgICAgdmFyIF9hbHRTaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IGJvdHRvbSA6IHJpZ2h0O1xuXG4gICAgICB2YXIgX29mZnNldCA9IHBvcHBlck9mZnNldHNbYWx0QXhpc107XG5cbiAgICAgIHZhciBfbWluID0gX29mZnNldCArIG92ZXJmbG93W19tYWluU2lkZV07XG5cbiAgICAgIHZhciBfbWF4ID0gX29mZnNldCAtIG92ZXJmbG93W19hbHRTaWRlXTtcblxuICAgICAgdmFyIF9wcmV2ZW50ZWRPZmZzZXQgPSB3aXRoaW4odGV0aGVyID8gbWF0aE1pbihfbWluLCB0ZXRoZXJNaW4pIDogX21pbiwgX29mZnNldCwgdGV0aGVyID8gbWF0aE1heChfbWF4LCB0ZXRoZXJNYXgpIDogX21heCk7XG5cbiAgICAgIHBvcHBlck9mZnNldHNbYWx0QXhpc10gPSBfcHJldmVudGVkT2Zmc2V0O1xuICAgICAgZGF0YVthbHRBeGlzXSA9IF9wcmV2ZW50ZWRPZmZzZXQgLSBfb2Zmc2V0O1xuICAgIH1cbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXVxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBbHRBeGlzKGF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09ICd4JyA/ICd5JyA6ICd4Jztcbn0iLCJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldE5vZGVTY3JvbGwgZnJvbSBcIi4vZ2V0Tm9kZVNjcm9sbC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiOyAvLyBSZXR1cm5zIHRoZSBjb21wb3NpdGUgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuXG4vLyBDb21wb3NpdGUgbWVhbnMgaXQgdGFrZXMgaW50byBhY2NvdW50IHRyYW5zZm9ybXMgYXMgd2VsbCBhcyBsYXlvdXQuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXBvc2l0ZVJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudCwgaXNGaXhlZCkge1xuICBpZiAoaXNGaXhlZCA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGdldERvY3VtZW50RWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCk7XG4gIHZhciBpc09mZnNldFBhcmVudEFuRWxlbWVudCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIHNjcm9sbCA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9O1xuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgfHwgIWlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ICYmICFpc0ZpeGVkKSB7XG4gICAgaWYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgIT09ICdib2R5JyB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEwNzhcbiAgICBpc1Njcm9sbFBhcmVudChkb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgb2Zmc2V0cyA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQpO1xuICAgICAgb2Zmc2V0cy54ICs9IG9mZnNldFBhcmVudC5jbGllbnRMZWZ0O1xuICAgICAgb2Zmc2V0cy55ICs9IG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IHJlY3QubGVmdCArIHNjcm9sbC5zY3JvbGxMZWZ0IC0gb2Zmc2V0cy54LFxuICAgIHk6IHJlY3QudG9wICsgc2Nyb2xsLnNjcm9sbFRvcCAtIG9mZnNldHMueSxcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XG4gIH07XG59IiwiaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEhUTUxFbGVtZW50U2Nyb2xsIGZyb20gXCIuL2dldEhUTUxFbGVtZW50U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlU2Nyb2xsKG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IGdldFdpbmRvdyhub2RlKSB8fCAhaXNIVE1MRWxlbWVudChub2RlKSkge1xuICAgIHJldHVybiBnZXRXaW5kb3dTY3JvbGwobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldEhUTUxFbGVtZW50U2Nyb2xsKG5vZGUpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRTY3JvbGwoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wXG4gIH07XG59IiwiaW1wb3J0IGdldENvbXBvc2l0ZVJlY3QgZnJvbSBcIi4vZG9tLXV0aWxzL2dldENvbXBvc2l0ZVJlY3QuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgb3JkZXJNb2RpZmllcnMgZnJvbSBcIi4vdXRpbHMvb3JkZXJNb2RpZmllcnMuanNcIjtcbmltcG9ydCBkZWJvdW5jZSBmcm9tIFwiLi91dGlscy9kZWJvdW5jZS5qc1wiO1xuaW1wb3J0IHZhbGlkYXRlTW9kaWZpZXJzIGZyb20gXCIuL3V0aWxzL3ZhbGlkYXRlTW9kaWZpZXJzLmpzXCI7XG5pbXBvcnQgdW5pcXVlQnkgZnJvbSBcIi4vdXRpbHMvdW5pcXVlQnkuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBtZXJnZUJ5TmFtZSBmcm9tIFwiLi91dGlscy9tZXJnZUJ5TmFtZS5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IHsgYXV0byB9IGZyb20gXCIuL2VudW1zLmpzXCI7XG52YXIgSU5WQUxJRF9FTEVNRU5UX0VSUk9SID0gJ1BvcHBlcjogSW52YWxpZCByZWZlcmVuY2Ugb3IgcG9wcGVyIGFyZ3VtZW50IHByb3ZpZGVkLiBUaGV5IG11c3QgYmUgZWl0aGVyIGEgRE9NIGVsZW1lbnQgb3IgdmlydHVhbCBlbGVtZW50Lic7XG52YXIgSU5GSU5JVEVfTE9PUF9FUlJPUiA9ICdQb3BwZXI6IEFuIGluZmluaXRlIGxvb3AgaW4gdGhlIG1vZGlmaWVycyBjeWNsZSBoYXMgYmVlbiBkZXRlY3RlZCEgVGhlIGN5Y2xlIGhhcyBiZWVuIGludGVycnVwdGVkIHRvIHByZXZlbnQgYSBicm93c2VyIGNyYXNoLic7XG52YXIgREVGQVVMVF9PUFRJT05TID0ge1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICBtb2RpZmllcnM6IFtdLFxuICBzdHJhdGVneTogJ2Fic29sdXRlJ1xufTtcblxuZnVuY3Rpb24gYXJlVmFsaWRFbGVtZW50cygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiAhYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuICEoZWxlbWVudCAmJiB0eXBlb2YgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgPT09ICdmdW5jdGlvbicpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvcHBlckdlbmVyYXRvcihnZW5lcmF0b3JPcHRpb25zKSB7XG4gIGlmIChnZW5lcmF0b3JPcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBnZW5lcmF0b3JPcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX2dlbmVyYXRvck9wdGlvbnMgPSBnZW5lcmF0b3JPcHRpb25zLFxuICAgICAgX2dlbmVyYXRvck9wdGlvbnMkZGVmID0gX2dlbmVyYXRvck9wdGlvbnMuZGVmYXVsdE1vZGlmaWVycyxcbiAgICAgIGRlZmF1bHRNb2RpZmllcnMgPSBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYgPT09IHZvaWQgMCA/IFtdIDogX2dlbmVyYXRvck9wdGlvbnMkZGVmLFxuICAgICAgX2dlbmVyYXRvck9wdGlvbnMkZGVmMiA9IF9nZW5lcmF0b3JPcHRpb25zLmRlZmF1bHRPcHRpb25zLFxuICAgICAgZGVmYXVsdE9wdGlvbnMgPSBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyID09PSB2b2lkIDAgPyBERUZBVUxUX09QVElPTlMgOiBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyO1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgICBvcmRlcmVkTW9kaWZpZXJzOiBbXSxcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfT1BUSU9OUywgZGVmYXVsdE9wdGlvbnMpLFxuICAgICAgbW9kaWZpZXJzRGF0YToge30sXG4gICAgICBlbGVtZW50czoge1xuICAgICAgICByZWZlcmVuY2U6IHJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyOiBwb3BwZXJcbiAgICAgIH0sXG4gICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgIHN0eWxlczoge31cbiAgICB9O1xuICAgIHZhciBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgdmFyIGlzRGVzdHJveWVkID0gZmFsc2U7XG4gICAgdmFyIGluc3RhbmNlID0ge1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgc2V0T3B0aW9uczogZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgc3RhdGUub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBzdGF0ZS5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGlzRWxlbWVudChyZWZlcmVuY2UpID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlKSA6IHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCkgOiBbXSxcbiAgICAgICAgICBwb3BwZXI6IGxpc3RTY3JvbGxQYXJlbnRzKHBvcHBlcilcbiAgICAgICAgfTsgLy8gT3JkZXJzIHRoZSBtb2RpZmllcnMgYmFzZWQgb24gdGhlaXIgZGVwZW5kZW5jaWVzIGFuZCBgcGhhc2VgXG4gICAgICAgIC8vIHByb3BlcnRpZXNcblxuICAgICAgICB2YXIgb3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyTW9kaWZpZXJzKG1lcmdlQnlOYW1lKFtdLmNvbmNhdChkZWZhdWx0TW9kaWZpZXJzLCBzdGF0ZS5vcHRpb25zLm1vZGlmaWVycykpKTsgLy8gU3RyaXAgb3V0IGRpc2FibGVkIG1vZGlmaWVyc1xuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgICAgICAgIHJldHVybiBtLmVuYWJsZWQ7XG4gICAgICAgIH0pOyAvLyBWYWxpZGF0ZSB0aGUgcHJvdmlkZWQgbW9kaWZpZXJzIHNvIHRoYXQgdGhlIGNvbnN1bWVyIHdpbGwgZ2V0IHdhcm5lZFxuICAgICAgICAvLyBpZiBvbmUgb2YgdGhlIG1vZGlmaWVycyBpcyBpbnZhbGlkIGZvciBhbnkgcmVhc29uXG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIHZhciBtb2RpZmllcnMgPSB1bmlxdWVCeShbXS5jb25jYXQob3JkZXJlZE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YWxpZGF0ZU1vZGlmaWVycyhtb2RpZmllcnMpO1xuXG4gICAgICAgICAgaWYgKGdldEJhc2VQbGFjZW1lbnQoc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgICAgICAgICB2YXIgZmxpcE1vZGlmaWVyID0gc3RhdGUub3JkZXJlZE1vZGlmaWVycy5maW5kKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYyLm5hbWU7XG4gICAgICAgICAgICAgIHJldHVybiBuYW1lID09PSAnZmxpcCc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFmbGlwTW9kaWZpZXIpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhdXRvXCIgcGxhY2VtZW50cyByZXF1aXJlIHRoZSBcImZsaXBcIiBtb2RpZmllciBiZScsICdwcmVzZW50IGFuZCBlbmFibGVkIHRvIHdvcmsuJ10uam9pbignICcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHBvcHBlciksXG4gICAgICAgICAgICAgIG1hcmdpblRvcCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpblRvcCxcbiAgICAgICAgICAgICAgbWFyZ2luUmlnaHQgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5SaWdodCxcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luQm90dG9tLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0ID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luTGVmdDsgLy8gV2Ugbm8gbG9uZ2VyIHRha2UgaW50byBhY2NvdW50IGBtYXJnaW5zYCBvbiB0aGUgcG9wcGVyLCBhbmQgaXQgY2FuXG4gICAgICAgICAgLy8gY2F1c2UgYnVncyB3aXRoIHBvc2l0aW9uaW5nLCBzbyB3ZSdsbCB3YXJuIHRoZSBjb25zdW1lclxuXG5cbiAgICAgICAgICBpZiAoW21hcmdpblRvcCwgbWFyZ2luUmlnaHQsIG1hcmdpbkJvdHRvbSwgbWFyZ2luTGVmdF0uc29tZShmdW5jdGlvbiAobWFyZ2luKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChtYXJnaW4pO1xuICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oWydQb3BwZXI6IENTUyBcIm1hcmdpblwiIHN0eWxlcyBjYW5ub3QgYmUgdXNlZCB0byBhcHBseSBwYWRkaW5nJywgJ2JldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50IG9yIGJvdW5kYXJ5LicsICdUbyByZXBsaWNhdGUgbWFyZ2luLCB1c2UgdGhlIGBvZmZzZXRgIG1vZGlmaWVyLCBhcyB3ZWxsIGFzJywgJ3RoZSBgcGFkZGluZ2Agb3B0aW9uIGluIHRoZSBgcHJldmVudE92ZXJmbG93YCBhbmQgYGZsaXBgJywgJ21vZGlmaWVycy4nXS5qb2luKCcgJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJ1bk1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICB9LFxuICAgICAgLy8gU3luYyB1cGRhdGUg4oCTIGl0IHdpbGwgYWx3YXlzIGJlIGV4ZWN1dGVkLCBldmVuIGlmIG5vdCBuZWNlc3NhcnkuIFRoaXNcbiAgICAgIC8vIGlzIHVzZWZ1bCBmb3IgbG93IGZyZXF1ZW5jeSB1cGRhdGVzIHdoZXJlIHN5bmMgYmVoYXZpb3Igc2ltcGxpZmllcyB0aGVcbiAgICAgIC8vIGxvZ2ljLlxuICAgICAgLy8gRm9yIGhpZ2ggZnJlcXVlbmN5IHVwZGF0ZXMgKGUuZy4gYHJlc2l6ZWAgYW5kIGBzY3JvbGxgIGV2ZW50cyksIGFsd2F5c1xuICAgICAgLy8gcHJlZmVyIHRoZSBhc3luYyBQb3BwZXIjdXBkYXRlIG1ldGhvZFxuICAgICAgZm9yY2VVcGRhdGU6IGZ1bmN0aW9uIGZvcmNlVXBkYXRlKCkge1xuICAgICAgICBpZiAoaXNEZXN0cm95ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3N0YXRlJGVsZW1lbnRzID0gc3RhdGUuZWxlbWVudHMsXG4gICAgICAgICAgICByZWZlcmVuY2UgPSBfc3RhdGUkZWxlbWVudHMucmVmZXJlbmNlLFxuICAgICAgICAgICAgcG9wcGVyID0gX3N0YXRlJGVsZW1lbnRzLnBvcHBlcjsgLy8gRG9uJ3QgcHJvY2VlZCBpZiBgcmVmZXJlbmNlYCBvciBgcG9wcGVyYCBhcmUgbm90IHZhbGlkIGVsZW1lbnRzXG4gICAgICAgIC8vIGFueW1vcmVcblxuICAgICAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTlZBTElEX0VMRU1FTlRfRVJST1IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBTdG9yZSB0aGUgcmVmZXJlbmNlIGFuZCBwb3BwZXIgcmVjdHMgdG8gYmUgcmVhZCBieSBtb2RpZmllcnNcblxuXG4gICAgICAgIHN0YXRlLnJlY3RzID0ge1xuICAgICAgICAgIHJlZmVyZW5jZTogZ2V0Q29tcG9zaXRlUmVjdChyZWZlcmVuY2UsIGdldE9mZnNldFBhcmVudChwb3BwZXIpLCBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5ID09PSAnZml4ZWQnKSxcbiAgICAgICAgICBwb3BwZXI6IGdldExheW91dFJlY3QocG9wcGVyKVxuICAgICAgICB9OyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byByZXNldCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUuIFRoZVxuICAgICAgICAvLyBtb3N0IGNvbW1vbiB1c2UgY2FzZSBmb3IgdGhpcyBpcyB0aGUgYGZsaXBgIG1vZGlmaWVyIGNoYW5naW5nIHRoZVxuICAgICAgICAvLyBwbGFjZW1lbnQsIHdoaWNoIHRoZW4gbmVlZHMgdG8gcmUtcnVuIGFsbCB0aGUgbW9kaWZpZXJzLCBiZWNhdXNlIHRoZVxuICAgICAgICAvLyBsb2dpYyB3YXMgcHJldmlvdXNseSByYW4gZm9yIHRoZSBwcmV2aW91cyBwbGFjZW1lbnQgYW5kIGlzIHRoZXJlZm9yZVxuICAgICAgICAvLyBzdGFsZS9pbmNvcnJlY3RcblxuICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5wbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDsgLy8gT24gZWFjaCB1cGRhdGUgY3ljbGUsIHRoZSBgbW9kaWZpZXJzRGF0YWAgcHJvcGVydHkgZm9yIGVhY2ggbW9kaWZpZXJcbiAgICAgICAgLy8gaXMgZmlsbGVkIHdpdGggdGhlIGluaXRpYWwgZGF0YSBzcGVjaWZpZWQgYnkgdGhlIG1vZGlmaWVyLiBUaGlzIG1lYW5zXG4gICAgICAgIC8vIGl0IGRvZXNuJ3QgcGVyc2lzdCBhbmQgaXMgZnJlc2ggb24gZWFjaCB1cGRhdGUuXG4gICAgICAgIC8vIFRvIGVuc3VyZSBwZXJzaXN0ZW50IGRhdGEsIHVzZSBgJHtuYW1lfSNwZXJzaXN0ZW50YFxuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUubW9kaWZpZXJzRGF0YVttb2RpZmllci5uYW1lXSA9IE9iamVjdC5hc3NpZ24oe30sIG1vZGlmaWVyLmRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIF9fZGVidWdfbG9vcHNfXyA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgX19kZWJ1Z19sb29wc19fICs9IDE7XG5cbiAgICAgICAgICAgIGlmIChfX2RlYnVnX2xvb3BzX18gPiAxMDApIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTkZJTklURV9MT09QX0VSUk9SKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN0YXRlLnJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfc3RhdGUkb3JkZXJlZE1vZGlmaWUgPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzW2luZGV4XSxcbiAgICAgICAgICAgICAgZm4gPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUuZm4sXG4gICAgICAgICAgICAgIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUub3B0aW9ucyxcbiAgICAgICAgICAgICAgX29wdGlvbnMgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID09PSB2b2lkIDAgPyB7fSA6IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIsXG4gICAgICAgICAgICAgIG5hbWUgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUubmFtZTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN0YXRlID0gZm4oe1xuICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICAgIG9wdGlvbnM6IF9vcHRpb25zLFxuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2VcbiAgICAgICAgICAgIH0pIHx8IHN0YXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIEFzeW5jIGFuZCBvcHRpbWlzdGljYWxseSBvcHRpbWl6ZWQgdXBkYXRlIOKAkyBpdCB3aWxsIG5vdCBiZSBleGVjdXRlZCBpZlxuICAgICAgLy8gbm90IG5lY2Vzc2FyeSAoZGVib3VuY2VkIHRvIHJ1biBhdCBtb3N0IG9uY2UtcGVyLXRpY2spXG4gICAgICB1cGRhdGU6IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgaW5zdGFuY2UuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICByZXNvbHZlKHN0YXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgaXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSU5WQUxJRF9FTEVNRU5UX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnNldE9wdGlvbnMob3B0aW9ucykudGhlbihmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgIGlmICghaXNEZXN0cm95ZWQgJiYgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKSB7XG4gICAgICAgIG9wdGlvbnMub25GaXJzdFVwZGF0ZShzdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7IC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgYmVmb3JlIHRoZSBmaXJzdFxuICAgIC8vIHVwZGF0ZSBjeWNsZSBydW5zLiBUaGV5IHdpbGwgYmUgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIHVwZGF0ZVxuICAgIC8vIGN5Y2xlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGEgbW9kaWZpZXIgYWRkcyBzb21lIHBlcnNpc3RlbnQgZGF0YSB0aGF0XG4gICAgLy8gb3RoZXIgbW9kaWZpZXJzIG5lZWQgdG8gdXNlLCBidXQgdGhlIG1vZGlmaWVyIGlzIHJ1biBhZnRlciB0aGUgZGVwZW5kZW50XG4gICAgLy8gb25lLlxuXG4gICAgZnVuY3Rpb24gcnVuTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWUsXG4gICAgICAgICAgICBfcmVmMyRvcHRpb25zID0gX3JlZjMub3B0aW9ucyxcbiAgICAgICAgICAgIG9wdGlvbnMgPSBfcmVmMyRvcHRpb25zID09PSB2b2lkIDAgPyB7fSA6IF9yZWYzJG9wdGlvbnMsXG4gICAgICAgICAgICBlZmZlY3QgPSBfcmVmMy5lZmZlY3Q7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlZmZlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgY2xlYW51cEZuID0gZWZmZWN0KHtcbiAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgbm9vcEZuID0gZnVuY3Rpb24gbm9vcEZuKCkge307XG5cbiAgICAgICAgICBlZmZlY3RDbGVhbnVwRm5zLnB1c2goY2xlYW51cEZuIHx8IG5vb3BGbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiBmbigpO1xuICAgICAgfSk7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xufVxuZXhwb3J0IHZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgZGV0ZWN0T3ZlcmZsb3cgfTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmbikge1xuICB2YXIgcGVuZGluZztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlbmRpbmc7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VCeU5hbWUobW9kaWZpZXJzKSB7XG4gIHZhciBtZXJnZWQgPSBtb2RpZmllcnMucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQsIGN1cnJlbnQpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBtZXJnZWRbY3VycmVudC5uYW1lXTtcbiAgICBtZXJnZWRbY3VycmVudC5uYW1lXSA9IGV4aXN0aW5nID8gT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcsIGN1cnJlbnQsIHtcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLm9wdGlvbnMsIGN1cnJlbnQub3B0aW9ucyksXG4gICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5kYXRhLCBjdXJyZW50LmRhdGEpXG4gICAgfSkgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTsgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdC52YWx1ZXNcblxuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtZXJnZWRba2V5XTtcbiAgfSk7XG59IiwiaW1wb3J0IHsgbW9kaWZpZXJQaGFzZXMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTg3NTI1NVxuXG5mdW5jdGlvbiBvcmRlcihtb2RpZmllcnMpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgbWFwLnNldChtb2RpZmllci5uYW1lLCBtb2RpZmllcik7XG4gIH0pOyAvLyBPbiB2aXNpdGluZyBvYmplY3QsIGNoZWNrIGZvciBpdHMgZGVwZW5kZW5jaWVzIGFuZCB2aXNpdCB0aGVtIHJlY3Vyc2l2ZWx5XG5cbiAgZnVuY3Rpb24gc29ydChtb2RpZmllcikge1xuICAgIHZpc2l0ZWQuYWRkKG1vZGlmaWVyLm5hbWUpO1xuICAgIHZhciByZXF1aXJlcyA9IFtdLmNvbmNhdChtb2RpZmllci5yZXF1aXJlcyB8fCBbXSwgbW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cyB8fCBbXSk7XG4gICAgcmVxdWlyZXMuZm9yRWFjaChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICBpZiAoIXZpc2l0ZWQuaGFzKGRlcCkpIHtcbiAgICAgICAgdmFyIGRlcE1vZGlmaWVyID0gbWFwLmdldChkZXApO1xuXG4gICAgICAgIGlmIChkZXBNb2RpZmllcikge1xuICAgICAgICAgIHNvcnQoZGVwTW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdWx0LnB1c2gobW9kaWZpZXIpO1xuICB9XG5cbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKCF2aXNpdGVkLmhhcyhtb2RpZmllci5uYW1lKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIHZpc2l0ZWQgb2JqZWN0XG4gICAgICBzb3J0KG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRlck1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgLy8gb3JkZXIgYmFzZWQgb24gZGVwZW5kZW5jaWVzXG4gIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXIobW9kaWZpZXJzKTsgLy8gb3JkZXIgYmFzZWQgb24gcGhhc2VcblxuICByZXR1cm4gbW9kaWZpZXJQaGFzZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBoYXNlKSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQob3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICByZXR1cm4gbW9kaWZpZXIucGhhc2UgPT09IHBoYXNlO1xuICAgIH0pKTtcbiAgfSwgW10pO1xufSIsImltcG9ydCB7IHBvcHBlckdlbmVyYXRvciwgZGV0ZWN0T3ZlcmZsb3cgfSBmcm9tIFwiLi9jcmVhdGVQb3BwZXIuanNcIjtcbmltcG9ydCBldmVudExpc3RlbmVycyBmcm9tIFwiLi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanNcIjtcbmltcG9ydCBwb3BwZXJPZmZzZXRzIGZyb20gXCIuL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzXCI7XG5pbXBvcnQgY29tcHV0ZVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qc1wiO1xuaW1wb3J0IGFwcGx5U3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9hcHBseVN0eWxlcy5qc1wiO1xudmFyIGRlZmF1bHRNb2RpZmllcnMgPSBbZXZlbnRMaXN0ZW5lcnMsIHBvcHBlck9mZnNldHMsIGNvbXB1dGVTdHlsZXMsIGFwcGx5U3R5bGVzXTtcbnZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKHtcbiAgZGVmYXVsdE1vZGlmaWVyczogZGVmYXVsdE1vZGlmaWVyc1xufSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgY3JlYXRlUG9wcGVyLCBwb3BwZXJHZW5lcmF0b3IsIGRlZmF1bHRNb2RpZmllcnMsIGRldGVjdE92ZXJmbG93IH07IiwiaW1wb3J0IHsgcG9wcGVyR2VuZXJhdG9yLCBkZXRlY3RPdmVyZmxvdyB9IGZyb20gXCIuL2NyZWF0ZVBvcHBlci5qc1wiO1xuaW1wb3J0IGV2ZW50TGlzdGVuZXJzIGZyb20gXCIuL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qc1wiO1xuaW1wb3J0IHBvcHBlck9mZnNldHMgZnJvbSBcIi4vbW9kaWZpZXJzL3BvcHBlck9mZnNldHMuanNcIjtcbmltcG9ydCBjb21wdXRlU3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzXCI7XG5pbXBvcnQgYXBwbHlTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2FwcGx5U3R5bGVzLmpzXCI7XG5pbXBvcnQgb2Zmc2V0IGZyb20gXCIuL21vZGlmaWVycy9vZmZzZXQuanNcIjtcbmltcG9ydCBmbGlwIGZyb20gXCIuL21vZGlmaWVycy9mbGlwLmpzXCI7XG5pbXBvcnQgcHJldmVudE92ZXJmbG93IGZyb20gXCIuL21vZGlmaWVycy9wcmV2ZW50T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBhcnJvdyBmcm9tIFwiLi9tb2RpZmllcnMvYXJyb3cuanNcIjtcbmltcG9ydCBoaWRlIGZyb20gXCIuL21vZGlmaWVycy9oaWRlLmpzXCI7XG52YXIgZGVmYXVsdE1vZGlmaWVycyA9IFtldmVudExpc3RlbmVycywgcG9wcGVyT2Zmc2V0cywgY29tcHV0ZVN0eWxlcywgYXBwbHlTdHlsZXMsIG9mZnNldCwgZmxpcCwgcHJldmVudE92ZXJmbG93LCBhcnJvdywgaGlkZV07XG52YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcih7XG4gIGRlZmF1bHRNb2RpZmllcnM6IGRlZmF1bHRNb2RpZmllcnNcbn0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciwgcG9wcGVyR2VuZXJhdG9yLCBkZWZhdWx0TW9kaWZpZXJzLCBkZXRlY3RPdmVyZmxvdyB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciBhcyBjcmVhdGVQb3BwZXJMaXRlIH0gZnJvbSBcIi4vcG9wcGVyLWxpdGUuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgKiBmcm9tIFwiLi9tb2RpZmllcnMvaW5kZXguanNcIjsiLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjAuMik6IGRyb3Bkb3duLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0ICogYXMgUG9wcGVyIGZyb20gJ0Bwb3BwZXJqcy9jb3JlJ1xuXG5pbXBvcnQge1xuICBkZWZpbmVKUXVlcnlQbHVnaW4sXG4gIGdldEVsZW1lbnQsXG4gIGdldEVsZW1lbnRGcm9tU2VsZWN0b3IsXG4gIGlzRGlzYWJsZWQsXG4gIGlzRWxlbWVudCxcbiAgaXNWaXNpYmxlLFxuICBpc1JUTCxcbiAgbm9vcCxcbiAgZ2V0TmV4dEFjdGl2ZUVsZW1lbnQsXG4gIHR5cGVDaGVja0NvbmZpZ1xufSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXInXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSAnLi9kb20vbWFuaXB1bGF0b3InXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi9kb20vc2VsZWN0b3ItZW5naW5lJ1xuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSAnLi9iYXNlLWNvbXBvbmVudCdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSA9ICdkcm9wZG93bidcbmNvbnN0IERBVEFfS0VZID0gJ2JzLmRyb3Bkb3duJ1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknXG5cbmNvbnN0IEVTQ0FQRV9LRVkgPSAnRXNjYXBlJ1xuY29uc3QgU1BBQ0VfS0VZID0gJ1NwYWNlJ1xuY29uc3QgVEFCX0tFWSA9ICdUYWInXG5jb25zdCBBUlJPV19VUF9LRVkgPSAnQXJyb3dVcCdcbmNvbnN0IEFSUk9XX0RPV05fS0VZID0gJ0Fycm93RG93bidcbmNvbnN0IFJJR0hUX01PVVNFX0JVVFRPTiA9IDIgLy8gTW91c2VFdmVudC5idXR0b24gdmFsdWUgZm9yIHRoZSBzZWNvbmRhcnkgYnV0dG9uLCB1c3VhbGx5IHRoZSByaWdodCBidXR0b25cblxuY29uc3QgUkVHRVhQX0tFWURPV04gPSBuZXcgUmVnRXhwKGAke0FSUk9XX1VQX0tFWX18JHtBUlJPV19ET1dOX0tFWX18JHtFU0NBUEVfS0VZfWApXG5cbmNvbnN0IEVWRU5UX0hJREUgPSBgaGlkZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TSE9XID0gYHNob3cke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TSE9XTiA9IGBzaG93biR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0NMSUNLID0gYGNsaWNrJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkgPSBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5jb25zdCBFVkVOVF9LRVlET1dOX0RBVEFfQVBJID0gYGtleWRvd24ke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5jb25zdCBFVkVOVF9LRVlVUF9EQVRBX0FQSSA9IGBrZXl1cCR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcblxuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnXG5jb25zdCBDTEFTU19OQU1FX0RST1BVUCA9ICdkcm9wdXAnXG5jb25zdCBDTEFTU19OQU1FX0RST1BFTkQgPSAnZHJvcGVuZCdcbmNvbnN0IENMQVNTX05BTUVfRFJPUFNUQVJUID0gJ2Ryb3BzdGFydCdcbmNvbnN0IENMQVNTX05BTUVfTkFWQkFSID0gJ25hdmJhcidcblxuY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEUgPSAnW2RhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIl0nXG5jb25zdCBTRUxFQ1RPUl9NRU5VID0gJy5kcm9wZG93bi1tZW51J1xuY29uc3QgU0VMRUNUT1JfTkFWQkFSX05BViA9ICcubmF2YmFyLW5hdidcbmNvbnN0IFNFTEVDVE9SX1ZJU0lCTEVfSVRFTVMgPSAnLmRyb3Bkb3duLW1lbnUgLmRyb3Bkb3duLWl0ZW06bm90KC5kaXNhYmxlZCk6bm90KDpkaXNhYmxlZCknXG5cbmNvbnN0IFBMQUNFTUVOVF9UT1AgPSBpc1JUTCgpID8gJ3RvcC1lbmQnIDogJ3RvcC1zdGFydCdcbmNvbnN0IFBMQUNFTUVOVF9UT1BFTkQgPSBpc1JUTCgpID8gJ3RvcC1zdGFydCcgOiAndG9wLWVuZCdcbmNvbnN0IFBMQUNFTUVOVF9CT1RUT00gPSBpc1JUTCgpID8gJ2JvdHRvbS1lbmQnIDogJ2JvdHRvbS1zdGFydCdcbmNvbnN0IFBMQUNFTUVOVF9CT1RUT01FTkQgPSBpc1JUTCgpID8gJ2JvdHRvbS1zdGFydCcgOiAnYm90dG9tLWVuZCdcbmNvbnN0IFBMQUNFTUVOVF9SSUdIVCA9IGlzUlRMKCkgPyAnbGVmdC1zdGFydCcgOiAncmlnaHQtc3RhcnQnXG5jb25zdCBQTEFDRU1FTlRfTEVGVCA9IGlzUlRMKCkgPyAncmlnaHQtc3RhcnQnIDogJ2xlZnQtc3RhcnQnXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIG9mZnNldDogWzAsIDJdLFxuICBib3VuZGFyeTogJ2NsaXBwaW5nUGFyZW50cycsXG4gIHJlZmVyZW5jZTogJ3RvZ2dsZScsXG4gIGRpc3BsYXk6ICdkeW5hbWljJyxcbiAgcG9wcGVyQ29uZmlnOiBudWxsLFxuICBhdXRvQ2xvc2U6IHRydWVcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIG9mZnNldDogJyhhcnJheXxzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgYm91bmRhcnk6ICcoc3RyaW5nfGVsZW1lbnQpJyxcbiAgcmVmZXJlbmNlOiAnKHN0cmluZ3xlbGVtZW50fG9iamVjdCknLFxuICBkaXNwbGF5OiAnc3RyaW5nJyxcbiAgcG9wcGVyQ29uZmlnOiAnKG51bGx8b2JqZWN0fGZ1bmN0aW9uKScsXG4gIGF1dG9DbG9zZTogJyhib29sZWFufHN0cmluZyknXG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBEcm9wZG93biBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50KVxuXG4gICAgdGhpcy5fcG9wcGVyID0gbnVsbFxuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5fbWVudSA9IHRoaXMuX2dldE1lbnVFbGVtZW50KClcbiAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpXG5cbiAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpXG4gIH1cblxuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcblxuICB0b2dnbGUoKSB7XG4gICAgaWYgKGlzRGlzYWJsZWQodGhpcy5fZWxlbWVudCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGlzQWN0aXZlID0gdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKVxuXG4gICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICB0aGlzLmhpZGUoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5zaG93KClcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgaWYgKGlzRGlzYWJsZWQodGhpcy5fZWxlbWVudCkgfHwgdGhpcy5fbWVudS5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgcGFyZW50ID0gRHJvcGRvd24uZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcbiAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgIH1cblxuICAgIGNvbnN0IHNob3dFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1csIHJlbGF0ZWRUYXJnZXQpXG5cbiAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIFRvdGFsbHkgZGlzYWJsZSBQb3BwZXIgZm9yIERyb3Bkb3ducyBpbiBOYXZiYXJcbiAgICBpZiAodGhpcy5faW5OYXZiYXIpIHtcbiAgICAgIE1hbmlwdWxhdG9yLnNldERhdGFBdHRyaWJ1dGUodGhpcy5fbWVudSwgJ3BvcHBlcicsICdub25lJylcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgZHJvcGRvd25zIHJlcXVpcmUgUG9wcGVyIChodHRwczovL3BvcHBlci5qcy5vcmcpJylcbiAgICAgIH1cblxuICAgICAgbGV0IHJlZmVyZW5jZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcucmVmZXJlbmNlID09PSAncGFyZW50Jykge1xuICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gcGFyZW50XG4gICAgICB9IGVsc2UgaWYgKGlzRWxlbWVudCh0aGlzLl9jb25maWcucmVmZXJlbmNlKSkge1xuICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gZ2V0RWxlbWVudCh0aGlzLl9jb25maWcucmVmZXJlbmNlKVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2VcbiAgICAgIH1cblxuICAgICAgY29uc3QgcG9wcGVyQ29uZmlnID0gdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKClcbiAgICAgIGNvbnN0IGlzRGlzcGxheVN0YXRpYyA9IHBvcHBlckNvbmZpZy5tb2RpZmllcnMuZmluZChtb2RpZmllciA9PiBtb2RpZmllci5uYW1lID09PSAnYXBwbHlTdHlsZXMnICYmIG1vZGlmaWVyLmVuYWJsZWQgPT09IGZhbHNlKVxuXG4gICAgICB0aGlzLl9wb3BwZXIgPSBQb3BwZXIuY3JlYXRlUG9wcGVyKHJlZmVyZW5jZUVsZW1lbnQsIHRoaXMuX21lbnUsIHBvcHBlckNvbmZpZylcblxuICAgICAgaWYgKGlzRGlzcGxheVN0YXRpYykge1xuICAgICAgICBNYW5pcHVsYXRvci5zZXREYXRhQXR0cmlidXRlKHRoaXMuX21lbnUsICdwb3BwZXInLCAnc3RhdGljJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgYWRkIGV4dHJhXG4gICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcbiAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgIC8vIGh0dHBzOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxNC8wMi9tb3VzZV9ldmVudF9idWIuaHRtbFxuICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiZcbiAgICAgICFwYXJlbnQuY2xvc2VzdChTRUxFQ1RPUl9OQVZCQVJfTkFWKSkge1xuICAgICAgW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pXG4gICAgICAgIC5mb3JFYWNoKGVsZW0gPT4gRXZlbnRIYW5kbGVyLm9uKGVsZW0sICdtb3VzZW92ZXInLCBub29wKSlcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LmZvY3VzKClcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICB0aGlzLl9tZW51LmNsYXNzTGlzdC50b2dnbGUoQ0xBU1NfTkFNRV9TSE9XKVxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShDTEFTU19OQU1FX1NIT1cpXG4gICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04sIHJlbGF0ZWRUYXJnZXQpXG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmIChpc0Rpc2FibGVkKHRoaXMuX2VsZW1lbnQpIHx8ICF0aGlzLl9tZW51LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1cpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgIH1cblxuICAgIHRoaXMuX2NvbXBsZXRlSGlkZShyZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpXG4gICAgfVxuXG4gICAgc3VwZXIuZGlzcG9zZSgpXG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKVxuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci51cGRhdGUoKVxuICAgIH1cbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0NMSUNLLCBldmVudCA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICB0aGlzLnRvZ2dsZSgpXG4gICAgfSlcbiAgfVxuXG4gIF9jb21wbGV0ZUhpZGUocmVsYXRlZFRhcmdldCkge1xuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUsIHJlbGF0ZWRUYXJnZXQpXG4gICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG4gICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pXG4gICAgICAgIC5mb3JFYWNoKGVsZW0gPT4gRXZlbnRIYW5kbGVyLm9mZihlbGVtLCAnbW91c2VvdmVyJywgbm9vcCkpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BvcHBlcikge1xuICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKVxuICAgIH1cblxuICAgIHRoaXMuX21lbnUuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVylcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpXG4gICAgTWFuaXB1bGF0b3IucmVtb3ZlRGF0YUF0dHJpYnV0ZSh0aGlzLl9tZW51LCAncG9wcGVyJylcbiAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4sIHJlbGF0ZWRUYXJnZXQpXG4gIH1cblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHtcbiAgICAgIC4uLnRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCxcbiAgICAgIC4uLk1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLFxuICAgICAgLi4uY29uZmlnXG4gICAgfVxuXG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSlcblxuICAgIGlmICh0eXBlb2YgY29uZmlnLnJlZmVyZW5jZSA9PT0gJ29iamVjdCcgJiYgIWlzRWxlbWVudChjb25maWcucmVmZXJlbmNlKSAmJlxuICAgICAgdHlwZW9mIGNvbmZpZy5yZWZlcmVuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICE9PSAnZnVuY3Rpb24nXG4gICAgKSB7XG4gICAgICAvLyBQb3BwZXIgdmlydHVhbCBlbGVtZW50cyByZXF1aXJlIGEgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG1ldGhvZFxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtOQU1FLnRvVXBwZXJDYXNlKCl9OiBPcHRpb24gXCJyZWZlcmVuY2VcIiBwcm92aWRlZCB0eXBlIFwib2JqZWN0XCIgd2l0aG91dCBhIHJlcXVpcmVkIFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIgbWV0aG9kLmApXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2dldE1lbnVFbGVtZW50KCkge1xuICAgIHJldHVybiBTZWxlY3RvckVuZ2luZS5uZXh0KHRoaXMuX2VsZW1lbnQsIFNFTEVDVE9SX01FTlUpWzBdXG4gIH1cblxuICBfZ2V0UGxhY2VtZW50KCkge1xuICAgIGNvbnN0IHBhcmVudERyb3Bkb3duID0gdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlXG5cbiAgICBpZiAocGFyZW50RHJvcGRvd24uY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRFJPUEVORCkpIHtcbiAgICAgIHJldHVybiBQTEFDRU1FTlRfUklHSFRcbiAgICB9XG5cbiAgICBpZiAocGFyZW50RHJvcGRvd24uY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRFJPUFNUQVJUKSkge1xuICAgICAgcmV0dXJuIFBMQUNFTUVOVF9MRUZUXG4gICAgfVxuXG4gICAgLy8gV2UgbmVlZCB0byB0cmltIHRoZSB2YWx1ZSBiZWNhdXNlIGN1c3RvbSBwcm9wZXJ0aWVzIGNhbiBhbHNvIGluY2x1ZGUgc3BhY2VzXG4gICAgY29uc3QgaXNFbmQgPSBnZXRDb21wdXRlZFN0eWxlKHRoaXMuX21lbnUpLmdldFByb3BlcnR5VmFsdWUoJy0tYnMtcG9zaXRpb24nKS50cmltKCkgPT09ICdlbmQnXG5cbiAgICBpZiAocGFyZW50RHJvcGRvd24uY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRFJPUFVQKSkge1xuICAgICAgcmV0dXJuIGlzRW5kID8gUExBQ0VNRU5UX1RPUEVORCA6IFBMQUNFTUVOVF9UT1BcbiAgICB9XG5cbiAgICByZXR1cm4gaXNFbmQgPyBQTEFDRU1FTlRfQk9UVE9NRU5EIDogUExBQ0VNRU5UX0JPVFRPTVxuICB9XG5cbiAgX2RldGVjdE5hdmJhcigpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudC5jbG9zZXN0KGAuJHtDTEFTU19OQU1FX05BVkJBUn1gKSAhPT0gbnVsbFxuICB9XG5cbiAgX2dldE9mZnNldCgpIHtcbiAgICBjb25zdCB7IG9mZnNldCB9ID0gdGhpcy5fY29uZmlnXG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBvZmZzZXQuc3BsaXQoJywnKS5tYXAodmFsID0+IE51bWJlci5wYXJzZUludCh2YWwsIDEwKSlcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHBvcHBlckRhdGEgPT4gb2Zmc2V0KHBvcHBlckRhdGEsIHRoaXMuX2VsZW1lbnQpXG4gICAgfVxuXG4gICAgcmV0dXJuIG9mZnNldFxuICB9XG5cbiAgX2dldFBvcHBlckNvbmZpZygpIHtcbiAgICBjb25zdCBkZWZhdWx0QnNQb3BwZXJDb25maWcgPSB7XG4gICAgICBwbGFjZW1lbnQ6IHRoaXMuX2dldFBsYWNlbWVudCgpLFxuICAgICAgbW9kaWZpZXJzOiBbe1xuICAgICAgICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGJvdW5kYXJ5OiB0aGlzLl9jb25maWcuYm91bmRhcnlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ29mZnNldCcsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBvZmZzZXQ6IHRoaXMuX2dldE9mZnNldCgpXG4gICAgICAgIH1cbiAgICAgIH1dXG4gICAgfVxuXG4gICAgLy8gRGlzYWJsZSBQb3BwZXIgaWYgd2UgaGF2ZSBhIHN0YXRpYyBkaXNwbGF5XG4gICAgaWYgKHRoaXMuX2NvbmZpZy5kaXNwbGF5ID09PSAnc3RhdGljJykge1xuICAgICAgZGVmYXVsdEJzUG9wcGVyQ29uZmlnLm1vZGlmaWVycyA9IFt7XG4gICAgICAgIG5hbWU6ICdhcHBseVN0eWxlcycsXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICB9XVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAuLi5kZWZhdWx0QnNQb3BwZXJDb25maWcsXG4gICAgICAuLi4odHlwZW9mIHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcgPT09ICdmdW5jdGlvbicgPyB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnKGRlZmF1bHRCc1BvcHBlckNvbmZpZykgOiB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnKVxuICAgIH1cbiAgfVxuXG4gIF9zZWxlY3RNZW51SXRlbSh7IGtleSwgdGFyZ2V0IH0pIHtcbiAgICBjb25zdCBpdGVtcyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfVklTSUJMRV9JVEVNUywgdGhpcy5fbWVudSkuZmlsdGVyKGlzVmlzaWJsZSlcblxuICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBpZiB0YXJnZXQgaXNuJ3QgaW5jbHVkZWQgaW4gaXRlbXMgKGUuZy4gd2hlbiBleHBhbmRpbmcgdGhlIGRyb3Bkb3duKVxuICAgIC8vIGFsbG93IGN5Y2xpbmcgdG8gZ2V0IHRoZSBsYXN0IGl0ZW0gaW4gY2FzZSBrZXkgZXF1YWxzIEFSUk9XX1VQX0tFWVxuICAgIGdldE5leHRBY3RpdmVFbGVtZW50KGl0ZW1zLCB0YXJnZXQsIGtleSA9PT0gQVJST1dfRE9XTl9LRVksICFpdGVtcy5pbmNsdWRlcyh0YXJnZXQpKS5mb2N1cygpXG4gIH1cblxuICAvLyBTdGF0aWNcblxuICBzdGF0aWMgZHJvcGRvd25JbnRlcmZhY2UoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgY29uc3QgZGF0YSA9IERyb3Bkb3duLmdldE9yQ3JlYXRlSW5zdGFuY2UoZWxlbWVudCwgY29uZmlnKVxuXG4gICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10oKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBEcm9wZG93bi5kcm9wZG93bkludGVyZmFjZSh0aGlzLCBjb25maWcpXG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBjbGVhck1lbnVzKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50ICYmIChldmVudC5idXR0b24gPT09IFJJR0hUX01PVVNFX0JVVFRPTiB8fCAoZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC5rZXkgIT09IFRBQl9LRVkpKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgdG9nZ2xlcyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9UT0dHTEUpXG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdG9nZ2xlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgY29udGV4dCA9IERyb3Bkb3duLmdldEluc3RhbmNlKHRvZ2dsZXNbaV0pXG4gICAgICBpZiAoIWNvbnRleHQgfHwgY29udGV4dC5fY29uZmlnLmF1dG9DbG9zZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKCFjb250ZXh0Ll9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1cpKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IGNvbnRleHQuX2VsZW1lbnRcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGNvbXBvc2VkUGF0aCA9IGV2ZW50LmNvbXBvc2VkUGF0aCgpXG4gICAgICAgIGNvbnN0IGlzTWVudVRhcmdldCA9IGNvbXBvc2VkUGF0aC5pbmNsdWRlcyhjb250ZXh0Ll9tZW51KVxuICAgICAgICBpZiAoXG4gICAgICAgICAgY29tcG9zZWRQYXRoLmluY2x1ZGVzKGNvbnRleHQuX2VsZW1lbnQpIHx8XG4gICAgICAgICAgKGNvbnRleHQuX2NvbmZpZy5hdXRvQ2xvc2UgPT09ICdpbnNpZGUnICYmICFpc01lbnVUYXJnZXQpIHx8XG4gICAgICAgICAgKGNvbnRleHQuX2NvbmZpZy5hdXRvQ2xvc2UgPT09ICdvdXRzaWRlJyAmJiBpc01lbnVUYXJnZXQpXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBUYWIgbmF2aWdhdGlvbiB0aHJvdWdoIHRoZSBkcm9wZG93biBtZW51IG9yIGV2ZW50cyBmcm9tIGNvbnRhaW5lZCBpbnB1dHMgc2hvdWxkbid0IGNsb3NlIHRoZSBtZW51XG4gICAgICAgIGlmIChjb250ZXh0Ll9tZW51LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiYgKChldmVudC50eXBlID09PSAna2V5dXAnICYmIGV2ZW50LmtleSA9PT0gVEFCX0tFWSkgfHwgL2lucHV0fHNlbGVjdHxvcHRpb258dGV4dGFyZWF8Zm9ybS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpKSkge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQuY2xpY2tFdmVudCA9IGV2ZW50XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29udGV4dC5fY29tcGxldGVIaWRlKHJlbGF0ZWRUYXJnZXQpXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldFBhcmVudEZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0RWxlbWVudEZyb21TZWxlY3RvcihlbGVtZW50KSB8fCBlbGVtZW50LnBhcmVudE5vZGVcbiAgfVxuXG4gIHN0YXRpYyBkYXRhQXBpS2V5ZG93bkhhbmRsZXIoZXZlbnQpIHtcbiAgICAvLyBJZiBub3QgaW5wdXQvdGV4dGFyZWE6XG4gICAgLy8gIC0gQW5kIG5vdCBhIGtleSBpbiBSRUdFWFBfS0VZRE9XTiA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgLy8gSWYgaW5wdXQvdGV4dGFyZWE6XG4gICAgLy8gIC0gSWYgc3BhY2Uga2V5ID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAvLyAgLSBJZiBrZXkgaXMgb3RoZXIgdGhhbiBlc2NhcGVcbiAgICAvLyAgICAtIElmIGtleSBpcyBub3QgdXAgb3IgZG93biA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgLy8gICAgLSBJZiB0cmlnZ2VyIGluc2lkZSB0aGUgbWVudSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpID9cbiAgICAgIGV2ZW50LmtleSA9PT0gU1BBQ0VfS0VZIHx8IChldmVudC5rZXkgIT09IEVTQ0FQRV9LRVkgJiZcbiAgICAgICgoZXZlbnQua2V5ICE9PSBBUlJPV19ET1dOX0tFWSAmJiBldmVudC5rZXkgIT09IEFSUk9XX1VQX0tFWSkgfHxcbiAgICAgICAgZXZlbnQudGFyZ2V0LmNsb3Nlc3QoU0VMRUNUT1JfTUVOVSkpKSA6XG4gICAgICAhUkVHRVhQX0tFWURPV04udGVzdChldmVudC5rZXkpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBpc0FjdGl2ZSA9IHRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVylcblxuICAgIGlmICghaXNBY3RpdmUgJiYgZXZlbnQua2V5ID09PSBFU0NBUEVfS0VZKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgIGlmIChpc0Rpc2FibGVkKHRoaXMpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBnZXRUb2dnbGVCdXR0b24gPSAoKSA9PiB0aGlzLm1hdGNoZXMoU0VMRUNUT1JfREFUQV9UT0dHTEUpID8gdGhpcyA6IFNlbGVjdG9yRW5naW5lLnByZXYodGhpcywgU0VMRUNUT1JfREFUQV9UT0dHTEUpWzBdXG5cbiAgICBpZiAoZXZlbnQua2V5ID09PSBFU0NBUEVfS0VZKSB7XG4gICAgICBnZXRUb2dnbGVCdXR0b24oKS5mb2N1cygpXG4gICAgICBEcm9wZG93bi5jbGVhck1lbnVzKClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChldmVudC5rZXkgPT09IEFSUk9XX1VQX0tFWSB8fCBldmVudC5rZXkgPT09IEFSUk9XX0RPV05fS0VZKSB7XG4gICAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICAgIGdldFRvZ2dsZUJ1dHRvbigpLmNsaWNrKClcbiAgICAgIH1cblxuICAgICAgRHJvcGRvd24uZ2V0SW5zdGFuY2UoZ2V0VG9nZ2xlQnV0dG9uKCkpLl9zZWxlY3RNZW51SXRlbShldmVudClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICghaXNBY3RpdmUgfHwgZXZlbnQua2V5ID09PSBTUEFDRV9LRVkpIHtcbiAgICAgIERyb3Bkb3duLmNsZWFyTWVudXMoKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfS0VZRE9XTl9EQVRBX0FQSSwgU0VMRUNUT1JfREFUQV9UT0dHTEUsIERyb3Bkb3duLmRhdGFBcGlLZXlkb3duSGFuZGxlcilcbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfS0VZRE9XTl9EQVRBX0FQSSwgU0VMRUNUT1JfTUVOVSwgRHJvcGRvd24uZGF0YUFwaUtleWRvd25IYW5kbGVyKVxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSwgRHJvcGRvd24uY2xlYXJNZW51cylcbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfS0VZVVBfREFUQV9BUEksIERyb3Bkb3duLmNsZWFyTWVudXMpXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgRHJvcGRvd24uZHJvcGRvd25JbnRlcmZhY2UodGhpcylcbn0pXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5Ecm9wZG93biB0byBqUXVlcnkgb25seSBpZiBqUXVlcnkgaXMgcHJlc2VudFxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihEcm9wZG93bilcblxuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd25cbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4yKTogdXRpbC9zY3JvbGxCYXIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi4vZG9tL3NlbGVjdG9yLWVuZ2luZSdcbmltcG9ydCBNYW5pcHVsYXRvciBmcm9tICcuLi9kb20vbWFuaXB1bGF0b3InXG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tICcuL2luZGV4J1xuXG5jb25zdCBTRUxFQ1RPUl9GSVhFRF9DT05URU5UID0gJy5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3AnXG5jb25zdCBTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCA9ICcuc3RpY2t5LXRvcCdcblxuY2xhc3MgU2Nyb2xsQmFySGVscGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LmJvZHlcbiAgfVxuXG4gIGdldFdpZHRoKCkge1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvaW5uZXJXaWR0aCN1c2FnZV9ub3Rlc1xuICAgIGNvbnN0IGRvY3VtZW50V2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGhcbiAgICByZXR1cm4gTWF0aC5hYnMod2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudFdpZHRoKVxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBjb25zdCB3aWR0aCA9IHRoaXMuZ2V0V2lkdGgoKVxuICAgIHRoaXMuX2Rpc2FibGVPdmVyRmxvdygpXG4gICAgLy8gZ2l2ZSBwYWRkaW5nIHRvIGVsZW1lbnQgdG8gYmFsYW5jZSB0aGUgaGlkZGVuIHNjcm9sbGJhciB3aWR0aFxuICAgIHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsICdwYWRkaW5nUmlnaHQnLCBjYWxjdWxhdGVkVmFsdWUgPT4gY2FsY3VsYXRlZFZhbHVlICsgd2lkdGgpXG4gICAgLy8gdHJpY2s6IFdlIGFkanVzdCBwb3NpdGl2ZSBwYWRkaW5nUmlnaHQgYW5kIG5lZ2F0aXZlIG1hcmdpblJpZ2h0IHRvIHN0aWNreS10b3AgZWxlbWVudHMgdG8ga2VlcCBzaG93aW5nIGZ1bGx3aWR0aFxuICAgIHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKFNFTEVDVE9SX0ZJWEVEX0NPTlRFTlQsICdwYWRkaW5nUmlnaHQnLCBjYWxjdWxhdGVkVmFsdWUgPT4gY2FsY3VsYXRlZFZhbHVlICsgd2lkdGgpXG4gICAgdGhpcy5fc2V0RWxlbWVudEF0dHJpYnV0ZXMoU0VMRUNUT1JfU1RJQ0tZX0NPTlRFTlQsICdtYXJnaW5SaWdodCcsIGNhbGN1bGF0ZWRWYWx1ZSA9PiBjYWxjdWxhdGVkVmFsdWUgLSB3aWR0aClcbiAgfVxuXG4gIF9kaXNhYmxlT3ZlckZsb3coKSB7XG4gICAgdGhpcy5fc2F2ZUluaXRpYWxBdHRyaWJ1dGUodGhpcy5fZWxlbWVudCwgJ292ZXJmbG93JylcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbidcbiAgfVxuXG4gIF9zZXRFbGVtZW50QXR0cmlidXRlcyhzZWxlY3Rvciwgc3R5bGVQcm9wLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHNjcm9sbGJhcldpZHRoID0gdGhpcy5nZXRXaWR0aCgpXG4gICAgY29uc3QgbWFuaXB1bGF0aW9uQ2FsbEJhY2sgPSBlbGVtZW50ID0+IHtcbiAgICAgIGlmIChlbGVtZW50ICE9PSB0aGlzLl9lbGVtZW50ICYmIHdpbmRvdy5pbm5lcldpZHRoID4gZWxlbWVudC5jbGllbnRXaWR0aCArIHNjcm9sbGJhcldpZHRoKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzLl9zYXZlSW5pdGlhbEF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3ApXG4gICAgICBjb25zdCBjYWxjdWxhdGVkVmFsdWUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVtzdHlsZVByb3BdXG4gICAgICBlbGVtZW50LnN0eWxlW3N0eWxlUHJvcF0gPSBgJHtjYWxsYmFjayhOdW1iZXIucGFyc2VGbG9hdChjYWxjdWxhdGVkVmFsdWUpKX1weGBcbiAgICB9XG5cbiAgICB0aGlzLl9hcHBseU1hbmlwdWxhdGlvbkNhbGxiYWNrKHNlbGVjdG9yLCBtYW5pcHVsYXRpb25DYWxsQmFjaylcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCwgJ292ZXJmbG93JylcbiAgICB0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsICdwYWRkaW5nUmlnaHQnKVxuICAgIHRoaXMuX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXMoU0VMRUNUT1JfRklYRURfQ09OVEVOVCwgJ3BhZGRpbmdSaWdodCcpXG4gICAgdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyhTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCwgJ21hcmdpblJpZ2h0JylcbiAgfVxuXG4gIF9zYXZlSW5pdGlhbEF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3ApIHtcbiAgICBjb25zdCBhY3R1YWxWYWx1ZSA9IGVsZW1lbnQuc3R5bGVbc3R5bGVQcm9wXVxuICAgIGlmIChhY3R1YWxWYWx1ZSkge1xuICAgICAgTWFuaXB1bGF0b3Iuc2V0RGF0YUF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3AsIGFjdHVhbFZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIF9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHNlbGVjdG9yLCBzdHlsZVByb3ApIHtcbiAgICBjb25zdCBtYW5pcHVsYXRpb25DYWxsQmFjayA9IGVsZW1lbnQgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsIHN0eWxlUHJvcClcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoc3R5bGVQcm9wKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgTWFuaXB1bGF0b3IucmVtb3ZlRGF0YUF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3ApXG4gICAgICAgIGVsZW1lbnQuc3R5bGVbc3R5bGVQcm9wXSA9IHZhbHVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayhzZWxlY3RvciwgbWFuaXB1bGF0aW9uQ2FsbEJhY2spXG4gIH1cblxuICBfYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayhzZWxlY3RvciwgY2FsbEJhY2spIHtcbiAgICBpZiAoaXNFbGVtZW50KHNlbGVjdG9yKSkge1xuICAgICAgY2FsbEJhY2soc2VsZWN0b3IpXG4gICAgfSBlbHNlIHtcbiAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoc2VsZWN0b3IsIHRoaXMuX2VsZW1lbnQpLmZvckVhY2goY2FsbEJhY2spXG4gICAgfVxuICB9XG5cbiAgaXNPdmVyZmxvd2luZygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRXaWR0aCgpID4gMFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNjcm9sbEJhckhlbHBlclxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiB1dGlsL2JhY2tkcm9wLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4uL2RvbS9ldmVudC1oYW5kbGVyJ1xuaW1wb3J0IHsgZXhlY3V0ZSwgZXhlY3V0ZUFmdGVyVHJhbnNpdGlvbiwgZ2V0RWxlbWVudCwgcmVmbG93LCB0eXBlQ2hlY2tDb25maWcgfSBmcm9tICcuL2luZGV4J1xuXG5jb25zdCBEZWZhdWx0ID0ge1xuICBpc1Zpc2libGU6IHRydWUsIC8vIGlmIGZhbHNlLCB3ZSB1c2UgdGhlIGJhY2tkcm9wIGhlbHBlciB3aXRob3V0IGFkZGluZyBhbnkgZWxlbWVudCB0byB0aGUgZG9tXG4gIGlzQW5pbWF0ZWQ6IGZhbHNlLFxuICByb290RWxlbWVudDogJ2JvZHknLCAvLyBnaXZlIHRoZSBjaG9pY2UgdG8gcGxhY2UgYmFja2Ryb3AgdW5kZXIgZGlmZmVyZW50IGVsZW1lbnRzXG4gIGNsaWNrQ2FsbGJhY2s6IG51bGxcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIGlzVmlzaWJsZTogJ2Jvb2xlYW4nLFxuICBpc0FuaW1hdGVkOiAnYm9vbGVhbicsXG4gIHJvb3RFbGVtZW50OiAnKGVsZW1lbnR8c3RyaW5nKScsXG4gIGNsaWNrQ2FsbGJhY2s6ICcoZnVuY3Rpb258bnVsbCknXG59XG5jb25zdCBOQU1FID0gJ2JhY2tkcm9wJ1xuY29uc3QgQ0xBU1NfTkFNRV9CQUNLRFJPUCA9ICdtb2RhbC1iYWNrZHJvcCdcbmNvbnN0IENMQVNTX05BTUVfRkFERSA9ICdmYWRlJ1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnXG5cbmNvbnN0IEVWRU5UX01PVVNFRE9XTiA9IGBtb3VzZWRvd24uYnMuJHtOQU1FfWBcblxuY2xhc3MgQmFja2Ryb3Age1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgIHRoaXMuX2lzQXBwZW5kZWQgPSBmYWxzZVxuICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsXG4gIH1cblxuICBzaG93KGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0aGlzLl9jb25maWcuaXNWaXNpYmxlKSB7XG4gICAgICBleGVjdXRlKGNhbGxiYWNrKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fYXBwZW5kKClcblxuICAgIGlmICh0aGlzLl9jb25maWcuaXNBbmltYXRlZCkge1xuICAgICAgcmVmbG93KHRoaXMuX2dldEVsZW1lbnQoKSlcbiAgICB9XG5cbiAgICB0aGlzLl9nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1cpXG5cbiAgICB0aGlzLl9lbXVsYXRlQW5pbWF0aW9uKCgpID0+IHtcbiAgICAgIGV4ZWN1dGUoY2FsbGJhY2spXG4gICAgfSlcbiAgfVxuXG4gIGhpZGUoY2FsbGJhY2spIHtcbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5pc1Zpc2libGUpIHtcbiAgICAgIGV4ZWN1dGUoY2FsbGJhY2spXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9nZXRFbGVtZW50KCkuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG5cbiAgICB0aGlzLl9lbXVsYXRlQW5pbWF0aW9uKCgpID0+IHtcbiAgICAgIHRoaXMuZGlzcG9zZSgpXG4gICAgICBleGVjdXRlKGNhbGxiYWNrKVxuICAgIH0pXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldEVsZW1lbnQoKSB7XG4gICAgaWYgKCF0aGlzLl9lbGVtZW50KSB7XG4gICAgICBjb25zdCBiYWNrZHJvcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICBiYWNrZHJvcC5jbGFzc05hbWUgPSBDTEFTU19OQU1FX0JBQ0tEUk9QXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmlzQW5pbWF0ZWQpIHtcbiAgICAgICAgYmFja2Ryb3AuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0ZBREUpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBiYWNrZHJvcFxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9lbGVtZW50XG4gIH1cblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHtcbiAgICAgIC4uLkRlZmF1bHQsXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiB7fSlcbiAgICB9XG5cbiAgICAvLyB1c2UgZ2V0RWxlbWVudCgpIHdpdGggdGhlIGRlZmF1bHQgXCJib2R5XCIgdG8gZ2V0IGEgZnJlc2ggRWxlbWVudCBvbiBlYWNoIGluc3RhbnRpYXRpb25cbiAgICBjb25maWcucm9vdEVsZW1lbnQgPSBnZXRFbGVtZW50KGNvbmZpZy5yb290RWxlbWVudClcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSlcbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfYXBwZW5kKCkge1xuICAgIGlmICh0aGlzLl9pc0FwcGVuZGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9jb25maWcucm9vdEVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fZ2V0RWxlbWVudCgpKVxuXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2dldEVsZW1lbnQoKSwgRVZFTlRfTU9VU0VET1dOLCAoKSA9PiB7XG4gICAgICBleGVjdXRlKHRoaXMuX2NvbmZpZy5jbGlja0NhbGxiYWNrKVxuICAgIH0pXG5cbiAgICB0aGlzLl9pc0FwcGVuZGVkID0gdHJ1ZVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBpZiAoIXRoaXMuX2lzQXBwZW5kZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VET1dOKVxuXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKVxuICAgIHRoaXMuX2lzQXBwZW5kZWQgPSBmYWxzZVxuICB9XG5cbiAgX2VtdWxhdGVBbmltYXRpb24oY2FsbGJhY2spIHtcbiAgICBleGVjdXRlQWZ0ZXJUcmFuc2l0aW9uKGNhbGxiYWNrLCB0aGlzLl9nZXRFbGVtZW50KCksIHRoaXMuX2NvbmZpZy5pc0FuaW1hdGVkKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhY2tkcm9wXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjAuMik6IG1vZGFsLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IHtcbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luLFxuICBnZXRFbGVtZW50RnJvbVNlbGVjdG9yLFxuICBpc1JUTCxcbiAgaXNWaXNpYmxlLFxuICByZWZsb3csXG4gIHR5cGVDaGVja0NvbmZpZ1xufSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXInXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSAnLi9kb20vbWFuaXB1bGF0b3InXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi9kb20vc2VsZWN0b3ItZW5naW5lJ1xuaW1wb3J0IFNjcm9sbEJhckhlbHBlciBmcm9tICcuL3V0aWwvc2Nyb2xsYmFyJ1xuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSAnLi9iYXNlLWNvbXBvbmVudCdcbmltcG9ydCBCYWNrZHJvcCBmcm9tICcuL3V0aWwvYmFja2Ryb3AnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUgPSAnbW9kYWwnXG5jb25zdCBEQVRBX0tFWSA9ICdicy5tb2RhbCdcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJ1xuY29uc3QgRVNDQVBFX0tFWSA9ICdFc2NhcGUnXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIGJhY2tkcm9wOiB0cnVlLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgZm9jdXM6IHRydWVcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIGJhY2tkcm9wOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gIGtleWJvYXJkOiAnYm9vbGVhbicsXG4gIGZvY3VzOiAnYm9vbGVhbidcbn1cblxuY29uc3QgRVZFTlRfSElERSA9IGBoaWRlJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfSElERV9QUkVWRU5URUQgPSBgaGlkZVByZXZlbnRlZCR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TSE9XID0gYHNob3cke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TSE9XTiA9IGBzaG93biR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0ZPQ1VTSU4gPSBgZm9jdXNpbiR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1JFU0laRSA9IGByZXNpemUke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9DTElDS19ESVNNSVNTID0gYGNsaWNrLmRpc21pc3Mke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9LRVlET1dOX0RJU01JU1MgPSBga2V5ZG93bi5kaXNtaXNzJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfTU9VU0VVUF9ESVNNSVNTID0gYG1vdXNldXAuZGlzbWlzcyR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX01PVVNFRE9XTl9ESVNNSVNTID0gYG1vdXNlZG93bi5kaXNtaXNzJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkgPSBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5cbmNvbnN0IENMQVNTX05BTUVfT1BFTiA9ICdtb2RhbC1vcGVuJ1xuY29uc3QgQ0xBU1NfTkFNRV9GQURFID0gJ2ZhZGUnXG5jb25zdCBDTEFTU19OQU1FX1NIT1cgPSAnc2hvdydcbmNvbnN0IENMQVNTX05BTUVfU1RBVElDID0gJ21vZGFsLXN0YXRpYydcblxuY29uc3QgU0VMRUNUT1JfRElBTE9HID0gJy5tb2RhbC1kaWFsb2cnXG5jb25zdCBTRUxFQ1RPUl9NT0RBTF9CT0RZID0gJy5tb2RhbC1ib2R5J1xuY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEUgPSAnW2RhdGEtYnMtdG9nZ2xlPVwibW9kYWxcIl0nXG5jb25zdCBTRUxFQ1RPUl9EQVRBX0RJU01JU1MgPSAnW2RhdGEtYnMtZGlzbWlzcz1cIm1vZGFsXCJdJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgTW9kYWwgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgc3VwZXIoZWxlbWVudClcblxuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5fZGlhbG9nID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9ESUFMT0csIHRoaXMuX2VsZW1lbnQpXG4gICAgdGhpcy5fYmFja2Ryb3AgPSB0aGlzLl9pbml0aWFsaXplQmFja0Ryb3AoKVxuICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZVxuICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZVxuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlXG4gICAgdGhpcy5fc2Nyb2xsQmFyID0gbmV3IFNjcm9sbEJhckhlbHBlcigpXG4gIH1cblxuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUVcbiAgfVxuXG4gIC8vIFB1YmxpY1xuXG4gIHRvZ2dsZShyZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdyhyZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgc2hvdyhyZWxhdGVkVGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMuX2lzU2hvd24gfHwgdGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0XG4gICAgfSlcblxuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5faXNTaG93biA9IHRydWVcblxuICAgIGlmICh0aGlzLl9pc0FuaW1hdGVkKCkpIHtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWVcbiAgICB9XG5cbiAgICB0aGlzLl9zY3JvbGxCYXIuaGlkZSgpXG5cbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9PUEVOKVxuXG4gICAgdGhpcy5fYWRqdXN0RGlhbG9nKClcblxuICAgIHRoaXMuX3NldEVzY2FwZUV2ZW50KClcbiAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpXG5cbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfQ0xJQ0tfRElTTUlTUywgU0VMRUNUT1JfREFUQV9ESVNNSVNTLCBldmVudCA9PiB0aGlzLmhpZGUoZXZlbnQpKVxuXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2RpYWxvZywgRVZFTlRfTU9VU0VET1dOX0RJU01JU1MsICgpID0+IHtcbiAgICAgIEV2ZW50SGFuZGxlci5vbmUodGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VVUF9ESVNNSVNTLCBldmVudCA9PiB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMuX2VsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLl9zaG93QmFja2Ryb3AoKCkgPT4gdGhpcy5fc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCkpXG4gIH1cblxuICBoaWRlKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50ICYmIFsnQScsICdBUkVBJ10uaW5jbHVkZXMoZXZlbnQudGFyZ2V0LnRhZ05hbWUpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9pc1Nob3duIHx8IHRoaXMuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgaGlkZUV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElERSlcblxuICAgIGlmIChoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5faXNTaG93biA9IGZhbHNlXG4gICAgY29uc3QgaXNBbmltYXRlZCA9IHRoaXMuX2lzQW5pbWF0ZWQoKVxuXG4gICAgaWYgKGlzQW5pbWF0ZWQpIHtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWVcbiAgICB9XG5cbiAgICB0aGlzLl9zZXRFc2NhcGVFdmVudCgpXG4gICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKVxuXG4gICAgRXZlbnRIYW5kbGVyLm9mZihkb2N1bWVudCwgRVZFTlRfRk9DVVNJTilcblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG5cbiAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0NMSUNLX0RJU01JU1MpXG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9kaWFsb2csIEVWRU5UX01PVVNFRE9XTl9ESVNNSVNTKVxuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB0aGlzLl9oaWRlTW9kYWwoKSwgdGhpcy5fZWxlbWVudCwgaXNBbmltYXRlZClcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgW3dpbmRvdywgdGhpcy5fZGlhbG9nXVxuICAgICAgLmZvckVhY2goaHRtbEVsZW1lbnQgPT4gRXZlbnRIYW5kbGVyLm9mZihodG1sRWxlbWVudCwgRVZFTlRfS0VZKSlcblxuICAgIHRoaXMuX2JhY2tkcm9wLmRpc3Bvc2UoKVxuICAgIHN1cGVyLmRpc3Bvc2UoKVxuXG4gICAgLyoqXG4gICAgICogYGRvY3VtZW50YCBoYXMgMiBldmVudHMgYEVWRU5UX0ZPQ1VTSU5gIGFuZCBgRVZFTlRfQ0xJQ0tfREFUQV9BUElgXG4gICAgICogRG8gbm90IG1vdmUgYGRvY3VtZW50YCBpbiBgaHRtbEVsZW1lbnRzYCBhcnJheVxuICAgICAqIEl0IHdpbGwgcmVtb3ZlIGBFVkVOVF9DTElDS19EQVRBX0FQSWAgZXZlbnQgdGhhdCBzaG91bGQgcmVtYWluXG4gICAgICovXG4gICAgRXZlbnRIYW5kbGVyLm9mZihkb2N1bWVudCwgRVZFTlRfRk9DVVNJTilcbiAgfVxuXG4gIGhhbmRsZVVwZGF0ZSgpIHtcbiAgICB0aGlzLl9hZGp1c3REaWFsb2coKVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIF9pbml0aWFsaXplQmFja0Ryb3AoKSB7XG4gICAgcmV0dXJuIG5ldyBCYWNrZHJvcCh7XG4gICAgICBpc1Zpc2libGU6IEJvb2xlYW4odGhpcy5fY29uZmlnLmJhY2tkcm9wKSwgLy8gJ3N0YXRpYycgb3B0aW9uIHdpbGwgYmUgdHJhbnNsYXRlZCB0byB0cnVlLCBhbmQgYm9vbGVhbnMgd2lsbCBrZWVwIHRoZWlyIHZhbHVlXG4gICAgICBpc0FuaW1hdGVkOiB0aGlzLl9pc0FuaW1hdGVkKClcbiAgICB9KVxuICB9XG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi5EZWZhdWx0LFxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiB7fSlcbiAgICB9XG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICBjb25zdCBpc0FuaW1hdGVkID0gdGhpcy5faXNBbmltYXRlZCgpXG4gICAgY29uc3QgbW9kYWxCb2R5ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9NT0RBTF9CT0RZLCB0aGlzLl9kaWFsb2cpXG5cbiAgICBpZiAoIXRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSB8fCB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAvLyBEb24ndCBtb3ZlIG1vZGFsJ3MgRE9NIHBvc2l0aW9uXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnQpXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCB0cnVlKVxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2RpYWxvZycpXG4gICAgdGhpcy5fZWxlbWVudC5zY3JvbGxUb3AgPSAwXG5cbiAgICBpZiAobW9kYWxCb2R5KSB7XG4gICAgICBtb2RhbEJvZHkuc2Nyb2xsVG9wID0gMFxuICAgIH1cblxuICAgIGlmIChpc0FuaW1hdGVkKSB7XG4gICAgICByZWZsb3codGhpcy5fZWxlbWVudClcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XKVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5mb2N1cykge1xuICAgICAgdGhpcy5fZW5mb3JjZUZvY3VzKClcbiAgICB9XG5cbiAgICBjb25zdCB0cmFuc2l0aW9uQ29tcGxldGUgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5fY29uZmlnLmZvY3VzKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04sIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldFxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKHRyYW5zaXRpb25Db21wbGV0ZSwgdGhpcy5fZGlhbG9nLCBpc0FuaW1hdGVkKVxuICB9XG5cbiAgX2VuZm9yY2VGb2N1cygpIHtcbiAgICBFdmVudEhhbmRsZXIub2ZmKGRvY3VtZW50LCBFVkVOVF9GT0NVU0lOKSAvLyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGZvY3VzIGxvb3BcbiAgICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0ZPQ1VTSU4sIGV2ZW50ID0+IHtcbiAgICAgIGlmIChkb2N1bWVudCAhPT0gZXZlbnQudGFyZ2V0ICYmXG4gICAgICAgICAgdGhpcy5fZWxlbWVudCAhPT0gZXZlbnQudGFyZ2V0ICYmXG4gICAgICAgICAgIXRoaXMuX2VsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICB0aGlzLl9lbGVtZW50LmZvY3VzKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgX3NldEVzY2FwZUV2ZW50KCkge1xuICAgIGlmICh0aGlzLl9pc1Nob3duKSB7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfS0VZRE9XTl9ESVNNSVNTLCBldmVudCA9PiB7XG4gICAgICAgIGlmICh0aGlzLl9jb25maWcua2V5Ym9hcmQgJiYgZXZlbnQua2V5ID09PSBFU0NBUEVfS0VZKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgIHRoaXMuaGlkZSgpXG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2NvbmZpZy5rZXlib2FyZCAmJiBldmVudC5rZXkgPT09IEVTQ0FQRV9LRVkpIHtcbiAgICAgICAgICB0aGlzLl90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LCBFVkVOVF9LRVlET1dOX0RJU01JU1MpXG4gICAgfVxuICB9XG5cbiAgX3NldFJlc2l6ZUV2ZW50KCkge1xuICAgIGlmICh0aGlzLl9pc1Nob3duKSB7XG4gICAgICBFdmVudEhhbmRsZXIub24od2luZG93LCBFVkVOVF9SRVNJWkUsICgpID0+IHRoaXMuX2FkanVzdERpYWxvZygpKVxuICAgIH0gZWxzZSB7XG4gICAgICBFdmVudEhhbmRsZXIub2ZmKHdpbmRvdywgRVZFTlRfUkVTSVpFKVxuICAgIH1cbiAgfVxuXG4gIF9oaWRlTW9kYWwoKSB7XG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSlcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcpXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3JvbGUnKVxuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlXG4gICAgdGhpcy5fYmFja2Ryb3AuaGlkZSgoKSA9PiB7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9PUEVOKVxuICAgICAgdGhpcy5fcmVzZXRBZGp1c3RtZW50cygpXG4gICAgICB0aGlzLl9zY3JvbGxCYXIucmVzZXQoKVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElEREVOKVxuICAgIH0pXG4gIH1cblxuICBfc2hvd0JhY2tkcm9wKGNhbGxiYWNrKSB7XG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0NMSUNLX0RJU01JU1MsIGV2ZW50ID0+IHtcbiAgICAgIGlmICh0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrKSB7XG4gICAgICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5iYWNrZHJvcCA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLmhpZGUoKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9jb25maWcuYmFja2Ryb3AgPT09ICdzdGF0aWMnKSB7XG4gICAgICAgIHRoaXMuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLl9iYWNrZHJvcC5zaG93KGNhbGxiYWNrKVxuICB9XG5cbiAgX2lzQW5pbWF0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSlcbiAgfVxuXG4gIF90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKCkge1xuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREVfUFJFVkVOVEVEKVxuICAgIGlmIChoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgeyBjbGFzc0xpc3QsIHNjcm9sbEhlaWdodCwgc3R5bGUgfSA9IHRoaXMuX2VsZW1lbnRcbiAgICBjb25zdCBpc01vZGFsT3ZlcmZsb3dpbmcgPSBzY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG5cbiAgICAvLyByZXR1cm4gaWYgdGhlIGZvbGxvd2luZyBiYWNrZ3JvdW5kIHRyYW5zaXRpb24gaGFzbid0IHlldCBjb21wbGV0ZWRcbiAgICBpZiAoKCFpc01vZGFsT3ZlcmZsb3dpbmcgJiYgc3R5bGUub3ZlcmZsb3dZID09PSAnaGlkZGVuJykgfHwgY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU1RBVElDKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKCFpc01vZGFsT3ZlcmZsb3dpbmcpIHtcbiAgICAgIHN0eWxlLm92ZXJmbG93WSA9ICdoaWRkZW4nXG4gICAgfVxuXG4gICAgY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NUQVRJQylcbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIGNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TVEFUSUMpXG4gICAgICBpZiAoIWlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICBzdHlsZS5vdmVyZmxvd1kgPSAnJ1xuICAgICAgICB9LCB0aGlzLl9kaWFsb2cpXG4gICAgICB9XG4gICAgfSwgdGhpcy5fZGlhbG9nKVxuXG4gICAgdGhpcy5fZWxlbWVudC5mb2N1cygpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHRoZSBmb2xsb3dpbmcgbWV0aG9kcyBhcmUgdXNlZCB0byBoYW5kbGUgb3ZlcmZsb3dpbmcgbW9kYWxzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBfYWRqdXN0RGlhbG9nKCkge1xuICAgIGNvbnN0IGlzTW9kYWxPdmVyZmxvd2luZyA9IHRoaXMuX2VsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuICAgIGNvbnN0IHNjcm9sbGJhcldpZHRoID0gdGhpcy5fc2Nyb2xsQmFyLmdldFdpZHRoKClcbiAgICBjb25zdCBpc0JvZHlPdmVyZmxvd2luZyA9IHNjcm9sbGJhcldpZHRoID4gMFxuXG4gICAgaWYgKCghaXNCb2R5T3ZlcmZsb3dpbmcgJiYgaXNNb2RhbE92ZXJmbG93aW5nICYmICFpc1JUTCgpKSB8fCAoaXNCb2R5T3ZlcmZsb3dpbmcgJiYgIWlzTW9kYWxPdmVyZmxvd2luZyAmJiBpc1JUTCgpKSkge1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdCA9IGAke3Njcm9sbGJhcldpZHRofXB4YFxuICAgIH1cblxuICAgIGlmICgoaXNCb2R5T3ZlcmZsb3dpbmcgJiYgIWlzTW9kYWxPdmVyZmxvd2luZyAmJiAhaXNSVEwoKSkgfHwgKCFpc0JvZHlPdmVyZmxvd2luZyAmJiBpc01vZGFsT3ZlcmZsb3dpbmcgJiYgaXNSVEwoKSkpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7c2Nyb2xsYmFyV2lkdGh9cHhgXG4gICAgfVxuICB9XG5cbiAgX3Jlc2V0QWRqdXN0bWVudHMoKSB7XG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdCA9ICcnXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnJ1xuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcsIHJlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBNb2RhbC5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZylcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10ocmVsYXRlZFRhcmdldClcbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSwgU0VMRUNUT1JfREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICBjb25zdCB0YXJnZXQgPSBnZXRFbGVtZW50RnJvbVNlbGVjdG9yKHRoaXMpXG5cbiAgaWYgKFsnQScsICdBUkVBJ10uaW5jbHVkZXModGhpcy50YWdOYW1lKSkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIEV2ZW50SGFuZGxlci5vbmUodGFyZ2V0LCBFVkVOVF9TSE9XLCBzaG93RXZlbnQgPT4ge1xuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgLy8gb25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93blxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgRXZlbnRIYW5kbGVyLm9uZSh0YXJnZXQsIEVWRU5UX0hJRERFTiwgKCkgPT4ge1xuICAgICAgaWYgKGlzVmlzaWJsZSh0aGlzKSkge1xuICAgICAgICB0aGlzLmZvY3VzKClcbiAgICAgIH1cbiAgICB9KVxuICB9KVxuXG4gIGNvbnN0IGRhdGEgPSBNb2RhbC5nZXRPckNyZWF0ZUluc3RhbmNlKHRhcmdldClcblxuICBkYXRhLnRvZ2dsZSh0aGlzKVxufSlcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBhZGQgLk1vZGFsIHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKE1vZGFsKVxuXG5leHBvcnQgZGVmYXVsdCBNb2RhbFxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiBvZmZjYW52YXMuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7XG4gIGRlZmluZUpRdWVyeVBsdWdpbixcbiAgZ2V0RWxlbWVudEZyb21TZWxlY3RvcixcbiAgaXNEaXNhYmxlZCxcbiAgaXNWaXNpYmxlLFxuICB0eXBlQ2hlY2tDb25maWdcbn0gZnJvbSAnLi91dGlsL2luZGV4J1xuaW1wb3J0IFNjcm9sbEJhckhlbHBlciBmcm9tICcuL3V0aWwvc2Nyb2xsYmFyJ1xuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuL2RvbS9ldmVudC1oYW5kbGVyJ1xuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSAnLi9iYXNlLWNvbXBvbmVudCdcbmltcG9ydCBTZWxlY3RvckVuZ2luZSBmcm9tICcuL2RvbS9zZWxlY3Rvci1lbmdpbmUnXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSAnLi9kb20vbWFuaXB1bGF0b3InXG5pbXBvcnQgQmFja2Ryb3AgZnJvbSAnLi91dGlsL2JhY2tkcm9wJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FID0gJ29mZmNhbnZhcydcbmNvbnN0IERBVEFfS0VZID0gJ2JzLm9mZmNhbnZhcydcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJ1xuY29uc3QgRVZFTlRfTE9BRF9EQVRBX0FQSSA9IGBsb2FkJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxuY29uc3QgRVNDQVBFX0tFWSA9ICdFc2NhcGUnXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIGJhY2tkcm9wOiB0cnVlLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgc2Nyb2xsOiBmYWxzZVxufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgYmFja2Ryb3A6ICdib29sZWFuJyxcbiAga2V5Ym9hcmQ6ICdib29sZWFuJyxcbiAgc2Nyb2xsOiAnYm9vbGVhbidcbn1cblxuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnXG5jb25zdCBPUEVOX1NFTEVDVE9SID0gJy5vZmZjYW52YXMuc2hvdydcblxuY29uc3QgRVZFTlRfU0hPVyA9IGBzaG93JHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0hPV04gPSBgc2hvd24ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9ISURFID0gYGhpZGUke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9ISURERU4gPSBgaGlkZGVuJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfRk9DVVNJTiA9IGBmb2N1c2luJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkgPSBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5jb25zdCBFVkVOVF9DTElDS19ESVNNSVNTID0gYGNsaWNrLmRpc21pc3Mke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9LRVlET1dOX0RJU01JU1MgPSBga2V5ZG93bi5kaXNtaXNzJHtFVkVOVF9LRVl9YFxuXG5jb25zdCBTRUxFQ1RPUl9EQVRBX0RJU01JU1MgPSAnW2RhdGEtYnMtZGlzbWlzcz1cIm9mZmNhbnZhc1wiXSdcbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFID0gJ1tkYXRhLWJzLXRvZ2dsZT1cIm9mZmNhbnZhc1wiXSdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIE9mZmNhbnZhcyBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50KVxuXG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZylcbiAgICB0aGlzLl9pc1Nob3duID0gZmFsc2VcbiAgICB0aGlzLl9iYWNrZHJvcCA9IHRoaXMuX2luaXRpYWxpemVCYWNrRHJvcCgpXG4gICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKVxuICB9XG5cbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICAvLyBQdWJsaWNcblxuICB0b2dnbGUocmVsYXRlZFRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldClcbiAgfVxuXG4gIHNob3cocmVsYXRlZFRhcmdldCkge1xuICAgIGlmICh0aGlzLl9pc1Nob3duKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XLCB7IHJlbGF0ZWRUYXJnZXQgfSlcblxuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5faXNTaG93biA9IHRydWVcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSdcblxuICAgIHRoaXMuX2JhY2tkcm9wLnNob3coKVxuXG4gICAgaWYgKCF0aGlzLl9jb25maWcuc2Nyb2xsKSB7XG4gICAgICBuZXcgU2Nyb2xsQmFySGVscGVyKCkuaGlkZSgpXG4gICAgICB0aGlzLl9lbmZvcmNlRm9jdXNPbkVsZW1lbnQodGhpcy5fZWxlbWVudClcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKVxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLW1vZGFsJywgdHJ1ZSlcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgncm9sZScsICdkaWFsb2cnKVxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1cpXG5cbiAgICBjb25zdCBjb21wbGV0ZUNhbGxCYWNrID0gKCkgPT4ge1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04sIHsgcmVsYXRlZFRhcmdldCB9KVxuICAgIH1cblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGVDYWxsQmFjaywgdGhpcy5fZWxlbWVudCwgdHJ1ZSlcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLl9pc1Nob3duKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFKVxuXG4gICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBFdmVudEhhbmRsZXIub2ZmKGRvY3VtZW50LCBFVkVOVF9GT0NVU0lOKVxuICAgIHRoaXMuX2VsZW1lbnQuYmx1cigpXG4gICAgdGhpcy5faXNTaG93biA9IGZhbHNlXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVylcbiAgICB0aGlzLl9iYWNrZHJvcC5oaWRlKClcblxuICAgIGNvbnN0IGNvbXBsZXRlQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKVxuICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnKVxuICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3JvbGUnKVxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbidcblxuICAgICAgaWYgKCF0aGlzLl9jb25maWcuc2Nyb2xsKSB7XG4gICAgICAgIG5ldyBTY3JvbGxCYXJIZWxwZXIoKS5yZXNldCgpXG4gICAgICB9XG5cbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJRERFTilcbiAgICB9XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlQ2FsbGJhY2ssIHRoaXMuX2VsZW1lbnQsIHRydWUpXG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMuX2JhY2tkcm9wLmRpc3Bvc2UoKVxuICAgIHN1cGVyLmRpc3Bvc2UoKVxuICAgIEV2ZW50SGFuZGxlci5vZmYoZG9jdW1lbnQsIEVWRU5UX0ZPQ1VTSU4pXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi5EZWZhdWx0LFxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiB7fSlcbiAgICB9XG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2luaXRpYWxpemVCYWNrRHJvcCgpIHtcbiAgICByZXR1cm4gbmV3IEJhY2tkcm9wKHtcbiAgICAgIGlzVmlzaWJsZTogdGhpcy5fY29uZmlnLmJhY2tkcm9wLFxuICAgICAgaXNBbmltYXRlZDogdHJ1ZSxcbiAgICAgIHJvb3RFbGVtZW50OiB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICBjbGlja0NhbGxiYWNrOiAoKSA9PiB0aGlzLmhpZGUoKVxuICAgIH0pXG4gIH1cblxuICBfZW5mb3JjZUZvY3VzT25FbGVtZW50KGVsZW1lbnQpIHtcbiAgICBFdmVudEhhbmRsZXIub2ZmKGRvY3VtZW50LCBFVkVOVF9GT0NVU0lOKSAvLyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGZvY3VzIGxvb3BcbiAgICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0ZPQ1VTSU4sIGV2ZW50ID0+IHtcbiAgICAgIGlmIChkb2N1bWVudCAhPT0gZXZlbnQudGFyZ2V0ICYmXG4gICAgICAgIGVsZW1lbnQgIT09IGV2ZW50LnRhcmdldCAmJlxuICAgICAgICAhZWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICAgIGVsZW1lbnQuZm9jdXMoKVxuICAgICAgfVxuICAgIH0pXG4gICAgZWxlbWVudC5mb2N1cygpXG4gIH1cblxuICBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0NMSUNLX0RJU01JU1MsIFNFTEVDVE9SX0RBVEFfRElTTUlTUywgKCkgPT4gdGhpcy5oaWRlKCkpXG5cbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfS0VZRE9XTl9ESVNNSVNTLCBldmVudCA9PiB7XG4gICAgICBpZiAodGhpcy5fY29uZmlnLmtleWJvYXJkICYmIGV2ZW50LmtleSA9PT0gRVNDQVBFX0tFWSkge1xuICAgICAgICB0aGlzLmhpZGUoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyBTdGF0aWNcblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IE9mZmNhbnZhcy5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZylcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YVtjb25maWddID09PSB1bmRlZmluZWQgfHwgY29uZmlnLnN0YXJ0c1dpdGgoJ18nKSB8fCBjb25maWcgPT09ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10odGhpcylcbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSwgU0VMRUNUT1JfREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICBjb25zdCB0YXJnZXQgPSBnZXRFbGVtZW50RnJvbVNlbGVjdG9yKHRoaXMpXG5cbiAgaWYgKFsnQScsICdBUkVBJ10uaW5jbHVkZXModGhpcy50YWdOYW1lKSkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIGlmIChpc0Rpc2FibGVkKHRoaXMpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBFdmVudEhhbmRsZXIub25lKHRhcmdldCwgRVZFTlRfSElEREVOLCAoKSA9PiB7XG4gICAgLy8gZm9jdXMgb24gdHJpZ2dlciB3aGVuIGl0IGlzIGNsb3NlZFxuICAgIGlmIChpc1Zpc2libGUodGhpcykpIHtcbiAgICAgIHRoaXMuZm9jdXMoKVxuICAgIH1cbiAgfSlcblxuICAvLyBhdm9pZCBjb25mbGljdCB3aGVuIGNsaWNraW5nIGEgdG9nZ2xlciBvZiBhbiBvZmZjYW52YXMsIHdoaWxlIGFub3RoZXIgaXMgb3BlblxuICBjb25zdCBhbGxSZWFkeU9wZW4gPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKE9QRU5fU0VMRUNUT1IpXG4gIGlmIChhbGxSZWFkeU9wZW4gJiYgYWxsUmVhZHlPcGVuICE9PSB0YXJnZXQpIHtcbiAgICBPZmZjYW52YXMuZ2V0SW5zdGFuY2UoYWxsUmVhZHlPcGVuKS5oaWRlKClcbiAgfVxuXG4gIGNvbnN0IGRhdGEgPSBPZmZjYW52YXMuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0YXJnZXQpXG4gIGRhdGEudG9nZ2xlKHRoaXMpXG59KVxuXG5FdmVudEhhbmRsZXIub24od2luZG93LCBFVkVOVF9MT0FEX0RBVEFfQVBJLCAoKSA9PlxuICBTZWxlY3RvckVuZ2luZS5maW5kKE9QRU5fU0VMRUNUT1IpLmZvckVhY2goZWwgPT4gT2ZmY2FudmFzLmdldE9yQ3JlYXRlSW5zdGFuY2UoZWwpLnNob3coKSlcbilcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKE9mZmNhbnZhcylcblxuZXhwb3J0IGRlZmF1bHQgT2ZmY2FudmFzXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjAuMik6IHV0aWwvc2FuaXRpemVyLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgdXJpQXR0cnMgPSBuZXcgU2V0KFtcbiAgJ2JhY2tncm91bmQnLFxuICAnY2l0ZScsXG4gICdocmVmJyxcbiAgJ2l0ZW10eXBlJyxcbiAgJ2xvbmdkZXNjJyxcbiAgJ3Bvc3RlcicsXG4gICdzcmMnLFxuICAneGxpbms6aHJlZidcbl0pXG5cbmNvbnN0IEFSSUFfQVRUUklCVVRFX1BBVFRFUk4gPSAvXmFyaWEtW1xcdy1dKiQvaVxuXG4vKipcbiAqIEEgcGF0dGVybiB0aGF0IHJlY29nbml6ZXMgYSBjb21tb25seSB1c2VmdWwgc3Vic2V0IG9mIFVSTHMgdGhhdCBhcmUgc2FmZS5cbiAqXG4gKiBTaG91dG91dCB0byBBbmd1bGFyIDcgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzcuMi40L3BhY2thZ2VzL2NvcmUvc3JjL3Nhbml0aXphdGlvbi91cmxfc2FuaXRpemVyLnRzXG4gKi9cbmNvbnN0IFNBRkVfVVJMX1BBVFRFUk4gPSAvXig/Oig/Omh0dHBzP3xtYWlsdG98ZnRwfHRlbHxmaWxlKTp8W14jJi86P10qKD86WyMvP118JCkpL2lcblxuLyoqXG4gKiBBIHBhdHRlcm4gdGhhdCBtYXRjaGVzIHNhZmUgZGF0YSBVUkxzLiBPbmx5IG1hdGNoZXMgaW1hZ2UsIHZpZGVvIGFuZCBhdWRpbyB0eXBlcy5cbiAqXG4gKiBTaG91dG91dCB0byBBbmd1bGFyIDcgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzcuMi40L3BhY2thZ2VzL2NvcmUvc3JjL3Nhbml0aXphdGlvbi91cmxfc2FuaXRpemVyLnRzXG4gKi9cbmNvbnN0IERBVEFfVVJMX1BBVFRFUk4gPSAvXmRhdGE6KD86aW1hZ2VcXC8oPzpibXB8Z2lmfGpwZWd8anBnfHBuZ3x0aWZmfHdlYnApfHZpZGVvXFwvKD86bXBlZ3xtcDR8b2dnfHdlYm0pfGF1ZGlvXFwvKD86bXAzfG9nYXxvZ2d8b3B1cykpO2Jhc2U2NCxbXFxkKy9hLXpdKz0qJC9pXG5cbmNvbnN0IGFsbG93ZWRBdHRyaWJ1dGUgPSAoYXR0ciwgYWxsb3dlZEF0dHJpYnV0ZUxpc3QpID0+IHtcbiAgY29uc3QgYXR0ck5hbWUgPSBhdHRyLm5vZGVOYW1lLnRvTG93ZXJDYXNlKClcblxuICBpZiAoYWxsb3dlZEF0dHJpYnV0ZUxpc3QuaW5jbHVkZXMoYXR0ck5hbWUpKSB7XG4gICAgaWYgKHVyaUF0dHJzLmhhcyhhdHRyTmFtZSkpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKFNBRkVfVVJMX1BBVFRFUk4udGVzdChhdHRyLm5vZGVWYWx1ZSkgfHwgREFUQV9VUkxfUEFUVEVSTi50ZXN0KGF0dHIubm9kZVZhbHVlKSlcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgY29uc3QgcmVnRXhwID0gYWxsb3dlZEF0dHJpYnV0ZUxpc3QuZmlsdGVyKGF0dHJSZWdleCA9PiBhdHRyUmVnZXggaW5zdGFuY2VvZiBSZWdFeHApXG5cbiAgLy8gQ2hlY2sgaWYgYSByZWd1bGFyIGV4cHJlc3Npb24gdmFsaWRhdGVzIHRoZSBhdHRyaWJ1dGUuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSByZWdFeHAubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAocmVnRXhwW2ldLnRlc3QoYXR0ck5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufVxuXG5leHBvcnQgY29uc3QgRGVmYXVsdEFsbG93bGlzdCA9IHtcbiAgLy8gR2xvYmFsIGF0dHJpYnV0ZXMgYWxsb3dlZCBvbiBhbnkgc3VwcGxpZWQgZWxlbWVudCBiZWxvdy5cbiAgJyonOiBbJ2NsYXNzJywgJ2RpcicsICdpZCcsICdsYW5nJywgJ3JvbGUnLCBBUklBX0FUVFJJQlVURV9QQVRURVJOXSxcbiAgYTogWyd0YXJnZXQnLCAnaHJlZicsICd0aXRsZScsICdyZWwnXSxcbiAgYXJlYTogW10sXG4gIGI6IFtdLFxuICBicjogW10sXG4gIGNvbDogW10sXG4gIGNvZGU6IFtdLFxuICBkaXY6IFtdLFxuICBlbTogW10sXG4gIGhyOiBbXSxcbiAgaDE6IFtdLFxuICBoMjogW10sXG4gIGgzOiBbXSxcbiAgaDQ6IFtdLFxuICBoNTogW10sXG4gIGg2OiBbXSxcbiAgaTogW10sXG4gIGltZzogWydzcmMnLCAnc3Jjc2V0JywgJ2FsdCcsICd0aXRsZScsICd3aWR0aCcsICdoZWlnaHQnXSxcbiAgbGk6IFtdLFxuICBvbDogW10sXG4gIHA6IFtdLFxuICBwcmU6IFtdLFxuICBzOiBbXSxcbiAgc21hbGw6IFtdLFxuICBzcGFuOiBbXSxcbiAgc3ViOiBbXSxcbiAgc3VwOiBbXSxcbiAgc3Ryb25nOiBbXSxcbiAgdTogW10sXG4gIHVsOiBbXVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVIdG1sKHVuc2FmZUh0bWwsIGFsbG93TGlzdCwgc2FuaXRpemVGbikge1xuICBpZiAoIXVuc2FmZUh0bWwubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHVuc2FmZUh0bWxcbiAgfVxuXG4gIGlmIChzYW5pdGl6ZUZuICYmIHR5cGVvZiBzYW5pdGl6ZUZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHNhbml0aXplRm4odW5zYWZlSHRtbClcbiAgfVxuXG4gIGNvbnN0IGRvbVBhcnNlciA9IG5ldyB3aW5kb3cuRE9NUGFyc2VyKClcbiAgY29uc3QgY3JlYXRlZERvY3VtZW50ID0gZG9tUGFyc2VyLnBhcnNlRnJvbVN0cmluZyh1bnNhZmVIdG1sLCAndGV4dC9odG1sJylcbiAgY29uc3QgYWxsb3dsaXN0S2V5cyA9IE9iamVjdC5rZXlzKGFsbG93TGlzdClcbiAgY29uc3QgZWxlbWVudHMgPSBbXS5jb25jYXQoLi4uY3JlYXRlZERvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbCgnKicpKVxuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IGVsID0gZWxlbWVudHNbaV1cbiAgICBjb25zdCBlbE5hbWUgPSBlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXG5cbiAgICBpZiAoIWFsbG93bGlzdEtleXMuaW5jbHVkZXMoZWxOYW1lKSkge1xuICAgICAgZWwucmVtb3ZlKClcblxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBjb25zdCBhdHRyaWJ1dGVMaXN0ID0gW10uY29uY2F0KC4uLmVsLmF0dHJpYnV0ZXMpXG4gICAgY29uc3QgYWxsb3dlZEF0dHJpYnV0ZXMgPSBbXS5jb25jYXQoYWxsb3dMaXN0WycqJ10gfHwgW10sIGFsbG93TGlzdFtlbE5hbWVdIHx8IFtdKVxuXG4gICAgYXR0cmlidXRlTGlzdC5mb3JFYWNoKGF0dHIgPT4ge1xuICAgICAgaWYgKCFhbGxvd2VkQXR0cmlidXRlKGF0dHIsIGFsbG93ZWRBdHRyaWJ1dGVzKSkge1xuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoYXR0ci5ub2RlTmFtZSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZWREb2N1bWVudC5ib2R5LmlubmVySFRNTFxufVxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiB0b29sdGlwLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0ICogYXMgUG9wcGVyIGZyb20gJ0Bwb3BwZXJqcy9jb3JlJ1xuXG5pbXBvcnQge1xuICBkZWZpbmVKUXVlcnlQbHVnaW4sXG4gIGZpbmRTaGFkb3dSb290LFxuICBnZXRFbGVtZW50LFxuICBnZXRVSUQsXG4gIGlzRWxlbWVudCxcbiAgaXNSVEwsXG4gIG5vb3AsXG4gIHR5cGVDaGVja0NvbmZpZ1xufSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQge1xuICBEZWZhdWx0QWxsb3dsaXN0LFxuICBzYW5pdGl6ZUh0bWxcbn0gZnJvbSAnLi91dGlsL3Nhbml0aXplcidcbmltcG9ydCBEYXRhIGZyb20gJy4vZG9tL2RhdGEnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXInXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSAnLi9kb20vbWFuaXB1bGF0b3InXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi9kb20vc2VsZWN0b3ItZW5naW5lJ1xuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSAnLi9iYXNlLWNvbXBvbmVudCdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSA9ICd0b29sdGlwJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMudG9vbHRpcCdcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBDTEFTU19QUkVGSVggPSAnYnMtdG9vbHRpcCdcbmNvbnN0IEJTQ0xTX1BSRUZJWF9SRUdFWCA9IG5ldyBSZWdFeHAoYChefFxcXFxzKSR7Q0xBU1NfUFJFRklYfVxcXFxTK2AsICdnJylcbmNvbnN0IERJU0FMTE9XRURfQVRUUklCVVRFUyA9IG5ldyBTZXQoWydzYW5pdGl6ZScsICdhbGxvd0xpc3QnLCAnc2FuaXRpemVGbiddKVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgYW5pbWF0aW9uOiAnYm9vbGVhbicsXG4gIHRlbXBsYXRlOiAnc3RyaW5nJyxcbiAgdGl0bGU6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJyxcbiAgdHJpZ2dlcjogJ3N0cmluZycsXG4gIGRlbGF5OiAnKG51bWJlcnxvYmplY3QpJyxcbiAgaHRtbDogJ2Jvb2xlYW4nLFxuICBzZWxlY3RvcjogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICBwbGFjZW1lbnQ6ICcoc3RyaW5nfGZ1bmN0aW9uKScsXG4gIG9mZnNldDogJyhhcnJheXxzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgY29udGFpbmVyOiAnKHN0cmluZ3xlbGVtZW50fGJvb2xlYW4pJyxcbiAgZmFsbGJhY2tQbGFjZW1lbnRzOiAnYXJyYXknLFxuICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknLFxuICBjdXN0b21DbGFzczogJyhzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgc2FuaXRpemU6ICdib29sZWFuJyxcbiAgc2FuaXRpemVGbjogJyhudWxsfGZ1bmN0aW9uKScsXG4gIGFsbG93TGlzdDogJ29iamVjdCcsXG4gIHBvcHBlckNvbmZpZzogJyhudWxsfG9iamVjdHxmdW5jdGlvbiknXG59XG5cbmNvbnN0IEF0dGFjaG1lbnRNYXAgPSB7XG4gIEFVVE86ICdhdXRvJyxcbiAgVE9QOiAndG9wJyxcbiAgUklHSFQ6IGlzUlRMKCkgPyAnbGVmdCcgOiAncmlnaHQnLFxuICBCT1RUT006ICdib3R0b20nLFxuICBMRUZUOiBpc1JUTCgpID8gJ3JpZ2h0JyA6ICdsZWZ0J1xufVxuXG5jb25zdCBEZWZhdWx0ID0ge1xuICBhbmltYXRpb246IHRydWUsXG4gIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPicgK1xuICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInRvb2x0aXAtYXJyb3dcIj48L2Rpdj4nICtcbiAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+JyArXG4gICAgICAgICAgICAnPC9kaXY+JyxcbiAgdHJpZ2dlcjogJ2hvdmVyIGZvY3VzJyxcbiAgdGl0bGU6ICcnLFxuICBkZWxheTogMCxcbiAgaHRtbDogZmFsc2UsXG4gIHNlbGVjdG9yOiBmYWxzZSxcbiAgcGxhY2VtZW50OiAndG9wJyxcbiAgb2Zmc2V0OiBbMCwgMF0sXG4gIGNvbnRhaW5lcjogZmFsc2UsXG4gIGZhbGxiYWNrUGxhY2VtZW50czogWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXSxcbiAgYm91bmRhcnk6ICdjbGlwcGluZ1BhcmVudHMnLFxuICBjdXN0b21DbGFzczogJycsXG4gIHNhbml0aXplOiB0cnVlLFxuICBzYW5pdGl6ZUZuOiBudWxsLFxuICBhbGxvd0xpc3Q6IERlZmF1bHRBbGxvd2xpc3QsXG4gIHBvcHBlckNvbmZpZzogbnVsbFxufVxuXG5jb25zdCBFdmVudCA9IHtcbiAgSElERTogYGhpZGUke0VWRU5UX0tFWX1gLFxuICBISURERU46IGBoaWRkZW4ke0VWRU5UX0tFWX1gLFxuICBTSE9XOiBgc2hvdyR7RVZFTlRfS0VZfWAsXG4gIFNIT1dOOiBgc2hvd24ke0VWRU5UX0tFWX1gLFxuICBJTlNFUlRFRDogYGluc2VydGVkJHtFVkVOVF9LRVl9YCxcbiAgQ0xJQ0s6IGBjbGljayR7RVZFTlRfS0VZfWAsXG4gIEZPQ1VTSU46IGBmb2N1c2luJHtFVkVOVF9LRVl9YCxcbiAgRk9DVVNPVVQ6IGBmb2N1c291dCR7RVZFTlRfS0VZfWAsXG4gIE1PVVNFRU5URVI6IGBtb3VzZWVudGVyJHtFVkVOVF9LRVl9YCxcbiAgTU9VU0VMRUFWRTogYG1vdXNlbGVhdmUke0VWRU5UX0tFWX1gXG59XG5cbmNvbnN0IENMQVNTX05BTUVfRkFERSA9ICdmYWRlJ1xuY29uc3QgQ0xBU1NfTkFNRV9NT0RBTCA9ICdtb2RhbCdcbmNvbnN0IENMQVNTX05BTUVfU0hPVyA9ICdzaG93J1xuXG5jb25zdCBIT1ZFUl9TVEFURV9TSE9XID0gJ3Nob3cnXG5jb25zdCBIT1ZFUl9TVEFURV9PVVQgPSAnb3V0J1xuXG5jb25zdCBTRUxFQ1RPUl9UT09MVElQX0lOTkVSID0gJy50b29sdGlwLWlubmVyJ1xuXG5jb25zdCBUUklHR0VSX0hPVkVSID0gJ2hvdmVyJ1xuY29uc3QgVFJJR0dFUl9GT0NVUyA9ICdmb2N1cydcbmNvbnN0IFRSSUdHRVJfQ0xJQ0sgPSAnY2xpY2snXG5jb25zdCBUUklHR0VSX01BTlVBTCA9ICdtYW51YWwnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBUb29sdGlwIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIGlmICh0eXBlb2YgUG9wcGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9vdHN0cmFwXFwncyB0b29sdGlwcyByZXF1aXJlIFBvcHBlciAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKScpXG4gICAgfVxuXG4gICAgc3VwZXIoZWxlbWVudClcblxuICAgIC8vIHByaXZhdGVcbiAgICB0aGlzLl9pc0VuYWJsZWQgPSB0cnVlXG4gICAgdGhpcy5fdGltZW91dCA9IDBcbiAgICB0aGlzLl9ob3ZlclN0YXRlID0gJydcbiAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0ge31cbiAgICB0aGlzLl9wb3BwZXIgPSBudWxsXG5cbiAgICAvLyBQcm90ZWN0ZWRcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgIHRoaXMudGlwID0gbnVsbFxuXG4gICAgdGhpcy5fc2V0TGlzdGVuZXJzKClcbiAgfVxuXG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgc3RhdGljIGdldCBFdmVudCgpIHtcbiAgICByZXR1cm4gRXZlbnRcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRUeXBlXG4gIH1cblxuICAvLyBQdWJsaWNcblxuICBlbmFibGUoKSB7XG4gICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZVxuICB9XG5cbiAgZGlzYWJsZSgpIHtcbiAgICB0aGlzLl9pc0VuYWJsZWQgPSBmYWxzZVxuICB9XG5cbiAgdG9nZ2xlRW5hYmxlZCgpIHtcbiAgICB0aGlzLl9pc0VuYWJsZWQgPSAhdGhpcy5faXNFbmFibGVkXG4gIH1cblxuICB0b2dnbGUoZXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KGV2ZW50KVxuXG4gICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrID0gIWNvbnRleHQuX2FjdGl2ZVRyaWdnZXIuY2xpY2tcblxuICAgICAgaWYgKGNvbnRleHQuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgICBjb250ZXh0Ll9lbnRlcihudWxsLCBjb250ZXh0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGV4dC5fbGVhdmUobnVsbCwgY29udGV4dClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuZ2V0VGlwRWxlbWVudCgpLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1cpKSB7XG4gICAgICAgIHRoaXMuX2xlYXZlKG51bGwsIHRoaXMpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbnRlcihudWxsLCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpXG5cbiAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX2VsZW1lbnQuY2xvc2VzdChgLiR7Q0xBU1NfTkFNRV9NT0RBTH1gKSwgJ2hpZGUuYnMubW9kYWwnLCB0aGlzLl9oaWRlTW9kYWxIYW5kbGVyKVxuXG4gICAgaWYgKHRoaXMudGlwKSB7XG4gICAgICB0aGlzLnRpcC5yZW1vdmUoKVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KClcbiAgICB9XG5cbiAgICBzdXBlci5kaXNwb3NlKClcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgaWYgKHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSB1c2Ugc2hvdyBvbiB2aXNpYmxlIGVsZW1lbnRzJylcbiAgICB9XG5cbiAgICBpZiAoISh0aGlzLmlzV2l0aENvbnRlbnQoKSAmJiB0aGlzLl9pc0VuYWJsZWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1cpXG4gICAgY29uc3Qgc2hhZG93Um9vdCA9IGZpbmRTaGFkb3dSb290KHRoaXMuX2VsZW1lbnQpXG4gICAgY29uc3QgaXNJblRoZURvbSA9IHNoYWRvd1Jvb3QgPT09IG51bGwgP1xuICAgICAgdGhpcy5fZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyh0aGlzLl9lbGVtZW50KSA6XG4gICAgICBzaGFkb3dSb290LmNvbnRhaW5zKHRoaXMuX2VsZW1lbnQpXG5cbiAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgfHwgIWlzSW5UaGVEb20pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpXG4gICAgY29uc3QgdGlwSWQgPSBnZXRVSUQodGhpcy5jb25zdHJ1Y3Rvci5OQU1FKVxuXG4gICAgdGlwLnNldEF0dHJpYnV0ZSgnaWQnLCB0aXBJZClcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsIHRpcElkKVxuXG4gICAgdGhpcy5zZXRDb250ZW50KClcblxuICAgIGlmICh0aGlzLl9jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICB0aXAuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0ZBREUpXG4gICAgfVxuXG4gICAgY29uc3QgcGxhY2VtZW50ID0gdHlwZW9mIHRoaXMuX2NvbmZpZy5wbGFjZW1lbnQgPT09ICdmdW5jdGlvbicgP1xuICAgICAgdGhpcy5fY29uZmlnLnBsYWNlbWVudC5jYWxsKHRoaXMsIHRpcCwgdGhpcy5fZWxlbWVudCkgOlxuICAgICAgdGhpcy5fY29uZmlnLnBsYWNlbWVudFxuXG4gICAgY29uc3QgYXR0YWNobWVudCA9IHRoaXMuX2dldEF0dGFjaG1lbnQocGxhY2VtZW50KVxuICAgIHRoaXMuX2FkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KVxuXG4gICAgY29uc3QgeyBjb250YWluZXIgfSA9IHRoaXMuX2NvbmZpZ1xuICAgIERhdGEuc2V0KHRpcCwgdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSwgdGhpcylcblxuICAgIGlmICghdGhpcy5fZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyh0aGlzLnRpcCkpIHtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aXApXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LklOU0VSVEVEKVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci51cGRhdGUoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wb3BwZXIgPSBQb3BwZXIuY3JlYXRlUG9wcGVyKHRoaXMuX2VsZW1lbnQsIHRpcCwgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKGF0dGFjaG1lbnQpKVxuICAgIH1cblxuICAgIHRpcC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVylcblxuICAgIGNvbnN0IGN1c3RvbUNsYXNzID0gdHlwZW9mIHRoaXMuX2NvbmZpZy5jdXN0b21DbGFzcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuX2NvbmZpZy5jdXN0b21DbGFzcygpIDogdGhpcy5fY29uZmlnLmN1c3RvbUNsYXNzXG4gICAgaWYgKGN1c3RvbUNsYXNzKSB7XG4gICAgICB0aXAuY2xhc3NMaXN0LmFkZCguLi5jdXN0b21DbGFzcy5zcGxpdCgnICcpKVxuICAgIH1cblxuICAgIC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcbiAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xuICAgIC8vIG9ubHkgbmVlZGVkIGJlY2F1c2Ugb2YgYnJva2VuIGV2ZW50IGRlbGVnYXRpb24gb24gaU9TXG4gICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG4gICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgIEV2ZW50SGFuZGxlci5vbihlbGVtZW50LCAnbW91c2VvdmVyJywgbm9vcClcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICBjb25zdCBwcmV2SG92ZXJTdGF0ZSA9IHRoaXMuX2hvdmVyU3RhdGVcblxuICAgICAgdGhpcy5faG92ZXJTdGF0ZSA9IG51bGxcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPV04pXG5cbiAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PT0gSE9WRVJfU1RBVEVfT1VUKSB7XG4gICAgICAgIHRoaXMuX2xlYXZlKG51bGwsIHRoaXMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaXNBbmltYXRlZCA9IHRoaXMudGlwLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUpXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgdGhpcy50aXAsIGlzQW5pbWF0ZWQpXG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmICghdGhpcy5fcG9wcGVyKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKVxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2hvdmVyU3RhdGUgIT09IEhPVkVSX1NUQVRFX1NIT1cpIHtcbiAgICAgICAgdGlwLnJlbW92ZSgpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NsZWFuVGlwQ2xhc3MoKVxuICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5ISURERU4pXG5cbiAgICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKVxuICAgICAgICB0aGlzLl9wb3BwZXIgPSBudWxsXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaGlkZUV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5ISURFKVxuICAgIGlmIChoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGlwLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XKVxuXG4gICAgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcbiAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIFtdLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKVxuICAgICAgICAuZm9yRWFjaChlbGVtZW50ID0+IEV2ZW50SGFuZGxlci5vZmYoZWxlbWVudCwgJ21vdXNlb3ZlcicsIG5vb3ApKVxuICAgIH1cblxuICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVFJJR0dFUl9DTElDS10gPSBmYWxzZVxuICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVFJJR0dFUl9GT0NVU10gPSBmYWxzZVxuICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVFJJR0dFUl9IT1ZFUl0gPSBmYWxzZVxuXG4gICAgY29uc3QgaXNBbmltYXRlZCA9IHRoaXMudGlwLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUpXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgdGhpcy50aXAsIGlzQW5pbWF0ZWQpXG4gICAgdGhpcy5faG92ZXJTdGF0ZSA9ICcnXG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5fcG9wcGVyLnVwZGF0ZSgpXG4gICAgfVxuICB9XG5cbiAgLy8gUHJvdGVjdGVkXG5cbiAgaXNXaXRoQ29udGVudCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLmdldFRpdGxlKCkpXG4gIH1cblxuICBnZXRUaXBFbGVtZW50KCkge1xuICAgIGlmICh0aGlzLnRpcCkge1xuICAgICAgcmV0dXJuIHRoaXMudGlwXG4gICAgfVxuXG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLl9jb25maWcudGVtcGxhdGVcblxuICAgIHRoaXMudGlwID0gZWxlbWVudC5jaGlsZHJlblswXVxuICAgIHJldHVybiB0aGlzLnRpcFxuICB9XG5cbiAgc2V0Q29udGVudCgpIHtcbiAgICBjb25zdCB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKVxuICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9UT09MVElQX0lOTkVSLCB0aXApLCB0aGlzLmdldFRpdGxlKCkpXG4gICAgdGlwLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9GQURFLCBDTEFTU19OQU1FX1NIT1cpXG4gIH1cblxuICBzZXRFbGVtZW50Q29udGVudChlbGVtZW50LCBjb250ZW50KSB7XG4gICAgaWYgKGVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0VsZW1lbnQoY29udGVudCkpIHtcbiAgICAgIGNvbnRlbnQgPSBnZXRFbGVtZW50KGNvbnRlbnQpXG5cbiAgICAgIC8vIGNvbnRlbnQgaXMgYSBET00gbm9kZSBvciBhIGpRdWVyeVxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5odG1sKSB7XG4gICAgICAgIGlmIChjb250ZW50LnBhcmVudE5vZGUgIT09IGVsZW1lbnQpIHtcbiAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9ICcnXG4gICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjb250ZW50KVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gY29udGVudC50ZXh0Q29udGVudFxuICAgICAgfVxuXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLmh0bWwpIHtcbiAgICAgIGlmICh0aGlzLl9jb25maWcuc2FuaXRpemUpIHtcbiAgICAgICAgY29udGVudCA9IHNhbml0aXplSHRtbChjb250ZW50LCB0aGlzLl9jb25maWcuYWxsb3dMaXN0LCB0aGlzLl9jb25maWcuc2FuaXRpemVGbilcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBjb250ZW50XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBjb250ZW50XG4gICAgfVxuICB9XG5cbiAgZ2V0VGl0bGUoKSB7XG4gICAgbGV0IHRpdGxlID0gdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtb3JpZ2luYWwtdGl0bGUnKVxuXG4gICAgaWYgKCF0aXRsZSkge1xuICAgICAgdGl0bGUgPSB0eXBlb2YgdGhpcy5fY29uZmlnLnRpdGxlID09PSAnZnVuY3Rpb24nID9cbiAgICAgICAgdGhpcy5fY29uZmlnLnRpdGxlLmNhbGwodGhpcy5fZWxlbWVudCkgOlxuICAgICAgICB0aGlzLl9jb25maWcudGl0bGVcbiAgICB9XG5cbiAgICByZXR1cm4gdGl0bGVcbiAgfVxuXG4gIHVwZGF0ZUF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIGlmIChhdHRhY2htZW50ID09PSAncmlnaHQnKSB7XG4gICAgICByZXR1cm4gJ2VuZCdcbiAgICB9XG5cbiAgICBpZiAoYXR0YWNobWVudCA9PT0gJ2xlZnQnKSB7XG4gICAgICByZXR1cm4gJ3N0YXJ0J1xuICAgIH1cblxuICAgIHJldHVybiBhdHRhY2htZW50XG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldChldmVudCwgY29udGV4dCkge1xuICAgIGNvbnN0IGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZXG4gICAgY29udGV4dCA9IGNvbnRleHQgfHwgRGF0YS5nZXQoZXZlbnQuZGVsZWdhdGVUYXJnZXQsIGRhdGFLZXkpXG5cbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5kZWxlZ2F0ZVRhcmdldCwgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSlcbiAgICAgIERhdGEuc2V0KGV2ZW50LmRlbGVnYXRlVGFyZ2V0LCBkYXRhS2V5LCBjb250ZXh0KVxuICAgIH1cblxuICAgIHJldHVybiBjb250ZXh0XG4gIH1cblxuICBfZ2V0T2Zmc2V0KCkge1xuICAgIGNvbnN0IHsgb2Zmc2V0IH0gPSB0aGlzLl9jb25maWdcblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG9mZnNldC5zcGxpdCgnLCcpLm1hcCh2YWwgPT4gTnVtYmVyLnBhcnNlSW50KHZhbCwgMTApKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gcG9wcGVyRGF0YSA9PiBvZmZzZXQocG9wcGVyRGF0YSwgdGhpcy5fZWxlbWVudClcbiAgICB9XG5cbiAgICByZXR1cm4gb2Zmc2V0XG4gIH1cblxuICBfZ2V0UG9wcGVyQ29uZmlnKGF0dGFjaG1lbnQpIHtcbiAgICBjb25zdCBkZWZhdWx0QnNQb3BwZXJDb25maWcgPSB7XG4gICAgICBwbGFjZW1lbnQ6IGF0dGFjaG1lbnQsXG4gICAgICBtb2RpZmllcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdmbGlwJyxcbiAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBmYWxsYmFja1BsYWNlbWVudHM6IHRoaXMuX2NvbmZpZy5mYWxsYmFja1BsYWNlbWVudHNcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnb2Zmc2V0JyxcbiAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBvZmZzZXQ6IHRoaXMuX2dldE9mZnNldCgpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ3ByZXZlbnRPdmVyZmxvdycsXG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgYm91bmRhcnk6IHRoaXMuX2NvbmZpZy5ib3VuZGFyeVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdhcnJvdycsXG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgZWxlbWVudDogYC4ke3RoaXMuY29uc3RydWN0b3IuTkFNRX0tYXJyb3dgXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ29uQ2hhbmdlJyxcbiAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgIHBoYXNlOiAnYWZ0ZXJXcml0ZScsXG4gICAgICAgICAgZm46IGRhdGEgPT4gdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBvbkZpcnN0VXBkYXRlOiBkYXRhID0+IHtcbiAgICAgICAgaWYgKGRhdGEub3B0aW9ucy5wbGFjZW1lbnQgIT09IGRhdGEucGxhY2VtZW50KSB7XG4gICAgICAgICAgdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uZGVmYXVsdEJzUG9wcGVyQ29uZmlnLFxuICAgICAgLi4uKHR5cGVvZiB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnID09PSAnZnVuY3Rpb24nID8gdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyhkZWZhdWx0QnNQb3BwZXJDb25maWcpIDogdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZylcbiAgICB9XG4gIH1cblxuICBfYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpIHtcbiAgICB0aGlzLmdldFRpcEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKGAke0NMQVNTX1BSRUZJWH0tJHt0aGlzLnVwZGF0ZUF0dGFjaG1lbnQoYXR0YWNobWVudCl9YClcbiAgfVxuXG4gIF9nZXRBdHRhY2htZW50KHBsYWNlbWVudCkge1xuICAgIHJldHVybiBBdHRhY2htZW50TWFwW3BsYWNlbWVudC50b1VwcGVyQ2FzZSgpXVxuICB9XG5cbiAgX3NldExpc3RlbmVycygpIHtcbiAgICBjb25zdCB0cmlnZ2VycyA9IHRoaXMuX2NvbmZpZy50cmlnZ2VyLnNwbGl0KCcgJylcblxuICAgIHRyaWdnZXJzLmZvckVhY2godHJpZ2dlciA9PiB7XG4gICAgICBpZiAodHJpZ2dlciA9PT0gJ2NsaWNrJykge1xuICAgICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5DTElDSywgdGhpcy5fY29uZmlnLnNlbGVjdG9yLCBldmVudCA9PiB0aGlzLnRvZ2dsZShldmVudCkpXG4gICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgIT09IFRSSUdHRVJfTUFOVUFMKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50SW4gPSB0cmlnZ2VyID09PSBUUklHR0VSX0hPVkVSID9cbiAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFRU5URVIgOlxuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNJTlxuICAgICAgICBjb25zdCBldmVudE91dCA9IHRyaWdnZXIgPT09IFRSSUdHRVJfSE9WRVIgP1xuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VMRUFWRSA6XG4gICAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU09VVFxuXG4gICAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBldmVudEluLCB0aGlzLl9jb25maWcuc2VsZWN0b3IsIGV2ZW50ID0+IHRoaXMuX2VudGVyKGV2ZW50KSlcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIGV2ZW50T3V0LCB0aGlzLl9jb25maWcuc2VsZWN0b3IsIGV2ZW50ID0+IHRoaXMuX2xlYXZlKGV2ZW50KSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5faGlkZU1vZGFsSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgIHRoaXMuaGlkZSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQuY2xvc2VzdChgLiR7Q0xBU1NfTkFNRV9NT0RBTH1gKSwgJ2hpZGUuYnMubW9kYWwnLCB0aGlzLl9oaWRlTW9kYWxIYW5kbGVyKVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5zZWxlY3Rvcikge1xuICAgICAgdGhpcy5fY29uZmlnID0ge1xuICAgICAgICAuLi50aGlzLl9jb25maWcsXG4gICAgICAgIHRyaWdnZXI6ICdtYW51YWwnLFxuICAgICAgICBzZWxlY3RvcjogJydcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZml4VGl0bGUoKVxuICAgIH1cbiAgfVxuXG4gIF9maXhUaXRsZSgpIHtcbiAgICBjb25zdCB0aXRsZSA9IHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpXG4gICAgY29uc3Qgb3JpZ2luYWxUaXRsZVR5cGUgPSB0eXBlb2YgdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtb3JpZ2luYWwtdGl0bGUnKVxuXG4gICAgaWYgKHRpdGxlIHx8IG9yaWdpbmFsVGl0bGVUeXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtb3JpZ2luYWwtdGl0bGUnLCB0aXRsZSB8fCAnJylcbiAgICAgIGlmICh0aXRsZSAmJiAhdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKSAmJiAhdGhpcy5fZWxlbWVudC50ZXh0Q29udGVudCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIHRpdGxlKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgndGl0bGUnLCAnJylcbiAgICB9XG4gIH1cblxuICBfZW50ZXIoZXZlbnQsIGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gdGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KGV2ZW50LCBjb250ZXh0KVxuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW1xuICAgICAgICBldmVudC50eXBlID09PSAnZm9jdXNpbicgPyBUUklHR0VSX0ZPQ1VTIDogVFJJR0dFUl9IT1ZFUlxuICAgICAgXSA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dC5nZXRUaXBFbGVtZW50KCkuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVykgfHwgY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSE9WRVJfU1RBVEVfU0hPVykge1xuICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhPVkVSX1NUQVRFX1NIT1dcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNsZWFyVGltZW91dChjb250ZXh0Ll90aW1lb3V0KVxuXG4gICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhPVkVSX1NUQVRFX1NIT1dcblxuICAgIGlmICghY29udGV4dC5fY29uZmlnLmRlbGF5IHx8ICFjb250ZXh0Ll9jb25maWcuZGVsYXkuc2hvdykge1xuICAgICAgY29udGV4dC5zaG93KClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIT1ZFUl9TVEFURV9TSE9XKSB7XG4gICAgICAgIGNvbnRleHQuc2hvdygpXG4gICAgICB9XG4gICAgfSwgY29udGV4dC5fY29uZmlnLmRlbGF5LnNob3cpXG4gIH1cblxuICBfbGVhdmUoZXZlbnQsIGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gdGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KGV2ZW50LCBjb250ZXh0KVxuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW1xuICAgICAgICBldmVudC50eXBlID09PSAnZm9jdXNvdXQnID8gVFJJR0dFUl9GT0NVUyA6IFRSSUdHRVJfSE9WRVJcbiAgICAgIF0gPSBjb250ZXh0Ll9lbGVtZW50LmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpXG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpXG5cbiAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSE9WRVJfU1RBVEVfT1VUXG5cbiAgICBpZiAoIWNvbnRleHQuX2NvbmZpZy5kZWxheSB8fCAhY29udGV4dC5fY29uZmlnLmRlbGF5LmhpZGUpIHtcbiAgICAgIGNvbnRleHQuaGlkZSgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSE9WRVJfU1RBVEVfT1VUKSB7XG4gICAgICAgIGNvbnRleHQuaGlkZSgpXG4gICAgICB9XG4gICAgfSwgY29udGV4dC5fY29uZmlnLmRlbGF5LmhpZGUpXG4gIH1cblxuICBfaXNXaXRoQWN0aXZlVHJpZ2dlcigpIHtcbiAgICBmb3IgKGNvbnN0IHRyaWdnZXIgaW4gdGhpcy5fYWN0aXZlVHJpZ2dlcikge1xuICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRyaWdnZXJbdHJpZ2dlcl0pIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uc3QgZGF0YUF0dHJpYnV0ZXMgPSBNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KVxuXG4gICAgT2JqZWN0LmtleXMoZGF0YUF0dHJpYnV0ZXMpLmZvckVhY2goZGF0YUF0dHIgPT4ge1xuICAgICAgaWYgKERJU0FMTE9XRURfQVRUUklCVVRFUy5oYXMoZGF0YUF0dHIpKSB7XG4gICAgICAgIGRlbGV0ZSBkYXRhQXR0cmlidXRlc1tkYXRhQXR0cl1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uZmlnID0ge1xuICAgICAgLi4udGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LFxuICAgICAgLi4uZGF0YUF0dHJpYnV0ZXMsXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pXG4gICAgfVxuXG4gICAgY29uZmlnLmNvbnRhaW5lciA9IGNvbmZpZy5jb250YWluZXIgPT09IGZhbHNlID8gZG9jdW1lbnQuYm9keSA6IGdldEVsZW1lbnQoY29uZmlnLmNvbnRhaW5lcilcblxuICAgIGlmICh0eXBlb2YgY29uZmlnLmRlbGF5ID09PSAnbnVtYmVyJykge1xuICAgICAgY29uZmlnLmRlbGF5ID0ge1xuICAgICAgICBzaG93OiBjb25maWcuZGVsYXksXG4gICAgICAgIGhpZGU6IGNvbmZpZy5kZWxheVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29uZmlnLnRpdGxlID09PSAnbnVtYmVyJykge1xuICAgICAgY29uZmlnLnRpdGxlID0gY29uZmlnLnRpdGxlLnRvU3RyaW5nKClcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5jb250ZW50ID09PSAnbnVtYmVyJykge1xuICAgICAgY29uZmlnLmNvbnRlbnQgPSBjb25maWcuY29udGVudC50b1N0cmluZygpXG4gICAgfVxuXG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSlcblxuICAgIGlmIChjb25maWcuc2FuaXRpemUpIHtcbiAgICAgIGNvbmZpZy50ZW1wbGF0ZSA9IHNhbml0aXplSHRtbChjb25maWcudGVtcGxhdGUsIGNvbmZpZy5hbGxvd0xpc3QsIGNvbmZpZy5zYW5pdGl6ZUZuKVxuICAgIH1cblxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIF9nZXREZWxlZ2F0ZUNvbmZpZygpIHtcbiAgICBjb25zdCBjb25maWcgPSB7fVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZykge1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fY29uZmlnKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRba2V5XSAhPT0gdGhpcy5fY29uZmlnW2tleV0pIHtcbiAgICAgICAgICBjb25maWdba2V5XSA9IHRoaXMuX2NvbmZpZ1trZXldXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfY2xlYW5UaXBDbGFzcygpIHtcbiAgICBjb25zdCB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKVxuICAgIGNvbnN0IHRhYkNsYXNzID0gdGlwLmdldEF0dHJpYnV0ZSgnY2xhc3MnKS5tYXRjaChCU0NMU19QUkVGSVhfUkVHRVgpXG4gICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRhYkNsYXNzLm1hcCh0b2tlbiA9PiB0b2tlbi50cmltKCkpXG4gICAgICAgIC5mb3JFYWNoKHRDbGFzcyA9PiB0aXAuY2xhc3NMaXN0LnJlbW92ZSh0Q2xhc3MpKVxuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UocG9wcGVyRGF0YSkge1xuICAgIGNvbnN0IHsgc3RhdGUgfSA9IHBvcHBlckRhdGFcblxuICAgIGlmICghc3RhdGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMudGlwID0gc3RhdGUuZWxlbWVudHMucG9wcGVyXG4gICAgdGhpcy5fY2xlYW5UaXBDbGFzcygpXG4gICAgdGhpcy5fYWRkQXR0YWNobWVudENsYXNzKHRoaXMuX2dldEF0dGFjaG1lbnQoc3RhdGUucGxhY2VtZW50KSlcbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gVG9vbHRpcC5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZylcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGFbY29uZmlnXSgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuVG9vbHRpcCB0byBqUXVlcnkgb25seSBpZiBqUXVlcnkgaXMgcHJlc2VudFxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihUb29sdGlwKVxuXG5leHBvcnQgZGVmYXVsdCBUb29sdGlwXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjAuMik6IHBvcG92ZXIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgeyBkZWZpbmVKUXVlcnlQbHVnaW4gfSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi9kb20vc2VsZWN0b3ItZW5naW5lJ1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi90b29sdGlwJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FID0gJ3BvcG92ZXInXG5jb25zdCBEQVRBX0tFWSA9ICdicy5wb3BvdmVyJ1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IENMQVNTX1BSRUZJWCA9ICdicy1wb3BvdmVyJ1xuY29uc3QgQlNDTFNfUFJFRklYX1JFR0VYID0gbmV3IFJlZ0V4cChgKF58XFxcXHMpJHtDTEFTU19QUkVGSVh9XFxcXFMrYCwgJ2cnKVxuXG5jb25zdCBEZWZhdWx0ID0ge1xuICAuLi5Ub29sdGlwLkRlZmF1bHQsXG4gIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgb2Zmc2V0OiBbMCwgOF0sXG4gIHRyaWdnZXI6ICdjbGljaycsXG4gIGNvbnRlbnQ6ICcnLFxuICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj4nICtcbiAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJwb3BvdmVyLWFycm93XCI+PC9kaXY+JyArXG4gICAgICAgICAgICAgICc8aDMgY2xhc3M9XCJwb3BvdmVyLWhlYWRlclwiPjwvaDM+JyArXG4gICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwicG9wb3Zlci1ib2R5XCI+PC9kaXY+JyArXG4gICAgICAgICAgICAnPC9kaXY+J1xufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgLi4uVG9vbHRpcC5EZWZhdWx0VHlwZSxcbiAgY29udGVudDogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknXG59XG5cbmNvbnN0IEV2ZW50ID0ge1xuICBISURFOiBgaGlkZSR7RVZFTlRfS0VZfWAsXG4gIEhJRERFTjogYGhpZGRlbiR7RVZFTlRfS0VZfWAsXG4gIFNIT1c6IGBzaG93JHtFVkVOVF9LRVl9YCxcbiAgU0hPV046IGBzaG93biR7RVZFTlRfS0VZfWAsXG4gIElOU0VSVEVEOiBgaW5zZXJ0ZWQke0VWRU5UX0tFWX1gLFxuICBDTElDSzogYGNsaWNrJHtFVkVOVF9LRVl9YCxcbiAgRk9DVVNJTjogYGZvY3VzaW4ke0VWRU5UX0tFWX1gLFxuICBGT0NVU09VVDogYGZvY3Vzb3V0JHtFVkVOVF9LRVl9YCxcbiAgTU9VU0VFTlRFUjogYG1vdXNlZW50ZXIke0VWRU5UX0tFWX1gLFxuICBNT1VTRUxFQVZFOiBgbW91c2VsZWF2ZSR7RVZFTlRfS0VZfWBcbn1cblxuY29uc3QgQ0xBU1NfTkFNRV9GQURFID0gJ2ZhZGUnXG5jb25zdCBDTEFTU19OQU1FX1NIT1cgPSAnc2hvdydcblxuY29uc3QgU0VMRUNUT1JfVElUTEUgPSAnLnBvcG92ZXItaGVhZGVyJ1xuY29uc3QgU0VMRUNUT1JfQ09OVEVOVCA9ICcucG9wb3Zlci1ib2R5J1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgUG9wb3ZlciBleHRlbmRzIFRvb2x0aXAge1xuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUVcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRXZlbnQoKSB7XG4gICAgcmV0dXJuIEV2ZW50XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgLy8gT3ZlcnJpZGVzXG5cbiAgaXNXaXRoQ29udGVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpIHx8IHRoaXMuX2dldENvbnRlbnQoKVxuICB9XG5cbiAgZ2V0VGlwRWxlbWVudCgpIHtcbiAgICBpZiAodGhpcy50aXApIHtcbiAgICAgIHJldHVybiB0aGlzLnRpcFxuICAgIH1cblxuICAgIHRoaXMudGlwID0gc3VwZXIuZ2V0VGlwRWxlbWVudCgpXG5cbiAgICBpZiAoIXRoaXMuZ2V0VGl0bGUoKSkge1xuICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9USVRMRSwgdGhpcy50aXApLnJlbW92ZSgpXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9nZXRDb250ZW50KCkpIHtcbiAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfQ09OVEVOVCwgdGhpcy50aXApLnJlbW92ZSgpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGlwXG4gIH1cblxuICBzZXRDb250ZW50KCkge1xuICAgIGNvbnN0IHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpXG5cbiAgICAvLyB3ZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXG4gICAgdGhpcy5zZXRFbGVtZW50Q29udGVudChTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX1RJVExFLCB0aXApLCB0aGlzLmdldFRpdGxlKCkpXG4gICAgbGV0IGNvbnRlbnQgPSB0aGlzLl9nZXRDb250ZW50KClcbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnRlbnQgPSBjb250ZW50LmNhbGwodGhpcy5fZWxlbWVudClcbiAgICB9XG5cbiAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfQ09OVEVOVCwgdGlwKSwgY29udGVudClcblxuICAgIHRpcC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfRkFERSwgQ0xBU1NfTkFNRV9TSE9XKVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIF9hZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCkge1xuICAgIHRoaXMuZ2V0VGlwRWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoYCR7Q0xBU1NfUFJFRklYfS0ke3RoaXMudXBkYXRlQXR0YWNobWVudChhdHRhY2htZW50KX1gKVxuICB9XG5cbiAgX2dldENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWJzLWNvbnRlbnQnKSB8fCB0aGlzLl9jb25maWcuY29udGVudFxuICB9XG5cbiAgX2NsZWFuVGlwQ2xhc3MoKSB7XG4gICAgY29uc3QgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KClcbiAgICBjb25zdCB0YWJDbGFzcyA9IHRpcC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykubWF0Y2goQlNDTFNfUFJFRklYX1JFR0VYKVxuICAgIGlmICh0YWJDbGFzcyAhPT0gbnVsbCAmJiB0YWJDbGFzcy5sZW5ndGggPiAwKSB7XG4gICAgICB0YWJDbGFzcy5tYXAodG9rZW4gPT4gdG9rZW4udHJpbSgpKVxuICAgICAgICAuZm9yRWFjaCh0Q2xhc3MgPT4gdGlwLmNsYXNzTGlzdC5yZW1vdmUodENsYXNzKSlcbiAgICB9XG4gIH1cblxuICAvLyBTdGF0aWNcblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IFBvcG92ZXIuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpXG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApXG4gICAgICAgIH1cblxuICAgICAgICBkYXRhW2NvbmZpZ10oKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBhZGQgLlBvcG92ZXIgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oUG9wb3ZlcilcblxuZXhwb3J0IGRlZmF1bHQgUG9wb3ZlclxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4wLjIpOiBzY3JvbGxzcHkuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQge1xuICBkZWZpbmVKUXVlcnlQbHVnaW4sXG4gIGdldFNlbGVjdG9yRnJvbUVsZW1lbnQsXG4gIGdldFVJRCxcbiAgaXNFbGVtZW50LFxuICB0eXBlQ2hlY2tDb25maWdcbn0gZnJvbSAnLi91dGlsL2luZGV4J1xuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuL2RvbS9ldmVudC1oYW5kbGVyJ1xuaW1wb3J0IE1hbmlwdWxhdG9yIGZyb20gJy4vZG9tL21hbmlwdWxhdG9yJ1xuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gJy4vZG9tL3NlbGVjdG9yLWVuZ2luZSdcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gJy4vYmFzZS1jb21wb25lbnQnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUgPSAnc2Nyb2xsc3B5J1xuY29uc3QgREFUQV9LRVkgPSAnYnMuc2Nyb2xsc3B5J1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIG9mZnNldDogMTAsXG4gIG1ldGhvZDogJ2F1dG8nLFxuICB0YXJnZXQ6ICcnXG59XG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICBvZmZzZXQ6ICdudW1iZXInLFxuICBtZXRob2Q6ICdzdHJpbmcnLFxuICB0YXJnZXQ6ICcoc3RyaW5nfGVsZW1lbnQpJ1xufVxuXG5jb25zdCBFVkVOVF9BQ1RJVkFURSA9IGBhY3RpdmF0ZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1NDUk9MTCA9IGBzY3JvbGwke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9MT0FEX0RBVEFfQVBJID0gYGxvYWQke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5cbmNvbnN0IENMQVNTX05BTUVfRFJPUERPV05fSVRFTSA9ICdkcm9wZG93bi1pdGVtJ1xuY29uc3QgQ0xBU1NfTkFNRV9BQ1RJVkUgPSAnYWN0aXZlJ1xuXG5jb25zdCBTRUxFQ1RPUl9EQVRBX1NQWSA9ICdbZGF0YS1icy1zcHk9XCJzY3JvbGxcIl0nXG5jb25zdCBTRUxFQ1RPUl9OQVZfTElTVF9HUk9VUCA9ICcubmF2LCAubGlzdC1ncm91cCdcbmNvbnN0IFNFTEVDVE9SX05BVl9MSU5LUyA9ICcubmF2LWxpbmsnXG5jb25zdCBTRUxFQ1RPUl9OQVZfSVRFTVMgPSAnLm5hdi1pdGVtJ1xuY29uc3QgU0VMRUNUT1JfTElTVF9JVEVNUyA9ICcubGlzdC1ncm91cC1pdGVtJ1xuY29uc3QgU0VMRUNUT1JfRFJPUERPV04gPSAnLmRyb3Bkb3duJ1xuY29uc3QgU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFID0gJy5kcm9wZG93bi10b2dnbGUnXG5cbmNvbnN0IE1FVEhPRF9PRkZTRVQgPSAnb2Zmc2V0J1xuY29uc3QgTUVUSE9EX1BPU0lUSU9OID0gJ3Bvc2l0aW9uJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgU2Nyb2xsU3B5IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQpXG4gICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQudGFnTmFtZSA9PT0gJ0JPRFknID8gd2luZG93IDogdGhpcy5fZWxlbWVudFxuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5fc2VsZWN0b3IgPSBgJHt0aGlzLl9jb25maWcudGFyZ2V0fSAke1NFTEVDVE9SX05BVl9MSU5LU30sICR7dGhpcy5fY29uZmlnLnRhcmdldH0gJHtTRUxFQ1RPUl9MSVNUX0lURU1TfSwgJHt0aGlzLl9jb25maWcudGFyZ2V0fSAuJHtDTEFTU19OQU1FX0RST1BET1dOX0lURU19YFxuICAgIHRoaXMuX29mZnNldHMgPSBbXVxuICAgIHRoaXMuX3RhcmdldHMgPSBbXVxuICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGxcbiAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSAwXG5cbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fc2Nyb2xsRWxlbWVudCwgRVZFTlRfU0NST0xMLCAoKSA9PiB0aGlzLl9wcm9jZXNzKCkpXG5cbiAgICB0aGlzLnJlZnJlc2goKVxuICAgIHRoaXMuX3Byb2Nlc3MoKVxuICB9XG5cbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcblxuICByZWZyZXNoKCkge1xuICAgIGNvbnN0IGF1dG9NZXRob2QgPSB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB0aGlzLl9zY3JvbGxFbGVtZW50LndpbmRvdyA/XG4gICAgICBNRVRIT0RfT0ZGU0VUIDpcbiAgICAgIE1FVEhPRF9QT1NJVElPTlxuXG4gICAgY29uc3Qgb2Zmc2V0TWV0aG9kID0gdGhpcy5fY29uZmlnLm1ldGhvZCA9PT0gJ2F1dG8nID9cbiAgICAgIGF1dG9NZXRob2QgOlxuICAgICAgdGhpcy5fY29uZmlnLm1ldGhvZFxuXG4gICAgY29uc3Qgb2Zmc2V0QmFzZSA9IG9mZnNldE1ldGhvZCA9PT0gTUVUSE9EX1BPU0lUSU9OID9cbiAgICAgIHRoaXMuX2dldFNjcm9sbFRvcCgpIDpcbiAgICAgIDBcblxuICAgIHRoaXMuX29mZnNldHMgPSBbXVxuICAgIHRoaXMuX3RhcmdldHMgPSBbXVxuICAgIHRoaXMuX3Njcm9sbEhlaWdodCA9IHRoaXMuX2dldFNjcm9sbEhlaWdodCgpXG5cbiAgICBjb25zdCB0YXJnZXRzID0gU2VsZWN0b3JFbmdpbmUuZmluZCh0aGlzLl9zZWxlY3RvcilcblxuICAgIHRhcmdldHMubWFwKGVsZW1lbnQgPT4ge1xuICAgICAgY29uc3QgdGFyZ2V0U2VsZWN0b3IgPSBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpXG4gICAgICBjb25zdCB0YXJnZXQgPSB0YXJnZXRTZWxlY3RvciA/IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUodGFyZ2V0U2VsZWN0b3IpIDogbnVsbFxuXG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHRhcmdldEJDUiA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgICBpZiAodGFyZ2V0QkNSLndpZHRoIHx8IHRhcmdldEJDUi5oZWlnaHQpIHtcbiAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgTWFuaXB1bGF0b3Jbb2Zmc2V0TWV0aG9kXSh0YXJnZXQpLnRvcCArIG9mZnNldEJhc2UsXG4gICAgICAgICAgICB0YXJnZXRTZWxlY3RvclxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH0pXG4gICAgICAuZmlsdGVyKGl0ZW0gPT4gaXRlbSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhWzBdIC0gYlswXSlcbiAgICAgIC5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICB0aGlzLl9vZmZzZXRzLnB1c2goaXRlbVswXSlcbiAgICAgICAgdGhpcy5fdGFyZ2V0cy5wdXNoKGl0ZW1bMV0pXG4gICAgICB9KVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX3Njcm9sbEVsZW1lbnQsIEVWRU5UX0tFWSlcbiAgICBzdXBlci5kaXNwb3NlKClcbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHtcbiAgICAgIC4uLkRlZmF1bHQsXG4gICAgICAuLi5NYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSxcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSlcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbmZpZy50YXJnZXQgIT09ICdzdHJpbmcnICYmIGlzRWxlbWVudChjb25maWcudGFyZ2V0KSkge1xuICAgICAgbGV0IHsgaWQgfSA9IGNvbmZpZy50YXJnZXRcbiAgICAgIGlmICghaWQpIHtcbiAgICAgICAgaWQgPSBnZXRVSUQoTkFNRSlcbiAgICAgICAgY29uZmlnLnRhcmdldC5pZCA9IGlkXG4gICAgICB9XG5cbiAgICAgIGNvbmZpZy50YXJnZXQgPSBgIyR7aWR9YFxuICAgIH1cblxuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKVxuXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2dldFNjcm9sbFRvcCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID9cbiAgICAgIHRoaXMuX3Njcm9sbEVsZW1lbnQucGFnZVlPZmZzZXQgOlxuICAgICAgdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3BcbiAgfVxuXG4gIF9nZXRTY3JvbGxIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IHx8IE1hdGgubWF4KFxuICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsXG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0XG4gICAgKVxuICB9XG5cbiAgX2dldE9mZnNldEhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID9cbiAgICAgIHdpbmRvdy5pbm5lckhlaWdodCA6XG4gICAgICB0aGlzLl9zY3JvbGxFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodFxuICB9XG5cbiAgX3Byb2Nlc3MoKSB7XG4gICAgY29uc3Qgc2Nyb2xsVG9wID0gdGhpcy5fZ2V0U2Nyb2xsVG9wKCkgKyB0aGlzLl9jb25maWcub2Zmc2V0XG4gICAgY29uc3Qgc2Nyb2xsSGVpZ2h0ID0gdGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KClcbiAgICBjb25zdCBtYXhTY3JvbGwgPSB0aGlzLl9jb25maWcub2Zmc2V0ICsgc2Nyb2xsSGVpZ2h0IC0gdGhpcy5fZ2V0T2Zmc2V0SGVpZ2h0KClcblxuICAgIGlmICh0aGlzLl9zY3JvbGxIZWlnaHQgIT09IHNjcm9sbEhlaWdodCkge1xuICAgICAgdGhpcy5yZWZyZXNoKClcbiAgICB9XG5cbiAgICBpZiAoc2Nyb2xsVG9wID49IG1heFNjcm9sbCkge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5fdGFyZ2V0c1t0aGlzLl90YXJnZXRzLmxlbmd0aCAtIDFdXG5cbiAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgIT09IHRhcmdldCkge1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0YXJnZXQpXG4gICAgICB9XG5cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1swXSAmJiB0aGlzLl9vZmZzZXRzWzBdID4gMCkge1xuICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gbnVsbFxuICAgICAgdGhpcy5fY2xlYXIoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IHRoaXMuX29mZnNldHMubGVuZ3RoOyBpLS07KSB7XG4gICAgICBjb25zdCBpc0FjdGl2ZVRhcmdldCA9IHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGhpcy5fdGFyZ2V0c1tpXSAmJlxuICAgICAgICAgIHNjcm9sbFRvcCA+PSB0aGlzLl9vZmZzZXRzW2ldICYmXG4gICAgICAgICAgKHR5cGVvZiB0aGlzLl9vZmZzZXRzW2kgKyAxXSA9PT0gJ3VuZGVmaW5lZCcgfHwgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1tpICsgMV0pXG5cbiAgICAgIGlmIChpc0FjdGl2ZVRhcmdldCkge1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0aGlzLl90YXJnZXRzW2ldKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9hY3RpdmF0ZSh0YXJnZXQpIHtcbiAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSB0YXJnZXRcblxuICAgIHRoaXMuX2NsZWFyKClcblxuICAgIGNvbnN0IHF1ZXJpZXMgPSB0aGlzLl9zZWxlY3Rvci5zcGxpdCgnLCcpXG4gICAgICAubWFwKHNlbGVjdG9yID0+IGAke3NlbGVjdG9yfVtkYXRhLWJzLXRhcmdldD1cIiR7dGFyZ2V0fVwiXSwke3NlbGVjdG9yfVtocmVmPVwiJHt0YXJnZXR9XCJdYClcblxuICAgIGNvbnN0IGxpbmsgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKHF1ZXJpZXMuam9pbignLCcpKVxuXG4gICAgaWYgKGxpbmsuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRFJPUERPV05fSVRFTSkpIHtcbiAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFLCBsaW5rLmNsb3Nlc3QoU0VMRUNUT1JfRFJPUERPV04pKVxuICAgICAgICAuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSlcblxuICAgICAgbGluay5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZXQgdHJpZ2dlcmVkIGxpbmsgYXMgYWN0aXZlXG4gICAgICBsaW5rLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUpXG5cbiAgICAgIFNlbGVjdG9yRW5naW5lLnBhcmVudHMobGluaywgU0VMRUNUT1JfTkFWX0xJU1RfR1JPVVApXG4gICAgICAgIC5mb3JFYWNoKGxpc3RHcm91cCA9PiB7XG4gICAgICAgICAgLy8gU2V0IHRyaWdnZXJlZCBsaW5rcyBwYXJlbnRzIGFzIGFjdGl2ZVxuICAgICAgICAgIC8vIFdpdGggYm90aCA8dWw+IGFuZCA8bmF2PiBtYXJrdXAgYSBwYXJlbnQgaXMgdGhlIHByZXZpb3VzIHNpYmxpbmcgb2YgYW55IG5hdiBhbmNlc3RvclxuICAgICAgICAgIFNlbGVjdG9yRW5naW5lLnByZXYobGlzdEdyb3VwLCBgJHtTRUxFQ1RPUl9OQVZfTElOS1N9LCAke1NFTEVDVE9SX0xJU1RfSVRFTVN9YClcbiAgICAgICAgICAgIC5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFKSlcblxuICAgICAgICAgIC8vIEhhbmRsZSBzcGVjaWFsIGNhc2Ugd2hlbiAubmF2LWxpbmsgaXMgaW5zaWRlIC5uYXYtaXRlbVxuICAgICAgICAgIFNlbGVjdG9yRW5naW5lLnByZXYobGlzdEdyb3VwLCBTRUxFQ1RPUl9OQVZfSVRFTVMpXG4gICAgICAgICAgICAuZm9yRWFjaChuYXZJdGVtID0+IHtcbiAgICAgICAgICAgICAgU2VsZWN0b3JFbmdpbmUuY2hpbGRyZW4obmF2SXRlbSwgU0VMRUNUT1JfTkFWX0xJTktTKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFKSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fc2Nyb2xsRWxlbWVudCwgRVZFTlRfQUNUSVZBVEUsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRhcmdldFxuICAgIH0pXG4gIH1cblxuICBfY2xlYXIoKSB7XG4gICAgU2VsZWN0b3JFbmdpbmUuZmluZCh0aGlzLl9zZWxlY3RvcilcbiAgICAgIC5maWx0ZXIobm9kZSA9PiBub2RlLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0FDVElWRSkpXG4gICAgICAuZm9yRWFjaChub2RlID0+IG5vZGUuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0FDVElWRSkpXG4gIH1cblxuICAvLyBTdGF0aWNcblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IFNjcm9sbFNweS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZylcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10oKVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5FdmVudEhhbmRsZXIub24od2luZG93LCBFVkVOVF9MT0FEX0RBVEFfQVBJLCAoKSA9PiB7XG4gIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9TUFkpXG4gICAgLmZvckVhY2goc3B5ID0+IG5ldyBTY3JvbGxTcHkoc3B5KSlcbn0pXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5TY3JvbGxTcHkgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oU2Nyb2xsU3B5KVxuXG5leHBvcnQgZGVmYXVsdCBTY3JvbGxTcHlcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4yKTogdGFiLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IHtcbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luLFxuICBnZXRFbGVtZW50RnJvbVNlbGVjdG9yLFxuICBpc0Rpc2FibGVkLFxuICByZWZsb3dcbn0gZnJvbSAnLi91dGlsL2luZGV4J1xuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuL2RvbS9ldmVudC1oYW5kbGVyJ1xuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gJy4vZG9tL3NlbGVjdG9yLWVuZ2luZSdcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gJy4vYmFzZS1jb21wb25lbnQnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUgPSAndGFiJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMudGFiJ1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknXG5cbmNvbnN0IEVWRU5UX0hJREUgPSBgaGlkZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TSE9XID0gYHNob3cke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TSE9XTiA9IGBzaG93biR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0NMSUNLX0RBVEFfQVBJID0gYGNsaWNrJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxuXG5jb25zdCBDTEFTU19OQU1FX0RST1BET1dOX01FTlUgPSAnZHJvcGRvd24tbWVudSdcbmNvbnN0IENMQVNTX05BTUVfQUNUSVZFID0gJ2FjdGl2ZSdcbmNvbnN0IENMQVNTX05BTUVfRkFERSA9ICdmYWRlJ1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnXG5cbmNvbnN0IFNFTEVDVE9SX0RST1BET1dOID0gJy5kcm9wZG93bidcbmNvbnN0IFNFTEVDVE9SX05BVl9MSVNUX0dST1VQID0gJy5uYXYsIC5saXN0LWdyb3VwJ1xuY29uc3QgU0VMRUNUT1JfQUNUSVZFID0gJy5hY3RpdmUnXG5jb25zdCBTRUxFQ1RPUl9BQ1RJVkVfVUwgPSAnOnNjb3BlID4gbGkgPiAuYWN0aXZlJ1xuY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEUgPSAnW2RhdGEtYnMtdG9nZ2xlPVwidGFiXCJdLCBbZGF0YS1icy10b2dnbGU9XCJwaWxsXCJdLCBbZGF0YS1icy10b2dnbGU9XCJsaXN0XCJdJ1xuY29uc3QgU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFID0gJy5kcm9wZG93bi10b2dnbGUnXG5jb25zdCBTRUxFQ1RPUl9EUk9QRE9XTl9BQ1RJVkVfQ0hJTEQgPSAnOnNjb3BlID4gLmRyb3Bkb3duLW1lbnUgLmFjdGl2ZSdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIFRhYiBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcblxuICBzaG93KCkge1xuICAgIGlmICgodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlICYmXG4gICAgICB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0FDVElWRSkpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgcHJldmlvdXNcbiAgICBjb25zdCB0YXJnZXQgPSBnZXRFbGVtZW50RnJvbVNlbGVjdG9yKHRoaXMuX2VsZW1lbnQpXG4gICAgY29uc3QgbGlzdEVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LmNsb3Nlc3QoU0VMRUNUT1JfTkFWX0xJU1RfR1JPVVApXG5cbiAgICBpZiAobGlzdEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGl0ZW1TZWxlY3RvciA9IGxpc3RFbGVtZW50Lm5vZGVOYW1lID09PSAnVUwnIHx8IGxpc3RFbGVtZW50Lm5vZGVOYW1lID09PSAnT0wnID8gU0VMRUNUT1JfQUNUSVZFX1VMIDogU0VMRUNUT1JfQUNUSVZFXG4gICAgICBwcmV2aW91cyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoaXRlbVNlbGVjdG9yLCBsaXN0RWxlbWVudClcbiAgICAgIHByZXZpb3VzID0gcHJldmlvdXNbcHJldmlvdXMubGVuZ3RoIC0gMV1cbiAgICB9XG5cbiAgICBjb25zdCBoaWRlRXZlbnQgPSBwcmV2aW91cyA/XG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcihwcmV2aW91cywgRVZFTlRfSElERSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9KSA6XG4gICAgICBudWxsXG5cbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgIH0pXG5cbiAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgfHwgKGhpZGVFdmVudCAhPT0gbnVsbCAmJiBoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2FjdGl2YXRlKHRoaXMuX2VsZW1lbnQsIGxpc3RFbGVtZW50KVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcihwcmV2aW91cywgRVZFTlRfSElEREVOLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgIH0pXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XTiwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICB0aGlzLl9hY3RpdmF0ZSh0YXJnZXQsIHRhcmdldC5wYXJlbnROb2RlLCBjb21wbGV0ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcGxldGUoKVxuICAgIH1cbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBfYWN0aXZhdGUoZWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnRzID0gY29udGFpbmVyICYmIChjb250YWluZXIubm9kZU5hbWUgPT09ICdVTCcgfHwgY29udGFpbmVyLm5vZGVOYW1lID09PSAnT0wnKSA/XG4gICAgICBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0FDVElWRV9VTCwgY29udGFpbmVyKSA6XG4gICAgICBTZWxlY3RvckVuZ2luZS5jaGlsZHJlbihjb250YWluZXIsIFNFTEVDVE9SX0FDVElWRSlcblxuICAgIGNvbnN0IGFjdGl2ZSA9IGFjdGl2ZUVsZW1lbnRzWzBdXG4gICAgY29uc3QgaXNUcmFuc2l0aW9uaW5nID0gY2FsbGJhY2sgJiYgKGFjdGl2ZSAmJiBhY3RpdmUuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSkpXG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHRoaXMuX3RyYW5zaXRpb25Db21wbGV0ZShlbGVtZW50LCBhY3RpdmUsIGNhbGxiYWNrKVxuXG4gICAgaWYgKGFjdGl2ZSAmJiBpc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgIGFjdGl2ZS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVylcbiAgICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIGVsZW1lbnQsIHRydWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBsZXRlKClcbiAgICB9XG4gIH1cblxuICBfdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2spIHtcbiAgICBpZiAoYWN0aXZlKSB7XG4gICAgICBhY3RpdmUuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0FDVElWRSlcblxuICAgICAgY29uc3QgZHJvcGRvd25DaGlsZCA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfRFJPUERPV05fQUNUSVZFX0NISUxELCBhY3RpdmUucGFyZW50Tm9kZSlcblxuICAgICAgaWYgKGRyb3Bkb3duQ2hpbGQpIHtcbiAgICAgICAgZHJvcGRvd25DaGlsZC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFKVxuICAgICAgfVxuXG4gICAgICBpZiAoYWN0aXZlLmdldEF0dHJpYnV0ZSgncm9sZScpID09PSAndGFiJykge1xuICAgICAgICBhY3RpdmUuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgZmFsc2UpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFKVxuICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgncm9sZScpID09PSAndGFiJykge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCB0cnVlKVxuICAgIH1cblxuICAgIHJlZmxvdyhlbGVtZW50KVxuXG4gICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSkpIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1cpXG4gICAgfVxuXG4gICAgbGV0IHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZVxuICAgIGlmIChwYXJlbnQgJiYgcGFyZW50Lm5vZGVOYW1lID09PSAnTEknKSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZVxuICAgIH1cblxuICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0RST1BET1dOX01FTlUpKSB7XG4gICAgICBjb25zdCBkcm9wZG93bkVsZW1lbnQgPSBlbGVtZW50LmNsb3Nlc3QoU0VMRUNUT1JfRFJPUERPV04pXG5cbiAgICAgIGlmIChkcm9wZG93bkVsZW1lbnQpIHtcbiAgICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUsIGRyb3Bkb3duRWxlbWVudClcbiAgICAgICAgICAuZm9yRWFjaChkcm9wZG93biA9PiBkcm9wZG93bi5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFKSlcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuICAgIH1cblxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gVGFiLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcylcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGFbY29uZmlnXSgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEksIFNFTEVDVE9SX0RBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgaWYgKFsnQScsICdBUkVBJ10uaW5jbHVkZXModGhpcy50YWdOYW1lKSkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIGlmIChpc0Rpc2FibGVkKHRoaXMpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCBkYXRhID0gVGFiLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcylcbiAgZGF0YS5zaG93KClcbn0pXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5UYWIgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oVGFiKVxuXG5leHBvcnQgZGVmYXVsdCBUYWJcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMC4yKTogdG9hc3QuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQge1xuICBkZWZpbmVKUXVlcnlQbHVnaW4sXG4gIHJlZmxvdyxcbiAgdHlwZUNoZWNrQ29uZmlnXG59IGZyb20gJy4vdXRpbC9pbmRleCdcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCBNYW5pcHVsYXRvciBmcm9tICcuL2RvbS9tYW5pcHVsYXRvcidcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gJy4vYmFzZS1jb21wb25lbnQnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUgPSAndG9hc3QnXG5jb25zdCBEQVRBX0tFWSA9ICdicy50b2FzdCdcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gXG5cbmNvbnN0IEVWRU5UX0NMSUNLX0RJU01JU1MgPSBgY2xpY2suZGlzbWlzcyR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX01PVVNFT1ZFUiA9IGBtb3VzZW92ZXIke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9NT1VTRU9VVCA9IGBtb3VzZW91dCR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0ZPQ1VTSU4gPSBgZm9jdXNpbiR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0ZPQ1VTT1VUID0gYGZvY3Vzb3V0JHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfSElERSA9IGBoaWRlJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfSElEREVOID0gYGhpZGRlbiR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1NIT1cgPSBgc2hvdyR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1NIT1dOID0gYHNob3duJHtFVkVOVF9LRVl9YFxuXG5jb25zdCBDTEFTU19OQU1FX0ZBREUgPSAnZmFkZSdcbmNvbnN0IENMQVNTX05BTUVfSElERSA9ICdoaWRlJ1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnXG5jb25zdCBDTEFTU19OQU1FX1NIT1dJTkcgPSAnc2hvd2luZydcblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIGFuaW1hdGlvbjogJ2Jvb2xlYW4nLFxuICBhdXRvaGlkZTogJ2Jvb2xlYW4nLFxuICBkZWxheTogJ251bWJlcidcbn1cblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgYW5pbWF0aW9uOiB0cnVlLFxuICBhdXRvaGlkZTogdHJ1ZSxcbiAgZGVsYXk6IDUwMDBcbn1cblxuY29uc3QgU0VMRUNUT1JfREFUQV9ESVNNSVNTID0gJ1tkYXRhLWJzLWRpc21pc3M9XCJ0b2FzdFwiXSdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIFRvYXN0IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQpXG5cbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsXG4gICAgdGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbiA9IGZhbHNlXG4gICAgdGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbiA9IGZhbHNlXG4gICAgdGhpcy5fc2V0TGlzdGVuZXJzKClcbiAgfVxuXG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUVcbiAgfVxuXG4gIC8vIFB1YmxpY1xuXG4gIHNob3coKSB7XG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVylcblxuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fY2xlYXJUaW1lb3V0KClcblxuICAgIGlmICh0aGlzLl9jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9GQURFKVxuICAgIH1cblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPV0lORylcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1cpXG5cbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1dOKVxuXG4gICAgICB0aGlzLl9tYXliZVNjaGVkdWxlSGlkZSgpXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfSElERSlcbiAgICByZWZsb3codGhpcy5fZWxlbWVudClcbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XSU5HKVxuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgdGhpcy5fZWxlbWVudCwgdGhpcy5fY29uZmlnLmFuaW1hdGlvbilcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1cpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFKVxuXG4gICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0hJREUpXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4pXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVylcbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLl9lbGVtZW50LCB0aGlzLl9jb25maWcuYW5pbWF0aW9uKVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLl9jbGVhclRpbWVvdXQoKVxuXG4gICAgaWYgKHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVykpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG4gICAgfVxuXG4gICAgc3VwZXIuZGlzcG9zZSgpXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi5EZWZhdWx0LFxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pXG4gICAgfVxuXG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSlcblxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIF9tYXliZVNjaGVkdWxlSGlkZSgpIHtcbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5hdXRvaGlkZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2hhc01vdXNlSW50ZXJhY3Rpb24gfHwgdGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5oaWRlKClcbiAgICB9LCB0aGlzLl9jb25maWcuZGVsYXkpXG4gIH1cblxuICBfb25JbnRlcmFjdGlvbihldmVudCwgaXNJbnRlcmFjdGluZykge1xuICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgY2FzZSAnbW91c2VvdmVyJzpcbiAgICAgIGNhc2UgJ21vdXNlb3V0JzpcbiAgICAgICAgdGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbiA9IGlzSW50ZXJhY3RpbmdcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2ZvY3VzaW4nOlxuICAgICAgY2FzZSAnZm9jdXNvdXQnOlxuICAgICAgICB0aGlzLl9oYXNLZXlib2FyZEludGVyYWN0aW9uID0gaXNJbnRlcmFjdGluZ1xuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBpZiAoaXNJbnRlcmFjdGluZykge1xuICAgICAgdGhpcy5fY2xlYXJUaW1lb3V0KClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IG5leHRFbGVtZW50ID0gZXZlbnQucmVsYXRlZFRhcmdldFxuICAgIGlmICh0aGlzLl9lbGVtZW50ID09PSBuZXh0RWxlbWVudCB8fCB0aGlzLl9lbGVtZW50LmNvbnRhaW5zKG5leHRFbGVtZW50KSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fbWF5YmVTY2hlZHVsZUhpZGUoKVxuICB9XG5cbiAgX3NldExpc3RlbmVycygpIHtcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfQ0xJQ0tfRElTTUlTUywgU0VMRUNUT1JfREFUQV9ESVNNSVNTLCAoKSA9PiB0aGlzLmhpZGUoKSlcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VPVkVSLCBldmVudCA9PiB0aGlzLl9vbkludGVyYWN0aW9uKGV2ZW50LCB0cnVlKSlcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VPVVQsIGV2ZW50ID0+IHRoaXMuX29uSW50ZXJhY3Rpb24oZXZlbnQsIGZhbHNlKSlcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfRk9DVVNJTiwgZXZlbnQgPT4gdGhpcy5fb25JbnRlcmFjdGlvbihldmVudCwgdHJ1ZSkpXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0ZPQ1VTT1VULCBldmVudCA9PiB0aGlzLl9vbkludGVyYWN0aW9uKGV2ZW50LCBmYWxzZSkpXG4gIH1cblxuICBfY2xlYXJUaW1lb3V0KCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KVxuICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsXG4gIH1cblxuICAvLyBTdGF0aWNcblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IFRvYXN0LmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVtjb25maWddKHRoaXMpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuVG9hc3QgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oVG9hc3QpXG5cbmV4cG9ydCBkZWZhdWx0IFRvYXN0XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjAuMik6IGluZGV4LnVtZC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCBBbGVydCBmcm9tICcuL3NyYy9hbGVydCdcbmltcG9ydCBCdXR0b24gZnJvbSAnLi9zcmMvYnV0dG9uJ1xuaW1wb3J0IENhcm91c2VsIGZyb20gJy4vc3JjL2Nhcm91c2VsJ1xuaW1wb3J0IENvbGxhcHNlIGZyb20gJy4vc3JjL2NvbGxhcHNlJ1xuaW1wb3J0IERyb3Bkb3duIGZyb20gJy4vc3JjL2Ryb3Bkb3duJ1xuaW1wb3J0IE1vZGFsIGZyb20gJy4vc3JjL21vZGFsJ1xuaW1wb3J0IE9mZmNhbnZhcyBmcm9tICcuL3NyYy9vZmZjYW52YXMnXG5pbXBvcnQgUG9wb3ZlciBmcm9tICcuL3NyYy9wb3BvdmVyJ1xuaW1wb3J0IFNjcm9sbFNweSBmcm9tICcuL3NyYy9zY3JvbGxzcHknXG5pbXBvcnQgVGFiIGZyb20gJy4vc3JjL3RhYidcbmltcG9ydCBUb2FzdCBmcm9tICcuL3NyYy90b2FzdCdcbmltcG9ydCBUb29sdGlwIGZyb20gJy4vc3JjL3Rvb2x0aXAnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgQWxlcnQsXG4gIEJ1dHRvbixcbiAgQ2Fyb3VzZWwsXG4gIENvbGxhcHNlLFxuICBEcm9wZG93bixcbiAgTW9kYWwsXG4gIE9mZmNhbnZhcyxcbiAgUG9wb3ZlcixcbiAgU2Nyb2xsU3B5LFxuICBUYWIsXG4gIFRvYXN0LFxuICBUb29sdGlwXG59XG4iLCIoZnVuY3Rpb24gKCQpIHtcclxuICBcInVzZV9zdHJpY3RcIjtcclxuICBcclxuICBjb25zdCBnZXRVcmxWYXJzID0gKCkgPT4ge1xyXG4gICAgbGV0IHZhcnMgPSB7fTtcclxuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2UoXHJcbiAgICAgIC9bPyZdKyhbXj0mXSspPShbXiZdKikvZ2ksXHJcbiAgICAgIGZ1bmN0aW9uIChtLCBrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyc1trZXldID0gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2gpIHtcclxuICAgICAgY29uc3QgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoXCIjXCIsIFwiLyNcIik7XHJcbiAgICAgIGhhc2gucmVwbGFjZSgvWyMmXSsoW149Jl0rKT0oW14mXSopL2dpLCBmdW5jdGlvbiAobSwga2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHZhcnNba2V5XSA9IHZhbHVlO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YXJzO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHVybF92YXJzID0gZ2V0VXJsVmFycygpO1xyXG5cclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4ge1xyXG4gICAgaWYgKHVybF92YXJzPy5jaGF0X2FjdGlvbikge1xyXG4gICAgICBjb25zdCBjaGF0U2VjdGlvbiA9ICQoZG9jdW1lbnQpLmZpbmQoXCIuY2hhdC1zZWN0aW9uXCIpO1xyXG4gICAgICBpZiAoY2hhdFNlY3Rpb24gJiYgY2hhdFNlY3Rpb24ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIC8vIHNldCBhY3RpdmUgc2lkZSBtZW51IGl0ZW0gYmFzZWQgb24gbG9jYXRpb24gaHJlZlxyXG4gICAgICAgIGNoYXRTZWN0aW9uLmZpbmQoYC5jaGF0LW1haW5fX2JvZHlgKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIGlmICh1cmxfdmFycz8uY2hhdF9hY3Rpb24gPT0gJCh0aGlzKS5hdHRyKFwiaWRcIikpIHtcclxuICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhcImhpZGVcIik7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKFwiaGlkZVwiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyh7IHVybF92YXJzIH0pO1xyXG5cclxuICAgIGNvbnN0IGNoYXRTZWN0aW9uID0gJChkb2N1bWVudCkuZmluZChcIi5jaGF0LXNlY3Rpb25cIik7XHJcbiAgICBpZiAoY2hhdFNlY3Rpb24gJiYgY2hhdFNlY3Rpb24/Lmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgY2hhdCA9IHtcclxuICAgICAgICBtZXNzYWdlVG9TZW5kOiBcIlwiLFxyXG4gICAgICAgIG1lc3NhZ2VSZXNwb25zZXM6IFtcclxuICAgICAgICAgIFwiV2h5IGRpZCB0aGUgd2ViIGRldmVsb3BlciBsZWF2ZSB0aGUgcmVzdGF1cmFudD8gQmVjYXVzZSBvZiB0aGUgdGFibGUgbGF5b3V0LlwiLFxyXG4gICAgICAgICAgXCJIb3cgZG8geW91IGNvbWZvcnQgYSBKYXZhU2NyaXB0IGJ1Zz8gWW91IGNvbnNvbGUgaXQuXCIsXHJcbiAgICAgICAgICAnQW4gU1FMIHF1ZXJ5IGVudGVycyBhIGJhciwgYXBwcm9hY2hlcyB0d28gdGFibGVzIGFuZCBhc2tzOiBcIk1heSBJIGpvaW4geW91P1wiJyxcclxuICAgICAgICAgIFwiV2hhdCBpcyB0aGUgbW9zdCB1c2VkIGxhbmd1YWdlIGluIHByb2dyYW1taW5nPyBQcm9mYW5pdHkuXCIsXHJcbiAgICAgICAgICBcIldoYXQgaXMgdGhlIG9iamVjdC1vcmllbnRlZCB3YXkgdG8gYmVjb21lIHdlYWx0aHk/IEluaGVyaXRhbmNlLlwiLFxyXG4gICAgICAgICAgXCJBbiBTRU8gZXhwZXJ0IHdhbGtzIGludG8gYSBiYXIsIGJhcnMsIHB1YiwgdGF2ZXJuLCBwdWJsaWMgaG91c2UsIElyaXNoIHB1YiwgZHJpbmtzLCBiZWVyLCBhbGNvaG9sXCIsXHJcbiAgICAgICAgXSxcclxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB0aGlzLmNhY2hlRE9NKCk7XHJcbiAgICAgICAgICB0aGlzLmJpbmRFdmVudHMoKTtcclxuICAgICAgICAgIC8vIHRoaXMuYmluZE1lc3NhZ2VUZXh0QXJlYSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoc2VsZWN0b3IsIHJvb3QgPSBkb2N1bWVudCkge1xyXG4gICAgICAgICAgcmV0dXJuIHJvb3QucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjYWNoZURPTTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgdGhpcy4kY2hhdEZvcm0gPSBjaGF0U2VjdGlvbi5maW5kKCdmb3JtW25hbWU9XCJjaGF0LWZvcm1cIl0nKTtcclxuICAgICAgICAgIHRoaXMuJGNoYXRCb2R5ID0gdGhpcy4kY2hhdEZvcm0ucGFyZW50cyhcIi5jaGF0LW1haW5fX2JvZHlcIik7XHJcbiAgICAgICAgICB0aGlzLiR0ZXh0YXJlYSA9IHRoaXMuJGNoYXRCb2R5LmZpbmQoJ1tuYW1lPVwiY2hhdC1tZXNzYWdlXCJdJyk7XHJcbiAgICAgICAgICB0aGlzLiRjaGF0SGlzdG9yeUxpc3QgPSB0aGlzLiRjaGF0Qm9keS5maW5kKFwidWwuY2hhdC1saXN0XCIpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgfSxcclxuICAgICAgICBiaW5kRXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB0aGlzLiRjaGF0Rm9ybS5lYWNoKHRoaXMuc3VibWl0QmluZEFsbC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgIHRoaXMuJGNoYXRGb3JtLm9uKFwia2V5ZG93blwiLCB0aGlzLnN1Ym1pdEZvcm0uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgY2hhdFNlY3Rpb24uZmluZChcIi5jaGF0LW5ldy1tZXNzYWdlXCIpLm9uKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVPcGVuQ2hhdEJvZHkuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICBjaGF0U2VjdGlvbi5maW5kKFxyXG4gICAgICAgICAgICBcIi5jaGF0LXNpZGViYXJfX2xpc3QgLmNoYXQtbGlzdC1pdGVtIGFcIlxyXG4gICAgICAgICAgKS5vbihcImNsaWNrXCIsIHRoaXMuaGFuZGxlT3BlbkNoYXRCb2R5LmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgY2hhdFNlY3Rpb24uZmluZChcclxuICAgICAgICAgICAgXCIuY2hhdC1zZXJhY2hfX2xpc3QgLmNoYXQtbGlzdC1pdGVtIGFcIlxyXG4gICAgICAgICAgKS5vbiggXCJjbGlja1wiLCAgdGhpcy5oYW5kbGVPcGVuQ2hhdEJvZHkuYmluZCh0aGlzKSApO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3VibWl0QmluZEFsbDogZnVuY3Rpb24gKGlueCwgZWxlbSkge1xyXG4gICAgICAgICAgY29uc3QgZm9ybSA9ICQoZWxlbSk7XHJcbiAgICAgICAgICBmb3JtLm9uKFwic3VibWl0XCIsIHRoaXMuZm9ybVN1Ym1pdEhhbmRsZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdWJtaXRGb3JtOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgIGlmICh3aW5kb3cuZXZlbnQua2V5Q29kZSA9PSBcIjEzXCIpIHtcclxuICAgICAgICAgICAgdGhpcy4kY2hhdEZvcm0uc3VibWl0KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmb3JtU3VibWl0SGFuZGxlcjogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgY29uc3QgY3VycmVudEZvcm0gPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgICAgICAgY29uc3QgY3VycmVudE1zZyA9IGN1cnJlbnRGb3JtLmZpbmQoJ1tuYW1lPVwiY2hhdC1tZXNzYWdlXCJdJykudmFsKCk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHRoaXMuJGNoYXRCb2R5ID0gY3VycmVudEZvcm0ucGFyZW50cyhcIi5jaGF0LW1haW5fX2JvZHlcIik7XHJcbiAgICAgICAgICB0aGlzLiR0ZXh0YXJlYSA9IGN1cnJlbnRGb3JtLmZpbmQoJ1tuYW1lPVwiY2hhdC1tZXNzYWdlXCJdJyk7XHJcbiAgICAgICAgICB0aGlzLiRjaGF0SGlzdG9yeUxpc3QgPSBjdXJyZW50Rm9ybS5wYXJlbnRzKFwiLmNoYXQtbWFpbl9fYm9keVwiKS5maW5kKFwidWwuY2hhdC1saXN0XCIpO1xyXG5cclxuICAgICAgICAgIGlmIChjdXJyZW50TXNnICYmIGN1cnJlbnRNc2cudHJpbSgpICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRW1wdHlNc2coKTtcclxuICAgICAgICAgICAgdGhpcy5hcHBlbmRNZXNzYWdlKGN1cnJlbnRNc2cpO1xyXG4gICAgICAgICAgICB0aGlzLmJvdFJlc3BvbnNlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhcHBlbmRNZXNzYWdlOiBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgICAgaWYgKG1lc3NhZ2UgJiYgbWVzc2FnZS50cmltKCkgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgY29uc3QgbXNnSFRNTCA9IHRoaXMubXNnVGVtcGxldGVTZW5kZXIobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGNoYXRIaXN0b3J5TGlzdC5hcHBlbmQobXNnSFRNTCk7XHJcbiAgICAgICAgICAgIHRoaXMuJHRleHRhcmVhLnZhbChcIlwiKTtcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGxUb0JvdHRvbSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXBwZW5kTWVzc2FnZVJlY2lwaWVudDogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICAgIGlmIChtZXNzYWdlICYmIG1lc3NhZ2UudHJpbSgpICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlVHlwaW5nTXNnKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1zZ0hUTUwgPSB0aGlzLm1zZ1RlbXBsZXRlUmVjaXBpZW50KG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLiRjaGF0SGlzdG9yeUxpc3QuYXBwZW5kKG1zZ0hUTUwpO1xyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbFRvQm90dG9tKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhcHBlbmRUeXBpbmdNc2c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIGNvbnN0IHR5cGluZ01zZyA9IHRoaXMubXNnVHlwaW5nKCk7XHJcbiAgICAgICAgICB0aGlzLiRjaGF0SGlzdG9yeUxpc3QuYXBwZW5kKHR5cGluZ01zZyk7XHJcbiAgICAgICAgICB0aGlzLnNjcm9sbFRvQm90dG9tKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhcHBlbmRFbXB0eU1zZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgY29uc3QgdHlwaW5nTXNnID0gdGhpcy5tc2dFbXB0eSgpO1xyXG4gICAgICAgICAgdGhpcy4kY2hhdEhpc3RvcnlMaXN0LmFwcGVuZCh0eXBpbmdNc2cpO1xyXG4gICAgICAgICAgdGhpcy5zY3JvbGxUb0JvdHRvbSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVtb3ZlRW1wdHlNc2c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHRoaXMuJGNoYXRIaXN0b3J5TGlzdC5maW5kKFwiLmNoYXQtbGlzdC1pdGVtLmVtcHR5LWl0ZW1cIikucmVtb3ZlKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZW1vdmVUeXBpbmdNc2c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHRoaXMuJGNoYXRIaXN0b3J5TGlzdC5maW5kKFwiLmNoYXQtbGlzdC1pdGVtLnR5cGluZ1wiKS5yZW1vdmUoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJvdFJlc3BvbnNlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBjb25zdCByYW5kb21Nc2cgPSB0aGlzLmdldFJhbmRvbUl0ZW0odGhpcy5tZXNzYWdlUmVzcG9uc2VzKTtcclxuICAgICAgICAgIGlmIChyYW5kb21Nc2cgJiYgcmFuZG9tTXNnLnRvU3RyaW5nKCkudHJpbSgpICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kVHlwaW5nTXNnKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkZWxheSA9IHJhbmRvbU1zZy5zcGxpdChcIiBcIikubGVuZ3RoICogMTAwO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLmFwcGVuZE1lc3NhZ2VSZWNpcGllbnQocmFuZG9tTXNnKTtcclxuICAgICAgICAgICAgfSwgZGVsYXkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYmluZE1lc3NhZ2VUZXh0QXJlYTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGF0LW1haW5fX2Zvcm0tbWVzc2FnZVwiKTtcclxuICAgICAgICAgIGNvbnN0IHRhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGF0LW1lc3NhZ2VcIik7XHJcblxyXG4gICAgICAgICAgdGEuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgYXV0b3NpemUpO1xyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIGF1dG9zaXplKCkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICB0YS5zdHlsZS5jc3NUZXh0ID0gXCJoZWlnaHQ6MHB4XCI7XHJcbiAgICAgICAgICAgICAgbGV0IGhlaWdodCA9IE1hdGgubWluKDI2ICogNSwgdGEuc2Nyb2xsSGVpZ2h0KTtcclxuICAgICAgICAgICAgICBkaXYuc3R5bGUuY3NzVGV4dCA9IFwiaGVpZ2h0OlwiICsgaGVpZ2h0ICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgIHRhLnN0eWxlLmNzc1RleHQgPSBcImhlaWdodDpcIiArIGhlaWdodCArIFwicHhcIjtcclxuICAgICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzY3JvbGxUb0JvdHRvbTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgdGhpcy4kY2hhdEhpc3RvcnlMaXN0ICYmXHJcbiAgICAgICAgICAgIHRoaXMuJGNoYXRIaXN0b3J5TGlzdC5zY3JvbGxUb3AoXHJcbiAgICAgICAgICAgICAgdGhpcy4kY2hhdEhpc3RvcnlMaXN0WzBdLnNjcm9sbEhlaWdodFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0Q3VycmVudFRpbWU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSgpXHJcbiAgICAgICAgICAgIC50b0xvY2FsZVRpbWVTdHJpbmcoKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvKFtcXGRdKzpbXFxkXXsyfSkoOltcXGRdezJ9KSguKikvLCBcIiQxJDNcIik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXRSYW5kb21JdGVtOiBmdW5jdGlvbiAoYXJyKSB7XHJcbiAgICAgICAgICByZXR1cm4gYXJyICYmIGFycltNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcnIubGVuZ3RoKV07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtc2dUeXBpbmc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHJldHVybiBgPGxpIGNsYXNzPVwiY2hhdC1saXN0LWl0ZW0gdHlwaW5nXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVzc2FnZS1pdGVtLWNoYXQgdHlwaW5nXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXNzYWdlLXVzZXJcIj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidXNlci1waG90b1wiPlxyXG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvaW1hZ2VzL0F2YXRhcl8yLnBuZ1wiIGFsdD1cIldhZGUgV2FycmVuXCIgLz5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInVzZXItc3RhdHVzIG9ubGluZVwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXNzYWdlLWluZm9cIj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVzc2FnZS1oZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXNzYWdlLXVzZXItaW5mb1wiPlxyXG4gICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9XCJ1c2VyLW5hbWVcIj5XYWRlIFdhcnJlbjwvaDY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVzc2FnZS10ZXh0XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZG90LXR5cGluZ1wiPjwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvbGk+YDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1zZ0VtcHR5OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICByZXR1cm4gYDxsaSBjbGFzcz1cImNoYXQtbGlzdC1pdGVtIGVtcHR5LWl0ZW1cIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXNzYWdlLWl0ZW0tYmlnIGVtcHR5LWl0ZW1cIj5UaGVyZSBhcmUgbm8gbWVzc2FnZXMgaW4gdGhpcyBjb252ZXJzYXRpb24geWV0LjwvZGl2PlxyXG4gICAgICAgIDwvbGk+YDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1zZ1RlbXBsZXRlU2VuZGVyOiBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgICAgcmV0dXJuIGA8bGkgY2xhc3M9XCJjaGF0LWxpc3QtaXRlbSByaWdodFwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2UtaXRlbS1jaGF0IG15LW1zZ1wiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVzc2FnZS1pbmZvXCI+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2UtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVzc2FnZS11c2VyLWluZm9cIj5cclxuICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPVwidXNlci1uYW1lXCI+WW91PC9oNj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2UtdGltZVwiPiR7dGhpcy5nZXRDdXJyZW50VGltZSgpfTwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXNzYWdlLXRleHRcIj5cclxuICAgICAgICAgICAgICAgIDxwPiR7bWVzc2FnZX08L3A+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9saT5gO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbXNnVGVtcGxldGVSZWNpcGllbnQ6IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICByZXR1cm4gYDxsaSBjbGFzcz1cImNoYXQtbGlzdC1pdGVtXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVzc2FnZS1pdGVtLWNoYXRcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2UtdXNlclwiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ1c2VyLXBob3RvXCI+XHJcbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9pbWFnZXMvQXZhdGFyXzIucG5nXCIgYWx0PVwiV2FkZSBXYXJyZW5cIiAvPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidXNlci1zdGF0dXMgb25saW5lXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2UtaW5mb1wiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXNzYWdlLWhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2UtdXNlci1pbmZvXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz1cInVzZXItbmFtZVwiPldhZGUgV2FycmVuPC9oNj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2UtdGltZVwiPiR7dGhpcy5nZXRDdXJyZW50VGltZSgpfTwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXNzYWdlLXRleHRcIj5cclxuICAgICAgICAgICAgICAgIDxwPiR7bWVzc2FnZX08L3A+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9saT5gO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFuZGxlT3BlbkNoYXRCb2R5OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgbGV0IHZhcnMgPSB7fTtcclxuICAgICAgICAgIGNvbnN0IHRoaXNMaW5rID0gJChlLmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgICAgICAgaWYgKHRoaXNMaW5rLmF0dHIoXCJocmVmXCIpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSB0aGlzTGluay5hdHRyKFwiaHJlZlwiKS5yZXBsYWNlKFwiI1wiLCBcIi8jXCIpO1xyXG4gICAgICAgICAgICBoYXNoLnJlcGxhY2UoL1sjJl0rKFtePSZdKyk9KFteJl0qKS9naSwgZnVuY3Rpb24gKG0sIGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICB2YXJzW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAodmFycz8uY2hhdF9hY3Rpb24pIHtcclxuICAgICAgICAgICAgY2hhdFNlY3Rpb24uZmluZCgnLmNoYXQtbWFpbl9fYm9keScpLmVhY2goZnVuY3Rpb24gKGlueCwgaXRlbSkge1xyXG4gICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRCb2R5ID0gJChpdGVtKTtcclxuICAgICAgICAgICAgICBpZiAodmFycz8uY2hhdF9hY3Rpb24gPT0gY3VycmVudEJvZHkuYXR0cihcImlkXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Qm9keS5yZW1vdmVDbGFzcyhcImhpZGVcIik7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRCb2R5LmFkZENsYXNzKFwiaGlkZVwiKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjaGF0LmluaXQoKTtcclxuXHJcbiAgICAgIC8vIFNlYXJjaCB1c2VyIGluIHRoZSBsaXN0XHJcbiAgICAgIGNvbnN0IHNlYXJjaEZpbHRlciA9IHtcclxuICAgICAgICByb290OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBjb25zdCB1c2VyTGlzdCA9IGNoYXRTZWN0aW9uLmZpbmQoXCIuY2hhdC1zaWRlYmFyX19saXN0XCIpO1xyXG4gICAgICAgICAgcmV0dXJuIHVzZXJMaXN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcm9vdE5ld01zZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgY29uc3QgdXNlckxpc3QgPSBjaGF0U2VjdGlvbi5maW5kKFwiLmNoYXQtc2VyYWNoX19saXN0XCIpO1xyXG4gICAgICAgICAgcmV0dXJuIHVzZXJMaXN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3B0aW9uczogeyB2YWx1ZU5hbWVzOiBbXCJ1c2VyLW5hbWVcIl0gfSxcclxuICAgICAgICByZXNldExpc3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIGNvbnN0IHJvb3QgPSB0aGlzLnJvb3QoKTtcclxuICAgICAgICAgIGNvbnN0IHVzZXJMaXN0ID0gcm9vdC5maW5kKFwiLmNoYXQtc2lkZWJhcl9fbGlzdFwiKTtcclxuICAgICAgICAgIGNvbnN0IHVzZXJMaXN0SXRlbSA9IHJvb3QuZmluZChcIj4gbGlcIik7XHJcblxyXG4gICAgICAgICAgLy8gc2hvdyBhbGwgaXRlbXMgaWYgc2VyYWNoaW5nIHZha3VlIGlzIGVtcHR5XHJcbiAgICAgICAgICB1c2VyTGlzdEl0ZW0uZWFjaChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKFwiaGlkZVwiKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIC8vIHJlbW92ZSBlbXB0eSBtZXNzYWdlIGlmIHdlIGhhdmUgaXQgaW4gdGhlIGxpc3RcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgdXNlckxpc3QuZmluZChcIi5jaGF0LWxpc3QtaXRlbS5lbXB0eS1pdGVtXCIpICYmXHJcbiAgICAgICAgICAgIHVzZXJMaXN0LmZpbmQoXCIuY2hhdC1saXN0LWl0ZW0uZW1wdHktaXRlbVwiKS5sZW5ndGggPiAwXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgdXNlckxpc3QuZmluZChcIi5jaGF0LWxpc3QtaXRlbS5lbXB0eS1pdGVtXCIpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmluZEluTGlzdDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICBjb25zdCByb290ID0gdGhpcy5yb290KCk7XHJcbiAgICAgICAgICBjb25zdCB1c2VyTGlzdEl0ZW0gPSByb290LmZpbmQoXCI+IGxpXCIpO1xyXG4gICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vSXRlbXMgPVxyXG4gICAgICAgICAgICAgICc8bGkgY2xhc3M9XCJjaGF0LWxpc3QtaXRlbSBlbXB0eS1pdGVtXCI+PGRpdiBjbGFzcz1cIm1lc3NhZ2UtaXRlbS1iaWcgZW1wdHktaXRlbVwiPk5vIGl0ZW1zIGZvdW5kPC9kaXY+PC9saT4nO1xyXG4gICAgICAgICAgICBjb25zdCB0b3RhbExlbmd0aCA9IHVzZXJMaXN0SXRlbT8ubGVuZ3RoO1xyXG4gICAgICAgICAgICBsZXQgaGlkZGVuSXRlbSA9IDA7XHJcbiAgICAgICAgICAgIHVzZXJMaXN0SXRlbS5lYWNoKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgdXNlciA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICAgICB1c2VyTmFtZSA9IHVzZXIuZmluZChcIi51c2VyLW5hbWVcIikudGV4dCgpLFxyXG4gICAgICAgICAgICAgICAgY29tcGFyZVVzZXJOYW1lID0gdXNlck5hbWUudG9TdHJpbmcoKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgIGlmIChjb21wYXJlVXNlck5hbWUuaW5kZXhPZih2YWx1ZSkgPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICsraGlkZGVuSXRlbTtcclxuICAgICAgICAgICAgICAgIHVzZXIuYWRkQ2xhc3MoXCJoaWRlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGFkZCBlbXB0eSBtZXNzYWdlIGlmIHRvdGFsIGxpc3QgaXRlbSBhbW91bnQgdGhlIHNhbWUgYXMgaGlkZGVuIGl0ZW0gYW1vdW50XHJcbiAgICAgICAgICAgICAgICBpZiAodG90YWxMZW5ndGggPT0gaGlkZGVuSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICByb290LmFwcGVuZChub0l0ZW1zKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBlbXB0eSBtZXNzYWdlIGlmIHdlIGhhdmUgaXQgaW4gdGhlIGxpc3RcclxuICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIHJvb3QuZmluZChcIi5jaGF0LWxpc3QtaXRlbS5lbXB0eS1pdGVtXCIpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdC5maW5kKFwiLmNoYXQtbGlzdC1pdGVtLmVtcHR5LWl0ZW1cIikubGVuZ3RoID4gMFxyXG4gICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByb290LmZpbmQoXCIuY2hhdC1saXN0LWl0ZW0uZW1wdHktaXRlbVwiKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1c2VyLnJlbW92ZUNsYXNzKFwiaGlkZVwiKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNldExpc3QoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc2V0TGlzdE5ld01zZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgY29uc3Qgcm9vdCA9IHRoaXMucm9vdE5ld01zZygpO1xyXG4gICAgICAgICAgY29uc3QgdXNlckxpc3QgPSByb290LmZpbmQoXCIuY2hhdC1zaWRlYmFyX19saXN0XCIpO1xyXG4gICAgICAgICAgY29uc3QgdXNlckxpc3RJdGVtID0gcm9vdC5maW5kKFwiPiBsaVwiKTtcclxuXHJcbiAgICAgICAgICAvLyBzaG93IGFsbCBpdGVtcyBpZiBzZXJhY2hpbmcgdmFrdWUgaXMgZW1wdHlcclxuICAgICAgICAgIHVzZXJMaXN0SXRlbS5lYWNoKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgLy8gcmVtb3ZlIGVtcHR5IG1lc3NhZ2UgaWYgd2UgaGF2ZSBpdCBpbiB0aGUgbGlzdFxyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB1c2VyTGlzdC5maW5kKFwiLmNoYXQtbGlzdC1pdGVtLmVtcHR5LWl0ZW1cIikgJiZcclxuICAgICAgICAgICAgdXNlckxpc3QuZmluZChcIi5jaGF0LWxpc3QtaXRlbS5lbXB0eS1pdGVtXCIpLmxlbmd0aCA+IDBcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICB1c2VyTGlzdC5maW5kKFwiLmNoYXQtbGlzdC1pdGVtLmVtcHR5LWl0ZW1cIikucmVtb3ZlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmaW5kSW5MaXN0TmV3TXNnOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgIGNvbnN0IHJvb3QgPSB0aGlzLnJvb3ROZXdNc2coKTtcclxuICAgICAgICAgIGNvbnN0IHVzZXJMaXN0SXRlbSA9IHJvb3QuZmluZChcImxpXCIpO1xyXG5cclxuICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBub0l0ZW1zID1cclxuICAgICAgICAgICAgICAnPGxpIGNsYXNzPVwiY2hhdC1saXN0LWl0ZW0gZW1wdHktaXRlbVwiPjxkaXYgY2xhc3M9XCJtZXNzYWdlLWl0ZW0tYmlnIGVtcHR5LWl0ZW1cIj5ObyBpdGVtcyBmb3VuZDwvZGl2PjwvbGk+JztcclxuICAgICAgICAgICAgY29uc3QgdG90YWxMZW5ndGggPSB1c2VyTGlzdEl0ZW0/Lmxlbmd0aDtcclxuICAgICAgICAgICAgbGV0IGhpZGRlbkl0ZW0gPSAwO1xyXG4gICAgICAgICAgICB1c2VyTGlzdEl0ZW0uZWFjaChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHVzZXIgPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgdXNlck5hbWUgPSB1c2VyLmZpbmQoXCIudXNlci1uYW1lXCIpLnRleHQoKSxcclxuICAgICAgICAgICAgICAgIGNvbXBhcmVVc2VyTmFtZSA9IHVzZXJOYW1lLnRvU3RyaW5nKCkudG9Mb2NhbGVMb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKGNvbXBhcmVVc2VyTmFtZS5pbmRleE9mKHZhbHVlKSA9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgKytoaWRkZW5JdGVtO1xyXG4gICAgICAgICAgICAgICAgdXNlci5hZGRDbGFzcyhcImhpZGVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gYWRkIGVtcHR5IG1lc3NhZ2UgaWYgdG90YWwgbGlzdCBpdGVtIGFtb3VudCB0aGUgc2FtZSBhcyBoaWRkZW4gaXRlbSBhbW91bnRcclxuICAgICAgICAgICAgICAgIGlmICh0b3RhbExlbmd0aCA9PSBoaWRkZW5JdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJvb3QuYXBwZW5kKG5vSXRlbXMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGVtcHR5IG1lc3NhZ2UgaWYgd2UgaGF2ZSBpdCBpbiB0aGUgbGlzdFxyXG4gICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdC5maW5kKFwiLmNoYXQtbGlzdC1pdGVtLmVtcHR5LWl0ZW1cIikgJiZcclxuICAgICAgICAgICAgICAgICAgICByb290LmZpbmQoXCIuY2hhdC1saXN0LWl0ZW0uZW1wdHktaXRlbVwiKS5sZW5ndGggPiAwXHJcbiAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvb3QuZmluZChcIi5jaGF0LWxpc3QtaXRlbS5lbXB0eS1pdGVtXCIpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHVzZXIucmVtb3ZlQ2xhc3MoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0TGlzdE5ld01zZygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgY29uc3QgdXNlckxpc3QgPSB0aGlzLnJvb3QoKTtcclxuICAgICAgICAgIGNvbnN0IHNlYXJjaElucHV0ID0gY2hhdFNlY3Rpb24uZmluZChcclxuICAgICAgICAgICAgJy5jaGF0LXNpZGViYXJfX2hlYWRlciBbdHlwZT1cInNlYXJjaFwiXSdcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBjb25zdCBub0l0ZW1zID1cclxuICAgICAgICAgICAgJzxsaSBjbGFzcz1cImNoYXQtbGlzdC1pdGVtIGVtcHR5LWl0ZW1cIj48ZGl2IGNsYXNzPVwibWVzc2FnZS1pdGVtLWJpZyBlbXB0eS1pdGVtXCI+Tm8gaXRlbXMgZm91bmQ8L2Rpdj48L2xpPic7XHJcblxyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBzZWFyY2hJbnB1dCAmJlxyXG4gICAgICAgICAgICBzZWFyY2hJbnB1dD8ubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgICAgICB1c2VyTGlzdCAmJlxyXG4gICAgICAgICAgICB1c2VyTGlzdD8ubGVuZ3RoID4gMFxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXJMaXN0Tm9kZSA9IHVzZXJMaXN0WzBdO1xyXG4gICAgICAgICAgICAvLyBlbXB0eSBtZXNzYWdlIGlmIGluIGxpc3QgaXRlbSBpcyAwIG9yIGVtcHR5IHN0cmluZ1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgdXNlckxpc3ROb2RlPy5jaGlsZE5vZGVzPy5sZW5ndGggPD0gMCB8fFxyXG4gICAgICAgICAgICAgICh1c2VyTGlzdE5vZGU/LmNoaWxkTm9kZXM/Lmxlbmd0aCA9PSAxICYmXHJcbiAgICAgICAgICAgICAgICB1c2VyTGlzdE5vZGU/LmNoaWxkTm9kZXNbMF0ubm9kZU5hbWUgPT0gXCIjdGV4dFwiKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICB1c2VyTGlzdC5odG1sKG5vSXRlbXMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHNlYXJjaElucHV0Lm9uKFwia2V5dXBcIiwgKF9ldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0VmFsdWUgPSBfZXZlbnQuY3VycmVudFRhcmdldD8udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgIHNlcmFjaFZhbHVlID0gdGFyZ2V0VmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maW5kSW5MaXN0KHNlcmFjaFZhbHVlKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBzZWFyY2hJbnB1dC5vbihcInNlYXJjaFwiLCAoX2V2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRWYWx1ZSA9IF9ldmVudC5jdXJyZW50VGFyZ2V0Py52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgc2VyYWNoVmFsdWUgPSB0YXJnZXRWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmRJbkxpc3Qoc2VyYWNoVmFsdWUpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbml0U2VhcmNoTmV3TXNnOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBjb25zdCB1c2VyTGlzdCA9IHRoaXMucm9vdE5ld01zZygpO1xyXG4gICAgICAgICAgY29uc3Qgc2VhcmNoSW5wdXQgPSBjaGF0U2VjdGlvbi5maW5kKFxyXG4gICAgICAgICAgICAnLmNoYXQtbWFpbl9fbWVzc2FnZXMgW3R5cGU9XCJzZWFyY2hcIl0nXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgY29uc3Qgbm9JdGVtcyA9XHJcbiAgICAgICAgICAgICc8bGkgY2xhc3M9XCJjaGF0LWxpc3QtaXRlbSBlbXB0eS1pdGVtXCI+PGRpdiBjbGFzcz1cIm1lc3NhZ2UtaXRlbS1iaWcgZW1wdHktaXRlbVwiPk5vIGl0ZW1zIGZvdW5kPC9kaXY+PC9saT4nO1xyXG5cclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgc2VhcmNoSW5wdXQgJiZcclxuICAgICAgICAgICAgc2VhcmNoSW5wdXQ/Lmxlbmd0aCA+IDAgJiZcclxuICAgICAgICAgICAgdXNlckxpc3QgJiZcclxuICAgICAgICAgICAgdXNlckxpc3Q/Lmxlbmd0aCA+IDBcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICBjb25zdCB1c2VyTGlzdE5vZGUgPSB1c2VyTGlzdFswXTtcclxuICAgICAgICAgICAgLy8gZW1wdHkgbWVzc2FnZSBpZiBpbiBsaXN0IGl0ZW0gaXMgMCBvciBlbXB0eSBzdHJpbmdcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgIHVzZXJMaXN0Tm9kZT8uY2hpbGROb2Rlcz8ubGVuZ3RoIDw9IDAgfHxcclxuICAgICAgICAgICAgICAodXNlckxpc3ROb2RlPy5jaGlsZE5vZGVzPy5sZW5ndGggPT0gMSAmJlxyXG4gICAgICAgICAgICAgICAgdXNlckxpc3ROb2RlPy5jaGlsZE5vZGVzWzBdLm5vZGVOYW1lID09IFwiI3RleHRcIilcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgdXNlckxpc3QuaHRtbChub0l0ZW1zKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBzZWFyY2hJbnB1dC5vbihcImtleXVwXCIsIChfZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFZhbHVlID0gX2V2ZW50LmN1cnJlbnRUYXJnZXQ/LnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICBzZXJhY2hWYWx1ZSA9IHRhcmdldFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmluZEluTGlzdE5ld01zZyhzZXJhY2hWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgc2VhcmNoSW5wdXQub24oXCJzZWFyY2hcIiwgKF9ldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0VmFsdWUgPSBfZXZlbnQuY3VycmVudFRhcmdldD8udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgIHNlcmFjaFZhbHVlID0gdGFyZ2V0VmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maW5kSW5MaXN0TmV3TXNnKHNlcmFjaFZhbHVlKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzZWFyY2hGaWx0ZXIuaW5pdCgpO1xyXG4gICAgICBzZWFyY2hGaWx0ZXIuaW5pdFNlYXJjaE5ld01zZygpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KShqUXVlcnkpO1xyXG4iLCIoZnVuY3Rpb24gKCQpIHtcclxuICAndXNlX3N0cmljdCc7XHJcblxyXG4gICQuZm4uZXF1YWxIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBsZXQgdGFsbGVzdCA9IDA7XHJcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICBsZXQgdGhpc0hlaWdodCA9ICQodGhpcykuaGVpZ2h0KCk7XHJcbiAgICAgIHRhbGxlc3QgPSAodGhpc0hlaWdodCA+IHRhbGxlc3QpID8gdGhpc0hlaWdodCA6IHRhbGxlc3Q7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzLmhlaWdodCh0YWxsZXN0KTtcclxuICB9O1xyXG5cclxuICBsZXQgaXNfY2hyb21lID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUnKSA+IC0xO1xyXG4gIGNvbnN0IGlzX2V4cGxvcmVyID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdNU0lFJykgPiAtMTtcclxuICBjb25zdCBpc19maXJlZm94ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPiAtMTtcclxuICBsZXQgaXNfc2FmYXJpID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiU2FmYXJpXCIpID4gLTE7XHJcbiAgY29uc3QgaXNfb3BlcmEgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcIm9wXCIpID4gLTE7XHJcbiAgaWYgKChpc19jaHJvbWUpICYmIChpc19zYWZhcmkpKSB7XHJcbiAgICBpc19zYWZhcmkgPSBmYWxzZTtcclxuICB9XHJcbiAgaWYgKChpc19jaHJvbWUpICYmIChpc19vcGVyYSkpIHtcclxuICAgIGlzX2Nocm9tZSA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZ2V0VXJsVmFycyA9ICgpID0+IHtcclxuICAgIGxldCB2YXJzID0ge307XHJcbiAgICBsZXQgcGFydHMgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKC9bPyZdKyhbXj0mXSspPShbXiZdKikvZ2ksIGZ1bmN0aW9uIChtLCBrZXksIHZhbHVlKSB7XHJcbiAgICAgIHZhcnNba2V5XSA9IHZhbHVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdmFycztcclxuICB9O1xyXG5cclxuICBjb25zdCB1cmxfdmFycyA9IGdldFVybFZhcnMoKTtcclxuXHJcbiAgY29uc3QgZ2V0VXJsID0gKCR1cmwpID0+IHtcclxuICAgIGxldCB1cmwgPSAkdXJsLnNwbGl0KFwiLy9cIik7XHJcbiAgICBpZiAodXJsWzBdID09PSBcImh0dHA6XCIgfHwgdXJsWzBdID09PSBcImh0dHBzOlwiKSB7XHJcbiAgICAgIGNvbnN0IHByb3RvY29sID0gdXJsWzBdICsgXCIvL1wiO1xyXG4gICAgICBsZXQgaG9zdCA9IHVybFsxXS5zcGxpdChcIi9cIilbMF07XHJcbiAgICAgIHVybCA9IHByb3RvY29sICsgaG9zdDtcclxuICAgICAgY29uc3QgcGF0aCA9ICR1cmwuc3BsaXQodXJsKVsxXTtcclxuICAgICAgY29uc3QgbGFzdEFyciA9ICR1cmwuc3BsaXQoXCIvZGlzdC9cIiksXHJcbiAgICAgICAgbGFzdCA9IGxhc3RBcnIuc2xpY2UoLTEpLnBvcCgpO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBwcm90b2NvbDogcHJvdG9jb2wsXHJcbiAgICAgICAgaG9zdDogaG9zdCxcclxuICAgICAgICBwYXRoOiBwYXRoLFxyXG4gICAgICAgIGxhc3Q6IGxhc3QsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogUHJlbG9hZGVyXHJcbiAgICogKi9cclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4ge1xyXG4gICAgY29uc3QgcHJlbG9hZGVyR3JvdXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByZWxvYWRlckdyb3VwXCIpO1xyXG4gICAgaWYgKHByZWxvYWRlckdyb3VwKSB7XHJcbiAgICAgIHByZWxvYWRlckdyb3VwLmNsYXNzTGlzdC5hZGQoXCJ2YW5pc2hcIik7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHByZWxvYWRlckdyb3VwLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgfSwgNTAwKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBvcGVuIHNpZGUgbWVudSBpdGVtXHJcbiAgICBpZiAodXJsX3ZhcnM/LnRvZ2dsZSkge1xyXG4gICAgICBjb25zdCBwYXJlbnRMaSA9ICQoZG9jdW1lbnQpLmZpbmQoXCIuY29sbGFwc2UtaXRlbVwiKTtcclxuICAgICAgaWYgKHBhcmVudExpICYmIHBhcmVudExpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBjb25zdCBjb2xsYXBzZU1lbnUgPSBwYXJlbnRMaS5maW5kKGAjJHt1cmxfdmFycz8udG9nZ2xlfWApLFxyXG4gICAgICAgICAgY29sbGFwc2VMaW5rID0gcGFyZW50TGkuZmluZChgLm5hdi1saW5rYCksXHJcbiAgICAgICAgICBsb2NhdGlvblVybEFyciA9IGdldFVybCh3aW5kb3cubG9jYXRpb24uaHJlZiksXHJcbiAgICAgICAgICBsaW5rSHJlZiA9IGxvY2F0aW9uVXJsQXJyPy5sYXN0O1xyXG5cclxuICAgICAgICAvLyBvcGVuIGNvbGxhcHNlZCBtZW51XHJcbiAgICAgICAgY29sbGFwc2VMaW5rLnJlbW92ZUNsYXNzKFwiY29sbGFwc2VkXCIpO1xyXG4gICAgICAgIGNvbGxhcHNlTWVudS5hZGRDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgcGFyZW50TGkuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcblxyXG4gICAgICAgIC8vIHNldCBhY3RpdmUgc2lkZSBtZW51IGl0ZW0gYmFzZWQgb24gbG9jYXRpb24gaHJlZlxyXG4gICAgICAgIHBhcmVudExpLmZpbmQoYC5uYXYtbGlua2ApLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgY29uc3QgY3VycmVudCA9ICQodGhpcyksXHJcbiAgICAgICAgICAgIGN1cnJlbnRIcmVmID0gY3VycmVudC5hdHRyKFwiaHJlZlwiKTtcclxuICAgICAgICAgIGlmIChsaW5rSHJlZiA9PSBjdXJyZW50SHJlZikge1xyXG4gICAgICAgICAgICBjdXJyZW50LnBhcmVudChcIi5uYXYtaXRlbVwiKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG4gIC8vIEVORCAtIFByZWxvYWRlclxyXG5cclxuICAkKHdpbmRvdykub24oXCJsb2FkIHJlYWR5IHJlc2l6ZSBvcmllbnRhdGlvbkNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zdCBtYWluQ29pbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtYWluLm1haW4tY29udGFpbmVyXCIpLFxyXG4gICAgICBoZWFkZXJOYXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1haW4taGVhZGVyID4gbmF2Lm5hdmJhclwiKSxcclxuICAgICAgaGVhZGVyTmF2SGVpZ2h0ID1cclxuICAgICAgICBoZWFkZXJOYXYgJiYgaGVhZGVyTmF2Py5sZW5ndGggPiAwICYmIGhlYWRlck5hdi5vZmZzZXRIZWlnaHQ7XHJcbiAgICBtYWluQ29pbnRhaW5lciAmJlxyXG4gICAgKG1haW5Db2ludGFpbmVyLnN0eWxlW1wicGFkZGluZy10b3BcIl0gPSBoZWFkZXJOYXZIZWlnaHQgKyBcInB4XCIpO1xyXG5cclxuICAgIC8vIFNldCBzYW1lIGhlaWdodCBmb3IgZXZlbnRzLWl0ZW1cclxuICAgIGlmIChcclxuICAgICAgJCh3aW5kb3cpLndpZHRoKCkgPj0gNTc2ICYmXHJcbiAgICAgICQoZG9jdW1lbnQpLmZpbmQoXCIuZXZlbnQtcmVzdWx0c1wiKS5sZW5ndGggPiAwXHJcbiAgICApIHtcclxuICAgICAgJChkb2N1bWVudClcclxuICAgICAgICAuZmluZChcIi5ldmVudC1yZXN1bHRzIC5ldmVudC1pdGVtOm5vdCguZnVsbC13aWR0aClcIilcclxuICAgICAgICAuZXF1YWxIZWlnaHQoKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gbGVmdCBtYXJnaW4gZm9yIG1haW4gY29udGFpbmVyXHJcbiAgICBjb25zdCBtZW51ID0gJChkb2N1bWVudCkuZmluZChcIi5tYWluLWhlYWRlciAubmF2YmFyIC5jb250YWluZXJcIiksXHJcbiAgICAgIG1hcmdpbl9sZWZ0ID0gbWVudS5sZW5ndGggPiAwID8gbWVudS5vZmZzZXQoKS5sZWZ0IDogXCJhdXRvXCIsXHJcbiAgICAgIGhvbWVfYmFubmVyX2NvbnRlbnQgPSAkKGRvY3VtZW50KS5maW5kKFxyXG4gICAgICAgIFwiLmZlYXR1cmVzLWJhbm5lci1ob21lIC5iYW5uZXItY29udGVudC13cmFwcGVyXCJcclxuICAgICAgKTtcclxuXHJcbiAgICAvLyBob21lIGJhbm5lciBzZXQgbGVmdCBtYXJnaW5nXHJcbiAgICBpZiAoXHJcbiAgICAgICQod2luZG93KS53aWR0aCgpID49IDExNjQgJiZcclxuICAgICAgJChkb2N1bWVudCkuZmluZChcIi5ldmVudC1yZXN1bHRzXCIpLmxlbmd0aCA+IDBcclxuICAgICkge1xyXG4gICAgICBob21lX2Jhbm5lcl9jb250ZW50Lmxlbmd0aCA+IDAgJiZcclxuICAgICAgaG9tZV9iYW5uZXJfY29udGVudC5jc3Moe1wibWFyZ2luLWxlZnRcIjogbWFyZ2luX2xlZnQgKyBcInB4XCJ9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDdXN0b21pemUgaW5wdXRzXHJcbiAgICAkKCdpbnB1dFtuYW1lPVwiZGF0ZXNcIl0nKS5kYXRlcmFuZ2VwaWNrZXIoe1xyXG4gICAgICBsb2NhbGU6IHtcclxuICAgICAgICBmb3JtYXQ6IFwiWVlZWS5NTS5ERFwiLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICAkKFwiI2RhdGUtb2YtYmlydGhcIikuZGF0ZXBpY2tlcih7XHJcbiAgICAgIGRhdGVGb3JtYXQ6IFwiZGQvbW0veXlcIixcclxuICAgIH0pO1xyXG4gICAgJCgnaW5wdXRbbmFtZT1cImRhdGVzXCJdJykudmFsKFwiXCIpO1xyXG4gICAgJCgnaW5wdXRbbmFtZT1cImRhdGVzXCJdJykuYXR0cihcInBsYWNlaG9sZGVyXCIpO1xyXG5cclxuICAgICQoXCIuc2VhcmNoLXNlbGVjdFwiKS5zZWxlY3RpemUoe1xyXG4gICAgICBvbkluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKFwiI3NlbGVjdC1jb3VudHJ5LXNlbGVjdGl6ZWRcIikuYXR0cihcclxuICAgICAgICAgIFwiZGF0YS1wYXJzbGV5LWVycm9ycy1jb250YWluZXJcIixcclxuICAgICAgICAgIFwiI2Vycm9yc1wiXHJcbiAgICAgICAgKTtcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIC8qIEluaWNpYWxpemUgVG9vbHRpcCAqL1xyXG4gICAgJCgnW2RhdGEtYnMtdG9nZ2xlPVwidG9vbHRpcFwiXScpLnRvb2x0aXAoKTtcclxuXHJcbiAgICAvLyByZXBsYWNlIGluaXQgYWN0aW9uIG9uIGNvbGxhcHNlIGJ1dHRvblxyXG4gICAgJChcIi5uYXYtaXRlbVwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRJdGVtID0gJCh0aGlzKSxcclxuICAgICAgICBsaW5rID0gY3VycmVudEl0ZW0uZmluZChcIi5uYXYtbGlua1wiKSxcclxuICAgICAgICBsaW5rSHJlZiA9IGxpbmsuYXR0cihcImhyZWZcIik7XHJcblxyXG4gICAgICBpZiAoY3VycmVudEl0ZW0uaGFzQ2xhc3MoXCJjb2xsYXBzZS1pdGVtXCIpKSB7XHJcbiAgICAgICAgY29uc3QgbmV3UGF0aCA9IGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59L2Rpc3QvJHtsaW5rSHJlZn1gO1xyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gbmV3UGF0aDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyogSW5pY2lhbGl6ZSBUYWJsZXMgKi9cclxuICAgIC8vICQoJyNkdEJhc2ljRXhhbXBsZScpLkRhdGFUYWJsZSgpO1xyXG4gIH0pO1xyXG5cclxuICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmZpbHRlci10b2dnbGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoJChcIi5mb3JtLWV2ZW50cy1maWx0ZXJcIikubGVuZ3RoID4gMCkge1xyXG4gICAgICAkKFwiLmZvcm0tZXZlbnRzLWZpbHRlclwiKS50b2dnbGVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgIH1cclxuICAgIGlmICgkKFwiLmZvcm0tbmV3cy1maWx0ZXJcIikubGVuZ3RoID4gMCkge1xyXG4gICAgICAkKFwiLmZvcm0tbmV3cy1maWx0ZXJcIikudG9nZ2xlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICB9XHJcblxyXG4gIH0pO1xyXG5cclxuICBjb25zdCBldmVudF9tZW51ID0gJCgnI2V2ZW50LW5hdicpLFxyXG4gICAgbWVudV9pdGVtID0gJCgnI2V2ZW50LW5hdiAubWVudS1pdGVtIGEnKSxcclxuICAgIGV2ZW50X21lbnVfYnRuID0gJCgnLmV2ZW50LW5hdi10b2dnbGUgc3BhbicpO1xyXG4gIGlmIChldmVudF9tZW51KSB7XHJcbiAgICBsZXQgY3VycmVudF9saSA9ICQoZXZlbnRfbWVudSkuZmluZCgnbGkuYWN0aXZlPmEnKTtcclxuICAgICQoZXZlbnRfbWVudV9idG4pLnRleHQoJChjdXJyZW50X2xpKS50ZXh0KCkpO1xyXG4gIH1cclxuXHJcbiAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5ldmVudC1uYXYtdG9nZ2xlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgJCgnI2V2ZW50LW5hdicpLnRvZ2dsZUNsYXNzKCdzaG93Jyk7XHJcbiAgfSk7XHJcblxyXG5cclxuICAkKGRvY3VtZW50KS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgaWYgKCEkKGUudGFyZ2V0KS5jbG9zZXN0KFwiLmV2ZW50LW1lbnVcIikubGVuZ3RoKSB7XHJcbiAgICAgICQoJyNldmVudC1uYXYnKS5yZW1vdmVDbGFzcygnc2hvdycpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gICQobWVudV9pdGVtKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgJCgnI2V2ZW50LW5hdicpLnJlbW92ZUNsYXNzKCdzaG93Jyk7XHJcbiAgICAkKGV2ZW50X21lbnVfYnRuKS50ZXh0KCQodGhpcykudGV4dCgpKTtcclxuICB9KTtcclxuXHJcblxyXG4gICQoZnVuY3Rpb24gKCkge1xyXG4gICAgJCgnLmV2ZW50LW1lbnUgYScpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgIC8vIENoZWNrIGZvciBhY3RpdmVcclxuICAgICAgJCgnLmV2ZW50LW1lbnUgbGknKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICQodGhpcykucGFyZW50KCkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cclxuICAgICAgLy8gRGlzcGxheSBhY3RpdmUgdGFiXHJcbiAgICAgIGxldCBjdXJyZW50VGFiID0gJCh0aGlzKS5hdHRyKCdkYXRhLXRhYnMnKTtcclxuICAgICAgbGV0IGN1cnJlbnRUYWIyID0gJCh0aGlzKS5hdHRyKCdkYXRhLXRhYnMyJyk7XHJcbiAgICAgICQoJy50YWJzLWNvbnRlbnQgLnRhYi1pdGVtLWNvbnRlbnQnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICQoY3VycmVudFRhYikuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAkKGN1cnJlbnRUYWIyKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuXHJcbiAgJChkb2N1bWVudCkub24oJ21vdXNlZW50ZXInLCAnLmdlbmVyYWxfaW5mby1idXR0b24gYScsIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnN0IG5hbWUgPSAkKHRoaXMpLmRhdGEoJ2hvdmVyJyk7XHJcbiAgICAkKHRoaXMpLnRleHQobmFtZSk7XHJcbiAgfSk7XHJcblxyXG4gICQoZG9jdW1lbnQpLm9uKCdtb3VzZW91dCcsICcuZ2VuZXJhbF9pbmZvLWJ1dHRvbiBhJywgZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3QgbmFtZSA9ICQodGhpcykuZGF0YSgndmFsdWUnKTtcclxuICAgICQodGhpcykudGV4dChuYW1lKTtcclxuICB9KTtcclxuXHJcblxyXG4gICQoJyNzZWFyY2gtbWVtYmVyLWFkbWluJykuc2VsZWN0aXplKHtcclxuICAgIHNlYXJjaEZpZWxkOiBbJ3RleHQnXSxcclxuICAgIHJlbmRlcjoge1xyXG4gICAgICBvcHRpb246IGZ1bmN0aW9uIChpdGVtLCBlc2NhcGUpIHtcclxuICAgICAgICBpZiAoaXRlbS50eXBlID09ICd1c2VyJykge1xyXG4gICAgICAgICAgcmV0dXJuICc8ZGl2PjxzcGFuIGNsYXNzPVwic2VhcmNoLWltYWdlXCI+PGltZyBzcmM9XCInICsgaXRlbS5pbWFnZSArICdcIj48L3NwYW4+PHNwYW4+JyArIGl0ZW0udGV4dCArICc8L3NwYW4+PC9kaXY+JztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PSAnZXZlbnQnKSB7XHJcbiAgICAgICAgICByZXR1cm4gJzxkaXY+PHNwYW4gY2xhc3M9XCJzZWFyY2gtaW1hZ2UtZXZlbnRcIj48aW1nIHNyYz1cIicgKyBpdGVtLmltYWdlICsgJ1wiPjwvc3Bhbj48c3Bhbj4nICsgaXRlbS50ZXh0ICsgJzwvc3Bhbj48L2Rpdj4nO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuXHJcbiAgJCgnI3Nwb2tlbi1sYW5ndWFnZScpLnNlbGVjdDIoe1xyXG4gICAgICBwbGFjZWhvbGRlcjoge1xyXG4gICAgICAgIGlkOiAnLTEnLCAvLyB0aGUgdmFsdWUgb2YgdGhlIG9wdGlvblxyXG4gICAgICAgIHRleHQ6ICdBZGQgbW9yZSdcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICkub24oJ3NlbGVjdDI6Y2xvc2UnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgJCgnLnNlbGVjdDItc2VhcmNoX19maWVsZCcpLmF0dHIoJ3BsYWNlaG9sZGVyJywgJ0FkZCBtb3JlJyk7XHJcbiAgfSk7XHJcblxyXG4gICQoJy5ldmVudC1zbGlkZXInKS5zbGljayh7XHJcbiAgICBkb3RzOiB0cnVlLFxyXG4gICAgaW5maW5pdGU6IGZhbHNlLFxyXG4gICAgYXV0b3BsYXk6IGZhbHNlLFxyXG4gICAgcHJldkFycm93OiAkKCcucHJldicpLFxyXG4gICAgbmV4dEFycm93OiAkKCcubmV4dCcpLFxyXG4gICAgYXBwZW5kRG90czogJCgnLnNsaWNrLXNsaWRlci1kb3RzJyksXHJcbiAgICBzcGVlZDogMzAwLFxyXG4gICAgc2xpZGVzVG9TaG93OiA0LFxyXG4gICAgc2xpZGVzVG9TY3JvbGw6IDQsXHJcbiAgICBjdXN0b21QYWdpbmc6IGZ1bmN0aW9uIChzbGlkZXIsIGkpIHtcclxuICAgICAgbGV0IGN1cnJlbnRfaSA9IGkgKyAxO1xyXG4gICAgICBsZXQgaXRlbV9saSA9ICQoaSkubGVuZ3RoO1xyXG4gICAgICBjb25zb2xlLmxvZyhzbGlkZXIpXHJcbiAgICAgIHJldHVybiAnPGJ1dHRvbiBjbGFzcz1cInRhYlwiPicgKyBjdXJyZW50X2kgKyAnIG9mICcgKyAzICsgJzwvYnV0dG9uPic7XHJcbiAgICB9LFxyXG4gICAgcmVzcG9uc2l2ZTogW1xyXG4gICAgICB7XHJcbiAgICAgICAgYnJlYWtwb2ludDogMTQwMSxcclxuICAgICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgICAgc2xpZGVzVG9TaG93OiAzLFxyXG4gICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDMsXHJcbiAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcclxuICAgICAgICAgIGRvdHM6IHRydWVcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBicmVha3BvaW50OiAxMDI0LFxyXG4gICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICBzbGlkZXNUb1Nob3c6IDIsXHJcbiAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMlxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGJyZWFrcG9pbnQ6IDYwMCxcclxuICAgICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxyXG4gICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDFcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgLy8gWW91IGNhbiB1bnNsaWNrIGF0IGEgZ2l2ZW4gYnJlYWtwb2ludCBub3cgYnkgYWRkaW5nOlxyXG4gICAgICAvLyBzZXR0aW5nczogXCJ1bnNsaWNrXCJcclxuICAgICAgLy8gaW5zdGVhZCBvZiBhIHNldHRpbmdzIG9iamVjdFxyXG4gICAgXVxyXG4gIH0pO1xyXG5cclxuXHJcbn0pKGpRdWVyeSk7XHJcbiIsIihmdW5jdGlvbiBtYWluU2NyaXB0KCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAvKiBPZmZDYW52YXMgKi9cclxuICBjb25zdCBvZmZjYW52YXNUb2dnbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgJ1tkYXRhLWJzLXRvZ2dsZT1cIm9mZmNhbnZhc1wiXScsXHJcbiAgKTtcclxuICBjb25zdCBvZmZjYW52YXNUb2dnbGVDbG9zZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAnW2RhdGEtYnMtdG9nZ2xlPVwiY2xvc2Utb2ZmY2FudmFzXCJdJyxcclxuICApO1xyXG4gIGNvbnN0IG9mZmNhbnZhc0NvbGxhcHNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5vZmZjYW52YXMtY29sbGFwc2VcIik7XHJcblxyXG4gIG9mZmNhbnZhc1RvZ2dsZSAmJiBvZmZjYW52YXNUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnN0IGhlYWRlck5hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluLWhlYWRlciA+IG5hdi5uYXZiYXInKTtcclxuICAgIC8qIEFkZCBIZWlnaHQgb2YgbmF2YmFyICovXHJcbiAgICBpZiAoIGhlYWRlck5hdiAmJiBoZWFkZXJOYXY/Lmxlbmd0aCA+IDAgJiYgb2ZmY2FudmFzQ29sbGFwc2UuY2xhc3NMaXN0LmNvbnRhaW5zKCdvcGVuJykgKSB7XHJcbiAgICAgIG9mZmNhbnZhc0NvbGxhcHNlLnN0eWxlLnRvcCA9IDA7XHJcbiAgICB9IGVsc2UgaWYgKCBoZWFkZXJOYXYgJiYgaGVhZGVyTmF2Py5sZW5ndGggPiAwICYmICFvZmZjYW52YXNDb2xsYXBzZS5jbGFzc0xpc3QuY29udGFpbnMoJ29wZW4nKSApIHtcclxuICAgICAgY29uc29sZS5sb2coaGVhZGVyTmF2Lm9mZnNldEhlaWdodClcclxuICAgICAgb2ZmY2FudmFzQ29sbGFwc2Uuc3R5bGUudG9wID0gaGVhZGVyTmF2Lm9mZnNldEhlaWdodCsncHgnO1xyXG4gICAgfVxyXG4gICAgLy8gbWFpbiBhY3Rpb25cclxuICAgIG9mZmNhbnZhc0NvbGxhcHNlLmNsYXNzTGlzdC50b2dnbGUoXCJvcGVuXCIpO1xyXG4gICAgXHJcbiAgfSk7XHJcblxyXG4gIG9mZmNhbnZhc1RvZ2dsZUNsb3NlICYmIG9mZmNhbnZhc1RvZ2dsZUNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zdCBoZWFkZXJOYXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbi1oZWFkZXIgPiBuYXYubmF2YmFyJyk7XHJcbiAgICAvKiBBZGQgSGVpZ2h0IG9mIG5hdmJhciAqL1xyXG4gICAgaWYgKCBoZWFkZXJOYXYgJiYgaGVhZGVyTmF2Py5sZW5ndGggPiAwICYmIG9mZmNhbnZhc0NvbGxhcHNlLmNsYXNzTGlzdC5jb250YWlucygnb3BlbicpICkge1xyXG4gICAgICBvZmZjYW52YXNDb2xsYXBzZS5zdHlsZS50b3AgPSAwO1xyXG4gICAgfSBlbHNlIGlmICggaGVhZGVyTmF2ICYmIGhlYWRlck5hdj8ubGVuZ3RoID4gMCAmJiAhb2ZmY2FudmFzQ29sbGFwc2UuY2xhc3NMaXN0LmNvbnRhaW5zKCdvcGVuJykgKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGhlYWRlck5hdi5vZmZzZXRIZWlnaHQpO1xyXG4gICAgICBvZmZjYW52YXNDb2xsYXBzZS5zdHlsZS50b3AgPSBoZWFkZXJOYXYub2Zmc2V0SGVpZ2h0KydweCc7XHJcbiAgICB9XHJcbiAgICAvLyBtYWluIGFjdGlvblxyXG4gICAgb2ZmY2FudmFzQ29sbGFwc2UuY2xhc3NMaXN0LnRvZ2dsZShcIm9wZW5cIik7XHJcbiAgfSk7XHJcblxyXG4gIC8qIEhlYWRlciBTZWFyY2ggQmFyICovXHJcbiAgY29uc3Qgc2VhcmNoYmFyVG9nZ2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICdbZGF0YS1icy10b2dnbGU9XCJzZWFyY2hiYXJcIl0nLFxyXG4gICk7XHJcbiAgY29uc3Qgc2VhcmNoYmFyQ29sbGFwc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNlYXJjaGJhci1jb2xsYXBzZVwiKTtcclxuICBzZWFyY2hiYXJUb2dnbGUgJiYgc2VhcmNoYmFyVG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zdCBzZWFyY2hJbnB1dCA9IHNlYXJjaGJhckNvbGxhcHNlLnF1ZXJ5U2VsZWN0b3IoJ1t0eXBlPVwic2VhcmNoXCJdJyksXHJcbiAgICAgICAgICBoZWFkZXJOYXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbi1oZWFkZXIgPiBuYXYubmF2YmFyJyksXHJcbiAgICAgIGhlYWRlck5hdkhlaWdodCA9IGhlYWRlck5hdiAmJiBoZWFkZXJOYXYub2Zmc2V0SGVpZ2h0O1xyXG4gICAgaWYgKCBoZWFkZXJOYXYgJiYgaGVhZGVyTmF2Py5sZW5ndGggPiAwICYmIHNlYXJjaGJhckNvbGxhcHNlLmNsYXNzTGlzdC5jb250YWlucygnb3BlbicpICkge1xyXG4gICAgICBzZWFyY2hiYXJDb2xsYXBzZS5zdHlsZS50b3AgPSAwO1xyXG4gICAgfSBlbHNlIGlmICggaGVhZGVyTmF2ICYmIGhlYWRlck5hdj8ubGVuZ3RoID4gMCAmJiAhc2VhcmNoYmFyQ29sbGFwc2UuY2xhc3NMaXN0LmNvbnRhaW5zKCdvcGVuJykgKSB7XHJcbiAgICAgIHNlYXJjaGJhckNvbGxhcHNlLnN0eWxlLnRvcCA9IGhlYWRlck5hdkhlaWdodCsncHgnO1xyXG4gICAgfVxyXG4gICAgLy8gbWFpbiBhY3Rpb25cclxuICAgIHNlYXJjaGJhckNvbGxhcHNlLmNsYXNzTGlzdC50b2dnbGUoXCJvcGVuXCIpO1xyXG4gICAgc2VhcmNoSW5wdXQuZm9jdXMoKTtcclxuICB9KTtcclxuXHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24gcG9kY2FzdE1lZGlhKCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgZGVmYXVsdFNwZWVkOiAnMS4wMCcsXHJcbiAgICBsb29wOiBmYWxzZSxcclxuICAgIGZlYXR1cmVzOiBbXHJcbiAgICAgIFwicGxheXBhdXNlXCIsXHJcbiAgICAgIFwicHJvZ3Jlc3NcIixcclxuICAgICAgXCJjdXJyZW50XCIsXHJcbiAgICAgIFwiZHVyYXRpb25cIlxyXG4gICAgXVxyXG4gIH1cclxuXHJcbiAgY29uc3QgcG9kY2FzdHNQbGF5ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1lanNfX3BvZGNhc3RcIik7XHJcblxyXG4gIHBvZGNhc3RzUGxheWVyLmZvckVhY2goZnVuY3Rpb24gKHBvZGNhc3RBdWRpbykge1xyXG4gICAgbGV0IHBsYXllciA9IG5ldyBNZWRpYUVsZW1lbnRQbGF5ZXIoXHJcbiAgICAgIHBvZGNhc3RBdWRpbyxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuXHJcbiAgICAvKiAgICBjb25zb2xlLmxvZygncG9kY2FzdEF1ZGlvJywgcG9kY2FzdEF1ZGlvKTtcclxuICAgICAgIGNvbnNvbGUubG9nKCdwbGF5ZXInLCBwbGF5ZXIpOyAqL1xyXG5cclxuICAgIC8qIGNvbnN0IGVsZW1lbnRUb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgY29uc3QgZWxlbWVudEJvdHRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBlbGVtZW50VG9wLmNsYXNzTGlzdC5hZGQoJ21lanMtcHJlcGVuZGVkLWJ1dHRvbnMnKTtcclxuICAgICAgZWxlbWVudEJvdHRvbS5jbGFzc0xpc3QuYWRkKCdtZWpzLWFwcGVuZGVkLWJ1dHRvbnMnKTtcclxuXHJcbiAgICBjb25zdCBjb250cm9scyA9IHBsYXllci5jb250cm9scztcclxuXHJcbiAgICAgLy9jb25zdCBjb250cm9scyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZWpzX19jb250cm9scycpO1xyXG4gICAgICBjb250cm9scy5wcmVwZW5kKGVsZW1lbnRUb3ApO1xyXG4gICAgICBjb250cm9scy5hcHBlbmQoZWxlbWVudEJvdHRvbSk7XHJcblxyXG4gICAgICBjb25zdCBjb250cm9sc0NoaWxkcmVuID0gQXJyYXkuZnJvbShjb250cm9scy5jaGlsZE5vZGVzKS5maWx0ZXIodiA9PiB2LmNsYXNzTmFtZS5zdGFydHNXaXRoKFwibWVqc19fXCIpKTtcclxuICAgICAgY29uc29sZS5sb2coY29udHJvbHNDaGlsZHJlbilcclxuICAgICAgY29udHJvbHNDaGlsZHJlbi5zbGljZSgwLCAzKS5mb3JFYWNoKGVsZW0gPT4ge1xyXG4gICAgICAgIGVsZW1lbnRUb3AuYXBwZW5kKGVsZW0pXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY29udHJvbHNDaGlsZHJlbi5zbGljZSgzLCBjb250cm9sc0NoaWxkcmVuLmxlbmd0aCkuZm9yRWFjaChlbGVtID0+IHtcclxuICAgICAgICBlbGVtZW50Qm90dG9tLmFwcGVuZChlbGVtKVxyXG4gICAgICB9KSAqL1xyXG4gIH0pO1xyXG5cclxuICBjb25zdCBwb2RjYXN0c1BsYXllclBhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1lanNfX3BvZGNhc3QtcGFnZVwiKTtcclxuXHJcbiAgcG9kY2FzdHNQbGF5ZXJQYWdlLmZvckVhY2goZnVuY3Rpb24gKHBvZGNhc3RBdWRpbykge1xyXG4gICAgbGV0IHBsYXllciA9IG5ldyBNZWRpYUVsZW1lbnRQbGF5ZXIoXHJcbiAgICAgIHBvZGNhc3RBdWRpbyxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9KTtcclxuXHJcblxyXG5cclxufSkoKTtcclxuIiwiLyohIFNlbGVjdDIgNC4wLjEzIHwgaHR0cHM6Ly9naXRodWIuY29tL3NlbGVjdDIvc2VsZWN0Mi9ibG9iL21hc3Rlci9MSUNFTlNFLm1kICovXHJcbiFmdW5jdGlvbihuKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImpxdWVyeVwiXSxuKTpcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3JlcXVpcmUoXCJqcXVlcnlcIik6cmVxdWlyZShcImpxdWVyeVwiKShlKSksbih0KSx0fTpuKGpRdWVyeSl9KGZ1bmN0aW9uKHUpe3ZhciBlPWZ1bmN0aW9uKCl7aWYodSYmdS5mbiYmdS5mbi5zZWxlY3QyJiZ1LmZuLnNlbGVjdDIuYW1kKXZhciBlPXUuZm4uc2VsZWN0Mi5hbWQ7dmFyIHQsbixyLGgsbyxzLGYsZyxtLHYseSxfLGksYSxiO2Z1bmN0aW9uIHcoZSx0KXtyZXR1cm4gaS5jYWxsKGUsdCl9ZnVuY3Rpb24gbChlLHQpe3ZhciBuLHIsaSxvLHMsYSxsLGMsdSxkLHAsaD10JiZ0LnNwbGl0KFwiL1wiKSxmPXkubWFwLGc9ZiYmZltcIipcIl18fHt9O2lmKGUpe2ZvcihzPShlPWUuc3BsaXQoXCIvXCIpKS5sZW5ndGgtMSx5Lm5vZGVJZENvbXBhdCYmYi50ZXN0KGVbc10pJiYoZVtzXT1lW3NdLnJlcGxhY2UoYixcIlwiKSksXCIuXCI9PT1lWzBdLmNoYXJBdCgwKSYmaCYmKGU9aC5zbGljZSgwLGgubGVuZ3RoLTEpLmNvbmNhdChlKSksdT0wO3U8ZS5sZW5ndGg7dSsrKWlmKFwiLlwiPT09KHA9ZVt1XSkpZS5zcGxpY2UodSwxKSwtLXU7ZWxzZSBpZihcIi4uXCI9PT1wKXtpZigwPT09dXx8MT09PXUmJlwiLi5cIj09PWVbMl18fFwiLi5cIj09PWVbdS0xXSljb250aW51ZTswPHUmJihlLnNwbGljZSh1LTEsMiksdS09Mil9ZT1lLmpvaW4oXCIvXCIpfWlmKChofHxnKSYmZil7Zm9yKHU9KG49ZS5zcGxpdChcIi9cIikpLmxlbmd0aDswPHU7LS11KXtpZihyPW4uc2xpY2UoMCx1KS5qb2luKFwiL1wiKSxoKWZvcihkPWgubGVuZ3RoOzA8ZDstLWQpaWYoaT0oaT1mW2guc2xpY2UoMCxkKS5qb2luKFwiL1wiKV0pJiZpW3JdKXtvPWksYT11O2JyZWFrfWlmKG8pYnJlYWs7IWwmJmcmJmdbcl0mJihsPWdbcl0sYz11KX0hbyYmbCYmKG89bCxhPWMpLG8mJihuLnNwbGljZSgwLGEsbyksZT1uLmpvaW4oXCIvXCIpKX1yZXR1cm4gZX1mdW5jdGlvbiBBKHQsbil7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGU9YS5jYWxsKGFyZ3VtZW50cywwKTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgZVswXSYmMT09PWUubGVuZ3RoJiZlLnB1c2gobnVsbCkscy5hcHBseShoLGUuY29uY2F0KFt0LG5dKSl9fWZ1bmN0aW9uIHgodCl7cmV0dXJuIGZ1bmN0aW9uKGUpe21bdF09ZX19ZnVuY3Rpb24gRChlKXtpZih3KHYsZSkpe3ZhciB0PXZbZV07ZGVsZXRlIHZbZV0sX1tlXT0hMCxvLmFwcGx5KGgsdCl9aWYoIXcobSxlKSYmIXcoXyxlKSl0aHJvdyBuZXcgRXJyb3IoXCJObyBcIitlKTtyZXR1cm4gbVtlXX1mdW5jdGlvbiBjKGUpe3ZhciB0LG49ZT9lLmluZGV4T2YoXCIhXCIpOi0xO3JldHVybi0xPG4mJih0PWUuc3Vic3RyaW5nKDAsbiksZT1lLnN1YnN0cmluZyhuKzEsZS5sZW5ndGgpKSxbdCxlXX1mdW5jdGlvbiBTKGUpe3JldHVybiBlP2MoZSk6W119cmV0dXJuIGUmJmUucmVxdWlyZWpzfHwoZT9uPWU6ZT17fSxtPXt9LHY9e30seT17fSxfPXt9LGk9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxhPVtdLnNsaWNlLGI9L1xcLmpzJC8sZj1mdW5jdGlvbihlLHQpe3ZhciBuLHIsaT1jKGUpLG89aVswXSxzPXRbMV07cmV0dXJuIGU9aVsxXSxvJiYobj1EKG89bChvLHMpKSksbz9lPW4mJm4ubm9ybWFsaXplP24ubm9ybWFsaXplKGUsKHI9cyxmdW5jdGlvbihlKXtyZXR1cm4gbChlLHIpfSkpOmwoZSxzKToobz0oaT1jKGU9bChlLHMpKSlbMF0sZT1pWzFdLG8mJihuPUQobykpKSx7ZjpvP28rXCIhXCIrZTplLG46ZSxwcjpvLHA6bn19LGc9e3JlcXVpcmU6ZnVuY3Rpb24oZSl7cmV0dXJuIEEoZSl9LGV4cG9ydHM6ZnVuY3Rpb24oZSl7dmFyIHQ9bVtlXTtyZXR1cm4gdm9pZCAwIT09dD90Om1bZV09e319LG1vZHVsZTpmdW5jdGlvbihlKXtyZXR1cm57aWQ6ZSx1cmk6XCJcIixleHBvcnRzOm1bZV0sY29uZmlnOih0PWUsZnVuY3Rpb24oKXtyZXR1cm4geSYmeS5jb25maWcmJnkuY29uZmlnW3RdfHx7fX0pfTt2YXIgdH19LG89ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxzLGEsbCxjLHUsZD1bXSxwPXR5cGVvZiBuO2lmKGM9UyhyPXJ8fGUpLFwidW5kZWZpbmVkXCI9PXB8fFwiZnVuY3Rpb25cIj09cCl7Zm9yKHQ9IXQubGVuZ3RoJiZuLmxlbmd0aD9bXCJyZXF1aXJlXCIsXCJleHBvcnRzXCIsXCJtb2R1bGVcIl06dCxsPTA7bDx0Lmxlbmd0aDtsKz0xKWlmKFwicmVxdWlyZVwiPT09KG89KGE9Zih0W2xdLGMpKS5mKSlkW2xdPWcucmVxdWlyZShlKTtlbHNlIGlmKFwiZXhwb3J0c1wiPT09bylkW2xdPWcuZXhwb3J0cyhlKSx1PSEwO2Vsc2UgaWYoXCJtb2R1bGVcIj09PW8paT1kW2xdPWcubW9kdWxlKGUpO2Vsc2UgaWYodyhtLG8pfHx3KHYsbyl8fHcoXyxvKSlkW2xdPUQobyk7ZWxzZXtpZighYS5wKXRocm93IG5ldyBFcnJvcihlK1wiIG1pc3NpbmcgXCIrbyk7YS5wLmxvYWQoYS5uLEEociwhMCkseChvKSx7fSksZFtsXT1tW29dfXM9bj9uLmFwcGx5KG1bZV0sZCk6dm9pZCAwLGUmJihpJiZpLmV4cG9ydHMhPT1oJiZpLmV4cG9ydHMhPT1tW2VdP21bZV09aS5leHBvcnRzOnM9PT1oJiZ1fHwobVtlXT1zKSl9ZWxzZSBlJiYobVtlXT1uKX0sdD1uPXM9ZnVuY3Rpb24oZSx0LG4scixpKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gZ1tlXT9nW2VdKHQpOkQoZihlLFModCkpLmYpO2lmKCFlLnNwbGljZSl7aWYoKHk9ZSkuZGVwcyYmcyh5LmRlcHMseS5jYWxsYmFjayksIXQpcmV0dXJuO3Quc3BsaWNlPyhlPXQsdD1uLG49bnVsbCk6ZT1ofXJldHVybiB0PXR8fGZ1bmN0aW9uKCl7fSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYobj1yLHI9aSkscj9vKGgsZSx0LG4pOnNldFRpbWVvdXQoZnVuY3Rpb24oKXtvKGgsZSx0LG4pfSw0KSxzfSxzLmNvbmZpZz1mdW5jdGlvbihlKXtyZXR1cm4gcyhlKX0sdC5fZGVmaW5lZD1tLChyPWZ1bmN0aW9uKGUsdCxuKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJTZWUgYWxtb25kIFJFQURNRTogaW5jb3JyZWN0IG1vZHVsZSBidWlsZCwgbm8gbW9kdWxlIG5hbWVcIik7dC5zcGxpY2V8fChuPXQsdD1bXSksdyhtLGUpfHx3KHYsZSl8fCh2W2VdPVtlLHQsbl0pfSkuYW1kPXtqUXVlcnk6ITB9LGUucmVxdWlyZWpzPXQsZS5yZXF1aXJlPW4sZS5kZWZpbmU9ciksZS5kZWZpbmUoXCJhbG1vbmRcIixmdW5jdGlvbigpe30pLGUuZGVmaW5lKFwianF1ZXJ5XCIsW10sZnVuY3Rpb24oKXt2YXIgZT11fHwkO3JldHVybiBudWxsPT1lJiZjb25zb2xlJiZjb25zb2xlLmVycm9yJiZjb25zb2xlLmVycm9yKFwiU2VsZWN0MjogQW4gaW5zdGFuY2Ugb2YgalF1ZXJ5IG9yIGEgalF1ZXJ5LWNvbXBhdGlibGUgbGlicmFyeSB3YXMgbm90IGZvdW5kLiBNYWtlIHN1cmUgdGhhdCB5b3UgYXJlIGluY2x1ZGluZyBqUXVlcnkgYmVmb3JlIFNlbGVjdDIgb24geW91ciB3ZWIgcGFnZS5cIiksZX0pLGUuZGVmaW5lKFwic2VsZWN0Mi91dGlsc1wiLFtcImpxdWVyeVwiXSxmdW5jdGlvbihvKXt2YXIgaT17fTtmdW5jdGlvbiB1KGUpe3ZhciB0PWUucHJvdG90eXBlLG49W107Zm9yKHZhciByIGluIHQpe1wiZnVuY3Rpb25cIj09dHlwZW9mIHRbcl0mJlwiY29uc3RydWN0b3JcIiE9PXImJm4ucHVzaChyKX1yZXR1cm4gbn1pLkV4dGVuZD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9Lmhhc093blByb3BlcnR5O2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9Zm9yKHZhciBpIGluIHQpbi5jYWxsKHQsaSkmJihlW2ldPXRbaV0pO3JldHVybiByLnByb3RvdHlwZT10LnByb3RvdHlwZSxlLnByb3RvdHlwZT1uZXcgcixlLl9fc3VwZXJfXz10LnByb3RvdHlwZSxlfSxpLkRlY29yYXRlPWZ1bmN0aW9uKHIsaSl7dmFyIGU9dShpKSx0PXUocik7ZnVuY3Rpb24gbygpe3ZhciBlPUFycmF5LnByb3RvdHlwZS51bnNoaWZ0LHQ9aS5wcm90b3R5cGUuY29uc3RydWN0b3IubGVuZ3RoLG49ci5wcm90b3R5cGUuY29uc3RydWN0b3I7MDx0JiYoZS5jYWxsKGFyZ3VtZW50cyxyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvciksbj1pLnByb3RvdHlwZS5jb25zdHJ1Y3Rvciksbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9aS5kaXNwbGF5TmFtZT1yLmRpc3BsYXlOYW1lLG8ucHJvdG90eXBlPW5ldyBmdW5jdGlvbigpe3RoaXMuY29uc3RydWN0b3I9b307Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBzPXRbbl07by5wcm90b3R5cGVbc109ci5wcm90b3R5cGVbc119ZnVuY3Rpb24gYShlKXt2YXIgdD1mdW5jdGlvbigpe307ZSBpbiBvLnByb3RvdHlwZSYmKHQ9by5wcm90b3R5cGVbZV0pO3ZhciBuPWkucHJvdG90eXBlW2VdO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBBcnJheS5wcm90b3R5cGUudW5zaGlmdC5jYWxsKGFyZ3VtZW50cyx0KSxuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19Zm9yKHZhciBsPTA7bDxlLmxlbmd0aDtsKyspe3ZhciBjPWVbbF07by5wcm90b3R5cGVbY109YShjKX1yZXR1cm4gb307ZnVuY3Rpb24gZSgpe3RoaXMubGlzdGVuZXJzPXt9fWUucHJvdG90eXBlLm9uPWZ1bmN0aW9uKGUsdCl7dGhpcy5saXN0ZW5lcnM9dGhpcy5saXN0ZW5lcnN8fHt9LGUgaW4gdGhpcy5saXN0ZW5lcnM/dGhpcy5saXN0ZW5lcnNbZV0ucHVzaCh0KTp0aGlzLmxpc3RlbmVyc1tlXT1bdF19LGUucHJvdG90eXBlLnRyaWdnZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLG49dC5jYWxsKGFyZ3VtZW50cywxKTt0aGlzLmxpc3RlbmVycz10aGlzLmxpc3RlbmVyc3x8e30sbnVsbD09biYmKG49W10pLDA9PT1uLmxlbmd0aCYmbi5wdXNoKHt9KSwoblswXS5fdHlwZT1lKWluIHRoaXMubGlzdGVuZXJzJiZ0aGlzLmludm9rZSh0aGlzLmxpc3RlbmVyc1tlXSx0LmNhbGwoYXJndW1lbnRzLDEpKSxcIipcImluIHRoaXMubGlzdGVuZXJzJiZ0aGlzLmludm9rZSh0aGlzLmxpc3RlbmVyc1tcIipcIl0sYXJndW1lbnRzKX0sZS5wcm90b3R5cGUuaW52b2tlPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7bisrKWVbbl0uYXBwbHkodGhpcyx0KX0saS5PYnNlcnZhYmxlPWUsaS5nZW5lcmF0ZUNoYXJzPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1cIlwiLG49MDtuPGU7bisrKXt0Kz1NYXRoLmZsb29yKDM2Kk1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKDM2KX1yZXR1cm4gdH0saS5iaW5kPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKCl7ZS5hcHBseSh0LGFyZ3VtZW50cyl9fSxpLl9jb252ZXJ0RGF0YT1mdW5jdGlvbihlKXtmb3IodmFyIHQgaW4gZSl7dmFyIG49dC5zcGxpdChcIi1cIikscj1lO2lmKDEhPT1uLmxlbmd0aCl7Zm9yKHZhciBpPTA7aTxuLmxlbmd0aDtpKyspe3ZhciBvPW5baV07KG89by5zdWJzdHJpbmcoMCwxKS50b0xvd2VyQ2FzZSgpK28uc3Vic3RyaW5nKDEpKWluIHJ8fChyW29dPXt9KSxpPT1uLmxlbmd0aC0xJiYocltvXT1lW3RdKSxyPXJbb119ZGVsZXRlIGVbdF19fXJldHVybiBlfSxpLmhhc1Njcm9sbD1mdW5jdGlvbihlLHQpe3ZhciBuPW8odCkscj10LnN0eWxlLm92ZXJmbG93WCxpPXQuc3R5bGUub3ZlcmZsb3dZO3JldHVybihyIT09aXx8XCJoaWRkZW5cIiE9PWkmJlwidmlzaWJsZVwiIT09aSkmJihcInNjcm9sbFwiPT09cnx8XCJzY3JvbGxcIj09PWl8fChuLmlubmVySGVpZ2h0KCk8dC5zY3JvbGxIZWlnaHR8fG4uaW5uZXJXaWR0aCgpPHQuc2Nyb2xsV2lkdGgpKX0saS5lc2NhcGVNYXJrdXA9ZnVuY3Rpb24oZSl7dmFyIHQ9e1wiXFxcXFwiOlwiJiM5MjtcIixcIiZcIjpcIiZhbXA7XCIsXCI8XCI6XCImbHQ7XCIsXCI+XCI6XCImZ3Q7XCIsJ1wiJzpcIiZxdW90O1wiLFwiJ1wiOlwiJiMzOTtcIixcIi9cIjpcIiYjNDc7XCJ9O3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBlP2U6U3RyaW5nKGUpLnJlcGxhY2UoL1smPD5cIidcXC9cXFxcXS9nLGZ1bmN0aW9uKGUpe3JldHVybiB0W2VdfSl9LGkuYXBwZW5kTWFueT1mdW5jdGlvbihlLHQpe2lmKFwiMS43XCI9PT1vLmZuLmpxdWVyeS5zdWJzdHIoMCwzKSl7dmFyIG49bygpO28ubWFwKHQsZnVuY3Rpb24oZSl7bj1uLmFkZChlKX0pLHQ9bn1lLmFwcGVuZCh0KX0saS5fX2NhY2hlPXt9O3ZhciBuPTA7cmV0dXJuIGkuR2V0VW5pcXVlRWxlbWVudElkPWZ1bmN0aW9uKGUpe3ZhciB0PWUuZ2V0QXR0cmlidXRlKFwiZGF0YS1zZWxlY3QyLWlkXCIpO3JldHVybiBudWxsPT10JiYoZS5pZD8odD1lLmlkLGUuc2V0QXR0cmlidXRlKFwiZGF0YS1zZWxlY3QyLWlkXCIsdCkpOihlLnNldEF0dHJpYnV0ZShcImRhdGEtc2VsZWN0Mi1pZFwiLCsrbiksdD1uLnRvU3RyaW5nKCkpKSx0fSxpLlN0b3JlRGF0YT1mdW5jdGlvbihlLHQsbil7dmFyIHI9aS5HZXRVbmlxdWVFbGVtZW50SWQoZSk7aS5fX2NhY2hlW3JdfHwoaS5fX2NhY2hlW3JdPXt9KSxpLl9fY2FjaGVbcl1bdF09bn0saS5HZXREYXRhPWZ1bmN0aW9uKGUsdCl7dmFyIG49aS5HZXRVbmlxdWVFbGVtZW50SWQoZSk7cmV0dXJuIHQ/aS5fX2NhY2hlW25dJiZudWxsIT1pLl9fY2FjaGVbbl1bdF0/aS5fX2NhY2hlW25dW3RdOm8oZSkuZGF0YSh0KTppLl9fY2FjaGVbbl19LGkuUmVtb3ZlRGF0YT1mdW5jdGlvbihlKXt2YXIgdD1pLkdldFVuaXF1ZUVsZW1lbnRJZChlKTtudWxsIT1pLl9fY2FjaGVbdF0mJmRlbGV0ZSBpLl9fY2FjaGVbdF0sZS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXNlbGVjdDItaWRcIil9LGl9KSxlLmRlZmluZShcInNlbGVjdDIvcmVzdWx0c1wiLFtcImpxdWVyeVwiLFwiLi91dGlsc1wiXSxmdW5jdGlvbihoLGYpe2Z1bmN0aW9uIHIoZSx0LG4pe3RoaXMuJGVsZW1lbnQ9ZSx0aGlzLmRhdGE9bix0aGlzLm9wdGlvbnM9dCxyLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpfXJldHVybiBmLkV4dGVuZChyLGYuT2JzZXJ2YWJsZSksci5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKCl7dmFyIGU9aCgnPHVsIGNsYXNzPVwic2VsZWN0Mi1yZXN1bHRzX19vcHRpb25zXCIgcm9sZT1cImxpc3Rib3hcIj48L3VsPicpO3JldHVybiB0aGlzLm9wdGlvbnMuZ2V0KFwibXVsdGlwbGVcIikmJmUuYXR0cihcImFyaWEtbXVsdGlzZWxlY3RhYmxlXCIsXCJ0cnVlXCIpLHRoaXMuJHJlc3VsdHM9ZX0sci5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLiRyZXN1bHRzLmVtcHR5KCl9LHIucHJvdG90eXBlLmRpc3BsYXlNZXNzYWdlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMub3B0aW9ucy5nZXQoXCJlc2NhcGVNYXJrdXBcIik7dGhpcy5jbGVhcigpLHRoaXMuaGlkZUxvYWRpbmcoKTt2YXIgbj1oKCc8bGkgcm9sZT1cImFsZXJ0XCIgYXJpYS1saXZlPVwiYXNzZXJ0aXZlXCIgY2xhc3M9XCJzZWxlY3QyLXJlc3VsdHNfX29wdGlvblwiPjwvbGk+Jykscj10aGlzLm9wdGlvbnMuZ2V0KFwidHJhbnNsYXRpb25zXCIpLmdldChlLm1lc3NhZ2UpO24uYXBwZW5kKHQocihlLmFyZ3MpKSksblswXS5jbGFzc05hbWUrPVwiIHNlbGVjdDItcmVzdWx0c19fbWVzc2FnZVwiLHRoaXMuJHJlc3VsdHMuYXBwZW5kKG4pfSxyLnByb3RvdHlwZS5oaWRlTWVzc2FnZXM9ZnVuY3Rpb24oKXt0aGlzLiRyZXN1bHRzLmZpbmQoXCIuc2VsZWN0Mi1yZXN1bHRzX19tZXNzYWdlXCIpLnJlbW92ZSgpfSxyLnByb3RvdHlwZS5hcHBlbmQ9ZnVuY3Rpb24oZSl7dGhpcy5oaWRlTG9hZGluZygpO3ZhciB0PVtdO2lmKG51bGwhPWUucmVzdWx0cyYmMCE9PWUucmVzdWx0cy5sZW5ndGgpe2UucmVzdWx0cz10aGlzLnNvcnQoZS5yZXN1bHRzKTtmb3IodmFyIG49MDtuPGUucmVzdWx0cy5sZW5ndGg7bisrKXt2YXIgcj1lLnJlc3VsdHNbbl0saT10aGlzLm9wdGlvbihyKTt0LnB1c2goaSl9dGhpcy4kcmVzdWx0cy5hcHBlbmQodCl9ZWxzZSAwPT09dGhpcy4kcmVzdWx0cy5jaGlsZHJlbigpLmxlbmd0aCYmdGhpcy50cmlnZ2VyKFwicmVzdWx0czptZXNzYWdlXCIse21lc3NhZ2U6XCJub1Jlc3VsdHNcIn0pfSxyLnByb3RvdHlwZS5wb3NpdGlvbj1mdW5jdGlvbihlLHQpe3QuZmluZChcIi5zZWxlY3QyLXJlc3VsdHNcIikuYXBwZW5kKGUpfSxyLnByb3RvdHlwZS5zb3J0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm9wdGlvbnMuZ2V0KFwic29ydGVyXCIpKGUpfSxyLnByb3RvdHlwZS5oaWdobGlnaHRGaXJzdEl0ZW09ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRyZXN1bHRzLmZpbmQoXCIuc2VsZWN0Mi1yZXN1bHRzX19vcHRpb25bYXJpYS1zZWxlY3RlZF1cIiksdD1lLmZpbHRlcihcIlthcmlhLXNlbGVjdGVkPXRydWVdXCIpOzA8dC5sZW5ndGg/dC5maXJzdCgpLnRyaWdnZXIoXCJtb3VzZWVudGVyXCIpOmUuZmlyc3QoKS50cmlnZ2VyKFwibW91c2VlbnRlclwiKSx0aGlzLmVuc3VyZUhpZ2hsaWdodFZpc2libGUoKX0sci5wcm90b3R5cGUuc2V0Q2xhc3Nlcz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5kYXRhLmN1cnJlbnQoZnVuY3Rpb24oZSl7dmFyIHI9aC5tYXAoZSxmdW5jdGlvbihlKXtyZXR1cm4gZS5pZC50b1N0cmluZygpfSk7dC4kcmVzdWx0cy5maW5kKFwiLnNlbGVjdDItcmVzdWx0c19fb3B0aW9uW2FyaWEtc2VsZWN0ZWRdXCIpLmVhY2goZnVuY3Rpb24oKXt2YXIgZT1oKHRoaXMpLHQ9Zi5HZXREYXRhKHRoaXMsXCJkYXRhXCIpLG49XCJcIit0LmlkO251bGwhPXQuZWxlbWVudCYmdC5lbGVtZW50LnNlbGVjdGVkfHxudWxsPT10LmVsZW1lbnQmJi0xPGguaW5BcnJheShuLHIpP2UuYXR0cihcImFyaWEtc2VsZWN0ZWRcIixcInRydWVcIik6ZS5hdHRyKFwiYXJpYS1zZWxlY3RlZFwiLFwiZmFsc2VcIil9KX0pfSxyLnByb3RvdHlwZS5zaG93TG9hZGluZz1mdW5jdGlvbihlKXt0aGlzLmhpZGVMb2FkaW5nKCk7dmFyIHQ9e2Rpc2FibGVkOiEwLGxvYWRpbmc6ITAsdGV4dDp0aGlzLm9wdGlvbnMuZ2V0KFwidHJhbnNsYXRpb25zXCIpLmdldChcInNlYXJjaGluZ1wiKShlKX0sbj10aGlzLm9wdGlvbih0KTtuLmNsYXNzTmFtZSs9XCIgbG9hZGluZy1yZXN1bHRzXCIsdGhpcy4kcmVzdWx0cy5wcmVwZW5kKG4pfSxyLnByb3RvdHlwZS5oaWRlTG9hZGluZz1mdW5jdGlvbigpe3RoaXMuJHJlc3VsdHMuZmluZChcIi5sb2FkaW5nLXJlc3VsdHNcIikucmVtb3ZlKCl9LHIucHJvdG90eXBlLm9wdGlvbj1mdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7dC5jbGFzc05hbWU9XCJzZWxlY3QyLXJlc3VsdHNfX29wdGlvblwiO3ZhciBuPXtyb2xlOlwib3B0aW9uXCIsXCJhcmlhLXNlbGVjdGVkXCI6XCJmYWxzZVwifSxyPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzfHx3aW5kb3cuRWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3J8fHdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3I7Zm9yKHZhciBpIGluKG51bGwhPWUuZWxlbWVudCYmci5jYWxsKGUuZWxlbWVudCxcIjpkaXNhYmxlZFwiKXx8bnVsbD09ZS5lbGVtZW50JiZlLmRpc2FibGVkKSYmKGRlbGV0ZSBuW1wiYXJpYS1zZWxlY3RlZFwiXSxuW1wiYXJpYS1kaXNhYmxlZFwiXT1cInRydWVcIiksbnVsbD09ZS5pZCYmZGVsZXRlIG5bXCJhcmlhLXNlbGVjdGVkXCJdLG51bGwhPWUuX3Jlc3VsdElkJiYodC5pZD1lLl9yZXN1bHRJZCksZS50aXRsZSYmKHQudGl0bGU9ZS50aXRsZSksZS5jaGlsZHJlbiYmKG4ucm9sZT1cImdyb3VwXCIsbltcImFyaWEtbGFiZWxcIl09ZS50ZXh0LGRlbGV0ZSBuW1wiYXJpYS1zZWxlY3RlZFwiXSksbil7dmFyIG89bltpXTt0LnNldEF0dHJpYnV0ZShpLG8pfWlmKGUuY2hpbGRyZW4pe3ZhciBzPWgodCksYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3Ryb25nXCIpO2EuY2xhc3NOYW1lPVwic2VsZWN0Mi1yZXN1bHRzX19ncm91cFwiO2goYSk7dGhpcy50ZW1wbGF0ZShlLGEpO2Zvcih2YXIgbD1bXSxjPTA7YzxlLmNoaWxkcmVuLmxlbmd0aDtjKyspe3ZhciB1PWUuY2hpbGRyZW5bY10sZD10aGlzLm9wdGlvbih1KTtsLnB1c2goZCl9dmFyIHA9aChcIjx1bD48L3VsPlwiLHtjbGFzczpcInNlbGVjdDItcmVzdWx0c19fb3B0aW9ucyBzZWxlY3QyLXJlc3VsdHNfX29wdGlvbnMtLW5lc3RlZFwifSk7cC5hcHBlbmQobCkscy5hcHBlbmQoYSkscy5hcHBlbmQocCl9ZWxzZSB0aGlzLnRlbXBsYXRlKGUsdCk7cmV0dXJuIGYuU3RvcmVEYXRhKHQsXCJkYXRhXCIsZSksdH0sci5wcm90b3R5cGUuYmluZD1mdW5jdGlvbih0LGUpe3ZhciBsPXRoaXMsbj10LmlkK1wiLXJlc3VsdHNcIjt0aGlzLiRyZXN1bHRzLmF0dHIoXCJpZFwiLG4pLHQub24oXCJyZXN1bHRzOmFsbFwiLGZ1bmN0aW9uKGUpe2wuY2xlYXIoKSxsLmFwcGVuZChlLmRhdGEpLHQuaXNPcGVuKCkmJihsLnNldENsYXNzZXMoKSxsLmhpZ2hsaWdodEZpcnN0SXRlbSgpKX0pLHQub24oXCJyZXN1bHRzOmFwcGVuZFwiLGZ1bmN0aW9uKGUpe2wuYXBwZW5kKGUuZGF0YSksdC5pc09wZW4oKSYmbC5zZXRDbGFzc2VzKCl9KSx0Lm9uKFwicXVlcnlcIixmdW5jdGlvbihlKXtsLmhpZGVNZXNzYWdlcygpLGwuc2hvd0xvYWRpbmcoZSl9KSx0Lm9uKFwic2VsZWN0XCIsZnVuY3Rpb24oKXt0LmlzT3BlbigpJiYobC5zZXRDbGFzc2VzKCksbC5vcHRpb25zLmdldChcInNjcm9sbEFmdGVyU2VsZWN0XCIpJiZsLmhpZ2hsaWdodEZpcnN0SXRlbSgpKX0pLHQub24oXCJ1bnNlbGVjdFwiLGZ1bmN0aW9uKCl7dC5pc09wZW4oKSYmKGwuc2V0Q2xhc3NlcygpLGwub3B0aW9ucy5nZXQoXCJzY3JvbGxBZnRlclNlbGVjdFwiKSYmbC5oaWdobGlnaHRGaXJzdEl0ZW0oKSl9KSx0Lm9uKFwib3BlblwiLGZ1bmN0aW9uKCl7bC4kcmVzdWx0cy5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLFwidHJ1ZVwiKSxsLiRyZXN1bHRzLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIiksbC5zZXRDbGFzc2VzKCksbC5lbnN1cmVIaWdobGlnaHRWaXNpYmxlKCl9KSx0Lm9uKFwiY2xvc2VcIixmdW5jdGlvbigpe2wuJHJlc3VsdHMuYXR0cihcImFyaWEtZXhwYW5kZWRcIixcImZhbHNlXCIpLGwuJHJlc3VsdHMuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpLGwuJHJlc3VsdHMucmVtb3ZlQXR0cihcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiKX0pLHQub24oXCJyZXN1bHRzOnRvZ2dsZVwiLGZ1bmN0aW9uKCl7dmFyIGU9bC5nZXRIaWdobGlnaHRlZFJlc3VsdHMoKTswIT09ZS5sZW5ndGgmJmUudHJpZ2dlcihcIm1vdXNldXBcIil9KSx0Lm9uKFwicmVzdWx0czpzZWxlY3RcIixmdW5jdGlvbigpe3ZhciBlPWwuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzKCk7aWYoMCE9PWUubGVuZ3RoKXt2YXIgdD1mLkdldERhdGEoZVswXSxcImRhdGFcIik7XCJ0cnVlXCI9PWUuYXR0cihcImFyaWEtc2VsZWN0ZWRcIik/bC50cmlnZ2VyKFwiY2xvc2VcIix7fSk6bC50cmlnZ2VyKFwic2VsZWN0XCIse2RhdGE6dH0pfX0pLHQub24oXCJyZXN1bHRzOnByZXZpb3VzXCIsZnVuY3Rpb24oKXt2YXIgZT1sLmdldEhpZ2hsaWdodGVkUmVzdWx0cygpLHQ9bC4kcmVzdWx0cy5maW5kKFwiW2FyaWEtc2VsZWN0ZWRdXCIpLG49dC5pbmRleChlKTtpZighKG48PTApKXt2YXIgcj1uLTE7MD09PWUubGVuZ3RoJiYocj0wKTt2YXIgaT10LmVxKHIpO2kudHJpZ2dlcihcIm1vdXNlZW50ZXJcIik7dmFyIG89bC4kcmVzdWx0cy5vZmZzZXQoKS50b3Ascz1pLm9mZnNldCgpLnRvcCxhPWwuJHJlc3VsdHMuc2Nyb2xsVG9wKCkrKHMtbyk7MD09PXI/bC4kcmVzdWx0cy5zY3JvbGxUb3AoMCk6cy1vPDAmJmwuJHJlc3VsdHMuc2Nyb2xsVG9wKGEpfX0pLHQub24oXCJyZXN1bHRzOm5leHRcIixmdW5jdGlvbigpe3ZhciBlPWwuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzKCksdD1sLiRyZXN1bHRzLmZpbmQoXCJbYXJpYS1zZWxlY3RlZF1cIiksbj10LmluZGV4KGUpKzE7aWYoIShuPj10Lmxlbmd0aCkpe3ZhciByPXQuZXEobik7ci50cmlnZ2VyKFwibW91c2VlbnRlclwiKTt2YXIgaT1sLiRyZXN1bHRzLm9mZnNldCgpLnRvcCtsLiRyZXN1bHRzLm91dGVySGVpZ2h0KCExKSxvPXIub2Zmc2V0KCkudG9wK3Iub3V0ZXJIZWlnaHQoITEpLHM9bC4kcmVzdWx0cy5zY3JvbGxUb3AoKStvLWk7MD09PW4/bC4kcmVzdWx0cy5zY3JvbGxUb3AoMCk6aTxvJiZsLiRyZXN1bHRzLnNjcm9sbFRvcChzKX19KSx0Lm9uKFwicmVzdWx0czpmb2N1c1wiLGZ1bmN0aW9uKGUpe2UuZWxlbWVudC5hZGRDbGFzcyhcInNlbGVjdDItcmVzdWx0c19fb3B0aW9uLS1oaWdobGlnaHRlZFwiKX0pLHQub24oXCJyZXN1bHRzOm1lc3NhZ2VcIixmdW5jdGlvbihlKXtsLmRpc3BsYXlNZXNzYWdlKGUpfSksaC5mbi5tb3VzZXdoZWVsJiZ0aGlzLiRyZXN1bHRzLm9uKFwibW91c2V3aGVlbFwiLGZ1bmN0aW9uKGUpe3ZhciB0PWwuJHJlc3VsdHMuc2Nyb2xsVG9wKCksbj1sLiRyZXN1bHRzLmdldCgwKS5zY3JvbGxIZWlnaHQtdCtlLmRlbHRhWSxyPTA8ZS5kZWx0YVkmJnQtZS5kZWx0YVk8PTAsaT1lLmRlbHRhWTwwJiZuPD1sLiRyZXN1bHRzLmhlaWdodCgpO3I/KGwuJHJlc3VsdHMuc2Nyb2xsVG9wKDApLGUucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpKTppJiYobC4kcmVzdWx0cy5zY3JvbGxUb3AobC4kcmVzdWx0cy5nZXQoMCkuc2Nyb2xsSGVpZ2h0LWwuJHJlc3VsdHMuaGVpZ2h0KCkpLGUucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpKX0pLHRoaXMuJHJlc3VsdHMub24oXCJtb3VzZXVwXCIsXCIuc2VsZWN0Mi1yZXN1bHRzX19vcHRpb25bYXJpYS1zZWxlY3RlZF1cIixmdW5jdGlvbihlKXt2YXIgdD1oKHRoaXMpLG49Zi5HZXREYXRhKHRoaXMsXCJkYXRhXCIpO1widHJ1ZVwiIT09dC5hdHRyKFwiYXJpYS1zZWxlY3RlZFwiKT9sLnRyaWdnZXIoXCJzZWxlY3RcIix7b3JpZ2luYWxFdmVudDplLGRhdGE6bn0pOmwub3B0aW9ucy5nZXQoXCJtdWx0aXBsZVwiKT9sLnRyaWdnZXIoXCJ1bnNlbGVjdFwiLHtvcmlnaW5hbEV2ZW50OmUsZGF0YTpufSk6bC50cmlnZ2VyKFwiY2xvc2VcIix7fSl9KSx0aGlzLiRyZXN1bHRzLm9uKFwibW91c2VlbnRlclwiLFwiLnNlbGVjdDItcmVzdWx0c19fb3B0aW9uW2FyaWEtc2VsZWN0ZWRdXCIsZnVuY3Rpb24oZSl7dmFyIHQ9Zi5HZXREYXRhKHRoaXMsXCJkYXRhXCIpO2wuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzKCkucmVtb3ZlQ2xhc3MoXCJzZWxlY3QyLXJlc3VsdHNfX29wdGlvbi0taGlnaGxpZ2h0ZWRcIiksbC50cmlnZ2VyKFwicmVzdWx0czpmb2N1c1wiLHtkYXRhOnQsZWxlbWVudDpoKHRoaXMpfSl9KX0sci5wcm90b3R5cGUuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJHJlc3VsdHMuZmluZChcIi5zZWxlY3QyLXJlc3VsdHNfX29wdGlvbi0taGlnaGxpZ2h0ZWRcIil9LHIucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt0aGlzLiRyZXN1bHRzLnJlbW92ZSgpfSxyLnByb3RvdHlwZS5lbnN1cmVIaWdobGlnaHRWaXNpYmxlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5nZXRIaWdobGlnaHRlZFJlc3VsdHMoKTtpZigwIT09ZS5sZW5ndGgpe3ZhciB0PXRoaXMuJHJlc3VsdHMuZmluZChcIlthcmlhLXNlbGVjdGVkXVwiKS5pbmRleChlKSxuPXRoaXMuJHJlc3VsdHMub2Zmc2V0KCkudG9wLHI9ZS5vZmZzZXQoKS50b3AsaT10aGlzLiRyZXN1bHRzLnNjcm9sbFRvcCgpKyhyLW4pLG89ci1uO2ktPTIqZS5vdXRlckhlaWdodCghMSksdDw9Mj90aGlzLiRyZXN1bHRzLnNjcm9sbFRvcCgwKToobz50aGlzLiRyZXN1bHRzLm91dGVySGVpZ2h0KCl8fG88MCkmJnRoaXMuJHJlc3VsdHMuc2Nyb2xsVG9wKGkpfX0sci5wcm90b3R5cGUudGVtcGxhdGU9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLm9wdGlvbnMuZ2V0KFwidGVtcGxhdGVSZXN1bHRcIikscj10aGlzLm9wdGlvbnMuZ2V0KFwiZXNjYXBlTWFya3VwXCIpLGk9bihlLHQpO251bGw9PWk/dC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiOlwic3RyaW5nXCI9PXR5cGVvZiBpP3QuaW5uZXJIVE1MPXIoaSk6aCh0KS5hcHBlbmQoaSl9LHJ9KSxlLmRlZmluZShcInNlbGVjdDIva2V5c1wiLFtdLGZ1bmN0aW9uKCl7cmV0dXJue0JBQ0tTUEFDRTo4LFRBQjo5LEVOVEVSOjEzLFNISUZUOjE2LENUUkw6MTcsQUxUOjE4LEVTQzoyNyxTUEFDRTozMixQQUdFX1VQOjMzLFBBR0VfRE9XTjozNCxFTkQ6MzUsSE9NRTozNixMRUZUOjM3LFVQOjM4LFJJR0hUOjM5LERPV046NDAsREVMRVRFOjQ2fX0pLGUuZGVmaW5lKFwic2VsZWN0Mi9zZWxlY3Rpb24vYmFzZVwiLFtcImpxdWVyeVwiLFwiLi4vdXRpbHNcIixcIi4uL2tleXNcIl0sZnVuY3Rpb24obixyLGkpe2Z1bmN0aW9uIG8oZSx0KXt0aGlzLiRlbGVtZW50PWUsdGhpcy5vcHRpb25zPXQsby5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKX1yZXR1cm4gci5FeHRlbmQobyxyLk9ic2VydmFibGUpLG8ucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbigpe3ZhciBlPW4oJzxzcGFuIGNsYXNzPVwic2VsZWN0Mi1zZWxlY3Rpb25cIiByb2xlPVwiY29tYm9ib3hcIiAgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj48L3NwYW4+Jyk7cmV0dXJuIHRoaXMuX3RhYmluZGV4PTAsbnVsbCE9ci5HZXREYXRhKHRoaXMuJGVsZW1lbnRbMF0sXCJvbGQtdGFiaW5kZXhcIik/dGhpcy5fdGFiaW5kZXg9ci5HZXREYXRhKHRoaXMuJGVsZW1lbnRbMF0sXCJvbGQtdGFiaW5kZXhcIik6bnVsbCE9dGhpcy4kZWxlbWVudC5hdHRyKFwidGFiaW5kZXhcIikmJih0aGlzLl90YWJpbmRleD10aGlzLiRlbGVtZW50LmF0dHIoXCJ0YWJpbmRleFwiKSksZS5hdHRyKFwidGl0bGVcIix0aGlzLiRlbGVtZW50LmF0dHIoXCJ0aXRsZVwiKSksZS5hdHRyKFwidGFiaW5kZXhcIix0aGlzLl90YWJpbmRleCksZS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwiZmFsc2VcIiksdGhpcy4kc2VsZWN0aW9uPWV9LG8ucHJvdG90eXBlLmJpbmQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLHI9ZS5pZCtcIi1yZXN1bHRzXCI7dGhpcy5jb250YWluZXI9ZSx0aGlzLiRzZWxlY3Rpb24ub24oXCJmb2N1c1wiLGZ1bmN0aW9uKGUpe24udHJpZ2dlcihcImZvY3VzXCIsZSl9KSx0aGlzLiRzZWxlY3Rpb24ub24oXCJibHVyXCIsZnVuY3Rpb24oZSl7bi5faGFuZGxlQmx1cihlKX0pLHRoaXMuJHNlbGVjdGlvbi5vbihcImtleWRvd25cIixmdW5jdGlvbihlKXtuLnRyaWdnZXIoXCJrZXlwcmVzc1wiLGUpLGUud2hpY2g9PT1pLlNQQUNFJiZlLnByZXZlbnREZWZhdWx0KCl9KSxlLm9uKFwicmVzdWx0czpmb2N1c1wiLGZ1bmN0aW9uKGUpe24uJHNlbGVjdGlvbi5hdHRyKFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCIsZS5kYXRhLl9yZXN1bHRJZCl9KSxlLm9uKFwic2VsZWN0aW9uOnVwZGF0ZVwiLGZ1bmN0aW9uKGUpe24udXBkYXRlKGUuZGF0YSl9KSxlLm9uKFwib3BlblwiLGZ1bmN0aW9uKCl7bi4kc2VsZWN0aW9uLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsXCJ0cnVlXCIpLG4uJHNlbGVjdGlvbi5hdHRyKFwiYXJpYS1vd25zXCIsciksbi5fYXR0YWNoQ2xvc2VIYW5kbGVyKGUpfSksZS5vbihcImNsb3NlXCIsZnVuY3Rpb24oKXtuLiRzZWxlY3Rpb24uYXR0cihcImFyaWEtZXhwYW5kZWRcIixcImZhbHNlXCIpLG4uJHNlbGVjdGlvbi5yZW1vdmVBdHRyKFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCIpLG4uJHNlbGVjdGlvbi5yZW1vdmVBdHRyKFwiYXJpYS1vd25zXCIpLG4uJHNlbGVjdGlvbi50cmlnZ2VyKFwiZm9jdXNcIiksbi5fZGV0YWNoQ2xvc2VIYW5kbGVyKGUpfSksZS5vbihcImVuYWJsZVwiLGZ1bmN0aW9uKCl7bi4kc2VsZWN0aW9uLmF0dHIoXCJ0YWJpbmRleFwiLG4uX3RhYmluZGV4KSxuLiRzZWxlY3Rpb24uYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpfSksZS5vbihcImRpc2FibGVcIixmdW5jdGlvbigpe24uJHNlbGVjdGlvbi5hdHRyKFwidGFiaW5kZXhcIixcIi0xXCIpLG4uJHNlbGVjdGlvbi5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwidHJ1ZVwiKX0pfSxvLnByb3RvdHlwZS5faGFuZGxlQmx1cj1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3dpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZG9jdW1lbnQuYWN0aXZlRWxlbWVudD09dC4kc2VsZWN0aW9uWzBdfHxuLmNvbnRhaW5zKHQuJHNlbGVjdGlvblswXSxkb2N1bWVudC5hY3RpdmVFbGVtZW50KXx8dC50cmlnZ2VyKFwiYmx1clwiLGUpfSwxKX0sby5wcm90b3R5cGUuX2F0dGFjaENsb3NlSGFuZGxlcj1mdW5jdGlvbihlKXtuKGRvY3VtZW50LmJvZHkpLm9uKFwibW91c2Vkb3duLnNlbGVjdDIuXCIrZS5pZCxmdW5jdGlvbihlKXt2YXIgdD1uKGUudGFyZ2V0KS5jbG9zZXN0KFwiLnNlbGVjdDJcIik7bihcIi5zZWxlY3QyLnNlbGVjdDItY29udGFpbmVyLS1vcGVuXCIpLmVhY2goZnVuY3Rpb24oKXt0aGlzIT10WzBdJiZyLkdldERhdGEodGhpcyxcImVsZW1lbnRcIikuc2VsZWN0MihcImNsb3NlXCIpfSl9KX0sby5wcm90b3R5cGUuX2RldGFjaENsb3NlSGFuZGxlcj1mdW5jdGlvbihlKXtuKGRvY3VtZW50LmJvZHkpLm9mZihcIm1vdXNlZG93bi5zZWxlY3QyLlwiK2UuaWQpfSxvLnByb3RvdHlwZS5wb3NpdGlvbj1mdW5jdGlvbihlLHQpe3QuZmluZChcIi5zZWxlY3Rpb25cIikuYXBwZW5kKGUpfSxvLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dGhpcy5fZGV0YWNoQ2xvc2VIYW5kbGVyKHRoaXMuY29udGFpbmVyKX0sby5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcIlRoZSBgdXBkYXRlYCBtZXRob2QgbXVzdCBiZSBkZWZpbmVkIGluIGNoaWxkIGNsYXNzZXMuXCIpfSxvLnByb3RvdHlwZS5pc0VuYWJsZWQ9ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5pc0Rpc2FibGVkKCl9LG8ucHJvdG90eXBlLmlzRGlzYWJsZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vcHRpb25zLmdldChcImRpc2FibGVkXCIpfSxvfSksZS5kZWZpbmUoXCJzZWxlY3QyL3NlbGVjdGlvbi9zaW5nbGVcIixbXCJqcXVlcnlcIixcIi4vYmFzZVwiLFwiLi4vdXRpbHNcIixcIi4uL2tleXNcIl0sZnVuY3Rpb24oZSx0LG4scil7ZnVuY3Rpb24gaSgpe2kuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gbi5FeHRlbmQoaSx0KSxpLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oKXt2YXIgZT1pLl9fc3VwZXJfXy5yZW5kZXIuY2FsbCh0aGlzKTtyZXR1cm4gZS5hZGRDbGFzcyhcInNlbGVjdDItc2VsZWN0aW9uLS1zaW5nbGVcIiksZS5odG1sKCc8c3BhbiBjbGFzcz1cInNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZFwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cInNlbGVjdDItc2VsZWN0aW9uX19hcnJvd1wiIHJvbGU9XCJwcmVzZW50YXRpb25cIj48YiByb2xlPVwicHJlc2VudGF0aW9uXCI+PC9iPjwvc3Bhbj4nKSxlfSxpLnByb3RvdHlwZS5iaW5kPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztpLl9fc3VwZXJfXy5iaW5kLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgcj10LmlkK1wiLWNvbnRhaW5lclwiO3RoaXMuJHNlbGVjdGlvbi5maW5kKFwiLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZFwiKS5hdHRyKFwiaWRcIixyKS5hdHRyKFwicm9sZVwiLFwidGV4dGJveFwiKS5hdHRyKFwiYXJpYS1yZWFkb25seVwiLFwidHJ1ZVwiKSx0aGlzLiRzZWxlY3Rpb24uYXR0cihcImFyaWEtbGFiZWxsZWRieVwiLHIpLHRoaXMuJHNlbGVjdGlvbi5vbihcIm1vdXNlZG93blwiLGZ1bmN0aW9uKGUpezE9PT1lLndoaWNoJiZuLnRyaWdnZXIoXCJ0b2dnbGVcIix7b3JpZ2luYWxFdmVudDplfSl9KSx0aGlzLiRzZWxlY3Rpb24ub24oXCJmb2N1c1wiLGZ1bmN0aW9uKGUpe30pLHRoaXMuJHNlbGVjdGlvbi5vbihcImJsdXJcIixmdW5jdGlvbihlKXt9KSx0Lm9uKFwiZm9jdXNcIixmdW5jdGlvbihlKXt0LmlzT3BlbigpfHxuLiRzZWxlY3Rpb24udHJpZ2dlcihcImZvY3VzXCIpfSl9LGkucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kc2VsZWN0aW9uLmZpbmQoXCIuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkXCIpO2UuZW1wdHkoKSxlLnJlbW92ZUF0dHIoXCJ0aXRsZVwiKX0saS5wcm90b3R5cGUuZGlzcGxheT1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMub3B0aW9ucy5nZXQoXCJ0ZW1wbGF0ZVNlbGVjdGlvblwiKTtyZXR1cm4gdGhpcy5vcHRpb25zLmdldChcImVzY2FwZU1hcmt1cFwiKShuKGUsdCkpfSxpLnByb3RvdHlwZS5zZWxlY3Rpb25Db250YWluZXI9ZnVuY3Rpb24oKXtyZXR1cm4gZShcIjxzcGFuPjwvc3Bhbj5cIil9LGkucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbihlKXtpZigwIT09ZS5sZW5ndGgpe3ZhciB0PWVbMF0sbj10aGlzLiRzZWxlY3Rpb24uZmluZChcIi5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWRcIikscj10aGlzLmRpc3BsYXkodCxuKTtuLmVtcHR5KCkuYXBwZW5kKHIpO3ZhciBpPXQudGl0bGV8fHQudGV4dDtpP24uYXR0cihcInRpdGxlXCIsaSk6bi5yZW1vdmVBdHRyKFwidGl0bGVcIil9ZWxzZSB0aGlzLmNsZWFyKCl9LGl9KSxlLmRlZmluZShcInNlbGVjdDIvc2VsZWN0aW9uL211bHRpcGxlXCIsW1wianF1ZXJ5XCIsXCIuL2Jhc2VcIixcIi4uL3V0aWxzXCJdLGZ1bmN0aW9uKGksZSxsKXtmdW5jdGlvbiBuKGUsdCl7bi5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBsLkV4dGVuZChuLGUpLG4ucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbigpe3ZhciBlPW4uX19zdXBlcl9fLnJlbmRlci5jYWxsKHRoaXMpO3JldHVybiBlLmFkZENsYXNzKFwic2VsZWN0Mi1zZWxlY3Rpb24tLW11bHRpcGxlXCIpLGUuaHRtbCgnPHVsIGNsYXNzPVwic2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkXCI+PC91bD4nKSxlfSxuLnByb3RvdHlwZS5iaW5kPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztuLl9fc3VwZXJfXy5iaW5kLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLiRzZWxlY3Rpb24ub24oXCJjbGlja1wiLGZ1bmN0aW9uKGUpe3IudHJpZ2dlcihcInRvZ2dsZVwiLHtvcmlnaW5hbEV2ZW50OmV9KX0pLHRoaXMuJHNlbGVjdGlvbi5vbihcImNsaWNrXCIsXCIuc2VsZWN0Mi1zZWxlY3Rpb25fX2Nob2ljZV9fcmVtb3ZlXCIsZnVuY3Rpb24oZSl7aWYoIXIuaXNEaXNhYmxlZCgpKXt2YXIgdD1pKHRoaXMpLnBhcmVudCgpLG49bC5HZXREYXRhKHRbMF0sXCJkYXRhXCIpO3IudHJpZ2dlcihcInVuc2VsZWN0XCIse29yaWdpbmFsRXZlbnQ6ZSxkYXRhOm59KX19KX0sbi5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRzZWxlY3Rpb24uZmluZChcIi5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWRcIik7ZS5lbXB0eSgpLGUucmVtb3ZlQXR0cihcInRpdGxlXCIpfSxuLnByb3RvdHlwZS5kaXNwbGF5PWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5vcHRpb25zLmdldChcInRlbXBsYXRlU2VsZWN0aW9uXCIpO3JldHVybiB0aGlzLm9wdGlvbnMuZ2V0KFwiZXNjYXBlTWFya3VwXCIpKG4oZSx0KSl9LG4ucHJvdG90eXBlLnNlbGVjdGlvbkNvbnRhaW5lcj1mdW5jdGlvbigpe3JldHVybiBpKCc8bGkgY2xhc3M9XCJzZWxlY3QyLXNlbGVjdGlvbl9fY2hvaWNlXCI+PHNwYW4gY2xhc3M9XCJzZWxlY3QyLXNlbGVjdGlvbl9fY2hvaWNlX19yZW1vdmVcIiByb2xlPVwicHJlc2VudGF0aW9uXCI+JnRpbWVzOzwvc3Bhbj48L2xpPicpfSxuLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oZSl7aWYodGhpcy5jbGVhcigpLDAhPT1lLmxlbmd0aCl7Zm9yKHZhciB0PVtdLG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXSxpPXRoaXMuc2VsZWN0aW9uQ29udGFpbmVyKCksbz10aGlzLmRpc3BsYXkocixpKTtpLmFwcGVuZChvKTt2YXIgcz1yLnRpdGxlfHxyLnRleHQ7cyYmaS5hdHRyKFwidGl0bGVcIixzKSxsLlN0b3JlRGF0YShpWzBdLFwiZGF0YVwiLHIpLHQucHVzaChpKX12YXIgYT10aGlzLiRzZWxlY3Rpb24uZmluZChcIi5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWRcIik7bC5hcHBlbmRNYW55KGEsdCl9fSxufSksZS5kZWZpbmUoXCJzZWxlY3QyL3NlbGVjdGlvbi9wbGFjZWhvbGRlclwiLFtcIi4uL3V0aWxzXCJdLGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSx0LG4pe3RoaXMucGxhY2Vob2xkZXI9dGhpcy5ub3JtYWxpemVQbGFjZWhvbGRlcihuLmdldChcInBsYWNlaG9sZGVyXCIpKSxlLmNhbGwodGhpcyx0LG4pfXJldHVybiB0LnByb3RvdHlwZS5ub3JtYWxpemVQbGFjZWhvbGRlcj1mdW5jdGlvbihlLHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD17aWQ6XCJcIix0ZXh0OnR9KSx0fSx0LnByb3RvdHlwZS5jcmVhdGVQbGFjZWhvbGRlcj1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuc2VsZWN0aW9uQ29udGFpbmVyKCk7cmV0dXJuIG4uaHRtbCh0aGlzLmRpc3BsYXkodCkpLG4uYWRkQ2xhc3MoXCJzZWxlY3QyLXNlbGVjdGlvbl9fcGxhY2Vob2xkZXJcIikucmVtb3ZlQ2xhc3MoXCJzZWxlY3QyLXNlbGVjdGlvbl9fY2hvaWNlXCIpLG59LHQucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbihlLHQpe3ZhciBuPTE9PXQubGVuZ3RoJiZ0WzBdLmlkIT10aGlzLnBsYWNlaG9sZGVyLmlkO2lmKDE8dC5sZW5ndGh8fG4pcmV0dXJuIGUuY2FsbCh0aGlzLHQpO3RoaXMuY2xlYXIoKTt2YXIgcj10aGlzLmNyZWF0ZVBsYWNlaG9sZGVyKHRoaXMucGxhY2Vob2xkZXIpO3RoaXMuJHNlbGVjdGlvbi5maW5kKFwiLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZFwiKS5hcHBlbmQocil9LHR9KSxlLmRlZmluZShcInNlbGVjdDIvc2VsZWN0aW9uL2FsbG93Q2xlYXJcIixbXCJqcXVlcnlcIixcIi4uL2tleXNcIixcIi4uL3V0aWxzXCJdLGZ1bmN0aW9uKGkscixhKXtmdW5jdGlvbiBlKCl7fXJldHVybiBlLnByb3RvdHlwZS5iaW5kPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzO2UuY2FsbCh0aGlzLHQsbiksbnVsbD09dGhpcy5wbGFjZWhvbGRlciYmdGhpcy5vcHRpb25zLmdldChcImRlYnVnXCIpJiZ3aW5kb3cuY29uc29sZSYmY29uc29sZS5lcnJvciYmY29uc29sZS5lcnJvcihcIlNlbGVjdDI6IFRoZSBgYWxsb3dDbGVhcmAgb3B0aW9uIHNob3VsZCBiZSB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggdGhlIGBwbGFjZWhvbGRlcmAgb3B0aW9uLlwiKSx0aGlzLiRzZWxlY3Rpb24ub24oXCJtb3VzZWRvd25cIixcIi5zZWxlY3QyLXNlbGVjdGlvbl9fY2xlYXJcIixmdW5jdGlvbihlKXtyLl9oYW5kbGVDbGVhcihlKX0pLHQub24oXCJrZXlwcmVzc1wiLGZ1bmN0aW9uKGUpe3IuX2hhbmRsZUtleWJvYXJkQ2xlYXIoZSx0KX0pfSxlLnByb3RvdHlwZS5faGFuZGxlQ2xlYXI9ZnVuY3Rpb24oZSx0KXtpZighdGhpcy5pc0Rpc2FibGVkKCkpe3ZhciBuPXRoaXMuJHNlbGVjdGlvbi5maW5kKFwiLnNlbGVjdDItc2VsZWN0aW9uX19jbGVhclwiKTtpZigwIT09bi5sZW5ndGgpe3Quc3RvcFByb3BhZ2F0aW9uKCk7dmFyIHI9YS5HZXREYXRhKG5bMF0sXCJkYXRhXCIpLGk9dGhpcy4kZWxlbWVudC52YWwoKTt0aGlzLiRlbGVtZW50LnZhbCh0aGlzLnBsYWNlaG9sZGVyLmlkKTt2YXIgbz17ZGF0YTpyfTtpZih0aGlzLnRyaWdnZXIoXCJjbGVhclwiLG8pLG8ucHJldmVudGVkKXRoaXMuJGVsZW1lbnQudmFsKGkpO2Vsc2V7Zm9yKHZhciBzPTA7czxyLmxlbmd0aDtzKyspaWYobz17ZGF0YTpyW3NdfSx0aGlzLnRyaWdnZXIoXCJ1bnNlbGVjdFwiLG8pLG8ucHJldmVudGVkKXJldHVybiB2b2lkIHRoaXMuJGVsZW1lbnQudmFsKGkpO3RoaXMuJGVsZW1lbnQudHJpZ2dlcihcImlucHV0XCIpLnRyaWdnZXIoXCJjaGFuZ2VcIiksdGhpcy50cmlnZ2VyKFwidG9nZ2xlXCIse30pfX19fSxlLnByb3RvdHlwZS5faGFuZGxlS2V5Ym9hcmRDbGVhcj1mdW5jdGlvbihlLHQsbil7bi5pc09wZW4oKXx8dC53aGljaCE9ci5ERUxFVEUmJnQud2hpY2ghPXIuQkFDS1NQQUNFfHx0aGlzLl9oYW5kbGVDbGVhcih0KX0sZS5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKGUsdCl7aWYoZS5jYWxsKHRoaXMsdCksISgwPHRoaXMuJHNlbGVjdGlvbi5maW5kKFwiLnNlbGVjdDItc2VsZWN0aW9uX19wbGFjZWhvbGRlclwiKS5sZW5ndGh8fDA9PT10Lmxlbmd0aCkpe3ZhciBuPXRoaXMub3B0aW9ucy5nZXQoXCJ0cmFuc2xhdGlvbnNcIikuZ2V0KFwicmVtb3ZlQWxsSXRlbXNcIikscj1pKCc8c3BhbiBjbGFzcz1cInNlbGVjdDItc2VsZWN0aW9uX19jbGVhclwiIHRpdGxlPVwiJytuKCkrJ1wiPiZ0aW1lczs8L3NwYW4+Jyk7YS5TdG9yZURhdGEoclswXSxcImRhdGFcIix0KSx0aGlzLiRzZWxlY3Rpb24uZmluZChcIi5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWRcIikucHJlcGVuZChyKX19LGV9KSxlLmRlZmluZShcInNlbGVjdDIvc2VsZWN0aW9uL3NlYXJjaFwiLFtcImpxdWVyeVwiLFwiLi4vdXRpbHNcIixcIi4uL2tleXNcIl0sZnVuY3Rpb24ocixhLGwpe2Z1bmN0aW9uIGUoZSx0LG4pe2UuY2FsbCh0aGlzLHQsbil9cmV0dXJuIGUucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihlKXt2YXIgdD1yKCc8bGkgY2xhc3M9XCJzZWxlY3QyLXNlYXJjaCBzZWxlY3QyLXNlYXJjaC0taW5saW5lXCI+PGlucHV0IGNsYXNzPVwic2VsZWN0Mi1zZWFyY2hfX2ZpZWxkXCIgdHlwZT1cInNlYXJjaFwiIHRhYmluZGV4PVwiLTFcIiBhdXRvY29tcGxldGU9XCJvZmZcIiBhdXRvY29ycmVjdD1cIm9mZlwiIGF1dG9jYXBpdGFsaXplPVwibm9uZVwiIHNwZWxsY2hlY2s9XCJmYWxzZVwiIHJvbGU9XCJzZWFyY2hib3hcIiBhcmlhLWF1dG9jb21wbGV0ZT1cImxpc3RcIiAvPjwvbGk+Jyk7dGhpcy4kc2VhcmNoQ29udGFpbmVyPXQsdGhpcy4kc2VhcmNoPXQuZmluZChcImlucHV0XCIpO3ZhciBuPWUuY2FsbCh0aGlzKTtyZXR1cm4gdGhpcy5fdHJhbnNmZXJUYWJJbmRleCgpLG59LGUucHJvdG90eXBlLmJpbmQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXMsaT10LmlkK1wiLXJlc3VsdHNcIjtlLmNhbGwodGhpcyx0LG4pLHQub24oXCJvcGVuXCIsZnVuY3Rpb24oKXtyLiRzZWFyY2guYXR0cihcImFyaWEtY29udHJvbHNcIixpKSxyLiRzZWFyY2gudHJpZ2dlcihcImZvY3VzXCIpfSksdC5vbihcImNsb3NlXCIsZnVuY3Rpb24oKXtyLiRzZWFyY2gudmFsKFwiXCIpLHIuJHNlYXJjaC5yZW1vdmVBdHRyKFwiYXJpYS1jb250cm9sc1wiKSxyLiRzZWFyY2gucmVtb3ZlQXR0cihcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiKSxyLiRzZWFyY2gudHJpZ2dlcihcImZvY3VzXCIpfSksdC5vbihcImVuYWJsZVwiLGZ1bmN0aW9uKCl7ci4kc2VhcmNoLnByb3AoXCJkaXNhYmxlZFwiLCExKSxyLl90cmFuc2ZlclRhYkluZGV4KCl9KSx0Lm9uKFwiZGlzYWJsZVwiLGZ1bmN0aW9uKCl7ci4kc2VhcmNoLnByb3AoXCJkaXNhYmxlZFwiLCEwKX0pLHQub24oXCJmb2N1c1wiLGZ1bmN0aW9uKGUpe3IuJHNlYXJjaC50cmlnZ2VyKFwiZm9jdXNcIil9KSx0Lm9uKFwicmVzdWx0czpmb2N1c1wiLGZ1bmN0aW9uKGUpe2UuZGF0YS5fcmVzdWx0SWQ/ci4kc2VhcmNoLmF0dHIoXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIixlLmRhdGEuX3Jlc3VsdElkKTpyLiRzZWFyY2gucmVtb3ZlQXR0cihcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiKX0pLHRoaXMuJHNlbGVjdGlvbi5vbihcImZvY3VzaW5cIixcIi5zZWxlY3QyLXNlYXJjaC0taW5saW5lXCIsZnVuY3Rpb24oZSl7ci50cmlnZ2VyKFwiZm9jdXNcIixlKX0pLHRoaXMuJHNlbGVjdGlvbi5vbihcImZvY3Vzb3V0XCIsXCIuc2VsZWN0Mi1zZWFyY2gtLWlubGluZVwiLGZ1bmN0aW9uKGUpe3IuX2hhbmRsZUJsdXIoZSl9KSx0aGlzLiRzZWxlY3Rpb24ub24oXCJrZXlkb3duXCIsXCIuc2VsZWN0Mi1zZWFyY2gtLWlubGluZVwiLGZ1bmN0aW9uKGUpe2lmKGUuc3RvcFByb3BhZ2F0aW9uKCksci50cmlnZ2VyKFwia2V5cHJlc3NcIixlKSxyLl9rZXlVcFByZXZlbnRlZD1lLmlzRGVmYXVsdFByZXZlbnRlZCgpLGUud2hpY2g9PT1sLkJBQ0tTUEFDRSYmXCJcIj09PXIuJHNlYXJjaC52YWwoKSl7dmFyIHQ9ci4kc2VhcmNoQ29udGFpbmVyLnByZXYoXCIuc2VsZWN0Mi1zZWxlY3Rpb25fX2Nob2ljZVwiKTtpZigwPHQubGVuZ3RoKXt2YXIgbj1hLkdldERhdGEodFswXSxcImRhdGFcIik7ci5zZWFyY2hSZW1vdmVDaG9pY2UobiksZS5wcmV2ZW50RGVmYXVsdCgpfX19KSx0aGlzLiRzZWxlY3Rpb24ub24oXCJjbGlja1wiLFwiLnNlbGVjdDItc2VhcmNoLS1pbmxpbmVcIixmdW5jdGlvbihlKXtyLiRzZWFyY2gudmFsKCkmJmUuc3RvcFByb3BhZ2F0aW9uKCl9KTt2YXIgbz1kb2N1bWVudC5kb2N1bWVudE1vZGUscz1vJiZvPD0xMTt0aGlzLiRzZWxlY3Rpb24ub24oXCJpbnB1dC5zZWFyY2hjaGVja1wiLFwiLnNlbGVjdDItc2VhcmNoLS1pbmxpbmVcIixmdW5jdGlvbihlKXtzP3IuJHNlbGVjdGlvbi5vZmYoXCJpbnB1dC5zZWFyY2ggaW5wdXQuc2VhcmNoY2hlY2tcIik6ci4kc2VsZWN0aW9uLm9mZihcImtleXVwLnNlYXJjaFwiKX0pLHRoaXMuJHNlbGVjdGlvbi5vbihcImtleXVwLnNlYXJjaCBpbnB1dC5zZWFyY2hcIixcIi5zZWxlY3QyLXNlYXJjaC0taW5saW5lXCIsZnVuY3Rpb24oZSl7aWYocyYmXCJpbnB1dFwiPT09ZS50eXBlKXIuJHNlbGVjdGlvbi5vZmYoXCJpbnB1dC5zZWFyY2ggaW5wdXQuc2VhcmNoY2hlY2tcIik7ZWxzZXt2YXIgdD1lLndoaWNoO3QhPWwuU0hJRlQmJnQhPWwuQ1RSTCYmdCE9bC5BTFQmJnQhPWwuVEFCJiZyLmhhbmRsZVNlYXJjaChlKX19KX0sZS5wcm90b3R5cGUuX3RyYW5zZmVyVGFiSW5kZXg9ZnVuY3Rpb24oZSl7dGhpcy4kc2VhcmNoLmF0dHIoXCJ0YWJpbmRleFwiLHRoaXMuJHNlbGVjdGlvbi5hdHRyKFwidGFiaW5kZXhcIikpLHRoaXMuJHNlbGVjdGlvbi5hdHRyKFwidGFiaW5kZXhcIixcIi0xXCIpfSxlLnByb3RvdHlwZS5jcmVhdGVQbGFjZWhvbGRlcj1mdW5jdGlvbihlLHQpe3RoaXMuJHNlYXJjaC5hdHRyKFwicGxhY2Vob2xkZXJcIix0LnRleHQpfSxlLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLiRzZWFyY2hbMF09PWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7dGhpcy4kc2VhcmNoLmF0dHIoXCJwbGFjZWhvbGRlclwiLFwiXCIpLGUuY2FsbCh0aGlzLHQpLHRoaXMuJHNlbGVjdGlvbi5maW5kKFwiLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZFwiKS5hcHBlbmQodGhpcy4kc2VhcmNoQ29udGFpbmVyKSx0aGlzLnJlc2l6ZVNlYXJjaCgpLG4mJnRoaXMuJHNlYXJjaC50cmlnZ2VyKFwiZm9jdXNcIil9LGUucHJvdG90eXBlLmhhbmRsZVNlYXJjaD1mdW5jdGlvbigpe2lmKHRoaXMucmVzaXplU2VhcmNoKCksIXRoaXMuX2tleVVwUHJldmVudGVkKXt2YXIgZT10aGlzLiRzZWFyY2gudmFsKCk7dGhpcy50cmlnZ2VyKFwicXVlcnlcIix7dGVybTplfSl9dGhpcy5fa2V5VXBQcmV2ZW50ZWQ9ITF9LGUucHJvdG90eXBlLnNlYXJjaFJlbW92ZUNob2ljZT1mdW5jdGlvbihlLHQpe3RoaXMudHJpZ2dlcihcInVuc2VsZWN0XCIse2RhdGE6dH0pLHRoaXMuJHNlYXJjaC52YWwodC50ZXh0KSx0aGlzLmhhbmRsZVNlYXJjaCgpfSxlLnByb3RvdHlwZS5yZXNpemVTZWFyY2g9ZnVuY3Rpb24oKXt0aGlzLiRzZWFyY2guY3NzKFwid2lkdGhcIixcIjI1cHhcIik7dmFyIGU9XCJcIjtcIlwiIT09dGhpcy4kc2VhcmNoLmF0dHIoXCJwbGFjZWhvbGRlclwiKT9lPXRoaXMuJHNlbGVjdGlvbi5maW5kKFwiLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZFwiKS53aWR0aCgpOmU9Ljc1Kih0aGlzLiRzZWFyY2gudmFsKCkubGVuZ3RoKzEpK1wiZW1cIjt0aGlzLiRzZWFyY2guY3NzKFwid2lkdGhcIixlKX0sZX0pLGUuZGVmaW5lKFwic2VsZWN0Mi9zZWxlY3Rpb24vZXZlbnRSZWxheVwiLFtcImpxdWVyeVwiXSxmdW5jdGlvbihzKXtmdW5jdGlvbiBlKCl7fXJldHVybiBlLnByb3RvdHlwZS5iaW5kPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLGk9W1wib3BlblwiLFwib3BlbmluZ1wiLFwiY2xvc2VcIixcImNsb3NpbmdcIixcInNlbGVjdFwiLFwic2VsZWN0aW5nXCIsXCJ1bnNlbGVjdFwiLFwidW5zZWxlY3RpbmdcIixcImNsZWFyXCIsXCJjbGVhcmluZ1wiXSxvPVtcIm9wZW5pbmdcIixcImNsb3NpbmdcIixcInNlbGVjdGluZ1wiLFwidW5zZWxlY3RpbmdcIixcImNsZWFyaW5nXCJdO2UuY2FsbCh0aGlzLHQsbiksdC5vbihcIipcIixmdW5jdGlvbihlLHQpe2lmKC0xIT09cy5pbkFycmF5KGUsaSkpe3Q9dHx8e307dmFyIG49cy5FdmVudChcInNlbGVjdDI6XCIrZSx7cGFyYW1zOnR9KTtyLiRlbGVtZW50LnRyaWdnZXIobiksLTEhPT1zLmluQXJyYXkoZSxvKSYmKHQucHJldmVudGVkPW4uaXNEZWZhdWx0UHJldmVudGVkKCkpfX0pfSxlfSksZS5kZWZpbmUoXCJzZWxlY3QyL3RyYW5zbGF0aW9uXCIsW1wianF1ZXJ5XCIsXCJyZXF1aXJlXCJdLGZ1bmN0aW9uKHQsbil7ZnVuY3Rpb24gcihlKXt0aGlzLmRpY3Q9ZXx8e319cmV0dXJuIHIucHJvdG90eXBlLmFsbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmRpY3R9LHIucHJvdG90eXBlLmdldD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5kaWN0W2VdfSxyLnByb3RvdHlwZS5leHRlbmQ9ZnVuY3Rpb24oZSl7dGhpcy5kaWN0PXQuZXh0ZW5kKHt9LGUuYWxsKCksdGhpcy5kaWN0KX0sci5fY2FjaGU9e30sci5sb2FkUGF0aD1mdW5jdGlvbihlKXtpZighKGUgaW4gci5fY2FjaGUpKXt2YXIgdD1uKGUpO3IuX2NhY2hlW2VdPXR9cmV0dXJuIG5ldyByKHIuX2NhY2hlW2VdKX0scn0pLGUuZGVmaW5lKFwic2VsZWN0Mi9kaWFjcml0aWNzXCIsW10sZnVuY3Rpb24oKXtyZXR1cm57XCLikrZcIjpcIkFcIixcIu+8oVwiOlwiQVwiLFwiw4BcIjpcIkFcIixcIsOBXCI6XCJBXCIsXCLDglwiOlwiQVwiLFwi4bqmXCI6XCJBXCIsXCLhuqRcIjpcIkFcIixcIuG6qlwiOlwiQVwiLFwi4bqoXCI6XCJBXCIsXCLDg1wiOlwiQVwiLFwixIBcIjpcIkFcIixcIsSCXCI6XCJBXCIsXCLhurBcIjpcIkFcIixcIuG6rlwiOlwiQVwiLFwi4bq0XCI6XCJBXCIsXCLhurJcIjpcIkFcIixcIsimXCI6XCJBXCIsXCLHoFwiOlwiQVwiLFwiw4RcIjpcIkFcIixcIseeXCI6XCJBXCIsXCLhuqJcIjpcIkFcIixcIsOFXCI6XCJBXCIsXCLHulwiOlwiQVwiLFwix41cIjpcIkFcIixcIsiAXCI6XCJBXCIsXCLIglwiOlwiQVwiLFwi4bqgXCI6XCJBXCIsXCLhuqxcIjpcIkFcIixcIuG6tlwiOlwiQVwiLFwi4biAXCI6XCJBXCIsXCLEhFwiOlwiQVwiLFwiyLpcIjpcIkFcIixcIuKxr1wiOlwiQVwiLFwi6pyyXCI6XCJBQVwiLFwiw4ZcIjpcIkFFXCIsXCLHvFwiOlwiQUVcIixcIseiXCI6XCJBRVwiLFwi6py0XCI6XCJBT1wiLFwi6py2XCI6XCJBVVwiLFwi6py4XCI6XCJBVlwiLFwi6py6XCI6XCJBVlwiLFwi6py8XCI6XCJBWVwiLFwi4pK3XCI6XCJCXCIsXCLvvKJcIjpcIkJcIixcIuG4glwiOlwiQlwiLFwi4biEXCI6XCJCXCIsXCLhuIZcIjpcIkJcIixcIsmDXCI6XCJCXCIsXCLGglwiOlwiQlwiLFwixoFcIjpcIkJcIixcIuKSuFwiOlwiQ1wiLFwi77yjXCI6XCJDXCIsXCLEhlwiOlwiQ1wiLFwixIhcIjpcIkNcIixcIsSKXCI6XCJDXCIsXCLEjFwiOlwiQ1wiLFwiw4dcIjpcIkNcIixcIuG4iFwiOlwiQ1wiLFwixodcIjpcIkNcIixcIsi7XCI6XCJDXCIsXCLqnL5cIjpcIkNcIixcIuKSuVwiOlwiRFwiLFwi77ykXCI6XCJEXCIsXCLhuIpcIjpcIkRcIixcIsSOXCI6XCJEXCIsXCLhuIxcIjpcIkRcIixcIuG4kFwiOlwiRFwiLFwi4biSXCI6XCJEXCIsXCLhuI5cIjpcIkRcIixcIsSQXCI6XCJEXCIsXCLGi1wiOlwiRFwiLFwixopcIjpcIkRcIixcIsaJXCI6XCJEXCIsXCLqnblcIjpcIkRcIixcIsexXCI6XCJEWlwiLFwix4RcIjpcIkRaXCIsXCLHslwiOlwiRHpcIixcIseFXCI6XCJEelwiLFwi4pK6XCI6XCJFXCIsXCLvvKVcIjpcIkVcIixcIsOIXCI6XCJFXCIsXCLDiVwiOlwiRVwiLFwiw4pcIjpcIkVcIixcIuG7gFwiOlwiRVwiLFwi4bq+XCI6XCJFXCIsXCLhu4RcIjpcIkVcIixcIuG7glwiOlwiRVwiLFwi4bq8XCI6XCJFXCIsXCLEklwiOlwiRVwiLFwi4biUXCI6XCJFXCIsXCLhuJZcIjpcIkVcIixcIsSUXCI6XCJFXCIsXCLEllwiOlwiRVwiLFwiw4tcIjpcIkVcIixcIuG6ulwiOlwiRVwiLFwixJpcIjpcIkVcIixcIsiEXCI6XCJFXCIsXCLIhlwiOlwiRVwiLFwi4bq4XCI6XCJFXCIsXCLhu4ZcIjpcIkVcIixcIsioXCI6XCJFXCIsXCLhuJxcIjpcIkVcIixcIsSYXCI6XCJFXCIsXCLhuJhcIjpcIkVcIixcIuG4mlwiOlwiRVwiLFwixpBcIjpcIkVcIixcIsaOXCI6XCJFXCIsXCLikrtcIjpcIkZcIixcIu+8plwiOlwiRlwiLFwi4bieXCI6XCJGXCIsXCLGkVwiOlwiRlwiLFwi6p27XCI6XCJGXCIsXCLikrxcIjpcIkdcIixcIu+8p1wiOlwiR1wiLFwix7RcIjpcIkdcIixcIsScXCI6XCJHXCIsXCLhuKBcIjpcIkdcIixcIsSeXCI6XCJHXCIsXCLEoFwiOlwiR1wiLFwix6ZcIjpcIkdcIixcIsSiXCI6XCJHXCIsXCLHpFwiOlwiR1wiLFwixpNcIjpcIkdcIixcIuqeoFwiOlwiR1wiLFwi6p29XCI6XCJHXCIsXCLqnb5cIjpcIkdcIixcIuKSvVwiOlwiSFwiLFwi77yoXCI6XCJIXCIsXCLEpFwiOlwiSFwiLFwi4biiXCI6XCJIXCIsXCLhuKZcIjpcIkhcIixcIsieXCI6XCJIXCIsXCLhuKRcIjpcIkhcIixcIuG4qFwiOlwiSFwiLFwi4biqXCI6XCJIXCIsXCLEplwiOlwiSFwiLFwi4rGnXCI6XCJIXCIsXCLisbVcIjpcIkhcIixcIuqejVwiOlwiSFwiLFwi4pK+XCI6XCJJXCIsXCLvvKlcIjpcIklcIixcIsOMXCI6XCJJXCIsXCLDjVwiOlwiSVwiLFwiw45cIjpcIklcIixcIsSoXCI6XCJJXCIsXCLEqlwiOlwiSVwiLFwixKxcIjpcIklcIixcIsSwXCI6XCJJXCIsXCLDj1wiOlwiSVwiLFwi4biuXCI6XCJJXCIsXCLhu4hcIjpcIklcIixcIsePXCI6XCJJXCIsXCLIiFwiOlwiSVwiLFwiyIpcIjpcIklcIixcIuG7ilwiOlwiSVwiLFwixK5cIjpcIklcIixcIuG4rFwiOlwiSVwiLFwixpdcIjpcIklcIixcIuKSv1wiOlwiSlwiLFwi77yqXCI6XCJKXCIsXCLEtFwiOlwiSlwiLFwiyYhcIjpcIkpcIixcIuKTgFwiOlwiS1wiLFwi77yrXCI6XCJLXCIsXCLhuLBcIjpcIktcIixcIseoXCI6XCJLXCIsXCLhuLJcIjpcIktcIixcIsS2XCI6XCJLXCIsXCLhuLRcIjpcIktcIixcIsaYXCI6XCJLXCIsXCLisalcIjpcIktcIixcIuqdgFwiOlwiS1wiLFwi6p2CXCI6XCJLXCIsXCLqnYRcIjpcIktcIixcIuqeolwiOlwiS1wiLFwi4pOBXCI6XCJMXCIsXCLvvKxcIjpcIkxcIixcIsS/XCI6XCJMXCIsXCLEuVwiOlwiTFwiLFwixL1cIjpcIkxcIixcIuG4tlwiOlwiTFwiLFwi4bi4XCI6XCJMXCIsXCLEu1wiOlwiTFwiLFwi4bi8XCI6XCJMXCIsXCLhuLpcIjpcIkxcIixcIsWBXCI6XCJMXCIsXCLIvVwiOlwiTFwiLFwi4rGiXCI6XCJMXCIsXCLisaBcIjpcIkxcIixcIuqdiFwiOlwiTFwiLFwi6p2GXCI6XCJMXCIsXCLqnoBcIjpcIkxcIixcIseHXCI6XCJMSlwiLFwix4hcIjpcIkxqXCIsXCLik4JcIjpcIk1cIixcIu+8rVwiOlwiTVwiLFwi4bi+XCI6XCJNXCIsXCLhuYBcIjpcIk1cIixcIuG5glwiOlwiTVwiLFwi4rGuXCI6XCJNXCIsXCLGnFwiOlwiTVwiLFwi4pODXCI6XCJOXCIsXCLvvK5cIjpcIk5cIixcIse4XCI6XCJOXCIsXCLFg1wiOlwiTlwiLFwiw5FcIjpcIk5cIixcIuG5hFwiOlwiTlwiLFwixYdcIjpcIk5cIixcIuG5hlwiOlwiTlwiLFwixYVcIjpcIk5cIixcIuG5ilwiOlwiTlwiLFwi4bmIXCI6XCJOXCIsXCLIoFwiOlwiTlwiLFwixp1cIjpcIk5cIixcIuqekFwiOlwiTlwiLFwi6p6kXCI6XCJOXCIsXCLHilwiOlwiTkpcIixcIseLXCI6XCJOalwiLFwi4pOEXCI6XCJPXCIsXCLvvK9cIjpcIk9cIixcIsOSXCI6XCJPXCIsXCLDk1wiOlwiT1wiLFwiw5RcIjpcIk9cIixcIuG7klwiOlwiT1wiLFwi4buQXCI6XCJPXCIsXCLhu5ZcIjpcIk9cIixcIuG7lFwiOlwiT1wiLFwiw5VcIjpcIk9cIixcIuG5jFwiOlwiT1wiLFwiyKxcIjpcIk9cIixcIuG5jlwiOlwiT1wiLFwixYxcIjpcIk9cIixcIuG5kFwiOlwiT1wiLFwi4bmSXCI6XCJPXCIsXCLFjlwiOlwiT1wiLFwiyK5cIjpcIk9cIixcIsiwXCI6XCJPXCIsXCLDllwiOlwiT1wiLFwiyKpcIjpcIk9cIixcIuG7jlwiOlwiT1wiLFwixZBcIjpcIk9cIixcIseRXCI6XCJPXCIsXCLIjFwiOlwiT1wiLFwiyI5cIjpcIk9cIixcIsagXCI6XCJPXCIsXCLhu5xcIjpcIk9cIixcIuG7mlwiOlwiT1wiLFwi4bugXCI6XCJPXCIsXCLhu55cIjpcIk9cIixcIuG7olwiOlwiT1wiLFwi4buMXCI6XCJPXCIsXCLhu5hcIjpcIk9cIixcIseqXCI6XCJPXCIsXCLHrFwiOlwiT1wiLFwiw5hcIjpcIk9cIixcIse+XCI6XCJPXCIsXCLGhlwiOlwiT1wiLFwixp9cIjpcIk9cIixcIuqdilwiOlwiT1wiLFwi6p2MXCI6XCJPXCIsXCLFklwiOlwiT0VcIixcIsaiXCI6XCJPSVwiLFwi6p2OXCI6XCJPT1wiLFwiyKJcIjpcIk9VXCIsXCLik4VcIjpcIlBcIixcIu+8sFwiOlwiUFwiLFwi4bmUXCI6XCJQXCIsXCLhuZZcIjpcIlBcIixcIsakXCI6XCJQXCIsXCLisaNcIjpcIlBcIixcIuqdkFwiOlwiUFwiLFwi6p2SXCI6XCJQXCIsXCLqnZRcIjpcIlBcIixcIuKThlwiOlwiUVwiLFwi77yxXCI6XCJRXCIsXCLqnZZcIjpcIlFcIixcIuqdmFwiOlwiUVwiLFwiyYpcIjpcIlFcIixcIuKTh1wiOlwiUlwiLFwi77yyXCI6XCJSXCIsXCLFlFwiOlwiUlwiLFwi4bmYXCI6XCJSXCIsXCLFmFwiOlwiUlwiLFwiyJBcIjpcIlJcIixcIsiSXCI6XCJSXCIsXCLhuZpcIjpcIlJcIixcIuG5nFwiOlwiUlwiLFwixZZcIjpcIlJcIixcIuG5nlwiOlwiUlwiLFwiyYxcIjpcIlJcIixcIuKxpFwiOlwiUlwiLFwi6p2aXCI6XCJSXCIsXCLqnqZcIjpcIlJcIixcIuqeglwiOlwiUlwiLFwi4pOIXCI6XCJTXCIsXCLvvLNcIjpcIlNcIixcIuG6nlwiOlwiU1wiLFwixZpcIjpcIlNcIixcIuG5pFwiOlwiU1wiLFwixZxcIjpcIlNcIixcIuG5oFwiOlwiU1wiLFwixaBcIjpcIlNcIixcIuG5plwiOlwiU1wiLFwi4bmiXCI6XCJTXCIsXCLhuahcIjpcIlNcIixcIsiYXCI6XCJTXCIsXCLFnlwiOlwiU1wiLFwi4rG+XCI6XCJTXCIsXCLqnqhcIjpcIlNcIixcIuqehFwiOlwiU1wiLFwi4pOJXCI6XCJUXCIsXCLvvLRcIjpcIlRcIixcIuG5qlwiOlwiVFwiLFwixaRcIjpcIlRcIixcIuG5rFwiOlwiVFwiLFwiyJpcIjpcIlRcIixcIsWiXCI6XCJUXCIsXCLhubBcIjpcIlRcIixcIuG5rlwiOlwiVFwiLFwixaZcIjpcIlRcIixcIsasXCI6XCJUXCIsXCLGrlwiOlwiVFwiLFwiyL5cIjpcIlRcIixcIuqehlwiOlwiVFwiLFwi6pyoXCI6XCJUWlwiLFwi4pOKXCI6XCJVXCIsXCLvvLVcIjpcIlVcIixcIsOZXCI6XCJVXCIsXCLDmlwiOlwiVVwiLFwiw5tcIjpcIlVcIixcIsWoXCI6XCJVXCIsXCLhubhcIjpcIlVcIixcIsWqXCI6XCJVXCIsXCLhubpcIjpcIlVcIixcIsWsXCI6XCJVXCIsXCLDnFwiOlwiVVwiLFwix5tcIjpcIlVcIixcIseXXCI6XCJVXCIsXCLHlVwiOlwiVVwiLFwix5lcIjpcIlVcIixcIuG7plwiOlwiVVwiLFwixa5cIjpcIlVcIixcIsWwXCI6XCJVXCIsXCLHk1wiOlwiVVwiLFwiyJRcIjpcIlVcIixcIsiWXCI6XCJVXCIsXCLGr1wiOlwiVVwiLFwi4buqXCI6XCJVXCIsXCLhu6hcIjpcIlVcIixcIuG7rlwiOlwiVVwiLFwi4busXCI6XCJVXCIsXCLhu7BcIjpcIlVcIixcIuG7pFwiOlwiVVwiLFwi4bmyXCI6XCJVXCIsXCLFslwiOlwiVVwiLFwi4bm2XCI6XCJVXCIsXCLhubRcIjpcIlVcIixcIsmEXCI6XCJVXCIsXCLik4tcIjpcIlZcIixcIu+8tlwiOlwiVlwiLFwi4bm8XCI6XCJWXCIsXCLhub5cIjpcIlZcIixcIsayXCI6XCJWXCIsXCLqnZ5cIjpcIlZcIixcIsmFXCI6XCJWXCIsXCLqnaBcIjpcIlZZXCIsXCLik4xcIjpcIldcIixcIu+8t1wiOlwiV1wiLFwi4bqAXCI6XCJXXCIsXCLhuoJcIjpcIldcIixcIsW0XCI6XCJXXCIsXCLhuoZcIjpcIldcIixcIuG6hFwiOlwiV1wiLFwi4bqIXCI6XCJXXCIsXCLisbJcIjpcIldcIixcIuKTjVwiOlwiWFwiLFwi77y4XCI6XCJYXCIsXCLhuopcIjpcIlhcIixcIuG6jFwiOlwiWFwiLFwi4pOOXCI6XCJZXCIsXCLvvLlcIjpcIllcIixcIuG7slwiOlwiWVwiLFwiw51cIjpcIllcIixcIsW2XCI6XCJZXCIsXCLhu7hcIjpcIllcIixcIsiyXCI6XCJZXCIsXCLhuo5cIjpcIllcIixcIsW4XCI6XCJZXCIsXCLhu7ZcIjpcIllcIixcIuG7tFwiOlwiWVwiLFwixrNcIjpcIllcIixcIsmOXCI6XCJZXCIsXCLhu75cIjpcIllcIixcIuKTj1wiOlwiWlwiLFwi77y6XCI6XCJaXCIsXCLFuVwiOlwiWlwiLFwi4bqQXCI6XCJaXCIsXCLFu1wiOlwiWlwiLFwixb1cIjpcIlpcIixcIuG6klwiOlwiWlwiLFwi4bqUXCI6XCJaXCIsXCLGtVwiOlwiWlwiLFwiyKRcIjpcIlpcIixcIuKxv1wiOlwiWlwiLFwi4rGrXCI6XCJaXCIsXCLqnaJcIjpcIlpcIixcIuKTkFwiOlwiYVwiLFwi772BXCI6XCJhXCIsXCLhuppcIjpcImFcIixcIsOgXCI6XCJhXCIsXCLDoVwiOlwiYVwiLFwiw6JcIjpcImFcIixcIuG6p1wiOlwiYVwiLFwi4bqlXCI6XCJhXCIsXCLhuqtcIjpcImFcIixcIuG6qVwiOlwiYVwiLFwiw6NcIjpcImFcIixcIsSBXCI6XCJhXCIsXCLEg1wiOlwiYVwiLFwi4bqxXCI6XCJhXCIsXCLhuq9cIjpcImFcIixcIuG6tVwiOlwiYVwiLFwi4bqzXCI6XCJhXCIsXCLIp1wiOlwiYVwiLFwix6FcIjpcImFcIixcIsOkXCI6XCJhXCIsXCLHn1wiOlwiYVwiLFwi4bqjXCI6XCJhXCIsXCLDpVwiOlwiYVwiLFwix7tcIjpcImFcIixcIseOXCI6XCJhXCIsXCLIgVwiOlwiYVwiLFwiyINcIjpcImFcIixcIuG6oVwiOlwiYVwiLFwi4bqtXCI6XCJhXCIsXCLhurdcIjpcImFcIixcIuG4gVwiOlwiYVwiLFwixIVcIjpcImFcIixcIuKxpVwiOlwiYVwiLFwiyZBcIjpcImFcIixcIuqcs1wiOlwiYWFcIixcIsOmXCI6XCJhZVwiLFwix71cIjpcImFlXCIsXCLHo1wiOlwiYWVcIixcIuqctVwiOlwiYW9cIixcIuqct1wiOlwiYXVcIixcIuqcuVwiOlwiYXZcIixcIuqcu1wiOlwiYXZcIixcIuqcvVwiOlwiYXlcIixcIuKTkVwiOlwiYlwiLFwi772CXCI6XCJiXCIsXCLhuINcIjpcImJcIixcIuG4hVwiOlwiYlwiLFwi4biHXCI6XCJiXCIsXCLGgFwiOlwiYlwiLFwixoNcIjpcImJcIixcIsmTXCI6XCJiXCIsXCLik5JcIjpcImNcIixcIu+9g1wiOlwiY1wiLFwixIdcIjpcImNcIixcIsSJXCI6XCJjXCIsXCLEi1wiOlwiY1wiLFwixI1cIjpcImNcIixcIsOnXCI6XCJjXCIsXCLhuIlcIjpcImNcIixcIsaIXCI6XCJjXCIsXCLIvFwiOlwiY1wiLFwi6py/XCI6XCJjXCIsXCLihoRcIjpcImNcIixcIuKTk1wiOlwiZFwiLFwi772EXCI6XCJkXCIsXCLhuItcIjpcImRcIixcIsSPXCI6XCJkXCIsXCLhuI1cIjpcImRcIixcIuG4kVwiOlwiZFwiLFwi4biTXCI6XCJkXCIsXCLhuI9cIjpcImRcIixcIsSRXCI6XCJkXCIsXCLGjFwiOlwiZFwiLFwiyZZcIjpcImRcIixcIsmXXCI6XCJkXCIsXCLqnbpcIjpcImRcIixcIsezXCI6XCJkelwiLFwix4ZcIjpcImR6XCIsXCLik5RcIjpcImVcIixcIu+9hVwiOlwiZVwiLFwiw6hcIjpcImVcIixcIsOpXCI6XCJlXCIsXCLDqlwiOlwiZVwiLFwi4buBXCI6XCJlXCIsXCLhur9cIjpcImVcIixcIuG7hVwiOlwiZVwiLFwi4buDXCI6XCJlXCIsXCLhur1cIjpcImVcIixcIsSTXCI6XCJlXCIsXCLhuJVcIjpcImVcIixcIuG4l1wiOlwiZVwiLFwixJVcIjpcImVcIixcIsSXXCI6XCJlXCIsXCLDq1wiOlwiZVwiLFwi4bq7XCI6XCJlXCIsXCLEm1wiOlwiZVwiLFwiyIVcIjpcImVcIixcIsiHXCI6XCJlXCIsXCLhurlcIjpcImVcIixcIuG7h1wiOlwiZVwiLFwiyKlcIjpcImVcIixcIuG4nVwiOlwiZVwiLFwixJlcIjpcImVcIixcIuG4mVwiOlwiZVwiLFwi4bibXCI6XCJlXCIsXCLJh1wiOlwiZVwiLFwiyZtcIjpcImVcIixcIsedXCI6XCJlXCIsXCLik5VcIjpcImZcIixcIu+9hlwiOlwiZlwiLFwi4bifXCI6XCJmXCIsXCLGklwiOlwiZlwiLFwi6p28XCI6XCJmXCIsXCLik5ZcIjpcImdcIixcIu+9h1wiOlwiZ1wiLFwix7VcIjpcImdcIixcIsSdXCI6XCJnXCIsXCLhuKFcIjpcImdcIixcIsSfXCI6XCJnXCIsXCLEoVwiOlwiZ1wiLFwix6dcIjpcImdcIixcIsSjXCI6XCJnXCIsXCLHpVwiOlwiZ1wiLFwiyaBcIjpcImdcIixcIuqeoVwiOlwiZ1wiLFwi4bW5XCI6XCJnXCIsXCLqnb9cIjpcImdcIixcIuKTl1wiOlwiaFwiLFwi772IXCI6XCJoXCIsXCLEpVwiOlwiaFwiLFwi4bijXCI6XCJoXCIsXCLhuKdcIjpcImhcIixcIsifXCI6XCJoXCIsXCLhuKVcIjpcImhcIixcIuG4qVwiOlwiaFwiLFwi4birXCI6XCJoXCIsXCLhupZcIjpcImhcIixcIsSnXCI6XCJoXCIsXCLisahcIjpcImhcIixcIuKxtlwiOlwiaFwiLFwiyaVcIjpcImhcIixcIsaVXCI6XCJodlwiLFwi4pOYXCI6XCJpXCIsXCLvvYlcIjpcImlcIixcIsOsXCI6XCJpXCIsXCLDrVwiOlwiaVwiLFwiw65cIjpcImlcIixcIsSpXCI6XCJpXCIsXCLEq1wiOlwiaVwiLFwixK1cIjpcImlcIixcIsOvXCI6XCJpXCIsXCLhuK9cIjpcImlcIixcIuG7iVwiOlwiaVwiLFwix5BcIjpcImlcIixcIsiJXCI6XCJpXCIsXCLIi1wiOlwiaVwiLFwi4buLXCI6XCJpXCIsXCLEr1wiOlwiaVwiLFwi4bitXCI6XCJpXCIsXCLJqFwiOlwiaVwiLFwixLFcIjpcImlcIixcIuKTmVwiOlwialwiLFwi772KXCI6XCJqXCIsXCLEtVwiOlwialwiLFwix7BcIjpcImpcIixcIsmJXCI6XCJqXCIsXCLik5pcIjpcImtcIixcIu+9i1wiOlwia1wiLFwi4bixXCI6XCJrXCIsXCLHqVwiOlwia1wiLFwi4bizXCI6XCJrXCIsXCLEt1wiOlwia1wiLFwi4bi1XCI6XCJrXCIsXCLGmVwiOlwia1wiLFwi4rGqXCI6XCJrXCIsXCLqnYFcIjpcImtcIixcIuqdg1wiOlwia1wiLFwi6p2FXCI6XCJrXCIsXCLqnqNcIjpcImtcIixcIuKTm1wiOlwibFwiLFwi772MXCI6XCJsXCIsXCLFgFwiOlwibFwiLFwixLpcIjpcImxcIixcIsS+XCI6XCJsXCIsXCLhuLdcIjpcImxcIixcIuG4uVwiOlwibFwiLFwixLxcIjpcImxcIixcIuG4vVwiOlwibFwiLFwi4bi7XCI6XCJsXCIsXCLFv1wiOlwibFwiLFwixYJcIjpcImxcIixcIsaaXCI6XCJsXCIsXCLJq1wiOlwibFwiLFwi4rGhXCI6XCJsXCIsXCLqnYlcIjpcImxcIixcIuqegVwiOlwibFwiLFwi6p2HXCI6XCJsXCIsXCLHiVwiOlwibGpcIixcIuKTnFwiOlwibVwiLFwi772NXCI6XCJtXCIsXCLhuL9cIjpcIm1cIixcIuG5gVwiOlwibVwiLFwi4bmDXCI6XCJtXCIsXCLJsVwiOlwibVwiLFwiya9cIjpcIm1cIixcIuKTnVwiOlwiblwiLFwi772OXCI6XCJuXCIsXCLHuVwiOlwiblwiLFwixYRcIjpcIm5cIixcIsOxXCI6XCJuXCIsXCLhuYVcIjpcIm5cIixcIsWIXCI6XCJuXCIsXCLhuYdcIjpcIm5cIixcIsWGXCI6XCJuXCIsXCLhuYtcIjpcIm5cIixcIuG5iVwiOlwiblwiLFwixp5cIjpcIm5cIixcIsmyXCI6XCJuXCIsXCLFiVwiOlwiblwiLFwi6p6RXCI6XCJuXCIsXCLqnqVcIjpcIm5cIixcIseMXCI6XCJualwiLFwi4pOeXCI6XCJvXCIsXCLvvY9cIjpcIm9cIixcIsOyXCI6XCJvXCIsXCLDs1wiOlwib1wiLFwiw7RcIjpcIm9cIixcIuG7k1wiOlwib1wiLFwi4buRXCI6XCJvXCIsXCLhu5dcIjpcIm9cIixcIuG7lVwiOlwib1wiLFwiw7VcIjpcIm9cIixcIuG5jVwiOlwib1wiLFwiyK1cIjpcIm9cIixcIuG5j1wiOlwib1wiLFwixY1cIjpcIm9cIixcIuG5kVwiOlwib1wiLFwi4bmTXCI6XCJvXCIsXCLFj1wiOlwib1wiLFwiyK9cIjpcIm9cIixcIsixXCI6XCJvXCIsXCLDtlwiOlwib1wiLFwiyKtcIjpcIm9cIixcIuG7j1wiOlwib1wiLFwixZFcIjpcIm9cIixcIseSXCI6XCJvXCIsXCLIjVwiOlwib1wiLFwiyI9cIjpcIm9cIixcIsahXCI6XCJvXCIsXCLhu51cIjpcIm9cIixcIuG7m1wiOlwib1wiLFwi4buhXCI6XCJvXCIsXCLhu59cIjpcIm9cIixcIuG7o1wiOlwib1wiLFwi4buNXCI6XCJvXCIsXCLhu5lcIjpcIm9cIixcIserXCI6XCJvXCIsXCLHrVwiOlwib1wiLFwiw7hcIjpcIm9cIixcIse/XCI6XCJvXCIsXCLJlFwiOlwib1wiLFwi6p2LXCI6XCJvXCIsXCLqnY1cIjpcIm9cIixcIsm1XCI6XCJvXCIsXCLFk1wiOlwib2VcIixcIsajXCI6XCJvaVwiLFwiyKNcIjpcIm91XCIsXCLqnY9cIjpcIm9vXCIsXCLik59cIjpcInBcIixcIu+9kFwiOlwicFwiLFwi4bmVXCI6XCJwXCIsXCLhuZdcIjpcInBcIixcIsalXCI6XCJwXCIsXCLhtb1cIjpcInBcIixcIuqdkVwiOlwicFwiLFwi6p2TXCI6XCJwXCIsXCLqnZVcIjpcInBcIixcIuKToFwiOlwicVwiLFwi772RXCI6XCJxXCIsXCLJi1wiOlwicVwiLFwi6p2XXCI6XCJxXCIsXCLqnZlcIjpcInFcIixcIuKToVwiOlwiclwiLFwi772SXCI6XCJyXCIsXCLFlVwiOlwiclwiLFwi4bmZXCI6XCJyXCIsXCLFmVwiOlwiclwiLFwiyJFcIjpcInJcIixcIsiTXCI6XCJyXCIsXCLhuZtcIjpcInJcIixcIuG5nVwiOlwiclwiLFwixZdcIjpcInJcIixcIuG5n1wiOlwiclwiLFwiyY1cIjpcInJcIixcIsm9XCI6XCJyXCIsXCLqnZtcIjpcInJcIixcIuqep1wiOlwiclwiLFwi6p6DXCI6XCJyXCIsXCLik6JcIjpcInNcIixcIu+9k1wiOlwic1wiLFwiw59cIjpcInNcIixcIsWbXCI6XCJzXCIsXCLhuaVcIjpcInNcIixcIsWdXCI6XCJzXCIsXCLhuaFcIjpcInNcIixcIsWhXCI6XCJzXCIsXCLhuadcIjpcInNcIixcIuG5o1wiOlwic1wiLFwi4bmpXCI6XCJzXCIsXCLImVwiOlwic1wiLFwixZ9cIjpcInNcIixcIsi/XCI6XCJzXCIsXCLqnqlcIjpcInNcIixcIuqehVwiOlwic1wiLFwi4bqbXCI6XCJzXCIsXCLik6NcIjpcInRcIixcIu+9lFwiOlwidFwiLFwi4bmrXCI6XCJ0XCIsXCLhupdcIjpcInRcIixcIsWlXCI6XCJ0XCIsXCLhua1cIjpcInRcIixcIsibXCI6XCJ0XCIsXCLFo1wiOlwidFwiLFwi4bmxXCI6XCJ0XCIsXCLhua9cIjpcInRcIixcIsWnXCI6XCJ0XCIsXCLGrVwiOlwidFwiLFwiyohcIjpcInRcIixcIuKxplwiOlwidFwiLFwi6p6HXCI6XCJ0XCIsXCLqnKlcIjpcInR6XCIsXCLik6RcIjpcInVcIixcIu+9lVwiOlwidVwiLFwiw7lcIjpcInVcIixcIsO6XCI6XCJ1XCIsXCLDu1wiOlwidVwiLFwixalcIjpcInVcIixcIuG5uVwiOlwidVwiLFwixatcIjpcInVcIixcIuG5u1wiOlwidVwiLFwixa1cIjpcInVcIixcIsO8XCI6XCJ1XCIsXCLHnFwiOlwidVwiLFwix5hcIjpcInVcIixcIseWXCI6XCJ1XCIsXCLHmlwiOlwidVwiLFwi4bunXCI6XCJ1XCIsXCLFr1wiOlwidVwiLFwixbFcIjpcInVcIixcIseUXCI6XCJ1XCIsXCLIlVwiOlwidVwiLFwiyJdcIjpcInVcIixcIsawXCI6XCJ1XCIsXCLhu6tcIjpcInVcIixcIuG7qVwiOlwidVwiLFwi4buvXCI6XCJ1XCIsXCLhu61cIjpcInVcIixcIuG7sVwiOlwidVwiLFwi4bulXCI6XCJ1XCIsXCLhubNcIjpcInVcIixcIsWzXCI6XCJ1XCIsXCLhubdcIjpcInVcIixcIuG5tVwiOlwidVwiLFwiyolcIjpcInVcIixcIuKTpVwiOlwidlwiLFwi772WXCI6XCJ2XCIsXCLhub1cIjpcInZcIixcIuG5v1wiOlwidlwiLFwiyotcIjpcInZcIixcIuqdn1wiOlwidlwiLFwiyoxcIjpcInZcIixcIuqdoVwiOlwidnlcIixcIuKTplwiOlwid1wiLFwi772XXCI6XCJ3XCIsXCLhuoFcIjpcIndcIixcIuG6g1wiOlwid1wiLFwixbVcIjpcIndcIixcIuG6h1wiOlwid1wiLFwi4bqFXCI6XCJ3XCIsXCLhuphcIjpcIndcIixcIuG6iVwiOlwid1wiLFwi4rGzXCI6XCJ3XCIsXCLik6dcIjpcInhcIixcIu+9mFwiOlwieFwiLFwi4bqLXCI6XCJ4XCIsXCLhuo1cIjpcInhcIixcIuKTqFwiOlwieVwiLFwi772ZXCI6XCJ5XCIsXCLhu7NcIjpcInlcIixcIsO9XCI6XCJ5XCIsXCLFt1wiOlwieVwiLFwi4bu5XCI6XCJ5XCIsXCLIs1wiOlwieVwiLFwi4bqPXCI6XCJ5XCIsXCLDv1wiOlwieVwiLFwi4bu3XCI6XCJ5XCIsXCLhuplcIjpcInlcIixcIuG7tVwiOlwieVwiLFwixrRcIjpcInlcIixcIsmPXCI6XCJ5XCIsXCLhu79cIjpcInlcIixcIuKTqVwiOlwielwiLFwi772aXCI6XCJ6XCIsXCLFulwiOlwielwiLFwi4bqRXCI6XCJ6XCIsXCLFvFwiOlwielwiLFwixb5cIjpcInpcIixcIuG6k1wiOlwielwiLFwi4bqVXCI6XCJ6XCIsXCLGtlwiOlwielwiLFwiyKVcIjpcInpcIixcIsmAXCI6XCJ6XCIsXCLisaxcIjpcInpcIixcIuqdo1wiOlwielwiLFwizoZcIjpcIs6RXCIsXCLOiFwiOlwizpVcIixcIs6JXCI6XCLOl1wiLFwizopcIjpcIs6ZXCIsXCLOqlwiOlwizplcIixcIs6MXCI6XCLOn1wiLFwizo5cIjpcIs6lXCIsXCLOq1wiOlwizqVcIixcIs6PXCI6XCLOqVwiLFwizqxcIjpcIs6xXCIsXCLOrVwiOlwizrVcIixcIs6uXCI6XCLOt1wiLFwizq9cIjpcIs65XCIsXCLPilwiOlwizrlcIixcIs6QXCI6XCLOuVwiLFwiz4xcIjpcIs6/XCIsXCLPjVwiOlwiz4VcIixcIs+LXCI6XCLPhVwiLFwizrBcIjpcIs+FXCIsXCLPjlwiOlwiz4lcIixcIs+CXCI6XCLPg1wiLFwi4oCZXCI6XCInXCJ9fSksZS5kZWZpbmUoXCJzZWxlY3QyL2RhdGEvYmFzZVwiLFtcIi4uL3V0aWxzXCJdLGZ1bmN0aW9uKHIpe2Z1bmN0aW9uIG4oZSx0KXtuLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpfXJldHVybiByLkV4dGVuZChuLHIuT2JzZXJ2YWJsZSksbi5wcm90b3R5cGUuY3VycmVudD1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJUaGUgYGN1cnJlbnRgIG1ldGhvZCBtdXN0IGJlIGRlZmluZWQgaW4gY2hpbGQgY2xhc3Nlcy5cIil9LG4ucHJvdG90eXBlLnF1ZXJ5PWZ1bmN0aW9uKGUsdCl7dGhyb3cgbmV3IEVycm9yKFwiVGhlIGBxdWVyeWAgbWV0aG9kIG11c3QgYmUgZGVmaW5lZCBpbiBjaGlsZCBjbGFzc2VzLlwiKX0sbi5wcm90b3R5cGUuYmluZD1mdW5jdGlvbihlLHQpe30sbi5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe30sbi5wcm90b3R5cGUuZ2VuZXJhdGVSZXN1bHRJZD1mdW5jdGlvbihlLHQpe3ZhciBuPWUuaWQrXCItcmVzdWx0LVwiO3JldHVybiBuKz1yLmdlbmVyYXRlQ2hhcnMoNCksbnVsbCE9dC5pZD9uKz1cIi1cIit0LmlkLnRvU3RyaW5nKCk6bis9XCItXCIrci5nZW5lcmF0ZUNoYXJzKDQpLG59LG59KSxlLmRlZmluZShcInNlbGVjdDIvZGF0YS9zZWxlY3RcIixbXCIuL2Jhc2VcIixcIi4uL3V0aWxzXCIsXCJqcXVlcnlcIl0sZnVuY3Rpb24oZSxhLGwpe2Z1bmN0aW9uIG4oZSx0KXt0aGlzLiRlbGVtZW50PWUsdGhpcy5vcHRpb25zPXQsbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKX1yZXR1cm4gYS5FeHRlbmQobixlKSxuLnByb3RvdHlwZS5jdXJyZW50PWZ1bmN0aW9uKGUpe3ZhciBuPVtdLHI9dGhpczt0aGlzLiRlbGVtZW50LmZpbmQoXCI6c2VsZWN0ZWRcIikuZWFjaChmdW5jdGlvbigpe3ZhciBlPWwodGhpcyksdD1yLml0ZW0oZSk7bi5wdXNoKHQpfSksZShuKX0sbi5wcm90b3R5cGUuc2VsZWN0PWZ1bmN0aW9uKGkpe3ZhciBvPXRoaXM7aWYoaS5zZWxlY3RlZD0hMCxsKGkuZWxlbWVudCkuaXMoXCJvcHRpb25cIikpcmV0dXJuIGkuZWxlbWVudC5zZWxlY3RlZD0hMCx2b2lkIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihcImlucHV0XCIpLnRyaWdnZXIoXCJjaGFuZ2VcIik7aWYodGhpcy4kZWxlbWVudC5wcm9wKFwibXVsdGlwbGVcIikpdGhpcy5jdXJyZW50KGZ1bmN0aW9uKGUpe3ZhciB0PVtdOyhpPVtpXSkucHVzaC5hcHBseShpLGUpO2Zvcih2YXIgbj0wO248aS5sZW5ndGg7bisrKXt2YXIgcj1pW25dLmlkOy0xPT09bC5pbkFycmF5KHIsdCkmJnQucHVzaChyKX1vLiRlbGVtZW50LnZhbCh0KSxvLiRlbGVtZW50LnRyaWdnZXIoXCJpbnB1dFwiKS50cmlnZ2VyKFwiY2hhbmdlXCIpfSk7ZWxzZXt2YXIgZT1pLmlkO3RoaXMuJGVsZW1lbnQudmFsKGUpLHRoaXMuJGVsZW1lbnQudHJpZ2dlcihcImlucHV0XCIpLnRyaWdnZXIoXCJjaGFuZ2VcIil9fSxuLnByb3RvdHlwZS51bnNlbGVjdD1mdW5jdGlvbihpKXt2YXIgbz10aGlzO2lmKHRoaXMuJGVsZW1lbnQucHJvcChcIm11bHRpcGxlXCIpKXtpZihpLnNlbGVjdGVkPSExLGwoaS5lbGVtZW50KS5pcyhcIm9wdGlvblwiKSlyZXR1cm4gaS5lbGVtZW50LnNlbGVjdGVkPSExLHZvaWQgdGhpcy4kZWxlbWVudC50cmlnZ2VyKFwiaW5wdXRcIikudHJpZ2dlcihcImNoYW5nZVwiKTt0aGlzLmN1cnJlbnQoZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXS5pZDtyIT09aS5pZCYmLTE9PT1sLmluQXJyYXkocix0KSYmdC5wdXNoKHIpfW8uJGVsZW1lbnQudmFsKHQpLG8uJGVsZW1lbnQudHJpZ2dlcihcImlucHV0XCIpLnRyaWdnZXIoXCJjaGFuZ2VcIil9KX19LG4ucHJvdG90eXBlLmJpbmQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzOyh0aGlzLmNvbnRhaW5lcj1lKS5vbihcInNlbGVjdFwiLGZ1bmN0aW9uKGUpe24uc2VsZWN0KGUuZGF0YSl9KSxlLm9uKFwidW5zZWxlY3RcIixmdW5jdGlvbihlKXtuLnVuc2VsZWN0KGUuZGF0YSl9KX0sbi5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3RoaXMuJGVsZW1lbnQuZmluZChcIipcIikuZWFjaChmdW5jdGlvbigpe2EuUmVtb3ZlRGF0YSh0aGlzKX0pfSxuLnByb3RvdHlwZS5xdWVyeT1mdW5jdGlvbihyLGUpe3ZhciBpPVtdLG89dGhpczt0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCkuZWFjaChmdW5jdGlvbigpe3ZhciBlPWwodGhpcyk7aWYoZS5pcyhcIm9wdGlvblwiKXx8ZS5pcyhcIm9wdGdyb3VwXCIpKXt2YXIgdD1vLml0ZW0oZSksbj1vLm1hdGNoZXMocix0KTtudWxsIT09biYmaS5wdXNoKG4pfX0pLGUoe3Jlc3VsdHM6aX0pfSxuLnByb3RvdHlwZS5hZGRPcHRpb25zPWZ1bmN0aW9uKGUpe2EuYXBwZW5kTWFueSh0aGlzLiRlbGVtZW50LGUpfSxuLnByb3RvdHlwZS5vcHRpb249ZnVuY3Rpb24oZSl7dmFyIHQ7ZS5jaGlsZHJlbj8odD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0Z3JvdXBcIikpLmxhYmVsPWUudGV4dDp2b2lkIDAhPT0odD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpKS50ZXh0Q29udGVudD90LnRleHRDb250ZW50PWUudGV4dDp0LmlubmVyVGV4dD1lLnRleHQsdm9pZCAwIT09ZS5pZCYmKHQudmFsdWU9ZS5pZCksZS5kaXNhYmxlZCYmKHQuZGlzYWJsZWQ9ITApLGUuc2VsZWN0ZWQmJih0LnNlbGVjdGVkPSEwKSxlLnRpdGxlJiYodC50aXRsZT1lLnRpdGxlKTt2YXIgbj1sKHQpLHI9dGhpcy5fbm9ybWFsaXplSXRlbShlKTtyZXR1cm4gci5lbGVtZW50PXQsYS5TdG9yZURhdGEodCxcImRhdGFcIixyKSxufSxuLnByb3RvdHlwZS5pdGVtPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2lmKG51bGwhPSh0PWEuR2V0RGF0YShlWzBdLFwiZGF0YVwiKSkpcmV0dXJuIHQ7aWYoZS5pcyhcIm9wdGlvblwiKSl0PXtpZDplLnZhbCgpLHRleHQ6ZS50ZXh0KCksZGlzYWJsZWQ6ZS5wcm9wKFwiZGlzYWJsZWRcIiksc2VsZWN0ZWQ6ZS5wcm9wKFwic2VsZWN0ZWRcIiksdGl0bGU6ZS5wcm9wKFwidGl0bGVcIil9O2Vsc2UgaWYoZS5pcyhcIm9wdGdyb3VwXCIpKXt0PXt0ZXh0OmUucHJvcChcImxhYmVsXCIpLGNoaWxkcmVuOltdLHRpdGxlOmUucHJvcChcInRpdGxlXCIpfTtmb3IodmFyIG49ZS5jaGlsZHJlbihcIm9wdGlvblwiKSxyPVtdLGk9MDtpPG4ubGVuZ3RoO2krKyl7dmFyIG89bChuW2ldKSxzPXRoaXMuaXRlbShvKTtyLnB1c2gocyl9dC5jaGlsZHJlbj1yfXJldHVybih0PXRoaXMuX25vcm1hbGl6ZUl0ZW0odCkpLmVsZW1lbnQ9ZVswXSxhLlN0b3JlRGF0YShlWzBdLFwiZGF0YVwiLHQpLHR9LG4ucHJvdG90eXBlLl9ub3JtYWxpemVJdGVtPWZ1bmN0aW9uKGUpe2UhPT1PYmplY3QoZSkmJihlPXtpZDplLHRleHQ6ZX0pO3JldHVybiBudWxsIT0oZT1sLmV4dGVuZCh7fSx7dGV4dDpcIlwifSxlKSkuaWQmJihlLmlkPWUuaWQudG9TdHJpbmcoKSksbnVsbCE9ZS50ZXh0JiYoZS50ZXh0PWUudGV4dC50b1N0cmluZygpKSxudWxsPT1lLl9yZXN1bHRJZCYmZS5pZCYmbnVsbCE9dGhpcy5jb250YWluZXImJihlLl9yZXN1bHRJZD10aGlzLmdlbmVyYXRlUmVzdWx0SWQodGhpcy5jb250YWluZXIsZSkpLGwuZXh0ZW5kKHt9LHtzZWxlY3RlZDohMSxkaXNhYmxlZDohMX0sZSl9LG4ucHJvdG90eXBlLm1hdGNoZXM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5vcHRpb25zLmdldChcIm1hdGNoZXJcIikoZSx0KX0sbn0pLGUuZGVmaW5lKFwic2VsZWN0Mi9kYXRhL2FycmF5XCIsW1wiLi9zZWxlY3RcIixcIi4uL3V0aWxzXCIsXCJqcXVlcnlcIl0sZnVuY3Rpb24oZSxmLGcpe2Z1bmN0aW9uIHIoZSx0KXt0aGlzLl9kYXRhVG9Db252ZXJ0PXQuZ2V0KFwiZGF0YVwiKXx8W10sci5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLGUsdCl9cmV0dXJuIGYuRXh0ZW5kKHIsZSksci5wcm90b3R5cGUuYmluZD1mdW5jdGlvbihlLHQpe3IuX19zdXBlcl9fLmJpbmQuY2FsbCh0aGlzLGUsdCksdGhpcy5hZGRPcHRpb25zKHRoaXMuY29udmVydFRvT3B0aW9ucyh0aGlzLl9kYXRhVG9Db252ZXJ0KSl9LHIucHJvdG90eXBlLnNlbGVjdD1mdW5jdGlvbihuKXt2YXIgZT10aGlzLiRlbGVtZW50LmZpbmQoXCJvcHRpb25cIikuZmlsdGVyKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQudmFsdWU9PW4uaWQudG9TdHJpbmcoKX0pOzA9PT1lLmxlbmd0aCYmKGU9dGhpcy5vcHRpb24obiksdGhpcy5hZGRPcHRpb25zKGUpKSxyLl9fc3VwZXJfXy5zZWxlY3QuY2FsbCh0aGlzLG4pfSxyLnByb3RvdHlwZS5jb252ZXJ0VG9PcHRpb25zPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj10aGlzLiRlbGVtZW50LmZpbmQoXCJvcHRpb25cIikscj1uLm1hcChmdW5jdGlvbigpe3JldHVybiB0Lml0ZW0oZyh0aGlzKSkuaWR9KS5nZXQoKSxpPVtdO2Z1bmN0aW9uIG8oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGcodGhpcykudmFsKCk9PWUuaWR9fWZvcih2YXIgcz0wO3M8ZS5sZW5ndGg7cysrKXt2YXIgYT10aGlzLl9ub3JtYWxpemVJdGVtKGVbc10pO2lmKDA8PWcuaW5BcnJheShhLmlkLHIpKXt2YXIgbD1uLmZpbHRlcihvKGEpKSxjPXRoaXMuaXRlbShsKSx1PWcuZXh0ZW5kKCEwLHt9LGEsYyksZD10aGlzLm9wdGlvbih1KTtsLnJlcGxhY2VXaXRoKGQpfWVsc2V7dmFyIHA9dGhpcy5vcHRpb24oYSk7aWYoYS5jaGlsZHJlbil7dmFyIGg9dGhpcy5jb252ZXJ0VG9PcHRpb25zKGEuY2hpbGRyZW4pO2YuYXBwZW5kTWFueShwLGgpfWkucHVzaChwKX19cmV0dXJuIGl9LHJ9KSxlLmRlZmluZShcInNlbGVjdDIvZGF0YS9hamF4XCIsW1wiLi9hcnJheVwiLFwiLi4vdXRpbHNcIixcImpxdWVyeVwiXSxmdW5jdGlvbihlLHQsbyl7ZnVuY3Rpb24gbihlLHQpe3RoaXMuYWpheE9wdGlvbnM9dGhpcy5fYXBwbHlEZWZhdWx0cyh0LmdldChcImFqYXhcIikpLG51bGwhPXRoaXMuYWpheE9wdGlvbnMucHJvY2Vzc1Jlc3VsdHMmJih0aGlzLnByb2Nlc3NSZXN1bHRzPXRoaXMuYWpheE9wdGlvbnMucHJvY2Vzc1Jlc3VsdHMpLG4uX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxlLHQpfXJldHVybiB0LkV4dGVuZChuLGUpLG4ucHJvdG90eXBlLl9hcHBseURlZmF1bHRzPWZ1bmN0aW9uKGUpe3ZhciB0PXtkYXRhOmZ1bmN0aW9uKGUpe3JldHVybiBvLmV4dGVuZCh7fSxlLHtxOmUudGVybX0pfSx0cmFuc3BvcnQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW8uYWpheChlKTtyZXR1cm4gci50aGVuKHQpLHIuZmFpbChuKSxyfX07cmV0dXJuIG8uZXh0ZW5kKHt9LHQsZSwhMCl9LG4ucHJvdG90eXBlLnByb2Nlc3NSZXN1bHRzPWZ1bmN0aW9uKGUpe3JldHVybiBlfSxuLnByb3RvdHlwZS5xdWVyeT1mdW5jdGlvbihuLHIpe3ZhciBpPXRoaXM7bnVsbCE9dGhpcy5fcmVxdWVzdCYmKG8uaXNGdW5jdGlvbih0aGlzLl9yZXF1ZXN0LmFib3J0KSYmdGhpcy5fcmVxdWVzdC5hYm9ydCgpLHRoaXMuX3JlcXVlc3Q9bnVsbCk7dmFyIHQ9by5leHRlbmQoe3R5cGU6XCJHRVRcIn0sdGhpcy5hamF4T3B0aW9ucyk7ZnVuY3Rpb24gZSgpe3ZhciBlPXQudHJhbnNwb3J0KHQsZnVuY3Rpb24oZSl7dmFyIHQ9aS5wcm9jZXNzUmVzdWx0cyhlLG4pO2kub3B0aW9ucy5nZXQoXCJkZWJ1Z1wiKSYmd2luZG93LmNvbnNvbGUmJmNvbnNvbGUuZXJyb3ImJih0JiZ0LnJlc3VsdHMmJm8uaXNBcnJheSh0LnJlc3VsdHMpfHxjb25zb2xlLmVycm9yKFwiU2VsZWN0MjogVGhlIEFKQVggcmVzdWx0cyBkaWQgbm90IHJldHVybiBhbiBhcnJheSBpbiB0aGUgYHJlc3VsdHNgIGtleSBvZiB0aGUgcmVzcG9uc2UuXCIpKSxyKHQpfSxmdW5jdGlvbigpe1wic3RhdHVzXCJpbiBlJiYoMD09PWUuc3RhdHVzfHxcIjBcIj09PWUuc3RhdHVzKXx8aS50cmlnZ2VyKFwicmVzdWx0czptZXNzYWdlXCIse21lc3NhZ2U6XCJlcnJvckxvYWRpbmdcIn0pfSk7aS5fcmVxdWVzdD1lfVwiZnVuY3Rpb25cIj09dHlwZW9mIHQudXJsJiYodC51cmw9dC51cmwuY2FsbCh0aGlzLiRlbGVtZW50LG4pKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmRhdGEmJih0LmRhdGE9dC5kYXRhLmNhbGwodGhpcy4kZWxlbWVudCxuKSksdGhpcy5hamF4T3B0aW9ucy5kZWxheSYmbnVsbCE9bi50ZXJtPyh0aGlzLl9xdWVyeVRpbWVvdXQmJndpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5fcXVlcnlUaW1lb3V0KSx0aGlzLl9xdWVyeVRpbWVvdXQ9d2luZG93LnNldFRpbWVvdXQoZSx0aGlzLmFqYXhPcHRpb25zLmRlbGF5KSk6ZSgpfSxufSksZS5kZWZpbmUoXCJzZWxlY3QyL2RhdGEvdGFnc1wiLFtcImpxdWVyeVwiXSxmdW5jdGlvbih1KXtmdW5jdGlvbiBlKGUsdCxuKXt2YXIgcj1uLmdldChcInRhZ3NcIiksaT1uLmdldChcImNyZWF0ZVRhZ1wiKTt2b2lkIDAhPT1pJiYodGhpcy5jcmVhdGVUYWc9aSk7dmFyIG89bi5nZXQoXCJpbnNlcnRUYWdcIik7aWYodm9pZCAwIT09byYmKHRoaXMuaW5zZXJ0VGFnPW8pLGUuY2FsbCh0aGlzLHQsbiksdS5pc0FycmF5KHIpKWZvcih2YXIgcz0wO3M8ci5sZW5ndGg7cysrKXt2YXIgYT1yW3NdLGw9dGhpcy5fbm9ybWFsaXplSXRlbShhKSxjPXRoaXMub3B0aW9uKGwpO3RoaXMuJGVsZW1lbnQuYXBwZW5kKGMpfX1yZXR1cm4gZS5wcm90b3R5cGUucXVlcnk9ZnVuY3Rpb24oZSxjLHUpe3ZhciBkPXRoaXM7dGhpcy5fcmVtb3ZlT2xkVGFncygpLG51bGwhPWMudGVybSYmbnVsbD09Yy5wYWdlP2UuY2FsbCh0aGlzLGMsZnVuY3Rpb24gZSh0LG4pe2Zvcih2YXIgcj10LnJlc3VsdHMsaT0wO2k8ci5sZW5ndGg7aSsrKXt2YXIgbz1yW2ldLHM9bnVsbCE9by5jaGlsZHJlbiYmIWUoe3Jlc3VsdHM6by5jaGlsZHJlbn0sITApO2lmKChvLnRleHR8fFwiXCIpLnRvVXBwZXJDYXNlKCk9PT0oYy50ZXJtfHxcIlwiKS50b1VwcGVyQ2FzZSgpfHxzKXJldHVybiFuJiYodC5kYXRhPXIsdm9pZCB1KHQpKX1pZihuKXJldHVybiEwO3ZhciBhPWQuY3JlYXRlVGFnKGMpO2lmKG51bGwhPWEpe3ZhciBsPWQub3B0aW9uKGEpO2wuYXR0cihcImRhdGEtc2VsZWN0Mi10YWdcIiwhMCksZC5hZGRPcHRpb25zKFtsXSksZC5pbnNlcnRUYWcocixhKX10LnJlc3VsdHM9cix1KHQpfSk6ZS5jYWxsKHRoaXMsYyx1KX0sZS5wcm90b3R5cGUuY3JlYXRlVGFnPWZ1bmN0aW9uKGUsdCl7dmFyIG49dS50cmltKHQudGVybSk7cmV0dXJuXCJcIj09PW4/bnVsbDp7aWQ6bix0ZXh0Om59fSxlLnByb3RvdHlwZS5pbnNlcnRUYWc9ZnVuY3Rpb24oZSx0LG4pe3QudW5zaGlmdChuKX0sZS5wcm90b3R5cGUuX3JlbW92ZU9sZFRhZ3M9ZnVuY3Rpb24oZSl7dGhpcy4kZWxlbWVudC5maW5kKFwib3B0aW9uW2RhdGEtc2VsZWN0Mi10YWddXCIpLmVhY2goZnVuY3Rpb24oKXt0aGlzLnNlbGVjdGVkfHx1KHRoaXMpLnJlbW92ZSgpfSl9LGV9KSxlLmRlZmluZShcInNlbGVjdDIvZGF0YS90b2tlbml6ZXJcIixbXCJqcXVlcnlcIl0sZnVuY3Rpb24oZCl7ZnVuY3Rpb24gZShlLHQsbil7dmFyIHI9bi5nZXQoXCJ0b2tlbml6ZXJcIik7dm9pZCAwIT09ciYmKHRoaXMudG9rZW5pemVyPXIpLGUuY2FsbCh0aGlzLHQsbil9cmV0dXJuIGUucHJvdG90eXBlLmJpbmQ9ZnVuY3Rpb24oZSx0LG4pe2UuY2FsbCh0aGlzLHQsbiksdGhpcy4kc2VhcmNoPXQuZHJvcGRvd24uJHNlYXJjaHx8dC5zZWxlY3Rpb24uJHNlYXJjaHx8bi5maW5kKFwiLnNlbGVjdDItc2VhcmNoX19maWVsZFwiKX0sZS5wcm90b3R5cGUucXVlcnk9ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPXRoaXM7dC50ZXJtPXQudGVybXx8XCJcIjt2YXIgcj10aGlzLnRva2VuaXplcih0LHRoaXMub3B0aW9ucyxmdW5jdGlvbihlKXt2YXIgdCxuPWkuX25vcm1hbGl6ZUl0ZW0oZSk7aWYoIWkuJGVsZW1lbnQuZmluZChcIm9wdGlvblwiKS5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm4gZCh0aGlzKS52YWwoKT09PW4uaWR9KS5sZW5ndGgpe3ZhciByPWkub3B0aW9uKG4pO3IuYXR0cihcImRhdGEtc2VsZWN0Mi10YWdcIiwhMCksaS5fcmVtb3ZlT2xkVGFncygpLGkuYWRkT3B0aW9ucyhbcl0pfXQ9bixpLnRyaWdnZXIoXCJzZWxlY3RcIix7ZGF0YTp0fSl9KTtyLnRlcm0hPT10LnRlcm0mJih0aGlzLiRzZWFyY2gubGVuZ3RoJiYodGhpcy4kc2VhcmNoLnZhbChyLnRlcm0pLHRoaXMuJHNlYXJjaC50cmlnZ2VyKFwiZm9jdXNcIikpLHQudGVybT1yLnRlcm0pLGUuY2FsbCh0aGlzLHQsbil9LGUucHJvdG90eXBlLnRva2VuaXplcj1mdW5jdGlvbihlLHQsbixyKXtmb3IodmFyIGk9bi5nZXQoXCJ0b2tlblNlcGFyYXRvcnNcIil8fFtdLG89dC50ZXJtLHM9MCxhPXRoaXMuY3JlYXRlVGFnfHxmdW5jdGlvbihlKXtyZXR1cm57aWQ6ZS50ZXJtLHRleHQ6ZS50ZXJtfX07czxvLmxlbmd0aDspe3ZhciBsPW9bc107aWYoLTEhPT1kLmluQXJyYXkobCxpKSl7dmFyIGM9by5zdWJzdHIoMCxzKSx1PWEoZC5leHRlbmQoe30sdCx7dGVybTpjfSkpO251bGwhPXU/KHIodSksbz1vLnN1YnN0cihzKzEpfHxcIlwiLHM9MCk6cysrfWVsc2UgcysrfXJldHVybnt0ZXJtOm99fSxlfSksZS5kZWZpbmUoXCJzZWxlY3QyL2RhdGEvbWluaW11bUlucHV0TGVuZ3RoXCIsW10sZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCxuKXt0aGlzLm1pbmltdW1JbnB1dExlbmd0aD1uLmdldChcIm1pbmltdW1JbnB1dExlbmd0aFwiKSxlLmNhbGwodGhpcyx0LG4pfXJldHVybiBlLnByb3RvdHlwZS5xdWVyeT1mdW5jdGlvbihlLHQsbil7dC50ZXJtPXQudGVybXx8XCJcIix0LnRlcm0ubGVuZ3RoPHRoaXMubWluaW11bUlucHV0TGVuZ3RoP3RoaXMudHJpZ2dlcihcInJlc3VsdHM6bWVzc2FnZVwiLHttZXNzYWdlOlwiaW5wdXRUb29TaG9ydFwiLGFyZ3M6e21pbmltdW06dGhpcy5taW5pbXVtSW5wdXRMZW5ndGgsaW5wdXQ6dC50ZXJtLHBhcmFtczp0fX0pOmUuY2FsbCh0aGlzLHQsbil9LGV9KSxlLmRlZmluZShcInNlbGVjdDIvZGF0YS9tYXhpbXVtSW5wdXRMZW5ndGhcIixbXSxmdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LG4pe3RoaXMubWF4aW11bUlucHV0TGVuZ3RoPW4uZ2V0KFwibWF4aW11bUlucHV0TGVuZ3RoXCIpLGUuY2FsbCh0aGlzLHQsbil9cmV0dXJuIGUucHJvdG90eXBlLnF1ZXJ5PWZ1bmN0aW9uKGUsdCxuKXt0LnRlcm09dC50ZXJtfHxcIlwiLDA8dGhpcy5tYXhpbXVtSW5wdXRMZW5ndGgmJnQudGVybS5sZW5ndGg+dGhpcy5tYXhpbXVtSW5wdXRMZW5ndGg/dGhpcy50cmlnZ2VyKFwicmVzdWx0czptZXNzYWdlXCIse21lc3NhZ2U6XCJpbnB1dFRvb0xvbmdcIixhcmdzOnttYXhpbXVtOnRoaXMubWF4aW11bUlucHV0TGVuZ3RoLGlucHV0OnQudGVybSxwYXJhbXM6dH19KTplLmNhbGwodGhpcyx0LG4pfSxlfSksZS5kZWZpbmUoXCJzZWxlY3QyL2RhdGEvbWF4aW11bVNlbGVjdGlvbkxlbmd0aFwiLFtdLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQsbil7dGhpcy5tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoPW4uZ2V0KFwibWF4aW11bVNlbGVjdGlvbkxlbmd0aFwiKSxlLmNhbGwodGhpcyx0LG4pfXJldHVybiBlLnByb3RvdHlwZS5iaW5kPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzO2UuY2FsbCh0aGlzLHQsbiksdC5vbihcInNlbGVjdFwiLGZ1bmN0aW9uKCl7ci5fY2hlY2tJZk1heGltdW1TZWxlY3RlZCgpfSl9LGUucHJvdG90eXBlLnF1ZXJ5PWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzO3RoaXMuX2NoZWNrSWZNYXhpbXVtU2VsZWN0ZWQoZnVuY3Rpb24oKXtlLmNhbGwocix0LG4pfSl9LGUucHJvdG90eXBlLl9jaGVja0lmTWF4aW11bVNlbGVjdGVkPWZ1bmN0aW9uKGUsbil7dmFyIHI9dGhpczt0aGlzLmN1cnJlbnQoZnVuY3Rpb24oZSl7dmFyIHQ9bnVsbCE9ZT9lLmxlbmd0aDowOzA8ci5tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoJiZ0Pj1yLm1heGltdW1TZWxlY3Rpb25MZW5ndGg/ci50cmlnZ2VyKFwicmVzdWx0czptZXNzYWdlXCIse21lc3NhZ2U6XCJtYXhpbXVtU2VsZWN0ZWRcIixhcmdzOnttYXhpbXVtOnIubWF4aW11bVNlbGVjdGlvbkxlbmd0aH19KTpuJiZuKCl9KX0sZX0pLGUuZGVmaW5lKFwic2VsZWN0Mi9kcm9wZG93blwiLFtcImpxdWVyeVwiLFwiLi91dGlsc1wiXSxmdW5jdGlvbih0LGUpe2Z1bmN0aW9uIG4oZSx0KXt0aGlzLiRlbGVtZW50PWUsdGhpcy5vcHRpb25zPXQsbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKX1yZXR1cm4gZS5FeHRlbmQobixlLk9ic2VydmFibGUpLG4ucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbigpe3ZhciBlPXQoJzxzcGFuIGNsYXNzPVwic2VsZWN0Mi1kcm9wZG93blwiPjxzcGFuIGNsYXNzPVwic2VsZWN0Mi1yZXN1bHRzXCI+PC9zcGFuPjwvc3Bhbj4nKTtyZXR1cm4gZS5hdHRyKFwiZGlyXCIsdGhpcy5vcHRpb25zLmdldChcImRpclwiKSksdGhpcy4kZHJvcGRvd249ZX0sbi5wcm90b3R5cGUuYmluZD1mdW5jdGlvbigpe30sbi5wcm90b3R5cGUucG9zaXRpb249ZnVuY3Rpb24oZSx0KXt9LG4ucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt0aGlzLiRkcm9wZG93bi5yZW1vdmUoKX0sbn0pLGUuZGVmaW5lKFwic2VsZWN0Mi9kcm9wZG93bi9zZWFyY2hcIixbXCJqcXVlcnlcIixcIi4uL3V0aWxzXCJdLGZ1bmN0aW9uKG8sZSl7ZnVuY3Rpb24gdCgpe31yZXR1cm4gdC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGUpe3ZhciB0PWUuY2FsbCh0aGlzKSxuPW8oJzxzcGFuIGNsYXNzPVwic2VsZWN0Mi1zZWFyY2ggc2VsZWN0Mi1zZWFyY2gtLWRyb3Bkb3duXCI+PGlucHV0IGNsYXNzPVwic2VsZWN0Mi1zZWFyY2hfX2ZpZWxkXCIgdHlwZT1cInNlYXJjaFwiIHRhYmluZGV4PVwiLTFcIiBhdXRvY29tcGxldGU9XCJvZmZcIiBhdXRvY29ycmVjdD1cIm9mZlwiIGF1dG9jYXBpdGFsaXplPVwibm9uZVwiIHNwZWxsY2hlY2s9XCJmYWxzZVwiIHJvbGU9XCJzZWFyY2hib3hcIiBhcmlhLWF1dG9jb21wbGV0ZT1cImxpc3RcIiAvPjwvc3Bhbj4nKTtyZXR1cm4gdGhpcy4kc2VhcmNoQ29udGFpbmVyPW4sdGhpcy4kc2VhcmNoPW4uZmluZChcImlucHV0XCIpLHQucHJlcGVuZChuKSx0fSx0LnByb3RvdHlwZS5iaW5kPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLGk9dC5pZCtcIi1yZXN1bHRzXCI7ZS5jYWxsKHRoaXMsdCxuKSx0aGlzLiRzZWFyY2gub24oXCJrZXlkb3duXCIsZnVuY3Rpb24oZSl7ci50cmlnZ2VyKFwia2V5cHJlc3NcIixlKSxyLl9rZXlVcFByZXZlbnRlZD1lLmlzRGVmYXVsdFByZXZlbnRlZCgpfSksdGhpcy4kc2VhcmNoLm9uKFwiaW5wdXRcIixmdW5jdGlvbihlKXtvKHRoaXMpLm9mZihcImtleXVwXCIpfSksdGhpcy4kc2VhcmNoLm9uKFwia2V5dXAgaW5wdXRcIixmdW5jdGlvbihlKXtyLmhhbmRsZVNlYXJjaChlKX0pLHQub24oXCJvcGVuXCIsZnVuY3Rpb24oKXtyLiRzZWFyY2guYXR0cihcInRhYmluZGV4XCIsMCksci4kc2VhcmNoLmF0dHIoXCJhcmlhLWNvbnRyb2xzXCIsaSksci4kc2VhcmNoLnRyaWdnZXIoXCJmb2N1c1wiKSx3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe3IuJHNlYXJjaC50cmlnZ2VyKFwiZm9jdXNcIil9LDApfSksdC5vbihcImNsb3NlXCIsZnVuY3Rpb24oKXtyLiRzZWFyY2guYXR0cihcInRhYmluZGV4XCIsLTEpLHIuJHNlYXJjaC5yZW1vdmVBdHRyKFwiYXJpYS1jb250cm9sc1wiKSxyLiRzZWFyY2gucmVtb3ZlQXR0cihcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiKSxyLiRzZWFyY2gudmFsKFwiXCIpLHIuJHNlYXJjaC50cmlnZ2VyKFwiYmx1clwiKX0pLHQub24oXCJmb2N1c1wiLGZ1bmN0aW9uKCl7dC5pc09wZW4oKXx8ci4kc2VhcmNoLnRyaWdnZXIoXCJmb2N1c1wiKX0pLHQub24oXCJyZXN1bHRzOmFsbFwiLGZ1bmN0aW9uKGUpe251bGwhPWUucXVlcnkudGVybSYmXCJcIiE9PWUucXVlcnkudGVybXx8KHIuc2hvd1NlYXJjaChlKT9yLiRzZWFyY2hDb250YWluZXIucmVtb3ZlQ2xhc3MoXCJzZWxlY3QyLXNlYXJjaC0taGlkZVwiKTpyLiRzZWFyY2hDb250YWluZXIuYWRkQ2xhc3MoXCJzZWxlY3QyLXNlYXJjaC0taGlkZVwiKSl9KSx0Lm9uKFwicmVzdWx0czpmb2N1c1wiLGZ1bmN0aW9uKGUpe2UuZGF0YS5fcmVzdWx0SWQ/ci4kc2VhcmNoLmF0dHIoXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIixlLmRhdGEuX3Jlc3VsdElkKTpyLiRzZWFyY2gucmVtb3ZlQXR0cihcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiKX0pfSx0LnByb3RvdHlwZS5oYW5kbGVTZWFyY2g9ZnVuY3Rpb24oZSl7aWYoIXRoaXMuX2tleVVwUHJldmVudGVkKXt2YXIgdD10aGlzLiRzZWFyY2gudmFsKCk7dGhpcy50cmlnZ2VyKFwicXVlcnlcIix7dGVybTp0fSl9dGhpcy5fa2V5VXBQcmV2ZW50ZWQ9ITF9LHQucHJvdG90eXBlLnNob3dTZWFyY2g9ZnVuY3Rpb24oZSx0KXtyZXR1cm4hMH0sdH0pLGUuZGVmaW5lKFwic2VsZWN0Mi9kcm9wZG93bi9oaWRlUGxhY2Vob2xkZXJcIixbXSxmdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LG4scil7dGhpcy5wbGFjZWhvbGRlcj10aGlzLm5vcm1hbGl6ZVBsYWNlaG9sZGVyKG4uZ2V0KFwicGxhY2Vob2xkZXJcIikpLGUuY2FsbCh0aGlzLHQsbixyKX1yZXR1cm4gZS5wcm90b3R5cGUuYXBwZW5kPWZ1bmN0aW9uKGUsdCl7dC5yZXN1bHRzPXRoaXMucmVtb3ZlUGxhY2Vob2xkZXIodC5yZXN1bHRzKSxlLmNhbGwodGhpcyx0KX0sZS5wcm90b3R5cGUubm9ybWFsaXplUGxhY2Vob2xkZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9e2lkOlwiXCIsdGV4dDp0fSksdH0sZS5wcm90b3R5cGUucmVtb3ZlUGxhY2Vob2xkZXI9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49dC5zbGljZSgwKSxyPXQubGVuZ3RoLTE7MDw9cjtyLS0pe3ZhciBpPXRbcl07dGhpcy5wbGFjZWhvbGRlci5pZD09PWkuaWQmJm4uc3BsaWNlKHIsMSl9cmV0dXJuIG59LGV9KSxlLmRlZmluZShcInNlbGVjdDIvZHJvcGRvd24vaW5maW5pdGVTY3JvbGxcIixbXCJqcXVlcnlcIl0sZnVuY3Rpb24obil7ZnVuY3Rpb24gZShlLHQsbixyKXt0aGlzLmxhc3RQYXJhbXM9e30sZS5jYWxsKHRoaXMsdCxuLHIpLHRoaXMuJGxvYWRpbmdNb3JlPXRoaXMuY3JlYXRlTG9hZGluZ01vcmUoKSx0aGlzLmxvYWRpbmc9ITF9cmV0dXJuIGUucHJvdG90eXBlLmFwcGVuZD1mdW5jdGlvbihlLHQpe3RoaXMuJGxvYWRpbmdNb3JlLnJlbW92ZSgpLHRoaXMubG9hZGluZz0hMSxlLmNhbGwodGhpcyx0KSx0aGlzLnNob3dMb2FkaW5nTW9yZSh0KSYmKHRoaXMuJHJlc3VsdHMuYXBwZW5kKHRoaXMuJGxvYWRpbmdNb3JlKSx0aGlzLmxvYWRNb3JlSWZOZWVkZWQoKSl9LGUucHJvdG90eXBlLmJpbmQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXM7ZS5jYWxsKHRoaXMsdCxuKSx0Lm9uKFwicXVlcnlcIixmdW5jdGlvbihlKXtyLmxhc3RQYXJhbXM9ZSxyLmxvYWRpbmc9ITB9KSx0Lm9uKFwicXVlcnk6YXBwZW5kXCIsZnVuY3Rpb24oZSl7ci5sYXN0UGFyYW1zPWUsci5sb2FkaW5nPSEwfSksdGhpcy4kcmVzdWx0cy5vbihcInNjcm9sbFwiLHRoaXMubG9hZE1vcmVJZk5lZWRlZC5iaW5kKHRoaXMpKX0sZS5wcm90b3R5cGUubG9hZE1vcmVJZk5lZWRlZD1mdW5jdGlvbigpe3ZhciBlPW4uY29udGFpbnMoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHRoaXMuJGxvYWRpbmdNb3JlWzBdKTtpZighdGhpcy5sb2FkaW5nJiZlKXt2YXIgdD10aGlzLiRyZXN1bHRzLm9mZnNldCgpLnRvcCt0aGlzLiRyZXN1bHRzLm91dGVySGVpZ2h0KCExKTt0aGlzLiRsb2FkaW5nTW9yZS5vZmZzZXQoKS50b3ArdGhpcy4kbG9hZGluZ01vcmUub3V0ZXJIZWlnaHQoITEpPD10KzUwJiZ0aGlzLmxvYWRNb3JlKCl9fSxlLnByb3RvdHlwZS5sb2FkTW9yZT1mdW5jdGlvbigpe3RoaXMubG9hZGluZz0hMDt2YXIgZT1uLmV4dGVuZCh7fSx7cGFnZToxfSx0aGlzLmxhc3RQYXJhbXMpO2UucGFnZSsrLHRoaXMudHJpZ2dlcihcInF1ZXJ5OmFwcGVuZFwiLGUpfSxlLnByb3RvdHlwZS5zaG93TG9hZGluZ01vcmU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5wYWdpbmF0aW9uJiZ0LnBhZ2luYXRpb24ubW9yZX0sZS5wcm90b3R5cGUuY3JlYXRlTG9hZGluZ01vcmU9ZnVuY3Rpb24oKXt2YXIgZT1uKCc8bGkgY2xhc3M9XCJzZWxlY3QyLXJlc3VsdHNfX29wdGlvbiBzZWxlY3QyLXJlc3VsdHNfX29wdGlvbi0tbG9hZC1tb3JlXCJyb2xlPVwib3B0aW9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIj48L2xpPicpLHQ9dGhpcy5vcHRpb25zLmdldChcInRyYW5zbGF0aW9uc1wiKS5nZXQoXCJsb2FkaW5nTW9yZVwiKTtyZXR1cm4gZS5odG1sKHQodGhpcy5sYXN0UGFyYW1zKSksZX0sZX0pLGUuZGVmaW5lKFwic2VsZWN0Mi9kcm9wZG93bi9hdHRhY2hCb2R5XCIsW1wianF1ZXJ5XCIsXCIuLi91dGlsc1wiXSxmdW5jdGlvbihmLGEpe2Z1bmN0aW9uIGUoZSx0LG4pe3RoaXMuJGRyb3Bkb3duUGFyZW50PWYobi5nZXQoXCJkcm9wZG93blBhcmVudFwiKXx8ZG9jdW1lbnQuYm9keSksZS5jYWxsKHRoaXMsdCxuKX1yZXR1cm4gZS5wcm90b3R5cGUuYmluZD1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcztlLmNhbGwodGhpcyx0LG4pLHQub24oXCJvcGVuXCIsZnVuY3Rpb24oKXtyLl9zaG93RHJvcGRvd24oKSxyLl9hdHRhY2hQb3NpdGlvbmluZ0hhbmRsZXIodCksci5fYmluZENvbnRhaW5lclJlc3VsdEhhbmRsZXJzKHQpfSksdC5vbihcImNsb3NlXCIsZnVuY3Rpb24oKXtyLl9oaWRlRHJvcGRvd24oKSxyLl9kZXRhY2hQb3NpdGlvbmluZ0hhbmRsZXIodCl9KSx0aGlzLiRkcm9wZG93bkNvbnRhaW5lci5vbihcIm1vdXNlZG93blwiLGZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCl9KX0sZS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbihlKXtlLmNhbGwodGhpcyksdGhpcy4kZHJvcGRvd25Db250YWluZXIucmVtb3ZlKCl9LGUucHJvdG90eXBlLnBvc2l0aW9uPWZ1bmN0aW9uKGUsdCxuKXt0LmF0dHIoXCJjbGFzc1wiLG4uYXR0cihcImNsYXNzXCIpKSx0LnJlbW92ZUNsYXNzKFwic2VsZWN0MlwiKSx0LmFkZENsYXNzKFwic2VsZWN0Mi1jb250YWluZXItLW9wZW5cIiksdC5jc3Moe3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix0b3A6LTk5OTk5OX0pLHRoaXMuJGNvbnRhaW5lcj1ufSxlLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9ZihcIjxzcGFuPjwvc3Bhbj5cIiksbj1lLmNhbGwodGhpcyk7cmV0dXJuIHQuYXBwZW5kKG4pLHRoaXMuJGRyb3Bkb3duQ29udGFpbmVyPXR9LGUucHJvdG90eXBlLl9oaWRlRHJvcGRvd249ZnVuY3Rpb24oZSl7dGhpcy4kZHJvcGRvd25Db250YWluZXIuZGV0YWNoKCl9LGUucHJvdG90eXBlLl9iaW5kQ29udGFpbmVyUmVzdWx0SGFuZGxlcnM9ZnVuY3Rpb24oZSx0KXtpZighdGhpcy5fY29udGFpbmVyUmVzdWx0c0hhbmRsZXJzQm91bmQpe3ZhciBuPXRoaXM7dC5vbihcInJlc3VsdHM6YWxsXCIsZnVuY3Rpb24oKXtuLl9wb3NpdGlvbkRyb3Bkb3duKCksbi5fcmVzaXplRHJvcGRvd24oKX0pLHQub24oXCJyZXN1bHRzOmFwcGVuZFwiLGZ1bmN0aW9uKCl7bi5fcG9zaXRpb25Ecm9wZG93bigpLG4uX3Jlc2l6ZURyb3Bkb3duKCl9KSx0Lm9uKFwicmVzdWx0czptZXNzYWdlXCIsZnVuY3Rpb24oKXtuLl9wb3NpdGlvbkRyb3Bkb3duKCksbi5fcmVzaXplRHJvcGRvd24oKX0pLHQub24oXCJzZWxlY3RcIixmdW5jdGlvbigpe24uX3Bvc2l0aW9uRHJvcGRvd24oKSxuLl9yZXNpemVEcm9wZG93bigpfSksdC5vbihcInVuc2VsZWN0XCIsZnVuY3Rpb24oKXtuLl9wb3NpdGlvbkRyb3Bkb3duKCksbi5fcmVzaXplRHJvcGRvd24oKX0pLHRoaXMuX2NvbnRhaW5lclJlc3VsdHNIYW5kbGVyc0JvdW5kPSEwfX0sZS5wcm90b3R5cGUuX2F0dGFjaFBvc2l0aW9uaW5nSGFuZGxlcj1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMscj1cInNjcm9sbC5zZWxlY3QyLlwiK3QuaWQsaT1cInJlc2l6ZS5zZWxlY3QyLlwiK3QuaWQsbz1cIm9yaWVudGF0aW9uY2hhbmdlLnNlbGVjdDIuXCIrdC5pZCxzPXRoaXMuJGNvbnRhaW5lci5wYXJlbnRzKCkuZmlsdGVyKGEuaGFzU2Nyb2xsKTtzLmVhY2goZnVuY3Rpb24oKXthLlN0b3JlRGF0YSh0aGlzLFwic2VsZWN0Mi1zY3JvbGwtcG9zaXRpb25cIix7eDpmKHRoaXMpLnNjcm9sbExlZnQoKSx5OmYodGhpcykuc2Nyb2xsVG9wKCl9KX0pLHMub24ocixmdW5jdGlvbihlKXt2YXIgdD1hLkdldERhdGEodGhpcyxcInNlbGVjdDItc2Nyb2xsLXBvc2l0aW9uXCIpO2YodGhpcykuc2Nyb2xsVG9wKHQueSl9KSxmKHdpbmRvdykub24ocitcIiBcIitpK1wiIFwiK28sZnVuY3Rpb24oZSl7bi5fcG9zaXRpb25Ecm9wZG93bigpLG4uX3Jlc2l6ZURyb3Bkb3duKCl9KX0sZS5wcm90b3R5cGUuX2RldGFjaFBvc2l0aW9uaW5nSGFuZGxlcj1mdW5jdGlvbihlLHQpe3ZhciBuPVwic2Nyb2xsLnNlbGVjdDIuXCIrdC5pZCxyPVwicmVzaXplLnNlbGVjdDIuXCIrdC5pZCxpPVwib3JpZW50YXRpb25jaGFuZ2Uuc2VsZWN0Mi5cIit0LmlkO3RoaXMuJGNvbnRhaW5lci5wYXJlbnRzKCkuZmlsdGVyKGEuaGFzU2Nyb2xsKS5vZmYobiksZih3aW5kb3cpLm9mZihuK1wiIFwiK3IrXCIgXCIraSl9LGUucHJvdG90eXBlLl9wb3NpdGlvbkRyb3Bkb3duPWZ1bmN0aW9uKCl7dmFyIGU9Zih3aW5kb3cpLHQ9dGhpcy4kZHJvcGRvd24uaGFzQ2xhc3MoXCJzZWxlY3QyLWRyb3Bkb3duLS1hYm92ZVwiKSxuPXRoaXMuJGRyb3Bkb3duLmhhc0NsYXNzKFwic2VsZWN0Mi1kcm9wZG93bi0tYmVsb3dcIikscj1udWxsLGk9dGhpcy4kY29udGFpbmVyLm9mZnNldCgpO2kuYm90dG9tPWkudG9wK3RoaXMuJGNvbnRhaW5lci5vdXRlckhlaWdodCghMSk7dmFyIG89e2hlaWdodDp0aGlzLiRjb250YWluZXIub3V0ZXJIZWlnaHQoITEpfTtvLnRvcD1pLnRvcCxvLmJvdHRvbT1pLnRvcCtvLmhlaWdodDt2YXIgcz10aGlzLiRkcm9wZG93bi5vdXRlckhlaWdodCghMSksYT1lLnNjcm9sbFRvcCgpLGw9ZS5zY3JvbGxUb3AoKStlLmhlaWdodCgpLGM9YTxpLnRvcC1zLHU9bD5pLmJvdHRvbStzLGQ9e2xlZnQ6aS5sZWZ0LHRvcDpvLmJvdHRvbX0scD10aGlzLiRkcm9wZG93blBhcmVudDtcInN0YXRpY1wiPT09cC5jc3MoXCJwb3NpdGlvblwiKSYmKHA9cC5vZmZzZXRQYXJlbnQoKSk7dmFyIGg9e3RvcDowLGxlZnQ6MH07KGYuY29udGFpbnMoZG9jdW1lbnQuYm9keSxwWzBdKXx8cFswXS5pc0Nvbm5lY3RlZCkmJihoPXAub2Zmc2V0KCkpLGQudG9wLT1oLnRvcCxkLmxlZnQtPWgubGVmdCx0fHxufHwocj1cImJlbG93XCIpLHV8fCFjfHx0PyFjJiZ1JiZ0JiYocj1cImJlbG93XCIpOnI9XCJhYm92ZVwiLChcImFib3ZlXCI9PXJ8fHQmJlwiYmVsb3dcIiE9PXIpJiYoZC50b3A9by50b3AtaC50b3AtcyksbnVsbCE9ciYmKHRoaXMuJGRyb3Bkb3duLnJlbW92ZUNsYXNzKFwic2VsZWN0Mi1kcm9wZG93bi0tYmVsb3cgc2VsZWN0Mi1kcm9wZG93bi0tYWJvdmVcIikuYWRkQ2xhc3MoXCJzZWxlY3QyLWRyb3Bkb3duLS1cIityKSx0aGlzLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoXCJzZWxlY3QyLWNvbnRhaW5lci0tYmVsb3cgc2VsZWN0Mi1jb250YWluZXItLWFib3ZlXCIpLmFkZENsYXNzKFwic2VsZWN0Mi1jb250YWluZXItLVwiK3IpKSx0aGlzLiRkcm9wZG93bkNvbnRhaW5lci5jc3MoZCl9LGUucHJvdG90eXBlLl9yZXNpemVEcm9wZG93bj1mdW5jdGlvbigpe3ZhciBlPXt3aWR0aDp0aGlzLiRjb250YWluZXIub3V0ZXJXaWR0aCghMSkrXCJweFwifTt0aGlzLm9wdGlvbnMuZ2V0KFwiZHJvcGRvd25BdXRvV2lkdGhcIikmJihlLm1pbldpZHRoPWUud2lkdGgsZS5wb3NpdGlvbj1cInJlbGF0aXZlXCIsZS53aWR0aD1cImF1dG9cIiksdGhpcy4kZHJvcGRvd24uY3NzKGUpfSxlLnByb3RvdHlwZS5fc2hvd0Ryb3Bkb3duPWZ1bmN0aW9uKGUpe3RoaXMuJGRyb3Bkb3duQ29udGFpbmVyLmFwcGVuZFRvKHRoaXMuJGRyb3Bkb3duUGFyZW50KSx0aGlzLl9wb3NpdGlvbkRyb3Bkb3duKCksdGhpcy5fcmVzaXplRHJvcGRvd24oKX0sZX0pLGUuZGVmaW5lKFwic2VsZWN0Mi9kcm9wZG93bi9taW5pbXVtUmVzdWx0c0ZvclNlYXJjaFwiLFtdLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQsbixyKXt0aGlzLm1pbmltdW1SZXN1bHRzRm9yU2VhcmNoPW4uZ2V0KFwibWluaW11bVJlc3VsdHNGb3JTZWFyY2hcIiksdGhpcy5taW5pbXVtUmVzdWx0c0ZvclNlYXJjaDwwJiYodGhpcy5taW5pbXVtUmVzdWx0c0ZvclNlYXJjaD0xLzApLGUuY2FsbCh0aGlzLHQsbixyKX1yZXR1cm4gZS5wcm90b3R5cGUuc2hvd1NlYXJjaD1mdW5jdGlvbihlLHQpe3JldHVybiEoZnVuY3Rpb24gZSh0KXtmb3IodmFyIG49MCxyPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBpPXRbcl07aS5jaGlsZHJlbj9uKz1lKGkuY2hpbGRyZW4pOm4rK31yZXR1cm4gbn0odC5kYXRhLnJlc3VsdHMpPHRoaXMubWluaW11bVJlc3VsdHNGb3JTZWFyY2gpJiZlLmNhbGwodGhpcyx0KX0sZX0pLGUuZGVmaW5lKFwic2VsZWN0Mi9kcm9wZG93bi9zZWxlY3RPbkNsb3NlXCIsW1wiLi4vdXRpbHNcIl0sZnVuY3Rpb24obyl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gZS5wcm90b3R5cGUuYmluZD1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcztlLmNhbGwodGhpcyx0LG4pLHQub24oXCJjbG9zZVwiLGZ1bmN0aW9uKGUpe3IuX2hhbmRsZVNlbGVjdE9uQ2xvc2UoZSl9KX0sZS5wcm90b3R5cGUuX2hhbmRsZVNlbGVjdE9uQ2xvc2U9ZnVuY3Rpb24oZSx0KXtpZih0JiZudWxsIT10Lm9yaWdpbmFsU2VsZWN0MkV2ZW50KXt2YXIgbj10Lm9yaWdpbmFsU2VsZWN0MkV2ZW50O2lmKFwic2VsZWN0XCI9PT1uLl90eXBlfHxcInVuc2VsZWN0XCI9PT1uLl90eXBlKXJldHVybn12YXIgcj10aGlzLmdldEhpZ2hsaWdodGVkUmVzdWx0cygpO2lmKCEoci5sZW5ndGg8MSkpe3ZhciBpPW8uR2V0RGF0YShyWzBdLFwiZGF0YVwiKTtudWxsIT1pLmVsZW1lbnQmJmkuZWxlbWVudC5zZWxlY3RlZHx8bnVsbD09aS5lbGVtZW50JiZpLnNlbGVjdGVkfHx0aGlzLnRyaWdnZXIoXCJzZWxlY3RcIix7ZGF0YTppfSl9fSxlfSksZS5kZWZpbmUoXCJzZWxlY3QyL2Ryb3Bkb3duL2Nsb3NlT25TZWxlY3RcIixbXSxmdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIGUucHJvdG90eXBlLmJpbmQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXM7ZS5jYWxsKHRoaXMsdCxuKSx0Lm9uKFwic2VsZWN0XCIsZnVuY3Rpb24oZSl7ci5fc2VsZWN0VHJpZ2dlcmVkKGUpfSksdC5vbihcInVuc2VsZWN0XCIsZnVuY3Rpb24oZSl7ci5fc2VsZWN0VHJpZ2dlcmVkKGUpfSl9LGUucHJvdG90eXBlLl9zZWxlY3RUcmlnZ2VyZWQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj10Lm9yaWdpbmFsRXZlbnQ7biYmKG4uY3RybEtleXx8bi5tZXRhS2V5KXx8dGhpcy50cmlnZ2VyKFwiY2xvc2VcIix7b3JpZ2luYWxFdmVudDpuLG9yaWdpbmFsU2VsZWN0MkV2ZW50OnR9KX0sZX0pLGUuZGVmaW5lKFwic2VsZWN0Mi9pMThuL2VuXCIsW10sZnVuY3Rpb24oKXtyZXR1cm57ZXJyb3JMb2FkaW5nOmZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgcmVzdWx0cyBjb3VsZCBub3QgYmUgbG9hZGVkLlwifSxpbnB1dFRvb0xvbmc6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5pbnB1dC5sZW5ndGgtZS5tYXhpbXVtLG49XCJQbGVhc2UgZGVsZXRlIFwiK3QrXCIgY2hhcmFjdGVyXCI7cmV0dXJuIDEhPXQmJihuKz1cInNcIiksbn0saW5wdXRUb29TaG9ydDpmdW5jdGlvbihlKXtyZXR1cm5cIlBsZWFzZSBlbnRlciBcIisoZS5taW5pbXVtLWUuaW5wdXQubGVuZ3RoKStcIiBvciBtb3JlIGNoYXJhY3RlcnNcIn0sbG9hZGluZ01vcmU6ZnVuY3Rpb24oKXtyZXR1cm5cIkxvYWRpbmcgbW9yZSByZXN1bHRz4oCmXCJ9LG1heGltdW1TZWxlY3RlZDpmdW5jdGlvbihlKXt2YXIgdD1cIllvdSBjYW4gb25seSBzZWxlY3QgXCIrZS5tYXhpbXVtK1wiIGl0ZW1cIjtyZXR1cm4gMSE9ZS5tYXhpbXVtJiYodCs9XCJzXCIpLHR9LG5vUmVzdWx0czpmdW5jdGlvbigpe3JldHVyblwiTm8gcmVzdWx0cyBmb3VuZFwifSxzZWFyY2hpbmc6ZnVuY3Rpb24oKXtyZXR1cm5cIlNlYXJjaGluZ+KAplwifSxyZW1vdmVBbGxJdGVtczpmdW5jdGlvbigpe3JldHVyblwiUmVtb3ZlIGFsbCBpdGVtc1wifX19KSxlLmRlZmluZShcInNlbGVjdDIvZGVmYXVsdHNcIixbXCJqcXVlcnlcIixcInJlcXVpcmVcIixcIi4vcmVzdWx0c1wiLFwiLi9zZWxlY3Rpb24vc2luZ2xlXCIsXCIuL3NlbGVjdGlvbi9tdWx0aXBsZVwiLFwiLi9zZWxlY3Rpb24vcGxhY2Vob2xkZXJcIixcIi4vc2VsZWN0aW9uL2FsbG93Q2xlYXJcIixcIi4vc2VsZWN0aW9uL3NlYXJjaFwiLFwiLi9zZWxlY3Rpb24vZXZlbnRSZWxheVwiLFwiLi91dGlsc1wiLFwiLi90cmFuc2xhdGlvblwiLFwiLi9kaWFjcml0aWNzXCIsXCIuL2RhdGEvc2VsZWN0XCIsXCIuL2RhdGEvYXJyYXlcIixcIi4vZGF0YS9hamF4XCIsXCIuL2RhdGEvdGFnc1wiLFwiLi9kYXRhL3Rva2VuaXplclwiLFwiLi9kYXRhL21pbmltdW1JbnB1dExlbmd0aFwiLFwiLi9kYXRhL21heGltdW1JbnB1dExlbmd0aFwiLFwiLi9kYXRhL21heGltdW1TZWxlY3Rpb25MZW5ndGhcIixcIi4vZHJvcGRvd25cIixcIi4vZHJvcGRvd24vc2VhcmNoXCIsXCIuL2Ryb3Bkb3duL2hpZGVQbGFjZWhvbGRlclwiLFwiLi9kcm9wZG93bi9pbmZpbml0ZVNjcm9sbFwiLFwiLi9kcm9wZG93bi9hdHRhY2hCb2R5XCIsXCIuL2Ryb3Bkb3duL21pbmltdW1SZXN1bHRzRm9yU2VhcmNoXCIsXCIuL2Ryb3Bkb3duL3NlbGVjdE9uQ2xvc2VcIixcIi4vZHJvcGRvd24vY2xvc2VPblNlbGVjdFwiLFwiLi9pMThuL2VuXCJdLGZ1bmN0aW9uKGMsdSxkLHAsaCxmLGcsbSx2LHkscyx0LF8sJCxiLHcsQSx4LEQsUyxFLEMsTyxULHEsTCxJLGosZSl7ZnVuY3Rpb24gbigpe3RoaXMucmVzZXQoKX1yZXR1cm4gbi5wcm90b3R5cGUuYXBwbHk9ZnVuY3Rpb24oZSl7aWYobnVsbD09KGU9Yy5leHRlbmQoITAse30sdGhpcy5kZWZhdWx0cyxlKSkuZGF0YUFkYXB0ZXIpe2lmKG51bGwhPWUuYWpheD9lLmRhdGFBZGFwdGVyPWI6bnVsbCE9ZS5kYXRhP2UuZGF0YUFkYXB0ZXI9JDplLmRhdGFBZGFwdGVyPV8sMDxlLm1pbmltdW1JbnB1dExlbmd0aCYmKGUuZGF0YUFkYXB0ZXI9eS5EZWNvcmF0ZShlLmRhdGFBZGFwdGVyLHgpKSwwPGUubWF4aW11bUlucHV0TGVuZ3RoJiYoZS5kYXRhQWRhcHRlcj15LkRlY29yYXRlKGUuZGF0YUFkYXB0ZXIsRCkpLDA8ZS5tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoJiYoZS5kYXRhQWRhcHRlcj15LkRlY29yYXRlKGUuZGF0YUFkYXB0ZXIsUykpLGUudGFncyYmKGUuZGF0YUFkYXB0ZXI9eS5EZWNvcmF0ZShlLmRhdGFBZGFwdGVyLHcpKSxudWxsPT1lLnRva2VuU2VwYXJhdG9ycyYmbnVsbD09ZS50b2tlbml6ZXJ8fChlLmRhdGFBZGFwdGVyPXkuRGVjb3JhdGUoZS5kYXRhQWRhcHRlcixBKSksbnVsbCE9ZS5xdWVyeSl7dmFyIHQ9dShlLmFtZEJhc2UrXCJjb21wYXQvcXVlcnlcIik7ZS5kYXRhQWRhcHRlcj15LkRlY29yYXRlKGUuZGF0YUFkYXB0ZXIsdCl9aWYobnVsbCE9ZS5pbml0U2VsZWN0aW9uKXt2YXIgbj11KGUuYW1kQmFzZStcImNvbXBhdC9pbml0U2VsZWN0aW9uXCIpO2UuZGF0YUFkYXB0ZXI9eS5EZWNvcmF0ZShlLmRhdGFBZGFwdGVyLG4pfX1pZihudWxsPT1lLnJlc3VsdHNBZGFwdGVyJiYoZS5yZXN1bHRzQWRhcHRlcj1kLG51bGwhPWUuYWpheCYmKGUucmVzdWx0c0FkYXB0ZXI9eS5EZWNvcmF0ZShlLnJlc3VsdHNBZGFwdGVyLFQpKSxudWxsIT1lLnBsYWNlaG9sZGVyJiYoZS5yZXN1bHRzQWRhcHRlcj15LkRlY29yYXRlKGUucmVzdWx0c0FkYXB0ZXIsTykpLGUuc2VsZWN0T25DbG9zZSYmKGUucmVzdWx0c0FkYXB0ZXI9eS5EZWNvcmF0ZShlLnJlc3VsdHNBZGFwdGVyLEkpKSksbnVsbD09ZS5kcm9wZG93bkFkYXB0ZXIpe2lmKGUubXVsdGlwbGUpZS5kcm9wZG93bkFkYXB0ZXI9RTtlbHNle3ZhciByPXkuRGVjb3JhdGUoRSxDKTtlLmRyb3Bkb3duQWRhcHRlcj1yfWlmKDAhPT1lLm1pbmltdW1SZXN1bHRzRm9yU2VhcmNoJiYoZS5kcm9wZG93bkFkYXB0ZXI9eS5EZWNvcmF0ZShlLmRyb3Bkb3duQWRhcHRlcixMKSksZS5jbG9zZU9uU2VsZWN0JiYoZS5kcm9wZG93bkFkYXB0ZXI9eS5EZWNvcmF0ZShlLmRyb3Bkb3duQWRhcHRlcixqKSksbnVsbCE9ZS5kcm9wZG93bkNzc0NsYXNzfHxudWxsIT1lLmRyb3Bkb3duQ3NzfHxudWxsIT1lLmFkYXB0RHJvcGRvd25Dc3NDbGFzcyl7dmFyIGk9dShlLmFtZEJhc2UrXCJjb21wYXQvZHJvcGRvd25Dc3NcIik7ZS5kcm9wZG93bkFkYXB0ZXI9eS5EZWNvcmF0ZShlLmRyb3Bkb3duQWRhcHRlcixpKX1lLmRyb3Bkb3duQWRhcHRlcj15LkRlY29yYXRlKGUuZHJvcGRvd25BZGFwdGVyLHEpfWlmKG51bGw9PWUuc2VsZWN0aW9uQWRhcHRlcil7aWYoZS5tdWx0aXBsZT9lLnNlbGVjdGlvbkFkYXB0ZXI9aDplLnNlbGVjdGlvbkFkYXB0ZXI9cCxudWxsIT1lLnBsYWNlaG9sZGVyJiYoZS5zZWxlY3Rpb25BZGFwdGVyPXkuRGVjb3JhdGUoZS5zZWxlY3Rpb25BZGFwdGVyLGYpKSxlLmFsbG93Q2xlYXImJihlLnNlbGVjdGlvbkFkYXB0ZXI9eS5EZWNvcmF0ZShlLnNlbGVjdGlvbkFkYXB0ZXIsZykpLGUubXVsdGlwbGUmJihlLnNlbGVjdGlvbkFkYXB0ZXI9eS5EZWNvcmF0ZShlLnNlbGVjdGlvbkFkYXB0ZXIsbSkpLG51bGwhPWUuY29udGFpbmVyQ3NzQ2xhc3N8fG51bGwhPWUuY29udGFpbmVyQ3NzfHxudWxsIT1lLmFkYXB0Q29udGFpbmVyQ3NzQ2xhc3Mpe3ZhciBvPXUoZS5hbWRCYXNlK1wiY29tcGF0L2NvbnRhaW5lckNzc1wiKTtlLnNlbGVjdGlvbkFkYXB0ZXI9eS5EZWNvcmF0ZShlLnNlbGVjdGlvbkFkYXB0ZXIsbyl9ZS5zZWxlY3Rpb25BZGFwdGVyPXkuRGVjb3JhdGUoZS5zZWxlY3Rpb25BZGFwdGVyLHYpfWUubGFuZ3VhZ2U9dGhpcy5fcmVzb2x2ZUxhbmd1YWdlKGUubGFuZ3VhZ2UpLGUubGFuZ3VhZ2UucHVzaChcImVuXCIpO2Zvcih2YXIgcz1bXSxhPTA7YTxlLmxhbmd1YWdlLmxlbmd0aDthKyspe3ZhciBsPWUubGFuZ3VhZ2VbYV07LTE9PT1zLmluZGV4T2YobCkmJnMucHVzaChsKX1yZXR1cm4gZS5sYW5ndWFnZT1zLGUudHJhbnNsYXRpb25zPXRoaXMuX3Byb2Nlc3NUcmFuc2xhdGlvbnMoZS5sYW5ndWFnZSxlLmRlYnVnKSxlfSxuLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoZSl7cmV0dXJuIGUucmVwbGFjZSgvW15cXHUwMDAwLVxcdTAwN0VdL2csZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV18fGV9KX10aGlzLmRlZmF1bHRzPXthbWRCYXNlOlwiLi9cIixhbWRMYW5ndWFnZUJhc2U6XCIuL2kxOG4vXCIsY2xvc2VPblNlbGVjdDohMCxkZWJ1ZzohMSxkcm9wZG93bkF1dG9XaWR0aDohMSxlc2NhcGVNYXJrdXA6eS5lc2NhcGVNYXJrdXAsbGFuZ3VhZ2U6e30sbWF0Y2hlcjpmdW5jdGlvbiBlKHQsbil7aWYoXCJcIj09PWMudHJpbSh0LnRlcm0pKXJldHVybiBuO2lmKG4uY2hpbGRyZW4mJjA8bi5jaGlsZHJlbi5sZW5ndGgpe2Zvcih2YXIgcj1jLmV4dGVuZCghMCx7fSxuKSxpPW4uY2hpbGRyZW4ubGVuZ3RoLTE7MDw9aTtpLS0pbnVsbD09ZSh0LG4uY2hpbGRyZW5baV0pJiZyLmNoaWxkcmVuLnNwbGljZShpLDEpO3JldHVybiAwPHIuY2hpbGRyZW4ubGVuZ3RoP3I6ZSh0LHIpfXZhciBvPWEobi50ZXh0KS50b1VwcGVyQ2FzZSgpLHM9YSh0LnRlcm0pLnRvVXBwZXJDYXNlKCk7cmV0dXJuLTE8by5pbmRleE9mKHMpP246bnVsbH0sbWluaW11bUlucHV0TGVuZ3RoOjAsbWF4aW11bUlucHV0TGVuZ3RoOjAsbWF4aW11bVNlbGVjdGlvbkxlbmd0aDowLG1pbmltdW1SZXN1bHRzRm9yU2VhcmNoOjAsc2VsZWN0T25DbG9zZTohMSxzY3JvbGxBZnRlclNlbGVjdDohMSxzb3J0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LHRlbXBsYXRlUmVzdWx0OmZ1bmN0aW9uKGUpe3JldHVybiBlLnRleHR9LHRlbXBsYXRlU2VsZWN0aW9uOmZ1bmN0aW9uKGUpe3JldHVybiBlLnRleHR9LHRoZW1lOlwiZGVmYXVsdFwiLHdpZHRoOlwicmVzb2x2ZVwifX0sbi5wcm90b3R5cGUuYXBwbHlGcm9tRWxlbWVudD1mdW5jdGlvbihlLHQpe3ZhciBuPWUubGFuZ3VhZ2Uscj10aGlzLmRlZmF1bHRzLmxhbmd1YWdlLGk9dC5wcm9wKFwibGFuZ1wiKSxvPXQuY2xvc2VzdChcIltsYW5nXVwiKS5wcm9wKFwibGFuZ1wiKSxzPUFycmF5LnByb3RvdHlwZS5jb25jYXQuY2FsbCh0aGlzLl9yZXNvbHZlTGFuZ3VhZ2UoaSksdGhpcy5fcmVzb2x2ZUxhbmd1YWdlKG4pLHRoaXMuX3Jlc29sdmVMYW5ndWFnZShyKSx0aGlzLl9yZXNvbHZlTGFuZ3VhZ2UobykpO3JldHVybiBlLmxhbmd1YWdlPXMsZX0sbi5wcm90b3R5cGUuX3Jlc29sdmVMYW5ndWFnZT1mdW5jdGlvbihlKXtpZighZSlyZXR1cm5bXTtpZihjLmlzRW1wdHlPYmplY3QoZSkpcmV0dXJuW107aWYoYy5pc1BsYWluT2JqZWN0KGUpKXJldHVybltlXTt2YXIgdDt0PWMuaXNBcnJheShlKT9lOltlXTtmb3IodmFyIG49W10scj0wO3I8dC5sZW5ndGg7cisrKWlmKG4ucHVzaCh0W3JdKSxcInN0cmluZ1wiPT10eXBlb2YgdFtyXSYmMDx0W3JdLmluZGV4T2YoXCItXCIpKXt2YXIgaT10W3JdLnNwbGl0KFwiLVwiKVswXTtuLnB1c2goaSl9cmV0dXJuIG59LG4ucHJvdG90eXBlLl9wcm9jZXNzVHJhbnNsYXRpb25zPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPW5ldyBzLHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIGk9bmV3IHMsbz1lW3JdO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBvKXRyeXtpPXMubG9hZFBhdGgobyl9Y2F0Y2goZSl7dHJ5e289dGhpcy5kZWZhdWx0cy5hbWRMYW5ndWFnZUJhc2UrbyxpPXMubG9hZFBhdGgobyl9Y2F0Y2goZSl7dCYmd2luZG93LmNvbnNvbGUmJmNvbnNvbGUud2FybiYmY29uc29sZS53YXJuKCdTZWxlY3QyOiBUaGUgbGFuZ3VhZ2UgZmlsZSBmb3IgXCInK28rJ1wiIGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGxvYWRlZC4gQSBmYWxsYmFjayB3aWxsIGJlIHVzZWQgaW5zdGVhZC4nKX19ZWxzZSBpPWMuaXNQbGFpbk9iamVjdChvKT9uZXcgcyhvKTpvO24uZXh0ZW5kKGkpfXJldHVybiBufSxuLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtuW2MuY2FtZWxDYXNlKGUpXT10O3ZhciByPXkuX2NvbnZlcnREYXRhKG4pO2MuZXh0ZW5kKCEwLHRoaXMuZGVmYXVsdHMscil9LG5ldyBufSksZS5kZWZpbmUoXCJzZWxlY3QyL29wdGlvbnNcIixbXCJyZXF1aXJlXCIsXCJqcXVlcnlcIixcIi4vZGVmYXVsdHNcIixcIi4vdXRpbHNcIl0sZnVuY3Rpb24ocixkLGkscCl7ZnVuY3Rpb24gZShlLHQpe2lmKHRoaXMub3B0aW9ucz1lLG51bGwhPXQmJnRoaXMuZnJvbUVsZW1lbnQodCksbnVsbCE9dCYmKHRoaXMub3B0aW9ucz1pLmFwcGx5RnJvbUVsZW1lbnQodGhpcy5vcHRpb25zLHQpKSx0aGlzLm9wdGlvbnM9aS5hcHBseSh0aGlzLm9wdGlvbnMpLHQmJnQuaXMoXCJpbnB1dFwiKSl7dmFyIG49cih0aGlzLmdldChcImFtZEJhc2VcIikrXCJjb21wYXQvaW5wdXREYXRhXCIpO3RoaXMub3B0aW9ucy5kYXRhQWRhcHRlcj1wLkRlY29yYXRlKHRoaXMub3B0aW9ucy5kYXRhQWRhcHRlcixuKX19cmV0dXJuIGUucHJvdG90eXBlLmZyb21FbGVtZW50PWZ1bmN0aW9uKGUpe3ZhciB0PVtcInNlbGVjdDJcIl07bnVsbD09dGhpcy5vcHRpb25zLm11bHRpcGxlJiYodGhpcy5vcHRpb25zLm11bHRpcGxlPWUucHJvcChcIm11bHRpcGxlXCIpKSxudWxsPT10aGlzLm9wdGlvbnMuZGlzYWJsZWQmJih0aGlzLm9wdGlvbnMuZGlzYWJsZWQ9ZS5wcm9wKFwiZGlzYWJsZWRcIikpLG51bGw9PXRoaXMub3B0aW9ucy5kaXImJihlLnByb3AoXCJkaXJcIik/dGhpcy5vcHRpb25zLmRpcj1lLnByb3AoXCJkaXJcIik6ZS5jbG9zZXN0KFwiW2Rpcl1cIikucHJvcChcImRpclwiKT90aGlzLm9wdGlvbnMuZGlyPWUuY2xvc2VzdChcIltkaXJdXCIpLnByb3AoXCJkaXJcIik6dGhpcy5vcHRpb25zLmRpcj1cImx0clwiKSxlLnByb3AoXCJkaXNhYmxlZFwiLHRoaXMub3B0aW9ucy5kaXNhYmxlZCksZS5wcm9wKFwibXVsdGlwbGVcIix0aGlzLm9wdGlvbnMubXVsdGlwbGUpLHAuR2V0RGF0YShlWzBdLFwic2VsZWN0MlRhZ3NcIikmJih0aGlzLm9wdGlvbnMuZGVidWcmJndpbmRvdy5jb25zb2xlJiZjb25zb2xlLndhcm4mJmNvbnNvbGUud2FybignU2VsZWN0MjogVGhlIGBkYXRhLXNlbGVjdDItdGFnc2AgYXR0cmlidXRlIGhhcyBiZWVuIGNoYW5nZWQgdG8gdXNlIHRoZSBgZGF0YS1kYXRhYCBhbmQgYGRhdGEtdGFncz1cInRydWVcImAgYXR0cmlidXRlcyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBTZWxlY3QyLicpLHAuU3RvcmVEYXRhKGVbMF0sXCJkYXRhXCIscC5HZXREYXRhKGVbMF0sXCJzZWxlY3QyVGFnc1wiKSkscC5TdG9yZURhdGEoZVswXSxcInRhZ3NcIiwhMCkpLHAuR2V0RGF0YShlWzBdLFwiYWpheFVybFwiKSYmKHRoaXMub3B0aW9ucy5kZWJ1ZyYmd2luZG93LmNvbnNvbGUmJmNvbnNvbGUud2FybiYmY29uc29sZS53YXJuKFwiU2VsZWN0MjogVGhlIGBkYXRhLWFqYXgtdXJsYCBhdHRyaWJ1dGUgaGFzIGJlZW4gY2hhbmdlZCB0byBgZGF0YS1hamF4LS11cmxgIGFuZCBzdXBwb3J0IGZvciB0aGUgb2xkIGF0dHJpYnV0ZSB3aWxsIGJlIHJlbW92ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFNlbGVjdDIuXCIpLGUuYXR0cihcImFqYXgtLXVybFwiLHAuR2V0RGF0YShlWzBdLFwiYWpheFVybFwiKSkscC5TdG9yZURhdGEoZVswXSxcImFqYXgtVXJsXCIscC5HZXREYXRhKGVbMF0sXCJhamF4VXJsXCIpKSk7dmFyIG49e307ZnVuY3Rpb24gcihlLHQpe3JldHVybiB0LnRvVXBwZXJDYXNlKCl9Zm9yKHZhciBpPTA7aTxlWzBdLmF0dHJpYnV0ZXMubGVuZ3RoO2krKyl7dmFyIG89ZVswXS5hdHRyaWJ1dGVzW2ldLm5hbWUscz1cImRhdGEtXCI7aWYoby5zdWJzdHIoMCxzLmxlbmd0aCk9PXMpe3ZhciBhPW8uc3Vic3RyaW5nKHMubGVuZ3RoKSxsPXAuR2V0RGF0YShlWzBdLGEpO25bYS5yZXBsYWNlKC8tKFthLXpdKS9nLHIpXT1sfX1kLmZuLmpxdWVyeSYmXCIxLlwiPT1kLmZuLmpxdWVyeS5zdWJzdHIoMCwyKSYmZVswXS5kYXRhc2V0JiYobj1kLmV4dGVuZCghMCx7fSxlWzBdLmRhdGFzZXQsbikpO3ZhciBjPWQuZXh0ZW5kKCEwLHt9LHAuR2V0RGF0YShlWzBdKSxuKTtmb3IodmFyIHUgaW4gYz1wLl9jb252ZXJ0RGF0YShjKSktMTxkLmluQXJyYXkodSx0KXx8KGQuaXNQbGFpbk9iamVjdCh0aGlzLm9wdGlvbnNbdV0pP2QuZXh0ZW5kKHRoaXMub3B0aW9uc1t1XSxjW3VdKTp0aGlzLm9wdGlvbnNbdV09Y1t1XSk7cmV0dXJuIHRoaXN9LGUucHJvdG90eXBlLmdldD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5vcHRpb25zW2VdfSxlLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oZSx0KXt0aGlzLm9wdGlvbnNbZV09dH0sZX0pLGUuZGVmaW5lKFwic2VsZWN0Mi9jb3JlXCIsW1wianF1ZXJ5XCIsXCIuL29wdGlvbnNcIixcIi4vdXRpbHNcIixcIi4va2V5c1wiXSxmdW5jdGlvbihvLGMsdSxyKXt2YXIgZD1mdW5jdGlvbihlLHQpe251bGwhPXUuR2V0RGF0YShlWzBdLFwic2VsZWN0MlwiKSYmdS5HZXREYXRhKGVbMF0sXCJzZWxlY3QyXCIpLmRlc3Ryb3koKSx0aGlzLiRlbGVtZW50PWUsdGhpcy5pZD10aGlzLl9nZW5lcmF0ZUlkKGUpLHQ9dHx8e30sdGhpcy5vcHRpb25zPW5ldyBjKHQsZSksZC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgbj1lLmF0dHIoXCJ0YWJpbmRleFwiKXx8MDt1LlN0b3JlRGF0YShlWzBdLFwib2xkLXRhYmluZGV4XCIsbiksZS5hdHRyKFwidGFiaW5kZXhcIixcIi0xXCIpO3ZhciByPXRoaXMub3B0aW9ucy5nZXQoXCJkYXRhQWRhcHRlclwiKTt0aGlzLmRhdGFBZGFwdGVyPW5ldyByKGUsdGhpcy5vcHRpb25zKTt2YXIgaT10aGlzLnJlbmRlcigpO3RoaXMuX3BsYWNlQ29udGFpbmVyKGkpO3ZhciBvPXRoaXMub3B0aW9ucy5nZXQoXCJzZWxlY3Rpb25BZGFwdGVyXCIpO3RoaXMuc2VsZWN0aW9uPW5ldyBvKGUsdGhpcy5vcHRpb25zKSx0aGlzLiRzZWxlY3Rpb249dGhpcy5zZWxlY3Rpb24ucmVuZGVyKCksdGhpcy5zZWxlY3Rpb24ucG9zaXRpb24odGhpcy4kc2VsZWN0aW9uLGkpO3ZhciBzPXRoaXMub3B0aW9ucy5nZXQoXCJkcm9wZG93bkFkYXB0ZXJcIik7dGhpcy5kcm9wZG93bj1uZXcgcyhlLHRoaXMub3B0aW9ucyksdGhpcy4kZHJvcGRvd249dGhpcy5kcm9wZG93bi5yZW5kZXIoKSx0aGlzLmRyb3Bkb3duLnBvc2l0aW9uKHRoaXMuJGRyb3Bkb3duLGkpO3ZhciBhPXRoaXMub3B0aW9ucy5nZXQoXCJyZXN1bHRzQWRhcHRlclwiKTt0aGlzLnJlc3VsdHM9bmV3IGEoZSx0aGlzLm9wdGlvbnMsdGhpcy5kYXRhQWRhcHRlciksdGhpcy4kcmVzdWx0cz10aGlzLnJlc3VsdHMucmVuZGVyKCksdGhpcy5yZXN1bHRzLnBvc2l0aW9uKHRoaXMuJHJlc3VsdHMsdGhpcy4kZHJvcGRvd24pO3ZhciBsPXRoaXM7dGhpcy5fYmluZEFkYXB0ZXJzKCksdGhpcy5fcmVnaXN0ZXJEb21FdmVudHMoKSx0aGlzLl9yZWdpc3RlckRhdGFFdmVudHMoKSx0aGlzLl9yZWdpc3RlclNlbGVjdGlvbkV2ZW50cygpLHRoaXMuX3JlZ2lzdGVyRHJvcGRvd25FdmVudHMoKSx0aGlzLl9yZWdpc3RlclJlc3VsdHNFdmVudHMoKSx0aGlzLl9yZWdpc3RlckV2ZW50cygpLHRoaXMuZGF0YUFkYXB0ZXIuY3VycmVudChmdW5jdGlvbihlKXtsLnRyaWdnZXIoXCJzZWxlY3Rpb246dXBkYXRlXCIse2RhdGE6ZX0pfSksZS5hZGRDbGFzcyhcInNlbGVjdDItaGlkZGVuLWFjY2Vzc2libGVcIiksZS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcInRydWVcIiksdGhpcy5fc3luY0F0dHJpYnV0ZXMoKSx1LlN0b3JlRGF0YShlWzBdLFwic2VsZWN0MlwiLHRoaXMpLGUuZGF0YShcInNlbGVjdDJcIix0aGlzKX07cmV0dXJuIHUuRXh0ZW5kKGQsdS5PYnNlcnZhYmxlKSxkLnByb3RvdHlwZS5fZ2VuZXJhdGVJZD1mdW5jdGlvbihlKXtyZXR1cm5cInNlbGVjdDItXCIrKG51bGwhPWUuYXR0cihcImlkXCIpP2UuYXR0cihcImlkXCIpOm51bGwhPWUuYXR0cihcIm5hbWVcIik/ZS5hdHRyKFwibmFtZVwiKStcIi1cIit1LmdlbmVyYXRlQ2hhcnMoMik6dS5nZW5lcmF0ZUNoYXJzKDQpKS5yZXBsYWNlKC8oOnxcXC58XFxbfFxcXXwsKS9nLFwiXCIpfSxkLnByb3RvdHlwZS5fcGxhY2VDb250YWluZXI9ZnVuY3Rpb24oZSl7ZS5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KTt2YXIgdD10aGlzLl9yZXNvbHZlV2lkdGgodGhpcy4kZWxlbWVudCx0aGlzLm9wdGlvbnMuZ2V0KFwid2lkdGhcIikpO251bGwhPXQmJmUuY3NzKFwid2lkdGhcIix0KX0sZC5wcm90b3R5cGUuX3Jlc29sdmVXaWR0aD1mdW5jdGlvbihlLHQpe3ZhciBuPS9ed2lkdGg6KChbLStdPyhbMC05XSpcXC4pP1swLTldKykocHh8ZW18ZXh8JXxpbnxjbXxtbXxwdHxwYykpL2k7aWYoXCJyZXNvbHZlXCI9PXQpe3ZhciByPXRoaXMuX3Jlc29sdmVXaWR0aChlLFwic3R5bGVcIik7cmV0dXJuIG51bGwhPXI/cjp0aGlzLl9yZXNvbHZlV2lkdGgoZSxcImVsZW1lbnRcIil9aWYoXCJlbGVtZW50XCI9PXQpe3ZhciBpPWUub3V0ZXJXaWR0aCghMSk7cmV0dXJuIGk8PTA/XCJhdXRvXCI6aStcInB4XCJ9aWYoXCJzdHlsZVwiIT10KXJldHVyblwiY29tcHV0ZWRzdHlsZVwiIT10P3Q6d2luZG93LmdldENvbXB1dGVkU3R5bGUoZVswXSkud2lkdGg7dmFyIG89ZS5hdHRyKFwic3R5bGVcIik7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIG8pcmV0dXJuIG51bGw7Zm9yKHZhciBzPW8uc3BsaXQoXCI7XCIpLGE9MCxsPXMubGVuZ3RoO2E8bDthKz0xKXt2YXIgYz1zW2FdLnJlcGxhY2UoL1xccy9nLFwiXCIpLm1hdGNoKG4pO2lmKG51bGwhPT1jJiYxPD1jLmxlbmd0aClyZXR1cm4gY1sxXX1yZXR1cm4gbnVsbH0sZC5wcm90b3R5cGUuX2JpbmRBZGFwdGVycz1mdW5jdGlvbigpe3RoaXMuZGF0YUFkYXB0ZXIuYmluZCh0aGlzLHRoaXMuJGNvbnRhaW5lciksdGhpcy5zZWxlY3Rpb24uYmluZCh0aGlzLHRoaXMuJGNvbnRhaW5lciksdGhpcy5kcm9wZG93bi5iaW5kKHRoaXMsdGhpcy4kY29udGFpbmVyKSx0aGlzLnJlc3VsdHMuYmluZCh0aGlzLHRoaXMuJGNvbnRhaW5lcil9LGQucHJvdG90eXBlLl9yZWdpc3RlckRvbUV2ZW50cz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy4kZWxlbWVudC5vbihcImNoYW5nZS5zZWxlY3QyXCIsZnVuY3Rpb24oKXt0LmRhdGFBZGFwdGVyLmN1cnJlbnQoZnVuY3Rpb24oZSl7dC50cmlnZ2VyKFwic2VsZWN0aW9uOnVwZGF0ZVwiLHtkYXRhOmV9KX0pfSksdGhpcy4kZWxlbWVudC5vbihcImZvY3VzLnNlbGVjdDJcIixmdW5jdGlvbihlKXt0LnRyaWdnZXIoXCJmb2N1c1wiLGUpfSksdGhpcy5fc3luY0E9dS5iaW5kKHRoaXMuX3N5bmNBdHRyaWJ1dGVzLHRoaXMpLHRoaXMuX3N5bmNTPXUuYmluZCh0aGlzLl9zeW5jU3VidHJlZSx0aGlzKSx0aGlzLiRlbGVtZW50WzBdLmF0dGFjaEV2ZW50JiZ0aGlzLiRlbGVtZW50WzBdLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLHRoaXMuX3N5bmNBKTt2YXIgZT13aW5kb3cuTXV0YXRpb25PYnNlcnZlcnx8d2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXJ8fHdpbmRvdy5Nb3pNdXRhdGlvbk9ic2VydmVyO251bGwhPWU/KHRoaXMuX29ic2VydmVyPW5ldyBlKGZ1bmN0aW9uKGUpe3QuX3N5bmNBKCksdC5fc3luY1MobnVsbCxlKX0pLHRoaXMuX29ic2VydmVyLm9ic2VydmUodGhpcy4kZWxlbWVudFswXSx7YXR0cmlidXRlczohMCxjaGlsZExpc3Q6ITAsc3VidHJlZTohMX0pKTp0aGlzLiRlbGVtZW50WzBdLmFkZEV2ZW50TGlzdGVuZXImJih0aGlzLiRlbGVtZW50WzBdLmFkZEV2ZW50TGlzdGVuZXIoXCJET01BdHRyTW9kaWZpZWRcIix0Ll9zeW5jQSwhMSksdGhpcy4kZWxlbWVudFswXS5hZGRFdmVudExpc3RlbmVyKFwiRE9NTm9kZUluc2VydGVkXCIsdC5fc3luY1MsITEpLHRoaXMuJGVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcihcIkRPTU5vZGVSZW1vdmVkXCIsdC5fc3luY1MsITEpKX0sZC5wcm90b3R5cGUuX3JlZ2lzdGVyRGF0YUV2ZW50cz1mdW5jdGlvbigpe3ZhciBuPXRoaXM7dGhpcy5kYXRhQWRhcHRlci5vbihcIipcIixmdW5jdGlvbihlLHQpe24udHJpZ2dlcihlLHQpfSl9LGQucHJvdG90eXBlLl9yZWdpc3RlclNlbGVjdGlvbkV2ZW50cz1mdW5jdGlvbigpe3ZhciBuPXRoaXMscj1bXCJ0b2dnbGVcIixcImZvY3VzXCJdO3RoaXMuc2VsZWN0aW9uLm9uKFwidG9nZ2xlXCIsZnVuY3Rpb24oKXtuLnRvZ2dsZURyb3Bkb3duKCl9KSx0aGlzLnNlbGVjdGlvbi5vbihcImZvY3VzXCIsZnVuY3Rpb24oZSl7bi5mb2N1cyhlKX0pLHRoaXMuc2VsZWN0aW9uLm9uKFwiKlwiLGZ1bmN0aW9uKGUsdCl7LTE9PT1vLmluQXJyYXkoZSxyKSYmbi50cmlnZ2VyKGUsdCl9KX0sZC5wcm90b3R5cGUuX3JlZ2lzdGVyRHJvcGRvd25FdmVudHM9ZnVuY3Rpb24oKXt2YXIgbj10aGlzO3RoaXMuZHJvcGRvd24ub24oXCIqXCIsZnVuY3Rpb24oZSx0KXtuLnRyaWdnZXIoZSx0KX0pfSxkLnByb3RvdHlwZS5fcmVnaXN0ZXJSZXN1bHRzRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIG49dGhpczt0aGlzLnJlc3VsdHMub24oXCIqXCIsZnVuY3Rpb24oZSx0KXtuLnRyaWdnZXIoZSx0KX0pfSxkLnByb3RvdHlwZS5fcmVnaXN0ZXJFdmVudHM9ZnVuY3Rpb24oKXt2YXIgbj10aGlzO3RoaXMub24oXCJvcGVuXCIsZnVuY3Rpb24oKXtuLiRjb250YWluZXIuYWRkQ2xhc3MoXCJzZWxlY3QyLWNvbnRhaW5lci0tb3BlblwiKX0pLHRoaXMub24oXCJjbG9zZVwiLGZ1bmN0aW9uKCl7bi4kY29udGFpbmVyLnJlbW92ZUNsYXNzKFwic2VsZWN0Mi1jb250YWluZXItLW9wZW5cIil9KSx0aGlzLm9uKFwiZW5hYmxlXCIsZnVuY3Rpb24oKXtuLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoXCJzZWxlY3QyLWNvbnRhaW5lci0tZGlzYWJsZWRcIil9KSx0aGlzLm9uKFwiZGlzYWJsZVwiLGZ1bmN0aW9uKCl7bi4kY29udGFpbmVyLmFkZENsYXNzKFwic2VsZWN0Mi1jb250YWluZXItLWRpc2FibGVkXCIpfSksdGhpcy5vbihcImJsdXJcIixmdW5jdGlvbigpe24uJGNvbnRhaW5lci5yZW1vdmVDbGFzcyhcInNlbGVjdDItY29udGFpbmVyLS1mb2N1c1wiKX0pLHRoaXMub24oXCJxdWVyeVwiLGZ1bmN0aW9uKHQpe24uaXNPcGVuKCl8fG4udHJpZ2dlcihcIm9wZW5cIix7fSksdGhpcy5kYXRhQWRhcHRlci5xdWVyeSh0LGZ1bmN0aW9uKGUpe24udHJpZ2dlcihcInJlc3VsdHM6YWxsXCIse2RhdGE6ZSxxdWVyeTp0fSl9KX0pLHRoaXMub24oXCJxdWVyeTphcHBlbmRcIixmdW5jdGlvbih0KXt0aGlzLmRhdGFBZGFwdGVyLnF1ZXJ5KHQsZnVuY3Rpb24oZSl7bi50cmlnZ2VyKFwicmVzdWx0czphcHBlbmRcIix7ZGF0YTplLHF1ZXJ5OnR9KX0pfSksdGhpcy5vbihcImtleXByZXNzXCIsZnVuY3Rpb24oZSl7dmFyIHQ9ZS53aGljaDtuLmlzT3BlbigpP3Q9PT1yLkVTQ3x8dD09PXIuVEFCfHx0PT09ci5VUCYmZS5hbHRLZXk/KG4uY2xvc2UoZSksZS5wcmV2ZW50RGVmYXVsdCgpKTp0PT09ci5FTlRFUj8obi50cmlnZ2VyKFwicmVzdWx0czpzZWxlY3RcIix7fSksZS5wcmV2ZW50RGVmYXVsdCgpKTp0PT09ci5TUEFDRSYmZS5jdHJsS2V5PyhuLnRyaWdnZXIoXCJyZXN1bHRzOnRvZ2dsZVwiLHt9KSxlLnByZXZlbnREZWZhdWx0KCkpOnQ9PT1yLlVQPyhuLnRyaWdnZXIoXCJyZXN1bHRzOnByZXZpb3VzXCIse30pLGUucHJldmVudERlZmF1bHQoKSk6dD09PXIuRE9XTiYmKG4udHJpZ2dlcihcInJlc3VsdHM6bmV4dFwiLHt9KSxlLnByZXZlbnREZWZhdWx0KCkpOih0PT09ci5FTlRFUnx8dD09PXIuU1BBQ0V8fHQ9PT1yLkRPV04mJmUuYWx0S2V5KSYmKG4ub3BlbigpLGUucHJldmVudERlZmF1bHQoKSl9KX0sZC5wcm90b3R5cGUuX3N5bmNBdHRyaWJ1dGVzPWZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zLnNldChcImRpc2FibGVkXCIsdGhpcy4kZWxlbWVudC5wcm9wKFwiZGlzYWJsZWRcIikpLHRoaXMuaXNEaXNhYmxlZCgpPyh0aGlzLmlzT3BlbigpJiZ0aGlzLmNsb3NlKCksdGhpcy50cmlnZ2VyKFwiZGlzYWJsZVwiLHt9KSk6dGhpcy50cmlnZ2VyKFwiZW5hYmxlXCIse30pfSxkLnByb3RvdHlwZS5faXNDaGFuZ2VNdXRhdGlvbj1mdW5jdGlvbihlLHQpe3ZhciBuPSExLHI9dGhpcztpZighZXx8IWUudGFyZ2V0fHxcIk9QVElPTlwiPT09ZS50YXJnZXQubm9kZU5hbWV8fFwiT1BUR1JPVVBcIj09PWUudGFyZ2V0Lm5vZGVOYW1lKXtpZih0KWlmKHQuYWRkZWROb2RlcyYmMDx0LmFkZGVkTm9kZXMubGVuZ3RoKWZvcih2YXIgaT0wO2k8dC5hZGRlZE5vZGVzLmxlbmd0aDtpKyspe3QuYWRkZWROb2Rlc1tpXS5zZWxlY3RlZCYmKG49ITApfWVsc2UgdC5yZW1vdmVkTm9kZXMmJjA8dC5yZW1vdmVkTm9kZXMubGVuZ3RoP249ITA6by5pc0FycmF5KHQpJiZvLmVhY2godCxmdW5jdGlvbihlLHQpe2lmKHIuX2lzQ2hhbmdlTXV0YXRpb24oZSx0KSlyZXR1cm4hKG49ITApfSk7ZWxzZSBuPSEwO3JldHVybiBufX0sZC5wcm90b3R5cGUuX3N5bmNTdWJ0cmVlPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5faXNDaGFuZ2VNdXRhdGlvbihlLHQpLHI9dGhpcztuJiZ0aGlzLmRhdGFBZGFwdGVyLmN1cnJlbnQoZnVuY3Rpb24oZSl7ci50cmlnZ2VyKFwic2VsZWN0aW9uOnVwZGF0ZVwiLHtkYXRhOmV9KX0pfSxkLnByb3RvdHlwZS50cmlnZ2VyPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZC5fX3N1cGVyX18udHJpZ2dlcixyPXtvcGVuOlwib3BlbmluZ1wiLGNsb3NlOlwiY2xvc2luZ1wiLHNlbGVjdDpcInNlbGVjdGluZ1wiLHVuc2VsZWN0OlwidW5zZWxlY3RpbmdcIixjbGVhcjpcImNsZWFyaW5nXCJ9O2lmKHZvaWQgMD09PXQmJih0PXt9KSxlIGluIHIpe3ZhciBpPXJbZV0sbz17cHJldmVudGVkOiExLG5hbWU6ZSxhcmdzOnR9O2lmKG4uY2FsbCh0aGlzLGksbyksby5wcmV2ZW50ZWQpcmV0dXJuIHZvaWQodC5wcmV2ZW50ZWQ9ITApfW4uY2FsbCh0aGlzLGUsdCl9LGQucHJvdG90eXBlLnRvZ2dsZURyb3Bkb3duPWZ1bmN0aW9uKCl7dGhpcy5pc0Rpc2FibGVkKCl8fCh0aGlzLmlzT3BlbigpP3RoaXMuY2xvc2UoKTp0aGlzLm9wZW4oKSl9LGQucHJvdG90eXBlLm9wZW49ZnVuY3Rpb24oKXt0aGlzLmlzT3BlbigpfHx0aGlzLmlzRGlzYWJsZWQoKXx8dGhpcy50cmlnZ2VyKFwicXVlcnlcIix7fSl9LGQucHJvdG90eXBlLmNsb3NlPWZ1bmN0aW9uKGUpe3RoaXMuaXNPcGVuKCkmJnRoaXMudHJpZ2dlcihcImNsb3NlXCIse29yaWdpbmFsRXZlbnQ6ZX0pfSxkLnByb3RvdHlwZS5pc0VuYWJsZWQ9ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5pc0Rpc2FibGVkKCl9LGQucHJvdG90eXBlLmlzRGlzYWJsZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vcHRpb25zLmdldChcImRpc2FibGVkXCIpfSxkLnByb3RvdHlwZS5pc09wZW49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kY29udGFpbmVyLmhhc0NsYXNzKFwic2VsZWN0Mi1jb250YWluZXItLW9wZW5cIil9LGQucHJvdG90eXBlLmhhc0ZvY3VzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGNvbnRhaW5lci5oYXNDbGFzcyhcInNlbGVjdDItY29udGFpbmVyLS1mb2N1c1wiKX0sZC5wcm90b3R5cGUuZm9jdXM9ZnVuY3Rpb24oZSl7dGhpcy5oYXNGb2N1cygpfHwodGhpcy4kY29udGFpbmVyLmFkZENsYXNzKFwic2VsZWN0Mi1jb250YWluZXItLWZvY3VzXCIpLHRoaXMudHJpZ2dlcihcImZvY3VzXCIse30pKX0sZC5wcm90b3R5cGUuZW5hYmxlPWZ1bmN0aW9uKGUpe3RoaXMub3B0aW9ucy5nZXQoXCJkZWJ1Z1wiKSYmd2luZG93LmNvbnNvbGUmJmNvbnNvbGUud2FybiYmY29uc29sZS53YXJuKCdTZWxlY3QyOiBUaGUgYHNlbGVjdDIoXCJlbmFibGVcIilgIG1ldGhvZCBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gbGF0ZXIgU2VsZWN0MiB2ZXJzaW9ucy4gVXNlICRlbGVtZW50LnByb3AoXCJkaXNhYmxlZFwiKSBpbnN0ZWFkLicpLG51bGwhPWUmJjAhPT1lLmxlbmd0aHx8KGU9WyEwXSk7dmFyIHQ9IWVbMF07dGhpcy4kZWxlbWVudC5wcm9wKFwiZGlzYWJsZWRcIix0KX0sZC5wcm90b3R5cGUuZGF0YT1mdW5jdGlvbigpe3RoaXMub3B0aW9ucy5nZXQoXCJkZWJ1Z1wiKSYmMDxhcmd1bWVudHMubGVuZ3RoJiZ3aW5kb3cuY29uc29sZSYmY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4oJ1NlbGVjdDI6IERhdGEgY2FuIG5vIGxvbmdlciBiZSBzZXQgdXNpbmcgYHNlbGVjdDIoXCJkYXRhXCIpYC4gWW91IHNob3VsZCBjb25zaWRlciBzZXR0aW5nIHRoZSB2YWx1ZSBpbnN0ZWFkIHVzaW5nIGAkZWxlbWVudC52YWwoKWAuJyk7dmFyIHQ9W107cmV0dXJuIHRoaXMuZGF0YUFkYXB0ZXIuY3VycmVudChmdW5jdGlvbihlKXt0PWV9KSx0fSxkLnByb3RvdHlwZS52YWw9ZnVuY3Rpb24oZSl7aWYodGhpcy5vcHRpb25zLmdldChcImRlYnVnXCIpJiZ3aW5kb3cuY29uc29sZSYmY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4oJ1NlbGVjdDI6IFRoZSBgc2VsZWN0MihcInZhbFwiKWAgbWV0aG9kIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBsYXRlciBTZWxlY3QyIHZlcnNpb25zLiBVc2UgJGVsZW1lbnQudmFsKCkgaW5zdGVhZC4nKSxudWxsPT1lfHwwPT09ZS5sZW5ndGgpcmV0dXJuIHRoaXMuJGVsZW1lbnQudmFsKCk7dmFyIHQ9ZVswXTtvLmlzQXJyYXkodCkmJih0PW8ubWFwKHQsZnVuY3Rpb24oZSl7cmV0dXJuIGUudG9TdHJpbmcoKX0pKSx0aGlzLiRlbGVtZW50LnZhbCh0KS50cmlnZ2VyKFwiaW5wdXRcIikudHJpZ2dlcihcImNoYW5nZVwiKX0sZC5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3RoaXMuJGNvbnRhaW5lci5yZW1vdmUoKSx0aGlzLiRlbGVtZW50WzBdLmRldGFjaEV2ZW50JiZ0aGlzLiRlbGVtZW50WzBdLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLHRoaXMuX3N5bmNBKSxudWxsIT10aGlzLl9vYnNlcnZlcj8odGhpcy5fb2JzZXJ2ZXIuZGlzY29ubmVjdCgpLHRoaXMuX29ic2VydmVyPW51bGwpOnRoaXMuJGVsZW1lbnRbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lciYmKHRoaXMuJGVsZW1lbnRbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUF0dHJNb2RpZmllZFwiLHRoaXMuX3N5bmNBLCExKSx0aGlzLiRlbGVtZW50WzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Ob2RlSW5zZXJ0ZWRcIix0aGlzLl9zeW5jUywhMSksdGhpcy4kZWxlbWVudFswXS5yZW1vdmVFdmVudExpc3RlbmVyKFwiRE9NTm9kZVJlbW92ZWRcIix0aGlzLl9zeW5jUywhMSkpLHRoaXMuX3N5bmNBPW51bGwsdGhpcy5fc3luY1M9bnVsbCx0aGlzLiRlbGVtZW50Lm9mZihcIi5zZWxlY3QyXCIpLHRoaXMuJGVsZW1lbnQuYXR0cihcInRhYmluZGV4XCIsdS5HZXREYXRhKHRoaXMuJGVsZW1lbnRbMF0sXCJvbGQtdGFiaW5kZXhcIikpLHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJzZWxlY3QyLWhpZGRlbi1hY2Nlc3NpYmxlXCIpLHRoaXMuJGVsZW1lbnQuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKSx1LlJlbW92ZURhdGEodGhpcy4kZWxlbWVudFswXSksdGhpcy4kZWxlbWVudC5yZW1vdmVEYXRhKFwic2VsZWN0MlwiKSx0aGlzLmRhdGFBZGFwdGVyLmRlc3Ryb3koKSx0aGlzLnNlbGVjdGlvbi5kZXN0cm95KCksdGhpcy5kcm9wZG93bi5kZXN0cm95KCksdGhpcy5yZXN1bHRzLmRlc3Ryb3koKSx0aGlzLmRhdGFBZGFwdGVyPW51bGwsdGhpcy5zZWxlY3Rpb249bnVsbCx0aGlzLmRyb3Bkb3duPW51bGwsdGhpcy5yZXN1bHRzPW51bGx9LGQucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbigpe3ZhciBlPW8oJzxzcGFuIGNsYXNzPVwic2VsZWN0MiBzZWxlY3QyLWNvbnRhaW5lclwiPjxzcGFuIGNsYXNzPVwic2VsZWN0aW9uXCI+PC9zcGFuPjxzcGFuIGNsYXNzPVwiZHJvcGRvd24td3JhcHBlclwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj48L3NwYW4+Jyk7cmV0dXJuIGUuYXR0cihcImRpclwiLHRoaXMub3B0aW9ucy5nZXQoXCJkaXJcIikpLHRoaXMuJGNvbnRhaW5lcj1lLHRoaXMuJGNvbnRhaW5lci5hZGRDbGFzcyhcInNlbGVjdDItY29udGFpbmVyLS1cIit0aGlzLm9wdGlvbnMuZ2V0KFwidGhlbWVcIikpLHUuU3RvcmVEYXRhKGVbMF0sXCJlbGVtZW50XCIsdGhpcy4kZWxlbWVudCksZX0sZH0pLGUuZGVmaW5lKFwianF1ZXJ5LW1vdXNld2hlZWxcIixbXCJqcXVlcnlcIl0sZnVuY3Rpb24oZSl7cmV0dXJuIGV9KSxlLmRlZmluZShcImpxdWVyeS5zZWxlY3QyXCIsW1wianF1ZXJ5XCIsXCJqcXVlcnktbW91c2V3aGVlbFwiLFwiLi9zZWxlY3QyL2NvcmVcIixcIi4vc2VsZWN0Mi9kZWZhdWx0c1wiLFwiLi9zZWxlY3QyL3V0aWxzXCJdLGZ1bmN0aW9uKGksZSxvLHQscyl7aWYobnVsbD09aS5mbi5zZWxlY3QyKXt2YXIgYT1bXCJvcGVuXCIsXCJjbG9zZVwiLFwiZGVzdHJveVwiXTtpLmZuLnNlbGVjdDI9ZnVuY3Rpb24odCl7aWYoXCJvYmplY3RcIj09dHlwZW9mKHQ9dHx8e30pKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZT1pLmV4dGVuZCghMCx7fSx0KTtuZXcgbyhpKHRoaXMpLGUpfSksdGhpcztpZihcInN0cmluZ1wiIT10eXBlb2YgdCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBmb3IgU2VsZWN0MjogXCIrdCk7dmFyIG4scj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBlPXMuR2V0RGF0YSh0aGlzLFwic2VsZWN0MlwiKTtudWxsPT1lJiZ3aW5kb3cuY29uc29sZSYmY29uc29sZS5lcnJvciYmY29uc29sZS5lcnJvcihcIlRoZSBzZWxlY3QyKCdcIit0K1wiJykgbWV0aG9kIHdhcyBjYWxsZWQgb24gYW4gZWxlbWVudCB0aGF0IGlzIG5vdCB1c2luZyBTZWxlY3QyLlwiKSxuPWVbdF0uYXBwbHkoZSxyKX0pLC0xPGkuaW5BcnJheSh0LGEpP3RoaXM6bn19cmV0dXJuIG51bGw9PWkuZm4uc2VsZWN0Mi5kZWZhdWx0cyYmKGkuZm4uc2VsZWN0Mi5kZWZhdWx0cz10KSxvfSkse2RlZmluZTplLmRlZmluZSxyZXF1aXJlOmUucmVxdWlyZX19KCksdD1lLnJlcXVpcmUoXCJqcXVlcnkuc2VsZWN0MlwiKTtyZXR1cm4gdS5mbi5zZWxlY3QyLmFtZD1lLHR9KTtcclxuIiwiIWZ1bmN0aW9uKGkpe1widXNlIHN0cmljdFwiO1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wianF1ZXJ5XCJdLGkpOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPWkocmVxdWlyZShcImpxdWVyeVwiKSk6aShqUXVlcnkpfShmdW5jdGlvbihpKXtcInVzZSBzdHJpY3RcIjt2YXIgZT13aW5kb3cuU2xpY2t8fHt9OyhlPWZ1bmN0aW9uKCl7dmFyIGU9MDtyZXR1cm4gZnVuY3Rpb24odCxvKXt2YXIgcyxuPXRoaXM7bi5kZWZhdWx0cz17YWNjZXNzaWJpbGl0eTohMCxhZGFwdGl2ZUhlaWdodDohMSxhcHBlbmRBcnJvd3M6aSh0KSxhcHBlbmREb3RzOmkodCksYXJyb3dzOiEwLGFzTmF2Rm9yOm51bGwscHJldkFycm93Oic8YnV0dG9uIGNsYXNzPVwic2xpY2stcHJldlwiIGFyaWEtbGFiZWw9XCJQcmV2aW91c1wiIHR5cGU9XCJidXR0b25cIj5QcmV2aW91czwvYnV0dG9uPicsbmV4dEFycm93Oic8YnV0dG9uIGNsYXNzPVwic2xpY2stbmV4dFwiIGFyaWEtbGFiZWw9XCJOZXh0XCIgdHlwZT1cImJ1dHRvblwiPk5leHQ8L2J1dHRvbj4nLGF1dG9wbGF5OiExLGF1dG9wbGF5U3BlZWQ6M2UzLGNlbnRlck1vZGU6ITEsY2VudGVyUGFkZGluZzpcIjUwcHhcIixjc3NFYXNlOlwiZWFzZVwiLGN1c3RvbVBhZ2luZzpmdW5jdGlvbihlLHQpe3JldHVybiBpKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiAvPicpLnRleHQodCsxKX0sZG90czohMSxkb3RzQ2xhc3M6XCJzbGljay1kb3RzXCIsZHJhZ2dhYmxlOiEwLGVhc2luZzpcImxpbmVhclwiLGVkZ2VGcmljdGlvbjouMzUsZmFkZTohMSxmb2N1c09uU2VsZWN0OiExLGZvY3VzT25DaGFuZ2U6ITEsaW5maW5pdGU6ITAsaW5pdGlhbFNsaWRlOjAsbGF6eUxvYWQ6XCJvbmRlbWFuZFwiLG1vYmlsZUZpcnN0OiExLHBhdXNlT25Ib3ZlcjohMCxwYXVzZU9uRm9jdXM6ITAscGF1c2VPbkRvdHNIb3ZlcjohMSxyZXNwb25kVG86XCJ3aW5kb3dcIixyZXNwb25zaXZlOm51bGwscm93czoxLHJ0bDohMSxzbGlkZTpcIlwiLHNsaWRlc1BlclJvdzoxLHNsaWRlc1RvU2hvdzoxLHNsaWRlc1RvU2Nyb2xsOjEsc3BlZWQ6NTAwLHN3aXBlOiEwLHN3aXBlVG9TbGlkZTohMSx0b3VjaE1vdmU6ITAsdG91Y2hUaHJlc2hvbGQ6NSx1c2VDU1M6ITAsdXNlVHJhbnNmb3JtOiEwLHZhcmlhYmxlV2lkdGg6ITEsdmVydGljYWw6ITEsdmVydGljYWxTd2lwaW5nOiExLHdhaXRGb3JBbmltYXRlOiEwLHpJbmRleDoxZTN9LG4uaW5pdGlhbHM9e2FuaW1hdGluZzohMSxkcmFnZ2luZzohMSxhdXRvUGxheVRpbWVyOm51bGwsY3VycmVudERpcmVjdGlvbjowLGN1cnJlbnRMZWZ0Om51bGwsY3VycmVudFNsaWRlOjAsZGlyZWN0aW9uOjEsJGRvdHM6bnVsbCxsaXN0V2lkdGg6bnVsbCxsaXN0SGVpZ2h0Om51bGwsbG9hZEluZGV4OjAsJG5leHRBcnJvdzpudWxsLCRwcmV2QXJyb3c6bnVsbCxzY3JvbGxpbmc6ITEsc2xpZGVDb3VudDpudWxsLHNsaWRlV2lkdGg6bnVsbCwkc2xpZGVUcmFjazpudWxsLCRzbGlkZXM6bnVsbCxzbGlkaW5nOiExLHNsaWRlT2Zmc2V0OjAsc3dpcGVMZWZ0Om51bGwsc3dpcGluZzohMSwkbGlzdDpudWxsLHRvdWNoT2JqZWN0Ont9LHRyYW5zZm9ybXNFbmFibGVkOiExLHVuc2xpY2tlZDohMX0saS5leHRlbmQobixuLmluaXRpYWxzKSxuLmFjdGl2ZUJyZWFrcG9pbnQ9bnVsbCxuLmFuaW1UeXBlPW51bGwsbi5hbmltUHJvcD1udWxsLG4uYnJlYWtwb2ludHM9W10sbi5icmVha3BvaW50U2V0dGluZ3M9W10sbi5jc3NUcmFuc2l0aW9ucz0hMSxuLmZvY3Vzc2VkPSExLG4uaW50ZXJydXB0ZWQ9ITEsbi5oaWRkZW49XCJoaWRkZW5cIixuLnBhdXNlZD0hMCxuLnBvc2l0aW9uUHJvcD1udWxsLG4ucmVzcG9uZFRvPW51bGwsbi5yb3dDb3VudD0xLG4uc2hvdWxkQ2xpY2s9ITAsbi4kc2xpZGVyPWkodCksbi4kc2xpZGVzQ2FjaGU9bnVsbCxuLnRyYW5zZm9ybVR5cGU9bnVsbCxuLnRyYW5zaXRpb25UeXBlPW51bGwsbi52aXNpYmlsaXR5Q2hhbmdlPVwidmlzaWJpbGl0eWNoYW5nZVwiLG4ud2luZG93V2lkdGg9MCxuLndpbmRvd1RpbWVyPW51bGwscz1pKHQpLmRhdGEoXCJzbGlja1wiKXx8e30sbi5vcHRpb25zPWkuZXh0ZW5kKHt9LG4uZGVmYXVsdHMsbyxzKSxuLmN1cnJlbnRTbGlkZT1uLm9wdGlvbnMuaW5pdGlhbFNsaWRlLG4ub3JpZ2luYWxTZXR0aW5ncz1uLm9wdGlvbnMsdm9pZCAwIT09ZG9jdW1lbnQubW96SGlkZGVuPyhuLmhpZGRlbj1cIm1vekhpZGRlblwiLG4udmlzaWJpbGl0eUNoYW5nZT1cIm1venZpc2liaWxpdHljaGFuZ2VcIik6dm9pZCAwIT09ZG9jdW1lbnQud2Via2l0SGlkZGVuJiYobi5oaWRkZW49XCJ3ZWJraXRIaWRkZW5cIixuLnZpc2liaWxpdHlDaGFuZ2U9XCJ3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlXCIpLG4uYXV0b1BsYXk9aS5wcm94eShuLmF1dG9QbGF5LG4pLG4uYXV0b1BsYXlDbGVhcj1pLnByb3h5KG4uYXV0b1BsYXlDbGVhcixuKSxuLmF1dG9QbGF5SXRlcmF0b3I9aS5wcm94eShuLmF1dG9QbGF5SXRlcmF0b3Isbiksbi5jaGFuZ2VTbGlkZT1pLnByb3h5KG4uY2hhbmdlU2xpZGUsbiksbi5jbGlja0hhbmRsZXI9aS5wcm94eShuLmNsaWNrSGFuZGxlcixuKSxuLnNlbGVjdEhhbmRsZXI9aS5wcm94eShuLnNlbGVjdEhhbmRsZXIsbiksbi5zZXRQb3NpdGlvbj1pLnByb3h5KG4uc2V0UG9zaXRpb24sbiksbi5zd2lwZUhhbmRsZXI9aS5wcm94eShuLnN3aXBlSGFuZGxlcixuKSxuLmRyYWdIYW5kbGVyPWkucHJveHkobi5kcmFnSGFuZGxlcixuKSxuLmtleUhhbmRsZXI9aS5wcm94eShuLmtleUhhbmRsZXIsbiksbi5pbnN0YW5jZVVpZD1lKyssbi5odG1sRXhwcj0vXig/OlxccyooPFtcXHdcXFddKz4pW14+XSopJC8sbi5yZWdpc3RlckJyZWFrcG9pbnRzKCksbi5pbml0KCEwKX19KCkpLnByb3RvdHlwZS5hY3RpdmF0ZUFEQT1mdW5jdGlvbigpe3RoaXMuJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1hY3RpdmVcIikuYXR0cih7XCJhcmlhLWhpZGRlblwiOlwiZmFsc2VcIn0pLmZpbmQoXCJhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3RcIikuYXR0cih7dGFiaW5kZXg6XCIwXCJ9KX0sZS5wcm90b3R5cGUuYWRkU2xpZGU9ZS5wcm90b3R5cGUuc2xpY2tBZGQ9ZnVuY3Rpb24oZSx0LG8pe3ZhciBzPXRoaXM7aWYoXCJib29sZWFuXCI9PXR5cGVvZiB0KW89dCx0PW51bGw7ZWxzZSBpZih0PDB8fHQ+PXMuc2xpZGVDb3VudClyZXR1cm4hMTtzLnVubG9hZCgpLFwibnVtYmVyXCI9PXR5cGVvZiB0PzA9PT10JiYwPT09cy4kc2xpZGVzLmxlbmd0aD9pKGUpLmFwcGVuZFRvKHMuJHNsaWRlVHJhY2spOm8/aShlKS5pbnNlcnRCZWZvcmUocy4kc2xpZGVzLmVxKHQpKTppKGUpLmluc2VydEFmdGVyKHMuJHNsaWRlcy5lcSh0KSk6ITA9PT1vP2koZSkucHJlcGVuZFRvKHMuJHNsaWRlVHJhY2spOmkoZSkuYXBwZW5kVG8ocy4kc2xpZGVUcmFjaykscy4kc2xpZGVzPXMuJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKSxzLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCkscy4kc2xpZGVUcmFjay5hcHBlbmQocy4kc2xpZGVzKSxzLiRzbGlkZXMuZWFjaChmdW5jdGlvbihlLHQpe2kodCkuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIixlKX0pLHMuJHNsaWRlc0NhY2hlPXMuJHNsaWRlcyxzLnJlaW5pdCgpfSxlLnByb3RvdHlwZS5hbmltYXRlSGVpZ2h0PWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpZigxPT09aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmITA9PT1pLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQmJiExPT09aS5vcHRpb25zLnZlcnRpY2FsKXt2YXIgZT1pLiRzbGlkZXMuZXEoaS5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KCEwKTtpLiRsaXN0LmFuaW1hdGUoe2hlaWdodDplfSxpLm9wdGlvbnMuc3BlZWQpfX0sZS5wcm90b3R5cGUuYW5pbWF0ZVNsaWRlPWZ1bmN0aW9uKGUsdCl7dmFyIG89e30scz10aGlzO3MuYW5pbWF0ZUhlaWdodCgpLCEwPT09cy5vcHRpb25zLnJ0bCYmITE9PT1zLm9wdGlvbnMudmVydGljYWwmJihlPS1lKSwhMT09PXMudHJhbnNmb3Jtc0VuYWJsZWQ/ITE9PT1zLm9wdGlvbnMudmVydGljYWw/cy4kc2xpZGVUcmFjay5hbmltYXRlKHtsZWZ0OmV9LHMub3B0aW9ucy5zcGVlZCxzLm9wdGlvbnMuZWFzaW5nLHQpOnMuJHNsaWRlVHJhY2suYW5pbWF0ZSh7dG9wOmV9LHMub3B0aW9ucy5zcGVlZCxzLm9wdGlvbnMuZWFzaW5nLHQpOiExPT09cy5jc3NUcmFuc2l0aW9ucz8oITA9PT1zLm9wdGlvbnMucnRsJiYocy5jdXJyZW50TGVmdD0tcy5jdXJyZW50TGVmdCksaSh7YW5pbVN0YXJ0OnMuY3VycmVudExlZnR9KS5hbmltYXRlKHthbmltU3RhcnQ6ZX0se2R1cmF0aW9uOnMub3B0aW9ucy5zcGVlZCxlYXNpbmc6cy5vcHRpb25zLmVhc2luZyxzdGVwOmZ1bmN0aW9uKGkpe2k9TWF0aC5jZWlsKGkpLCExPT09cy5vcHRpb25zLnZlcnRpY2FsPyhvW3MuYW5pbVR5cGVdPVwidHJhbnNsYXRlKFwiK2krXCJweCwgMHB4KVwiLHMuJHNsaWRlVHJhY2suY3NzKG8pKToob1tzLmFuaW1UeXBlXT1cInRyYW5zbGF0ZSgwcHgsXCIraStcInB4KVwiLHMuJHNsaWRlVHJhY2suY3NzKG8pKX0sY29tcGxldGU6ZnVuY3Rpb24oKXt0JiZ0LmNhbGwoKX19KSk6KHMuYXBwbHlUcmFuc2l0aW9uKCksZT1NYXRoLmNlaWwoZSksITE9PT1zLm9wdGlvbnMudmVydGljYWw/b1tzLmFuaW1UeXBlXT1cInRyYW5zbGF0ZTNkKFwiK2UrXCJweCwgMHB4LCAwcHgpXCI6b1tzLmFuaW1UeXBlXT1cInRyYW5zbGF0ZTNkKDBweCxcIitlK1wicHgsIDBweClcIixzLiRzbGlkZVRyYWNrLmNzcyhvKSx0JiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cy5kaXNhYmxlVHJhbnNpdGlvbigpLHQuY2FsbCgpfSxzLm9wdGlvbnMuc3BlZWQpKX0sZS5wcm90b3R5cGUuZ2V0TmF2VGFyZ2V0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUub3B0aW9ucy5hc05hdkZvcjtyZXR1cm4gdCYmbnVsbCE9PXQmJih0PWkodCkubm90KGUuJHNsaWRlcikpLHR9LGUucHJvdG90eXBlLmFzTmF2Rm9yPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZ2V0TmF2VGFyZ2V0KCk7bnVsbCE9PXQmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0LmVhY2goZnVuY3Rpb24oKXt2YXIgdD1pKHRoaXMpLnNsaWNrKFwiZ2V0U2xpY2tcIik7dC51bnNsaWNrZWR8fHQuc2xpZGVIYW5kbGVyKGUsITApfSl9LGUucHJvdG90eXBlLmFwcGx5VHJhbnNpdGlvbj1mdW5jdGlvbihpKXt2YXIgZT10aGlzLHQ9e307ITE9PT1lLm9wdGlvbnMuZmFkZT90W2UudHJhbnNpdGlvblR5cGVdPWUudHJhbnNmb3JtVHlwZStcIiBcIitlLm9wdGlvbnMuc3BlZWQrXCJtcyBcIitlLm9wdGlvbnMuY3NzRWFzZTp0W2UudHJhbnNpdGlvblR5cGVdPVwib3BhY2l0eSBcIitlLm9wdGlvbnMuc3BlZWQrXCJtcyBcIitlLm9wdGlvbnMuY3NzRWFzZSwhMT09PWUub3B0aW9ucy5mYWRlP2UuJHNsaWRlVHJhY2suY3NzKHQpOmUuJHNsaWRlcy5lcShpKS5jc3ModCl9LGUucHJvdG90eXBlLmF1dG9QbGF5PWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLmF1dG9QbGF5Q2xlYXIoKSxpLnNsaWRlQ291bnQ+aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGkuYXV0b1BsYXlUaW1lcj1zZXRJbnRlcnZhbChpLmF1dG9QbGF5SXRlcmF0b3IsaS5vcHRpb25zLmF1dG9wbGF5U3BlZWQpKX0sZS5wcm90b3R5cGUuYXV0b1BsYXlDbGVhcj1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5hdXRvUGxheVRpbWVyJiZjbGVhckludGVydmFsKGkuYXV0b1BsYXlUaW1lcil9LGUucHJvdG90eXBlLmF1dG9QbGF5SXRlcmF0b3I9ZnVuY3Rpb24oKXt2YXIgaT10aGlzLGU9aS5jdXJyZW50U2xpZGUraS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO2kucGF1c2VkfHxpLmludGVycnVwdGVkfHxpLmZvY3Vzc2VkfHwoITE9PT1pLm9wdGlvbnMuaW5maW5pdGUmJigxPT09aS5kaXJlY3Rpb24mJmkuY3VycmVudFNsaWRlKzE9PT1pLnNsaWRlQ291bnQtMT9pLmRpcmVjdGlvbj0wOjA9PT1pLmRpcmVjdGlvbiYmKGU9aS5jdXJyZW50U2xpZGUtaS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsLGkuY3VycmVudFNsaWRlLTE9PTAmJihpLmRpcmVjdGlvbj0xKSkpLGkuc2xpZGVIYW5kbGVyKGUpKX0sZS5wcm90b3R5cGUuYnVpbGRBcnJvd3M9ZnVuY3Rpb24oKXt2YXIgZT10aGlzOyEwPT09ZS5vcHRpb25zLmFycm93cyYmKGUuJHByZXZBcnJvdz1pKGUub3B0aW9ucy5wcmV2QXJyb3cpLmFkZENsYXNzKFwic2xpY2stYXJyb3dcIiksZS4kbmV4dEFycm93PWkoZS5vcHRpb25zLm5leHRBcnJvdykuYWRkQ2xhc3MoXCJzbGljay1hcnJvd1wiKSxlLnNsaWRlQ291bnQ+ZS5vcHRpb25zLnNsaWRlc1RvU2hvdz8oZS4kcHJldkFycm93LnJlbW92ZUNsYXNzKFwic2xpY2staGlkZGVuXCIpLnJlbW92ZUF0dHIoXCJhcmlhLWhpZGRlbiB0YWJpbmRleFwiKSxlLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuIHRhYmluZGV4XCIpLGUuaHRtbEV4cHIudGVzdChlLm9wdGlvbnMucHJldkFycm93KSYmZS4kcHJldkFycm93LnByZXBlbmRUbyhlLm9wdGlvbnMuYXBwZW5kQXJyb3dzKSxlLmh0bWxFeHByLnRlc3QoZS5vcHRpb25zLm5leHRBcnJvdykmJmUuJG5leHRBcnJvdy5hcHBlbmRUbyhlLm9wdGlvbnMuYXBwZW5kQXJyb3dzKSwhMCE9PWUub3B0aW9ucy5pbmZpbml0ZSYmZS4kcHJldkFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIikpOmUuJHByZXZBcnJvdy5hZGQoZS4kbmV4dEFycm93KS5hZGRDbGFzcyhcInNsaWNrLWhpZGRlblwiKS5hdHRyKHtcImFyaWEtZGlzYWJsZWRcIjpcInRydWVcIix0YWJpbmRleDpcIi0xXCJ9KSl9LGUucHJvdG90eXBlLmJ1aWxkRG90cz1mdW5jdGlvbigpe3ZhciBlLHQsbz10aGlzO2lmKCEwPT09by5vcHRpb25zLmRvdHMpe2ZvcihvLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay1kb3R0ZWRcIiksdD1pKFwiPHVsIC8+XCIpLmFkZENsYXNzKG8ub3B0aW9ucy5kb3RzQ2xhc3MpLGU9MDtlPD1vLmdldERvdENvdW50KCk7ZSs9MSl0LmFwcGVuZChpKFwiPGxpIC8+XCIpLmFwcGVuZChvLm9wdGlvbnMuY3VzdG9tUGFnaW5nLmNhbGwodGhpcyxvLGUpKSk7by4kZG90cz10LmFwcGVuZFRvKG8ub3B0aW9ucy5hcHBlbmREb3RzKSxvLiRkb3RzLmZpbmQoXCJsaVwiKS5maXJzdCgpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpfX0sZS5wcm90b3R5cGUuYnVpbGRPdXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuJHNsaWRlcz1lLiRzbGlkZXIuY2hpbGRyZW4oZS5vcHRpb25zLnNsaWRlK1wiOm5vdCguc2xpY2stY2xvbmVkKVwiKS5hZGRDbGFzcyhcInNsaWNrLXNsaWRlXCIpLGUuc2xpZGVDb3VudD1lLiRzbGlkZXMubGVuZ3RoLGUuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGUsdCl7aSh0KS5hdHRyKFwiZGF0YS1zbGljay1pbmRleFwiLGUpLmRhdGEoXCJvcmlnaW5hbFN0eWxpbmdcIixpKHQpLmF0dHIoXCJzdHlsZVwiKXx8XCJcIil9KSxlLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay1zbGlkZXJcIiksZS4kc2xpZGVUcmFjaz0wPT09ZS5zbGlkZUNvdW50P2koJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5hcHBlbmRUbyhlLiRzbGlkZXIpOmUuJHNsaWRlcy53cmFwQWxsKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykucGFyZW50KCksZS4kbGlzdD1lLiRzbGlkZVRyYWNrLndyYXAoJzxkaXYgY2xhc3M9XCJzbGljay1saXN0XCIvPicpLnBhcmVudCgpLGUuJHNsaWRlVHJhY2suY3NzKFwib3BhY2l0eVwiLDApLCEwIT09ZS5vcHRpb25zLmNlbnRlck1vZGUmJiEwIT09ZS5vcHRpb25zLnN3aXBlVG9TbGlkZXx8KGUub3B0aW9ucy5zbGlkZXNUb1Njcm9sbD0xKSxpKFwiaW1nW2RhdGEtbGF6eV1cIixlLiRzbGlkZXIpLm5vdChcIltzcmNdXCIpLmFkZENsYXNzKFwic2xpY2stbG9hZGluZ1wiKSxlLnNldHVwSW5maW5pdGUoKSxlLmJ1aWxkQXJyb3dzKCksZS5idWlsZERvdHMoKSxlLnVwZGF0ZURvdHMoKSxlLnNldFNsaWRlQ2xhc3NlcyhcIm51bWJlclwiPT10eXBlb2YgZS5jdXJyZW50U2xpZGU/ZS5jdXJyZW50U2xpZGU6MCksITA9PT1lLm9wdGlvbnMuZHJhZ2dhYmxlJiZlLiRsaXN0LmFkZENsYXNzKFwiZHJhZ2dhYmxlXCIpfSxlLnByb3RvdHlwZS5idWlsZFJvd3M9ZnVuY3Rpb24oKXt2YXIgaSxlLHQsbyxzLG4scixsPXRoaXM7aWYobz1kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksbj1sLiRzbGlkZXIuY2hpbGRyZW4oKSxsLm9wdGlvbnMucm93cz4xKXtmb3Iocj1sLm9wdGlvbnMuc2xpZGVzUGVyUm93Kmwub3B0aW9ucy5yb3dzLHM9TWF0aC5jZWlsKG4ubGVuZ3RoL3IpLGk9MDtpPHM7aSsrKXt2YXIgZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2ZvcihlPTA7ZTxsLm9wdGlvbnMucm93cztlKyspe3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Zm9yKHQ9MDt0PGwub3B0aW9ucy5zbGlkZXNQZXJSb3c7dCsrKXt2YXIgYz1pKnIrKGUqbC5vcHRpb25zLnNsaWRlc1BlclJvdyt0KTtuLmdldChjKSYmYS5hcHBlbmRDaGlsZChuLmdldChjKSl9ZC5hcHBlbmRDaGlsZChhKX1vLmFwcGVuZENoaWxkKGQpfWwuJHNsaWRlci5lbXB0eSgpLmFwcGVuZChvKSxsLiRzbGlkZXIuY2hpbGRyZW4oKS5jaGlsZHJlbigpLmNoaWxkcmVuKCkuY3NzKHt3aWR0aDoxMDAvbC5vcHRpb25zLnNsaWRlc1BlclJvdytcIiVcIixkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCJ9KX19LGUucHJvdG90eXBlLmNoZWNrUmVzcG9uc2l2ZT1mdW5jdGlvbihlLHQpe3ZhciBvLHMsbixyPXRoaXMsbD0hMSxkPXIuJHNsaWRlci53aWR0aCgpLGE9d2luZG93LmlubmVyV2lkdGh8fGkod2luZG93KS53aWR0aCgpO2lmKFwid2luZG93XCI9PT1yLnJlc3BvbmRUbz9uPWE6XCJzbGlkZXJcIj09PXIucmVzcG9uZFRvP249ZDpcIm1pblwiPT09ci5yZXNwb25kVG8mJihuPU1hdGgubWluKGEsZCkpLHIub3B0aW9ucy5yZXNwb25zaXZlJiZyLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGgmJm51bGwhPT1yLm9wdGlvbnMucmVzcG9uc2l2ZSl7cz1udWxsO2ZvcihvIGluIHIuYnJlYWtwb2ludHMpci5icmVha3BvaW50cy5oYXNPd25Qcm9wZXJ0eShvKSYmKCExPT09ci5vcmlnaW5hbFNldHRpbmdzLm1vYmlsZUZpcnN0P248ci5icmVha3BvaW50c1tvXSYmKHM9ci5icmVha3BvaW50c1tvXSk6bj5yLmJyZWFrcG9pbnRzW29dJiYocz1yLmJyZWFrcG9pbnRzW29dKSk7bnVsbCE9PXM/bnVsbCE9PXIuYWN0aXZlQnJlYWtwb2ludD8ocyE9PXIuYWN0aXZlQnJlYWtwb2ludHx8dCkmJihyLmFjdGl2ZUJyZWFrcG9pbnQ9cyxcInVuc2xpY2tcIj09PXIuYnJlYWtwb2ludFNldHRpbmdzW3NdP3IudW5zbGljayhzKTooci5vcHRpb25zPWkuZXh0ZW5kKHt9LHIub3JpZ2luYWxTZXR0aW5ncyxyLmJyZWFrcG9pbnRTZXR0aW5nc1tzXSksITA9PT1lJiYoci5jdXJyZW50U2xpZGU9ci5vcHRpb25zLmluaXRpYWxTbGlkZSksci5yZWZyZXNoKGUpKSxsPXMpOihyLmFjdGl2ZUJyZWFrcG9pbnQ9cyxcInVuc2xpY2tcIj09PXIuYnJlYWtwb2ludFNldHRpbmdzW3NdP3IudW5zbGljayhzKTooci5vcHRpb25zPWkuZXh0ZW5kKHt9LHIub3JpZ2luYWxTZXR0aW5ncyxyLmJyZWFrcG9pbnRTZXR0aW5nc1tzXSksITA9PT1lJiYoci5jdXJyZW50U2xpZGU9ci5vcHRpb25zLmluaXRpYWxTbGlkZSksci5yZWZyZXNoKGUpKSxsPXMpOm51bGwhPT1yLmFjdGl2ZUJyZWFrcG9pbnQmJihyLmFjdGl2ZUJyZWFrcG9pbnQ9bnVsbCxyLm9wdGlvbnM9ci5vcmlnaW5hbFNldHRpbmdzLCEwPT09ZSYmKHIuY3VycmVudFNsaWRlPXIub3B0aW9ucy5pbml0aWFsU2xpZGUpLHIucmVmcmVzaChlKSxsPXMpLGV8fCExPT09bHx8ci4kc2xpZGVyLnRyaWdnZXIoXCJicmVha3BvaW50XCIsW3IsbF0pfX0sZS5wcm90b3R5cGUuY2hhbmdlU2xpZGU9ZnVuY3Rpb24oZSx0KXt2YXIgbyxzLG4scj10aGlzLGw9aShlLmN1cnJlbnRUYXJnZXQpO3N3aXRjaChsLmlzKFwiYVwiKSYmZS5wcmV2ZW50RGVmYXVsdCgpLGwuaXMoXCJsaVwiKXx8KGw9bC5jbG9zZXN0KFwibGlcIikpLG49ci5zbGlkZUNvdW50JXIub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCE9MCxvPW4/MDooci5zbGlkZUNvdW50LXIuY3VycmVudFNsaWRlKSVyLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsZS5kYXRhLm1lc3NhZ2Upe2Nhc2VcInByZXZpb3VzXCI6cz0wPT09bz9yLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw6ci5vcHRpb25zLnNsaWRlc1RvU2hvdy1vLHIuc2xpZGVDb3VudD5yLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZyLnNsaWRlSGFuZGxlcihyLmN1cnJlbnRTbGlkZS1zLCExLHQpO2JyZWFrO2Nhc2VcIm5leHRcIjpzPTA9PT1vP3Iub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDpvLHIuc2xpZGVDb3VudD5yLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZyLnNsaWRlSGFuZGxlcihyLmN1cnJlbnRTbGlkZStzLCExLHQpO2JyZWFrO2Nhc2VcImluZGV4XCI6dmFyIGQ9MD09PWUuZGF0YS5pbmRleD8wOmUuZGF0YS5pbmRleHx8bC5pbmRleCgpKnIub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtyLnNsaWRlSGFuZGxlcihyLmNoZWNrTmF2aWdhYmxlKGQpLCExLHQpLGwuY2hpbGRyZW4oKS50cmlnZ2VyKFwiZm9jdXNcIik7YnJlYWs7ZGVmYXVsdDpyZXR1cm59fSxlLnByb3RvdHlwZS5jaGVja05hdmlnYWJsZT1mdW5jdGlvbihpKXt2YXIgZSx0O2lmKGU9dGhpcy5nZXROYXZpZ2FibGVJbmRleGVzKCksdD0wLGk+ZVtlLmxlbmd0aC0xXSlpPWVbZS5sZW5ndGgtMV07ZWxzZSBmb3IodmFyIG8gaW4gZSl7aWYoaTxlW29dKXtpPXQ7YnJlYWt9dD1lW29dfXJldHVybiBpfSxlLnByb3RvdHlwZS5jbGVhblVwRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLm9wdGlvbnMuZG90cyYmbnVsbCE9PWUuJGRvdHMmJihpKFwibGlcIixlLiRkb3RzKS5vZmYoXCJjbGljay5zbGlja1wiLGUuY2hhbmdlU2xpZGUpLm9mZihcIm1vdXNlZW50ZXIuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITApKS5vZmYoXCJtb3VzZWxlYXZlLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCExKSksITA9PT1lLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSYmZS4kZG90cy5vZmYoXCJrZXlkb3duLnNsaWNrXCIsZS5rZXlIYW5kbGVyKSksZS4kc2xpZGVyLm9mZihcImZvY3VzLnNsaWNrIGJsdXIuc2xpY2tcIiksITA9PT1lLm9wdGlvbnMuYXJyb3dzJiZlLnNsaWRlQ291bnQ+ZS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGUuJHByZXZBcnJvdyYmZS4kcHJldkFycm93Lm9mZihcImNsaWNrLnNsaWNrXCIsZS5jaGFuZ2VTbGlkZSksZS4kbmV4dEFycm93JiZlLiRuZXh0QXJyb3cub2ZmKFwiY2xpY2suc2xpY2tcIixlLmNoYW5nZVNsaWRlKSwhMD09PWUub3B0aW9ucy5hY2Nlc3NpYmlsaXR5JiYoZS4kcHJldkFycm93JiZlLiRwcmV2QXJyb3cub2ZmKFwia2V5ZG93bi5zbGlja1wiLGUua2V5SGFuZGxlciksZS4kbmV4dEFycm93JiZlLiRuZXh0QXJyb3cub2ZmKFwia2V5ZG93bi5zbGlja1wiLGUua2V5SGFuZGxlcikpKSxlLiRsaXN0Lm9mZihcInRvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrXCIsZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub2ZmKFwidG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGlja1wiLGUuc3dpcGVIYW5kbGVyKSxlLiRsaXN0Lm9mZihcInRvdWNoZW5kLnNsaWNrIG1vdXNldXAuc2xpY2tcIixlLnN3aXBlSGFuZGxlciksZS4kbGlzdC5vZmYoXCJ0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrXCIsZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub2ZmKFwiY2xpY2suc2xpY2tcIixlLmNsaWNrSGFuZGxlciksaShkb2N1bWVudCkub2ZmKGUudmlzaWJpbGl0eUNoYW5nZSxlLnZpc2liaWxpdHkpLGUuY2xlYW5VcFNsaWRlRXZlbnRzKCksITA9PT1lLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSYmZS4kbGlzdC5vZmYoXCJrZXlkb3duLnNsaWNrXCIsZS5rZXlIYW5kbGVyKSwhMD09PWUub3B0aW9ucy5mb2N1c09uU2VsZWN0JiZpKGUuJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub2ZmKFwiY2xpY2suc2xpY2tcIixlLnNlbGVjdEhhbmRsZXIpLGkod2luZG93KS5vZmYoXCJvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay1cIitlLmluc3RhbmNlVWlkLGUub3JpZW50YXRpb25DaGFuZ2UpLGkod2luZG93KS5vZmYoXCJyZXNpemUuc2xpY2suc2xpY2stXCIrZS5pbnN0YW5jZVVpZCxlLnJlc2l6ZSksaShcIltkcmFnZ2FibGUhPXRydWVdXCIsZS4kc2xpZGVUcmFjaykub2ZmKFwiZHJhZ3N0YXJ0XCIsZS5wcmV2ZW50RGVmYXVsdCksaSh3aW5kb3cpLm9mZihcImxvYWQuc2xpY2suc2xpY2stXCIrZS5pbnN0YW5jZVVpZCxlLnNldFBvc2l0aW9uKX0sZS5wcm90b3R5cGUuY2xlYW5VcFNsaWRlRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLiRsaXN0Lm9mZihcIm1vdXNlZW50ZXIuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITApKSxlLiRsaXN0Lm9mZihcIm1vdXNlbGVhdmUuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITEpKX0sZS5wcm90b3R5cGUuY2xlYW5VcFJvd3M9ZnVuY3Rpb24oKXt2YXIgaSxlPXRoaXM7ZS5vcHRpb25zLnJvd3M+MSYmKChpPWUuJHNsaWRlcy5jaGlsZHJlbigpLmNoaWxkcmVuKCkpLnJlbW92ZUF0dHIoXCJzdHlsZVwiKSxlLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQoaSkpfSxlLnByb3RvdHlwZS5jbGlja0hhbmRsZXI9ZnVuY3Rpb24oaSl7ITE9PT10aGlzLnNob3VsZENsaWNrJiYoaS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSxpLnN0b3BQcm9wYWdhdGlvbigpLGkucHJldmVudERlZmF1bHQoKSl9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0LmF1dG9QbGF5Q2xlYXIoKSx0LnRvdWNoT2JqZWN0PXt9LHQuY2xlYW5VcEV2ZW50cygpLGkoXCIuc2xpY2stY2xvbmVkXCIsdC4kc2xpZGVyKS5kZXRhY2goKSx0LiRkb3RzJiZ0LiRkb3RzLnJlbW92ZSgpLHQuJHByZXZBcnJvdyYmdC4kcHJldkFycm93Lmxlbmd0aCYmKHQuJHByZXZBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlblwiKS5yZW1vdmVBdHRyKFwiYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleFwiKS5jc3MoXCJkaXNwbGF5XCIsXCJcIiksdC5odG1sRXhwci50ZXN0KHQub3B0aW9ucy5wcmV2QXJyb3cpJiZ0LiRwcmV2QXJyb3cucmVtb3ZlKCkpLHQuJG5leHRBcnJvdyYmdC4kbmV4dEFycm93Lmxlbmd0aCYmKHQuJG5leHRBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlblwiKS5yZW1vdmVBdHRyKFwiYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleFwiKS5jc3MoXCJkaXNwbGF5XCIsXCJcIiksdC5odG1sRXhwci50ZXN0KHQub3B0aW9ucy5uZXh0QXJyb3cpJiZ0LiRuZXh0QXJyb3cucmVtb3ZlKCkpLHQuJHNsaWRlcyYmKHQuJHNsaWRlcy5yZW1vdmVDbGFzcyhcInNsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50XCIpLnJlbW92ZUF0dHIoXCJhcmlhLWhpZGRlblwiKS5yZW1vdmVBdHRyKFwiZGF0YS1zbGljay1pbmRleFwiKS5lYWNoKGZ1bmN0aW9uKCl7aSh0aGlzKS5hdHRyKFwic3R5bGVcIixpKHRoaXMpLmRhdGEoXCJvcmlnaW5hbFN0eWxpbmdcIikpfSksdC4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpLHQuJHNsaWRlVHJhY2suZGV0YWNoKCksdC4kbGlzdC5kZXRhY2goKSx0LiRzbGlkZXIuYXBwZW5kKHQuJHNsaWRlcykpLHQuY2xlYW5VcFJvd3MoKSx0LiRzbGlkZXIucmVtb3ZlQ2xhc3MoXCJzbGljay1zbGlkZXJcIiksdC4kc2xpZGVyLnJlbW92ZUNsYXNzKFwic2xpY2staW5pdGlhbGl6ZWRcIiksdC4kc2xpZGVyLnJlbW92ZUNsYXNzKFwic2xpY2stZG90dGVkXCIpLHQudW5zbGlja2VkPSEwLGV8fHQuJHNsaWRlci50cmlnZ2VyKFwiZGVzdHJveVwiLFt0XSl9LGUucHJvdG90eXBlLmRpc2FibGVUcmFuc2l0aW9uPWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXMsdD17fTt0W2UudHJhbnNpdGlvblR5cGVdPVwiXCIsITE9PT1lLm9wdGlvbnMuZmFkZT9lLiRzbGlkZVRyYWNrLmNzcyh0KTplLiRzbGlkZXMuZXEoaSkuY3NzKHQpfSxlLnByb3RvdHlwZS5mYWRlU2xpZGU9ZnVuY3Rpb24oaSxlKXt2YXIgdD10aGlzOyExPT09dC5jc3NUcmFuc2l0aW9ucz8odC4kc2xpZGVzLmVxKGkpLmNzcyh7ekluZGV4OnQub3B0aW9ucy56SW5kZXh9KSx0LiRzbGlkZXMuZXEoaSkuYW5pbWF0ZSh7b3BhY2l0eToxfSx0Lm9wdGlvbnMuc3BlZWQsdC5vcHRpb25zLmVhc2luZyxlKSk6KHQuYXBwbHlUcmFuc2l0aW9uKGkpLHQuJHNsaWRlcy5lcShpKS5jc3Moe29wYWNpdHk6MSx6SW5kZXg6dC5vcHRpb25zLnpJbmRleH0pLGUmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0LmRpc2FibGVUcmFuc2l0aW9uKGkpLGUuY2FsbCgpfSx0Lm9wdGlvbnMuc3BlZWQpKX0sZS5wcm90b3R5cGUuZmFkZVNsaWRlT3V0PWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXM7ITE9PT1lLmNzc1RyYW5zaXRpb25zP2UuJHNsaWRlcy5lcShpKS5hbmltYXRlKHtvcGFjaXR5OjAsekluZGV4OmUub3B0aW9ucy56SW5kZXgtMn0sZS5vcHRpb25zLnNwZWVkLGUub3B0aW9ucy5lYXNpbmcpOihlLmFwcGx5VHJhbnNpdGlvbihpKSxlLiRzbGlkZXMuZXEoaSkuY3NzKHtvcGFjaXR5OjAsekluZGV4OmUub3B0aW9ucy56SW5kZXgtMn0pKX0sZS5wcm90b3R5cGUuZmlsdGVyU2xpZGVzPWUucHJvdG90eXBlLnNsaWNrRmlsdGVyPWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXM7bnVsbCE9PWkmJihlLiRzbGlkZXNDYWNoZT1lLiRzbGlkZXMsZS51bmxvYWQoKSxlLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCksZS4kc2xpZGVzQ2FjaGUuZmlsdGVyKGkpLmFwcGVuZFRvKGUuJHNsaWRlVHJhY2spLGUucmVpbml0KCkpfSxlLnByb3RvdHlwZS5mb2N1c0hhbmRsZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuJHNsaWRlci5vZmYoXCJmb2N1cy5zbGljayBibHVyLnNsaWNrXCIpLm9uKFwiZm9jdXMuc2xpY2sgYmx1ci5zbGlja1wiLFwiKlwiLGZ1bmN0aW9uKHQpe3Quc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7dmFyIG89aSh0aGlzKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5vcHRpb25zLnBhdXNlT25Gb2N1cyYmKGUuZm9jdXNzZWQ9by5pcyhcIjpmb2N1c1wiKSxlLmF1dG9QbGF5KCkpfSwwKX0pfSxlLnByb3RvdHlwZS5nZXRDdXJyZW50PWUucHJvdG90eXBlLnNsaWNrQ3VycmVudFNsaWRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3VycmVudFNsaWRlfSxlLnByb3RvdHlwZS5nZXREb3RDb3VudD1mdW5jdGlvbigpe3ZhciBpPXRoaXMsZT0wLHQ9MCxvPTA7aWYoITA9PT1pLm9wdGlvbnMuaW5maW5pdGUpaWYoaS5zbGlkZUNvdW50PD1pLm9wdGlvbnMuc2xpZGVzVG9TaG93KSsrbztlbHNlIGZvcig7ZTxpLnNsaWRlQ291bnQ7KSsrbyxlPXQraS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsLHQrPWkub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDw9aS5vcHRpb25zLnNsaWRlc1RvU2hvdz9pLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw6aS5vcHRpb25zLnNsaWRlc1RvU2hvdztlbHNlIGlmKCEwPT09aS5vcHRpb25zLmNlbnRlck1vZGUpbz1pLnNsaWRlQ291bnQ7ZWxzZSBpZihpLm9wdGlvbnMuYXNOYXZGb3IpZm9yKDtlPGkuc2xpZGVDb3VudDspKytvLGU9dCtpLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsdCs9aS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsPD1pLm9wdGlvbnMuc2xpZGVzVG9TaG93P2kub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDppLm9wdGlvbnMuc2xpZGVzVG9TaG93O2Vsc2Ugbz0xK01hdGguY2VpbCgoaS5zbGlkZUNvdW50LWkub3B0aW9ucy5zbGlkZXNUb1Nob3cpL2kub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7cmV0dXJuIG8tMX0sZS5wcm90b3R5cGUuZ2V0TGVmdD1mdW5jdGlvbihpKXt2YXIgZSx0LG8scyxuPXRoaXMscj0wO3JldHVybiBuLnNsaWRlT2Zmc2V0PTAsdD1uLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCghMCksITA9PT1uLm9wdGlvbnMuaW5maW5pdGU/KG4uc2xpZGVDb3VudD5uLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYobi5zbGlkZU9mZnNldD1uLnNsaWRlV2lkdGgqbi5vcHRpb25zLnNsaWRlc1RvU2hvdyotMSxzPS0xLCEwPT09bi5vcHRpb25zLnZlcnRpY2FsJiYhMD09PW4ub3B0aW9ucy5jZW50ZXJNb2RlJiYoMj09PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3c/cz0tMS41OjE9PT1uLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYocz0tMikpLHI9dCpuLm9wdGlvbnMuc2xpZGVzVG9TaG93KnMpLG4uc2xpZGVDb3VudCVuLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwhPTAmJmkrbi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsPm4uc2xpZGVDb3VudCYmbi5zbGlkZUNvdW50Pm4ub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihpPm4uc2xpZGVDb3VudD8obi5zbGlkZU9mZnNldD0obi5vcHRpb25zLnNsaWRlc1RvU2hvdy0oaS1uLnNsaWRlQ291bnQpKSpuLnNsaWRlV2lkdGgqLTEscj0obi5vcHRpb25zLnNsaWRlc1RvU2hvdy0oaS1uLnNsaWRlQ291bnQpKSp0Ki0xKToobi5zbGlkZU9mZnNldD1uLnNsaWRlQ291bnQlbi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKm4uc2xpZGVXaWR0aCotMSxyPW4uc2xpZGVDb3VudCVuLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwqdCotMSkpKTppK24ub3B0aW9ucy5zbGlkZXNUb1Nob3c+bi5zbGlkZUNvdW50JiYobi5zbGlkZU9mZnNldD0oaStuLm9wdGlvbnMuc2xpZGVzVG9TaG93LW4uc2xpZGVDb3VudCkqbi5zbGlkZVdpZHRoLHI9KGkrbi5vcHRpb25zLnNsaWRlc1RvU2hvdy1uLnNsaWRlQ291bnQpKnQpLG4uc2xpZGVDb3VudDw9bi5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKG4uc2xpZGVPZmZzZXQ9MCxyPTApLCEwPT09bi5vcHRpb25zLmNlbnRlck1vZGUmJm4uc2xpZGVDb3VudDw9bi5vcHRpb25zLnNsaWRlc1RvU2hvdz9uLnNsaWRlT2Zmc2V0PW4uc2xpZGVXaWR0aCpNYXRoLmZsb29yKG4ub3B0aW9ucy5zbGlkZXNUb1Nob3cpLzItbi5zbGlkZVdpZHRoKm4uc2xpZGVDb3VudC8yOiEwPT09bi5vcHRpb25zLmNlbnRlck1vZGUmJiEwPT09bi5vcHRpb25zLmluZmluaXRlP24uc2xpZGVPZmZzZXQrPW4uc2xpZGVXaWR0aCpNYXRoLmZsb29yKG4ub3B0aW9ucy5zbGlkZXNUb1Nob3cvMiktbi5zbGlkZVdpZHRoOiEwPT09bi5vcHRpb25zLmNlbnRlck1vZGUmJihuLnNsaWRlT2Zmc2V0PTAsbi5zbGlkZU9mZnNldCs9bi5zbGlkZVdpZHRoKk1hdGguZmxvb3Iobi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKSksZT0hMT09PW4ub3B0aW9ucy52ZXJ0aWNhbD9pKm4uc2xpZGVXaWR0aCotMStuLnNsaWRlT2Zmc2V0OmkqdCotMStyLCEwPT09bi5vcHRpb25zLnZhcmlhYmxlV2lkdGgmJihvPW4uc2xpZGVDb3VudDw9bi5vcHRpb25zLnNsaWRlc1RvU2hvd3x8ITE9PT1uLm9wdGlvbnMuaW5maW5pdGU/bi4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5lcShpKTpuLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmVxKGkrbi5vcHRpb25zLnNsaWRlc1RvU2hvdyksZT0hMD09PW4ub3B0aW9ucy5ydGw/b1swXT8tMSoobi4kc2xpZGVUcmFjay53aWR0aCgpLW9bMF0ub2Zmc2V0TGVmdC1vLndpZHRoKCkpOjA6b1swXT8tMSpvWzBdLm9mZnNldExlZnQ6MCwhMD09PW4ub3B0aW9ucy5jZW50ZXJNb2RlJiYobz1uLnNsaWRlQ291bnQ8PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3d8fCExPT09bi5vcHRpb25zLmluZmluaXRlP24uJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikuZXEoaSk6bi4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5lcShpK24ub3B0aW9ucy5zbGlkZXNUb1Nob3crMSksZT0hMD09PW4ub3B0aW9ucy5ydGw/b1swXT8tMSoobi4kc2xpZGVUcmFjay53aWR0aCgpLW9bMF0ub2Zmc2V0TGVmdC1vLndpZHRoKCkpOjA6b1swXT8tMSpvWzBdLm9mZnNldExlZnQ6MCxlKz0obi4kbGlzdC53aWR0aCgpLW8ub3V0ZXJXaWR0aCgpKS8yKSksZX0sZS5wcm90b3R5cGUuZ2V0T3B0aW9uPWUucHJvdG90eXBlLnNsaWNrR2V0T3B0aW9uPWZ1bmN0aW9uKGkpe3JldHVybiB0aGlzLm9wdGlvbnNbaV19LGUucHJvdG90eXBlLmdldE5hdmlnYWJsZUluZGV4ZXM9ZnVuY3Rpb24oKXt2YXIgaSxlPXRoaXMsdD0wLG89MCxzPVtdO2ZvcighMT09PWUub3B0aW9ucy5pbmZpbml0ZT9pPWUuc2xpZGVDb3VudDoodD0tMSplLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsbz0tMSplLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsaT0yKmUuc2xpZGVDb3VudCk7dDxpOylzLnB1c2godCksdD1vK2Uub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCxvKz1lLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw8PWUub3B0aW9ucy5zbGlkZXNUb1Nob3c/ZS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOmUub3B0aW9ucy5zbGlkZXNUb1Nob3c7cmV0dXJuIHN9LGUucHJvdG90eXBlLmdldFNsaWNrPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LGUucHJvdG90eXBlLmdldFNsaWRlQ291bnQ9ZnVuY3Rpb24oKXt2YXIgZSx0LG89dGhpcztyZXR1cm4gdD0hMD09PW8ub3B0aW9ucy5jZW50ZXJNb2RlP28uc2xpZGVXaWR0aCpNYXRoLmZsb29yKG8ub3B0aW9ucy5zbGlkZXNUb1Nob3cvMik6MCwhMD09PW8ub3B0aW9ucy5zd2lwZVRvU2xpZGU/KG8uJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1zbGlkZVwiKS5lYWNoKGZ1bmN0aW9uKHMsbil7aWYobi5vZmZzZXRMZWZ0LXQraShuKS5vdXRlcldpZHRoKCkvMj4tMSpvLnN3aXBlTGVmdClyZXR1cm4gZT1uLCExfSksTWF0aC5hYnMoaShlKS5hdHRyKFwiZGF0YS1zbGljay1pbmRleFwiKS1vLmN1cnJlbnRTbGlkZSl8fDEpOm8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbH0sZS5wcm90b3R5cGUuZ29Ubz1lLnByb3RvdHlwZS5zbGlja0dvVG89ZnVuY3Rpb24oaSxlKXt0aGlzLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOlwiaW5kZXhcIixpbmRleDpwYXJzZUludChpKX19LGUpfSxlLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aSh0LiRzbGlkZXIpLmhhc0NsYXNzKFwic2xpY2staW5pdGlhbGl6ZWRcIil8fChpKHQuJHNsaWRlcikuYWRkQ2xhc3MoXCJzbGljay1pbml0aWFsaXplZFwiKSx0LmJ1aWxkUm93cygpLHQuYnVpbGRPdXQoKSx0LnNldFByb3BzKCksdC5zdGFydExvYWQoKSx0LmxvYWRTbGlkZXIoKSx0LmluaXRpYWxpemVFdmVudHMoKSx0LnVwZGF0ZUFycm93cygpLHQudXBkYXRlRG90cygpLHQuY2hlY2tSZXNwb25zaXZlKCEwKSx0LmZvY3VzSGFuZGxlcigpKSxlJiZ0LiRzbGlkZXIudHJpZ2dlcihcImluaXRcIixbdF0pLCEwPT09dC5vcHRpb25zLmFjY2Vzc2liaWxpdHkmJnQuaW5pdEFEQSgpLHQub3B0aW9ucy5hdXRvcGxheSYmKHQucGF1c2VkPSExLHQuYXV0b1BsYXkoKSl9LGUucHJvdG90eXBlLmluaXRBREE9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9TWF0aC5jZWlsKGUuc2xpZGVDb3VudC9lLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxvPWUuZ2V0TmF2aWdhYmxlSW5kZXhlcygpLmZpbHRlcihmdW5jdGlvbihpKXtyZXR1cm4gaT49MCYmaTxlLnNsaWRlQ291bnR9KTtlLiRzbGlkZXMuYWRkKGUuJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1jbG9uZWRcIikpLmF0dHIoe1wiYXJpYS1oaWRkZW5cIjpcInRydWVcIix0YWJpbmRleDpcIi0xXCJ9KS5maW5kKFwiYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0XCIpLmF0dHIoe3RhYmluZGV4OlwiLTFcIn0pLG51bGwhPT1lLiRkb3RzJiYoZS4kc2xpZGVzLm5vdChlLiRzbGlkZVRyYWNrLmZpbmQoXCIuc2xpY2stY2xvbmVkXCIpKS5lYWNoKGZ1bmN0aW9uKHQpe3ZhciBzPW8uaW5kZXhPZih0KTtpKHRoaXMpLmF0dHIoe3JvbGU6XCJ0YWJwYW5lbFwiLGlkOlwic2xpY2stc2xpZGVcIitlLmluc3RhbmNlVWlkK3QsdGFiaW5kZXg6LTF9KSwtMSE9PXMmJmkodGhpcykuYXR0cih7XCJhcmlhLWRlc2NyaWJlZGJ5XCI6XCJzbGljay1zbGlkZS1jb250cm9sXCIrZS5pbnN0YW5jZVVpZCtzfSl9KSxlLiRkb3RzLmF0dHIoXCJyb2xlXCIsXCJ0YWJsaXN0XCIpLmZpbmQoXCJsaVwiKS5lYWNoKGZ1bmN0aW9uKHMpe3ZhciBuPW9bc107aSh0aGlzKS5hdHRyKHtyb2xlOlwicHJlc2VudGF0aW9uXCJ9KSxpKHRoaXMpLmZpbmQoXCJidXR0b25cIikuZmlyc3QoKS5hdHRyKHtyb2xlOlwidGFiXCIsaWQ6XCJzbGljay1zbGlkZS1jb250cm9sXCIrZS5pbnN0YW5jZVVpZCtzLFwiYXJpYS1jb250cm9sc1wiOlwic2xpY2stc2xpZGVcIitlLmluc3RhbmNlVWlkK24sXCJhcmlhLWxhYmVsXCI6cysxK1wiIG9mIFwiK3QsXCJhcmlhLXNlbGVjdGVkXCI6bnVsbCx0YWJpbmRleDpcIi0xXCJ9KX0pLmVxKGUuY3VycmVudFNsaWRlKS5maW5kKFwiYnV0dG9uXCIpLmF0dHIoe1wiYXJpYS1zZWxlY3RlZFwiOlwidHJ1ZVwiLHRhYmluZGV4OlwiMFwifSkuZW5kKCkpO2Zvcih2YXIgcz1lLmN1cnJlbnRTbGlkZSxuPXMrZS5vcHRpb25zLnNsaWRlc1RvU2hvdztzPG47cysrKWUuJHNsaWRlcy5lcShzKS5hdHRyKFwidGFiaW5kZXhcIiwwKTtlLmFjdGl2YXRlQURBKCl9LGUucHJvdG90eXBlLmluaXRBcnJvd0V2ZW50cz1mdW5jdGlvbigpe3ZhciBpPXRoaXM7ITA9PT1pLm9wdGlvbnMuYXJyb3dzJiZpLnNsaWRlQ291bnQ+aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGkuJHByZXZBcnJvdy5vZmYoXCJjbGljay5zbGlja1wiKS5vbihcImNsaWNrLnNsaWNrXCIse21lc3NhZ2U6XCJwcmV2aW91c1wifSxpLmNoYW5nZVNsaWRlKSxpLiRuZXh0QXJyb3cub2ZmKFwiY2xpY2suc2xpY2tcIikub24oXCJjbGljay5zbGlja1wiLHttZXNzYWdlOlwibmV4dFwifSxpLmNoYW5nZVNsaWRlKSwhMD09PWkub3B0aW9ucy5hY2Nlc3NpYmlsaXR5JiYoaS4kcHJldkFycm93Lm9uKFwia2V5ZG93bi5zbGlja1wiLGkua2V5SGFuZGxlciksaS4kbmV4dEFycm93Lm9uKFwia2V5ZG93bi5zbGlja1wiLGkua2V5SGFuZGxlcikpKX0sZS5wcm90b3R5cGUuaW5pdERvdEV2ZW50cz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ITA9PT1lLm9wdGlvbnMuZG90cyYmKGkoXCJsaVwiLGUuJGRvdHMpLm9uKFwiY2xpY2suc2xpY2tcIix7bWVzc2FnZTpcImluZGV4XCJ9LGUuY2hhbmdlU2xpZGUpLCEwPT09ZS5vcHRpb25zLmFjY2Vzc2liaWxpdHkmJmUuJGRvdHMub24oXCJrZXlkb3duLnNsaWNrXCIsZS5rZXlIYW5kbGVyKSksITA9PT1lLm9wdGlvbnMuZG90cyYmITA9PT1lLm9wdGlvbnMucGF1c2VPbkRvdHNIb3ZlciYmaShcImxpXCIsZS4kZG90cykub24oXCJtb3VzZWVudGVyLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCEwKSkub24oXCJtb3VzZWxlYXZlLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCExKSl9LGUucHJvdG90eXBlLmluaXRTbGlkZUV2ZW50cz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5vcHRpb25zLnBhdXNlT25Ib3ZlciYmKGUuJGxpc3Qub24oXCJtb3VzZWVudGVyLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCEwKSksZS4kbGlzdC5vbihcIm1vdXNlbGVhdmUuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITEpKSl9LGUucHJvdG90eXBlLmluaXRpYWxpemVFdmVudHM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuaW5pdEFycm93RXZlbnRzKCksZS5pbml0RG90RXZlbnRzKCksZS5pbml0U2xpZGVFdmVudHMoKSxlLiRsaXN0Lm9uKFwidG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2tcIix7YWN0aW9uOlwic3RhcnRcIn0sZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub24oXCJ0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrXCIse2FjdGlvbjpcIm1vdmVcIn0sZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub24oXCJ0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrXCIse2FjdGlvbjpcImVuZFwifSxlLnN3aXBlSGFuZGxlciksZS4kbGlzdC5vbihcInRvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2tcIix7YWN0aW9uOlwiZW5kXCJ9LGUuc3dpcGVIYW5kbGVyKSxlLiRsaXN0Lm9uKFwiY2xpY2suc2xpY2tcIixlLmNsaWNrSGFuZGxlciksaShkb2N1bWVudCkub24oZS52aXNpYmlsaXR5Q2hhbmdlLGkucHJveHkoZS52aXNpYmlsaXR5LGUpKSwhMD09PWUub3B0aW9ucy5hY2Nlc3NpYmlsaXR5JiZlLiRsaXN0Lm9uKFwia2V5ZG93bi5zbGlja1wiLGUua2V5SGFuZGxlciksITA9PT1lLm9wdGlvbnMuZm9jdXNPblNlbGVjdCYmaShlLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKFwiY2xpY2suc2xpY2tcIixlLnNlbGVjdEhhbmRsZXIpLGkod2luZG93KS5vbihcIm9yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLVwiK2UuaW5zdGFuY2VVaWQsaS5wcm94eShlLm9yaWVudGF0aW9uQ2hhbmdlLGUpKSxpKHdpbmRvdykub24oXCJyZXNpemUuc2xpY2suc2xpY2stXCIrZS5pbnN0YW5jZVVpZCxpLnByb3h5KGUucmVzaXplLGUpKSxpKFwiW2RyYWdnYWJsZSE9dHJ1ZV1cIixlLiRzbGlkZVRyYWNrKS5vbihcImRyYWdzdGFydFwiLGUucHJldmVudERlZmF1bHQpLGkod2luZG93KS5vbihcImxvYWQuc2xpY2suc2xpY2stXCIrZS5pbnN0YW5jZVVpZCxlLnNldFBvc2l0aW9uKSxpKGUuc2V0UG9zaXRpb24pfSxlLnByb3RvdHlwZS5pbml0VUk9ZnVuY3Rpb24oKXt2YXIgaT10aGlzOyEwPT09aS5vcHRpb25zLmFycm93cyYmaS5zbGlkZUNvdW50Pmkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihpLiRwcmV2QXJyb3cuc2hvdygpLGkuJG5leHRBcnJvdy5zaG93KCkpLCEwPT09aS5vcHRpb25zLmRvdHMmJmkuc2xpZGVDb3VudD5pLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZpLiRkb3RzLnNob3coKX0sZS5wcm90b3R5cGUua2V5SGFuZGxlcj1mdW5jdGlvbihpKXt2YXIgZT10aGlzO2kudGFyZ2V0LnRhZ05hbWUubWF0Y2goXCJURVhUQVJFQXxJTlBVVHxTRUxFQ1RcIil8fCgzNz09PWkua2V5Q29kZSYmITA9PT1lLm9wdGlvbnMuYWNjZXNzaWJpbGl0eT9lLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOiEwPT09ZS5vcHRpb25zLnJ0bD9cIm5leHRcIjpcInByZXZpb3VzXCJ9fSk6Mzk9PT1pLmtleUNvZGUmJiEwPT09ZS5vcHRpb25zLmFjY2Vzc2liaWxpdHkmJmUuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6ITA9PT1lLm9wdGlvbnMucnRsP1wicHJldmlvdXNcIjpcIm5leHRcIn19KSl9LGUucHJvdG90eXBlLmxhenlMb2FkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXtpKFwiaW1nW2RhdGEtbGF6eV1cIixlKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9aSh0aGlzKSx0PWkodGhpcykuYXR0cihcImRhdGEtbGF6eVwiKSxvPWkodGhpcykuYXR0cihcImRhdGEtc3Jjc2V0XCIpLHM9aSh0aGlzKS5hdHRyKFwiZGF0YS1zaXplc1wiKXx8bi4kc2xpZGVyLmF0dHIoXCJkYXRhLXNpemVzXCIpLHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtyLm9ubG9hZD1mdW5jdGlvbigpe2UuYW5pbWF0ZSh7b3BhY2l0eTowfSwxMDAsZnVuY3Rpb24oKXtvJiYoZS5hdHRyKFwic3Jjc2V0XCIsbykscyYmZS5hdHRyKFwic2l6ZXNcIixzKSksZS5hdHRyKFwic3JjXCIsdCkuYW5pbWF0ZSh7b3BhY2l0eToxfSwyMDAsZnVuY3Rpb24oKXtlLnJlbW92ZUF0dHIoXCJkYXRhLWxhenkgZGF0YS1zcmNzZXQgZGF0YS1zaXplc1wiKS5yZW1vdmVDbGFzcyhcInNsaWNrLWxvYWRpbmdcIil9KSxuLiRzbGlkZXIudHJpZ2dlcihcImxhenlMb2FkZWRcIixbbixlLHRdKX0pfSxyLm9uZXJyb3I9ZnVuY3Rpb24oKXtlLnJlbW92ZUF0dHIoXCJkYXRhLWxhenlcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpLmFkZENsYXNzKFwic2xpY2stbGF6eWxvYWQtZXJyb3JcIiksbi4kc2xpZGVyLnRyaWdnZXIoXCJsYXp5TG9hZEVycm9yXCIsW24sZSx0XSl9LHIuc3JjPXR9KX12YXIgdCxvLHMsbj10aGlzO2lmKCEwPT09bi5vcHRpb25zLmNlbnRlck1vZGU/ITA9PT1uLm9wdGlvbnMuaW5maW5pdGU/cz0obz1uLmN1cnJlbnRTbGlkZSsobi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKzEpKStuLm9wdGlvbnMuc2xpZGVzVG9TaG93KzI6KG89TWF0aC5tYXgoMCxuLmN1cnJlbnRTbGlkZS0obi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKzEpKSxzPW4ub3B0aW9ucy5zbGlkZXNUb1Nob3cvMisxKzIrbi5jdXJyZW50U2xpZGUpOihvPW4ub3B0aW9ucy5pbmZpbml0ZT9uLm9wdGlvbnMuc2xpZGVzVG9TaG93K24uY3VycmVudFNsaWRlOm4uY3VycmVudFNsaWRlLHM9TWF0aC5jZWlsKG8rbi5vcHRpb25zLnNsaWRlc1RvU2hvdyksITA9PT1uLm9wdGlvbnMuZmFkZSYmKG8+MCYmby0tLHM8PW4uc2xpZGVDb3VudCYmcysrKSksdD1uLiRzbGlkZXIuZmluZChcIi5zbGljay1zbGlkZVwiKS5zbGljZShvLHMpLFwiYW50aWNpcGF0ZWRcIj09PW4ub3B0aW9ucy5sYXp5TG9hZClmb3IodmFyIHI9by0xLGw9cyxkPW4uJHNsaWRlci5maW5kKFwiLnNsaWNrLXNsaWRlXCIpLGE9MDthPG4ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDthKyspcjwwJiYocj1uLnNsaWRlQ291bnQtMSksdD0odD10LmFkZChkLmVxKHIpKSkuYWRkKGQuZXEobCkpLHItLSxsKys7ZSh0KSxuLnNsaWRlQ291bnQ8PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3c/ZShuLiRzbGlkZXIuZmluZChcIi5zbGljay1zbGlkZVwiKSk6bi5jdXJyZW50U2xpZGU+PW4uc2xpZGVDb3VudC1uLm9wdGlvbnMuc2xpZGVzVG9TaG93P2Uobi4kc2xpZGVyLmZpbmQoXCIuc2xpY2stY2xvbmVkXCIpLnNsaWNlKDAsbi5vcHRpb25zLnNsaWRlc1RvU2hvdykpOjA9PT1uLmN1cnJlbnRTbGlkZSYmZShuLiRzbGlkZXIuZmluZChcIi5zbGljay1jbG9uZWRcIikuc2xpY2UoLTEqbi5vcHRpb25zLnNsaWRlc1RvU2hvdykpfSxlLnByb3RvdHlwZS5sb2FkU2xpZGVyPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLnNldFBvc2l0aW9uKCksaS4kc2xpZGVUcmFjay5jc3Moe29wYWNpdHk6MX0pLGkuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLWxvYWRpbmdcIiksaS5pbml0VUkoKSxcInByb2dyZXNzaXZlXCI9PT1pLm9wdGlvbnMubGF6eUxvYWQmJmkucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpfSxlLnByb3RvdHlwZS5uZXh0PWUucHJvdG90eXBlLnNsaWNrTmV4dD1mdW5jdGlvbigpe3RoaXMuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6XCJuZXh0XCJ9fSl9LGUucHJvdG90eXBlLm9yaWVudGF0aW9uQ2hhbmdlPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLmNoZWNrUmVzcG9uc2l2ZSgpLGkuc2V0UG9zaXRpb24oKX0sZS5wcm90b3R5cGUucGF1c2U9ZS5wcm90b3R5cGUuc2xpY2tQYXVzZT1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5hdXRvUGxheUNsZWFyKCksaS5wYXVzZWQ9ITB9LGUucHJvdG90eXBlLnBsYXk9ZS5wcm90b3R5cGUuc2xpY2tQbGF5PWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLmF1dG9QbGF5KCksaS5vcHRpb25zLmF1dG9wbGF5PSEwLGkucGF1c2VkPSExLGkuZm9jdXNzZWQ9ITEsaS5pbnRlcnJ1cHRlZD0hMX0sZS5wcm90b3R5cGUucG9zdFNsaWRlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dC51bnNsaWNrZWR8fCh0LiRzbGlkZXIudHJpZ2dlcihcImFmdGVyQ2hhbmdlXCIsW3QsZV0pLHQuYW5pbWF0aW5nPSExLHQuc2xpZGVDb3VudD50Lm9wdGlvbnMuc2xpZGVzVG9TaG93JiZ0LnNldFBvc2l0aW9uKCksdC5zd2lwZUxlZnQ9bnVsbCx0Lm9wdGlvbnMuYXV0b3BsYXkmJnQuYXV0b1BsYXkoKSwhMD09PXQub3B0aW9ucy5hY2Nlc3NpYmlsaXR5JiYodC5pbml0QURBKCksdC5vcHRpb25zLmZvY3VzT25DaGFuZ2UmJmkodC4kc2xpZGVzLmdldCh0LmN1cnJlbnRTbGlkZSkpLmF0dHIoXCJ0YWJpbmRleFwiLDApLmZvY3VzKCkpKX0sZS5wcm90b3R5cGUucHJldj1lLnByb3RvdHlwZS5zbGlja1ByZXY9ZnVuY3Rpb24oKXt0aGlzLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOlwicHJldmlvdXNcIn19KX0sZS5wcm90b3R5cGUucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oaSl7aS5wcmV2ZW50RGVmYXVsdCgpfSxlLnByb3RvdHlwZS5wcm9ncmVzc2l2ZUxhenlMb2FkPWZ1bmN0aW9uKGUpe2U9ZXx8MTt2YXIgdCxvLHMsbixyLGw9dGhpcyxkPWkoXCJpbWdbZGF0YS1sYXp5XVwiLGwuJHNsaWRlcik7ZC5sZW5ndGg/KHQ9ZC5maXJzdCgpLG89dC5hdHRyKFwiZGF0YS1sYXp5XCIpLHM9dC5hdHRyKFwiZGF0YS1zcmNzZXRcIiksbj10LmF0dHIoXCJkYXRhLXNpemVzXCIpfHxsLiRzbGlkZXIuYXR0cihcImRhdGEtc2l6ZXNcIiksKHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKSkub25sb2FkPWZ1bmN0aW9uKCl7cyYmKHQuYXR0cihcInNyY3NldFwiLHMpLG4mJnQuYXR0cihcInNpemVzXCIsbikpLHQuYXR0cihcInNyY1wiLG8pLnJlbW92ZUF0dHIoXCJkYXRhLWxhenkgZGF0YS1zcmNzZXQgZGF0YS1zaXplc1wiKS5yZW1vdmVDbGFzcyhcInNsaWNrLWxvYWRpbmdcIiksITA9PT1sLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQmJmwuc2V0UG9zaXRpb24oKSxsLiRzbGlkZXIudHJpZ2dlcihcImxhenlMb2FkZWRcIixbbCx0LG9dKSxsLnByb2dyZXNzaXZlTGF6eUxvYWQoKX0sci5vbmVycm9yPWZ1bmN0aW9uKCl7ZTwzP3NldFRpbWVvdXQoZnVuY3Rpb24oKXtsLnByb2dyZXNzaXZlTGF6eUxvYWQoZSsxKX0sNTAwKToodC5yZW1vdmVBdHRyKFwiZGF0YS1sYXp5XCIpLnJlbW92ZUNsYXNzKFwic2xpY2stbG9hZGluZ1wiKS5hZGRDbGFzcyhcInNsaWNrLWxhenlsb2FkLWVycm9yXCIpLGwuJHNsaWRlci50cmlnZ2VyKFwibGF6eUxvYWRFcnJvclwiLFtsLHQsb10pLGwucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpKX0sci5zcmM9byk6bC4kc2xpZGVyLnRyaWdnZXIoXCJhbGxJbWFnZXNMb2FkZWRcIixbbF0pfSxlLnByb3RvdHlwZS5yZWZyZXNoPWZ1bmN0aW9uKGUpe3ZhciB0LG8scz10aGlzO289cy5zbGlkZUNvdW50LXMub3B0aW9ucy5zbGlkZXNUb1Nob3csIXMub3B0aW9ucy5pbmZpbml0ZSYmcy5jdXJyZW50U2xpZGU+byYmKHMuY3VycmVudFNsaWRlPW8pLHMuc2xpZGVDb3VudDw9cy5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKHMuY3VycmVudFNsaWRlPTApLHQ9cy5jdXJyZW50U2xpZGUscy5kZXN0cm95KCEwKSxpLmV4dGVuZChzLHMuaW5pdGlhbHMse2N1cnJlbnRTbGlkZTp0fSkscy5pbml0KCksZXx8cy5jaGFuZ2VTbGlkZSh7ZGF0YTp7bWVzc2FnZTpcImluZGV4XCIsaW5kZXg6dH19LCExKX0sZS5wcm90b3R5cGUucmVnaXN0ZXJCcmVha3BvaW50cz1mdW5jdGlvbigpe3ZhciBlLHQsbyxzPXRoaXMsbj1zLm9wdGlvbnMucmVzcG9uc2l2ZXx8bnVsbDtpZihcImFycmF5XCI9PT1pLnR5cGUobikmJm4ubGVuZ3RoKXtzLnJlc3BvbmRUbz1zLm9wdGlvbnMucmVzcG9uZFRvfHxcIndpbmRvd1wiO2ZvcihlIGluIG4paWYobz1zLmJyZWFrcG9pbnRzLmxlbmd0aC0xLG4uaGFzT3duUHJvcGVydHkoZSkpe2Zvcih0PW5bZV0uYnJlYWtwb2ludDtvPj0wOylzLmJyZWFrcG9pbnRzW29dJiZzLmJyZWFrcG9pbnRzW29dPT09dCYmcy5icmVha3BvaW50cy5zcGxpY2UobywxKSxvLS07cy5icmVha3BvaW50cy5wdXNoKHQpLHMuYnJlYWtwb2ludFNldHRpbmdzW3RdPW5bZV0uc2V0dGluZ3N9cy5icmVha3BvaW50cy5zb3J0KGZ1bmN0aW9uKGksZSl7cmV0dXJuIHMub3B0aW9ucy5tb2JpbGVGaXJzdD9pLWU6ZS1pfSl9fSxlLnByb3RvdHlwZS5yZWluaXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuJHNsaWRlcz1lLiRzbGlkZVRyYWNrLmNoaWxkcmVuKGUub3B0aW9ucy5zbGlkZSkuYWRkQ2xhc3MoXCJzbGljay1zbGlkZVwiKSxlLnNsaWRlQ291bnQ9ZS4kc2xpZGVzLmxlbmd0aCxlLmN1cnJlbnRTbGlkZT49ZS5zbGlkZUNvdW50JiYwIT09ZS5jdXJyZW50U2xpZGUmJihlLmN1cnJlbnRTbGlkZT1lLmN1cnJlbnRTbGlkZS1lLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpLGUuc2xpZGVDb3VudDw9ZS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGUuY3VycmVudFNsaWRlPTApLGUucmVnaXN0ZXJCcmVha3BvaW50cygpLGUuc2V0UHJvcHMoKSxlLnNldHVwSW5maW5pdGUoKSxlLmJ1aWxkQXJyb3dzKCksZS51cGRhdGVBcnJvd3MoKSxlLmluaXRBcnJvd0V2ZW50cygpLGUuYnVpbGREb3RzKCksZS51cGRhdGVEb3RzKCksZS5pbml0RG90RXZlbnRzKCksZS5jbGVhblVwU2xpZGVFdmVudHMoKSxlLmluaXRTbGlkZUV2ZW50cygpLGUuY2hlY2tSZXNwb25zaXZlKCExLCEwKSwhMD09PWUub3B0aW9ucy5mb2N1c09uU2VsZWN0JiZpKGUuJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oXCJjbGljay5zbGlja1wiLGUuc2VsZWN0SGFuZGxlciksZS5zZXRTbGlkZUNsYXNzZXMoXCJudW1iZXJcIj09dHlwZW9mIGUuY3VycmVudFNsaWRlP2UuY3VycmVudFNsaWRlOjApLGUuc2V0UG9zaXRpb24oKSxlLmZvY3VzSGFuZGxlcigpLGUucGF1c2VkPSFlLm9wdGlvbnMuYXV0b3BsYXksZS5hdXRvUGxheSgpLGUuJHNsaWRlci50cmlnZ2VyKFwicmVJbml0XCIsW2VdKX0sZS5wcm90b3R5cGUucmVzaXplPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpKHdpbmRvdykud2lkdGgoKSE9PWUud2luZG93V2lkdGgmJihjbGVhclRpbWVvdXQoZS53aW5kb3dEZWxheSksZS53aW5kb3dEZWxheT13aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe2Uud2luZG93V2lkdGg9aSh3aW5kb3cpLndpZHRoKCksZS5jaGVja1Jlc3BvbnNpdmUoKSxlLnVuc2xpY2tlZHx8ZS5zZXRQb3NpdGlvbigpfSw1MCkpfSxlLnByb3RvdHlwZS5yZW1vdmVTbGlkZT1lLnByb3RvdHlwZS5zbGlja1JlbW92ZT1mdW5jdGlvbihpLGUsdCl7dmFyIG89dGhpcztpZihpPVwiYm9vbGVhblwiPT10eXBlb2YgaT8hMD09PShlPWkpPzA6by5zbGlkZUNvdW50LTE6ITA9PT1lPy0taTppLG8uc2xpZGVDb3VudDwxfHxpPDB8fGk+by5zbGlkZUNvdW50LTEpcmV0dXJuITE7by51bmxvYWQoKSwhMD09PXQ/by4kc2xpZGVUcmFjay5jaGlsZHJlbigpLnJlbW92ZSgpOm8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5lcShpKS5yZW1vdmUoKSxvLiRzbGlkZXM9by4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLG8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKSxvLiRzbGlkZVRyYWNrLmFwcGVuZChvLiRzbGlkZXMpLG8uJHNsaWRlc0NhY2hlPW8uJHNsaWRlcyxvLnJlaW5pdCgpfSxlLnByb3RvdHlwZS5zZXRDU1M9ZnVuY3Rpb24oaSl7dmFyIGUsdCxvPXRoaXMscz17fTshMD09PW8ub3B0aW9ucy5ydGwmJihpPS1pKSxlPVwibGVmdFwiPT1vLnBvc2l0aW9uUHJvcD9NYXRoLmNlaWwoaSkrXCJweFwiOlwiMHB4XCIsdD1cInRvcFwiPT1vLnBvc2l0aW9uUHJvcD9NYXRoLmNlaWwoaSkrXCJweFwiOlwiMHB4XCIsc1tvLnBvc2l0aW9uUHJvcF09aSwhMT09PW8udHJhbnNmb3Jtc0VuYWJsZWQ/by4kc2xpZGVUcmFjay5jc3Mocyk6KHM9e30sITE9PT1vLmNzc1RyYW5zaXRpb25zPyhzW28uYW5pbVR5cGVdPVwidHJhbnNsYXRlKFwiK2UrXCIsIFwiK3QrXCIpXCIsby4kc2xpZGVUcmFjay5jc3MocykpOihzW28uYW5pbVR5cGVdPVwidHJhbnNsYXRlM2QoXCIrZStcIiwgXCIrdCtcIiwgMHB4KVwiLG8uJHNsaWRlVHJhY2suY3NzKHMpKSl9LGUucHJvdG90eXBlLnNldERpbWVuc2lvbnM9ZnVuY3Rpb24oKXt2YXIgaT10aGlzOyExPT09aS5vcHRpb25zLnZlcnRpY2FsPyEwPT09aS5vcHRpb25zLmNlbnRlck1vZGUmJmkuJGxpc3QuY3NzKHtwYWRkaW5nOlwiMHB4IFwiK2kub3B0aW9ucy5jZW50ZXJQYWRkaW5nfSk6KGkuJGxpc3QuaGVpZ2h0KGkuJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KCEwKSppLm9wdGlvbnMuc2xpZGVzVG9TaG93KSwhMD09PWkub3B0aW9ucy5jZW50ZXJNb2RlJiZpLiRsaXN0LmNzcyh7cGFkZGluZzppLm9wdGlvbnMuY2VudGVyUGFkZGluZytcIiAwcHhcIn0pKSxpLmxpc3RXaWR0aD1pLiRsaXN0LndpZHRoKCksaS5saXN0SGVpZ2h0PWkuJGxpc3QuaGVpZ2h0KCksITE9PT1pLm9wdGlvbnMudmVydGljYWwmJiExPT09aS5vcHRpb25zLnZhcmlhYmxlV2lkdGg/KGkuc2xpZGVXaWR0aD1NYXRoLmNlaWwoaS5saXN0V2lkdGgvaS5vcHRpb25zLnNsaWRlc1RvU2hvdyksaS4kc2xpZGVUcmFjay53aWR0aChNYXRoLmNlaWwoaS5zbGlkZVdpZHRoKmkuJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikubGVuZ3RoKSkpOiEwPT09aS5vcHRpb25zLnZhcmlhYmxlV2lkdGg/aS4kc2xpZGVUcmFjay53aWR0aCg1ZTMqaS5zbGlkZUNvdW50KTooaS5zbGlkZVdpZHRoPU1hdGguY2VpbChpLmxpc3RXaWR0aCksaS4kc2xpZGVUcmFjay5oZWlnaHQoTWF0aC5jZWlsKGkuJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KCEwKSppLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmxlbmd0aCkpKTt2YXIgZT1pLiRzbGlkZXMuZmlyc3QoKS5vdXRlcldpZHRoKCEwKS1pLiRzbGlkZXMuZmlyc3QoKS53aWR0aCgpOyExPT09aS5vcHRpb25zLnZhcmlhYmxlV2lkdGgmJmkuJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikud2lkdGgoaS5zbGlkZVdpZHRoLWUpfSxlLnByb3RvdHlwZS5zZXRGYWRlPWZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzO3QuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKG8scyl7ZT10LnNsaWRlV2lkdGgqbyotMSwhMD09PXQub3B0aW9ucy5ydGw/aShzKS5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIixyaWdodDplLHRvcDowLHpJbmRleDp0Lm9wdGlvbnMuekluZGV4LTIsb3BhY2l0eTowfSk6aShzKS5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIixsZWZ0OmUsdG9wOjAsekluZGV4OnQub3B0aW9ucy56SW5kZXgtMixvcGFjaXR5OjB9KX0pLHQuJHNsaWRlcy5lcSh0LmN1cnJlbnRTbGlkZSkuY3NzKHt6SW5kZXg6dC5vcHRpb25zLnpJbmRleC0xLG9wYWNpdHk6MX0pfSxlLnByb3RvdHlwZS5zZXRIZWlnaHQ9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2lmKDE9PT1pLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYhMD09PWkub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCYmITE9PT1pLm9wdGlvbnMudmVydGljYWwpe3ZhciBlPWkuJHNsaWRlcy5lcShpLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQoITApO2kuJGxpc3QuY3NzKFwiaGVpZ2h0XCIsZSl9fSxlLnByb3RvdHlwZS5zZXRPcHRpb249ZS5wcm90b3R5cGUuc2xpY2tTZXRPcHRpb249ZnVuY3Rpb24oKXt2YXIgZSx0LG8scyxuLHI9dGhpcyxsPSExO2lmKFwib2JqZWN0XCI9PT1pLnR5cGUoYXJndW1lbnRzWzBdKT8obz1hcmd1bWVudHNbMF0sbD1hcmd1bWVudHNbMV0sbj1cIm11bHRpcGxlXCIpOlwic3RyaW5nXCI9PT1pLnR5cGUoYXJndW1lbnRzWzBdKSYmKG89YXJndW1lbnRzWzBdLHM9YXJndW1lbnRzWzFdLGw9YXJndW1lbnRzWzJdLFwicmVzcG9uc2l2ZVwiPT09YXJndW1lbnRzWzBdJiZcImFycmF5XCI9PT1pLnR5cGUoYXJndW1lbnRzWzFdKT9uPVwicmVzcG9uc2l2ZVwiOnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmKG49XCJzaW5nbGVcIikpLFwic2luZ2xlXCI9PT1uKXIub3B0aW9uc1tvXT1zO2Vsc2UgaWYoXCJtdWx0aXBsZVwiPT09bilpLmVhY2gobyxmdW5jdGlvbihpLGUpe3Iub3B0aW9uc1tpXT1lfSk7ZWxzZSBpZihcInJlc3BvbnNpdmVcIj09PW4pZm9yKHQgaW4gcylpZihcImFycmF5XCIhPT1pLnR5cGUoci5vcHRpb25zLnJlc3BvbnNpdmUpKXIub3B0aW9ucy5yZXNwb25zaXZlPVtzW3RdXTtlbHNle2ZvcihlPXIub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aC0xO2U+PTA7KXIub3B0aW9ucy5yZXNwb25zaXZlW2VdLmJyZWFrcG9pbnQ9PT1zW3RdLmJyZWFrcG9pbnQmJnIub3B0aW9ucy5yZXNwb25zaXZlLnNwbGljZShlLDEpLGUtLTtyLm9wdGlvbnMucmVzcG9uc2l2ZS5wdXNoKHNbdF0pfWwmJihyLnVubG9hZCgpLHIucmVpbml0KCkpfSxlLnByb3RvdHlwZS5zZXRQb3NpdGlvbj1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5zZXREaW1lbnNpb25zKCksaS5zZXRIZWlnaHQoKSwhMT09PWkub3B0aW9ucy5mYWRlP2kuc2V0Q1NTKGkuZ2V0TGVmdChpLmN1cnJlbnRTbGlkZSkpOmkuc2V0RmFkZSgpLGkuJHNsaWRlci50cmlnZ2VyKFwic2V0UG9zaXRpb25cIixbaV0pfSxlLnByb3RvdHlwZS5zZXRQcm9wcz1mdW5jdGlvbigpe3ZhciBpPXRoaXMsZT1kb2N1bWVudC5ib2R5LnN0eWxlO2kucG9zaXRpb25Qcm9wPSEwPT09aS5vcHRpb25zLnZlcnRpY2FsP1widG9wXCI6XCJsZWZ0XCIsXCJ0b3BcIj09PWkucG9zaXRpb25Qcm9wP2kuJHNsaWRlci5hZGRDbGFzcyhcInNsaWNrLXZlcnRpY2FsXCIpOmkuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLXZlcnRpY2FsXCIpLHZvaWQgMD09PWUuV2Via2l0VHJhbnNpdGlvbiYmdm9pZCAwPT09ZS5Nb3pUcmFuc2l0aW9uJiZ2b2lkIDA9PT1lLm1zVHJhbnNpdGlvbnx8ITA9PT1pLm9wdGlvbnMudXNlQ1NTJiYoaS5jc3NUcmFuc2l0aW9ucz0hMCksaS5vcHRpb25zLmZhZGUmJihcIm51bWJlclwiPT10eXBlb2YgaS5vcHRpb25zLnpJbmRleD9pLm9wdGlvbnMuekluZGV4PDMmJihpLm9wdGlvbnMuekluZGV4PTMpOmkub3B0aW9ucy56SW5kZXg9aS5kZWZhdWx0cy56SW5kZXgpLHZvaWQgMCE9PWUuT1RyYW5zZm9ybSYmKGkuYW5pbVR5cGU9XCJPVHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwiLW8tdHJhbnNmb3JtXCIsaS50cmFuc2l0aW9uVHlwZT1cIk9UcmFuc2l0aW9uXCIsdm9pZCAwPT09ZS5wZXJzcGVjdGl2ZVByb3BlcnR5JiZ2b2lkIDA9PT1lLndlYmtpdFBlcnNwZWN0aXZlJiYoaS5hbmltVHlwZT0hMSkpLHZvaWQgMCE9PWUuTW96VHJhbnNmb3JtJiYoaS5hbmltVHlwZT1cIk1velRyYW5zZm9ybVwiLGkudHJhbnNmb3JtVHlwZT1cIi1tb3otdHJhbnNmb3JtXCIsaS50cmFuc2l0aW9uVHlwZT1cIk1velRyYW5zaXRpb25cIix2b2lkIDA9PT1lLnBlcnNwZWN0aXZlUHJvcGVydHkmJnZvaWQgMD09PWUuTW96UGVyc3BlY3RpdmUmJihpLmFuaW1UeXBlPSExKSksdm9pZCAwIT09ZS53ZWJraXRUcmFuc2Zvcm0mJihpLmFuaW1UeXBlPVwid2Via2l0VHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwiLXdlYmtpdC10cmFuc2Zvcm1cIixpLnRyYW5zaXRpb25UeXBlPVwid2Via2l0VHJhbnNpdGlvblwiLHZvaWQgMD09PWUucGVyc3BlY3RpdmVQcm9wZXJ0eSYmdm9pZCAwPT09ZS53ZWJraXRQZXJzcGVjdGl2ZSYmKGkuYW5pbVR5cGU9ITEpKSx2b2lkIDAhPT1lLm1zVHJhbnNmb3JtJiYoaS5hbmltVHlwZT1cIm1zVHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwiLW1zLXRyYW5zZm9ybVwiLGkudHJhbnNpdGlvblR5cGU9XCJtc1RyYW5zaXRpb25cIix2b2lkIDA9PT1lLm1zVHJhbnNmb3JtJiYoaS5hbmltVHlwZT0hMSkpLHZvaWQgMCE9PWUudHJhbnNmb3JtJiYhMSE9PWkuYW5pbVR5cGUmJihpLmFuaW1UeXBlPVwidHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwidHJhbnNmb3JtXCIsaS50cmFuc2l0aW9uVHlwZT1cInRyYW5zaXRpb25cIiksaS50cmFuc2Zvcm1zRW5hYmxlZD1pLm9wdGlvbnMudXNlVHJhbnNmb3JtJiZudWxsIT09aS5hbmltVHlwZSYmITEhPT1pLmFuaW1UeXBlfSxlLnByb3RvdHlwZS5zZXRTbGlkZUNsYXNzZXM9ZnVuY3Rpb24oaSl7dmFyIGUsdCxvLHMsbj10aGlzO2lmKHQ9bi4kc2xpZGVyLmZpbmQoXCIuc2xpY2stc2xpZGVcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLWN1cnJlbnRcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpLG4uJHNsaWRlcy5lcShpKS5hZGRDbGFzcyhcInNsaWNrLWN1cnJlbnRcIiksITA9PT1uLm9wdGlvbnMuY2VudGVyTW9kZSl7dmFyIHI9bi5vcHRpb25zLnNsaWRlc1RvU2hvdyUyPT0wPzE6MDtlPU1hdGguZmxvb3Iobi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKSwhMD09PW4ub3B0aW9ucy5pbmZpbml0ZSYmKGk+PWUmJmk8PW4uc2xpZGVDb3VudC0xLWU/bi4kc2xpZGVzLnNsaWNlKGktZStyLGkrZSsxKS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpOihvPW4ub3B0aW9ucy5zbGlkZXNUb1Nob3craSx0LnNsaWNlKG8tZSsxK3IsbytlKzIpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIikpLDA9PT1pP3QuZXEodC5sZW5ndGgtMS1uLm9wdGlvbnMuc2xpZGVzVG9TaG93KS5hZGRDbGFzcyhcInNsaWNrLWNlbnRlclwiKTppPT09bi5zbGlkZUNvdW50LTEmJnQuZXEobi5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1jZW50ZXJcIikpLG4uJHNsaWRlcy5lcShpKS5hZGRDbGFzcyhcInNsaWNrLWNlbnRlclwiKX1lbHNlIGk+PTAmJmk8PW4uc2xpZGVDb3VudC1uLm9wdGlvbnMuc2xpZGVzVG9TaG93P24uJHNsaWRlcy5zbGljZShpLGkrbi5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKTp0Lmxlbmd0aDw9bi5vcHRpb25zLnNsaWRlc1RvU2hvdz90LmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIik6KHM9bi5zbGlkZUNvdW50JW4ub3B0aW9ucy5zbGlkZXNUb1Nob3csbz0hMD09PW4ub3B0aW9ucy5pbmZpbml0ZT9uLm9wdGlvbnMuc2xpZGVzVG9TaG93K2k6aSxuLm9wdGlvbnMuc2xpZGVzVG9TaG93PT1uLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwmJm4uc2xpZGVDb3VudC1pPG4ub3B0aW9ucy5zbGlkZXNUb1Nob3c/dC5zbGljZShvLShuLm9wdGlvbnMuc2xpZGVzVG9TaG93LXMpLG8rcykuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKTp0LnNsaWNlKG8sbytuLm9wdGlvbnMuc2xpZGVzVG9TaG93KS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpKTtcIm9uZGVtYW5kXCIhPT1uLm9wdGlvbnMubGF6eUxvYWQmJlwiYW50aWNpcGF0ZWRcIiE9PW4ub3B0aW9ucy5sYXp5TG9hZHx8bi5sYXp5TG9hZCgpfSxlLnByb3RvdHlwZS5zZXR1cEluZmluaXRlPWZ1bmN0aW9uKCl7dmFyIGUsdCxvLHM9dGhpcztpZighMD09PXMub3B0aW9ucy5mYWRlJiYocy5vcHRpb25zLmNlbnRlck1vZGU9ITEpLCEwPT09cy5vcHRpb25zLmluZmluaXRlJiYhMT09PXMub3B0aW9ucy5mYWRlJiYodD1udWxsLHMuc2xpZGVDb3VudD5zLm9wdGlvbnMuc2xpZGVzVG9TaG93KSl7Zm9yKG89ITA9PT1zLm9wdGlvbnMuY2VudGVyTW9kZT9zLm9wdGlvbnMuc2xpZGVzVG9TaG93KzE6cy5vcHRpb25zLnNsaWRlc1RvU2hvdyxlPXMuc2xpZGVDb3VudDtlPnMuc2xpZGVDb3VudC1vO2UtPTEpdD1lLTEsaShzLiRzbGlkZXNbdF0pLmNsb25lKCEwKS5hdHRyKFwiaWRcIixcIlwiKS5hdHRyKFwiZGF0YS1zbGljay1pbmRleFwiLHQtcy5zbGlkZUNvdW50KS5wcmVwZW5kVG8ocy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoXCJzbGljay1jbG9uZWRcIik7Zm9yKGU9MDtlPG8rcy5zbGlkZUNvdW50O2UrPTEpdD1lLGkocy4kc2xpZGVzW3RdKS5jbG9uZSghMCkuYXR0cihcImlkXCIsXCJcIikuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIix0K3Muc2xpZGVDb3VudCkuYXBwZW5kVG8ocy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoXCJzbGljay1jbG9uZWRcIik7cy4kc2xpZGVUcmFjay5maW5kKFwiLnNsaWNrLWNsb25lZFwiKS5maW5kKFwiW2lkXVwiKS5lYWNoKGZ1bmN0aW9uKCl7aSh0aGlzKS5hdHRyKFwiaWRcIixcIlwiKX0pfX0sZS5wcm90b3R5cGUuaW50ZXJydXB0PWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXM7aXx8ZS5hdXRvUGxheSgpLGUuaW50ZXJydXB0ZWQ9aX0sZS5wcm90b3R5cGUuc2VsZWN0SGFuZGxlcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG89aShlLnRhcmdldCkuaXMoXCIuc2xpY2stc2xpZGVcIik/aShlLnRhcmdldCk6aShlLnRhcmdldCkucGFyZW50cyhcIi5zbGljay1zbGlkZVwiKSxzPXBhcnNlSW50KG8uYXR0cihcImRhdGEtc2xpY2staW5kZXhcIikpO3N8fChzPTApLHQuc2xpZGVDb3VudDw9dC5vcHRpb25zLnNsaWRlc1RvU2hvdz90LnNsaWRlSGFuZGxlcihzLCExLCEwKTp0LnNsaWRlSGFuZGxlcihzKX0sZS5wcm90b3R5cGUuc2xpZGVIYW5kbGVyPWZ1bmN0aW9uKGksZSx0KXt2YXIgbyxzLG4scixsLGQ9bnVsbCxhPXRoaXM7aWYoZT1lfHwhMSwhKCEwPT09YS5hbmltYXRpbmcmJiEwPT09YS5vcHRpb25zLndhaXRGb3JBbmltYXRlfHwhMD09PWEub3B0aW9ucy5mYWRlJiZhLmN1cnJlbnRTbGlkZT09PWkpKWlmKCExPT09ZSYmYS5hc05hdkZvcihpKSxvPWksZD1hLmdldExlZnQobykscj1hLmdldExlZnQoYS5jdXJyZW50U2xpZGUpLGEuY3VycmVudExlZnQ9bnVsbD09PWEuc3dpcGVMZWZ0P3I6YS5zd2lwZUxlZnQsITE9PT1hLm9wdGlvbnMuaW5maW5pdGUmJiExPT09YS5vcHRpb25zLmNlbnRlck1vZGUmJihpPDB8fGk+YS5nZXREb3RDb3VudCgpKmEub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpITE9PT1hLm9wdGlvbnMuZmFkZSYmKG89YS5jdXJyZW50U2xpZGUsITAhPT10P2EuYW5pbWF0ZVNsaWRlKHIsZnVuY3Rpb24oKXthLnBvc3RTbGlkZShvKX0pOmEucG9zdFNsaWRlKG8pKTtlbHNlIGlmKCExPT09YS5vcHRpb25zLmluZmluaXRlJiYhMD09PWEub3B0aW9ucy5jZW50ZXJNb2RlJiYoaTwwfHxpPmEuc2xpZGVDb3VudC1hLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKSExPT09YS5vcHRpb25zLmZhZGUmJihvPWEuY3VycmVudFNsaWRlLCEwIT09dD9hLmFuaW1hdGVTbGlkZShyLGZ1bmN0aW9uKCl7YS5wb3N0U2xpZGUobyl9KTphLnBvc3RTbGlkZShvKSk7ZWxzZXtpZihhLm9wdGlvbnMuYXV0b3BsYXkmJmNsZWFySW50ZXJ2YWwoYS5hdXRvUGxheVRpbWVyKSxzPW88MD9hLnNsaWRlQ291bnQlYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIT0wP2Euc2xpZGVDb3VudC1hLnNsaWRlQ291bnQlYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOmEuc2xpZGVDb3VudCtvOm8+PWEuc2xpZGVDb3VudD9hLnNsaWRlQ291bnQlYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIT0wPzA6by1hLnNsaWRlQ291bnQ6byxhLmFuaW1hdGluZz0hMCxhLiRzbGlkZXIudHJpZ2dlcihcImJlZm9yZUNoYW5nZVwiLFthLGEuY3VycmVudFNsaWRlLHNdKSxuPWEuY3VycmVudFNsaWRlLGEuY3VycmVudFNsaWRlPXMsYS5zZXRTbGlkZUNsYXNzZXMoYS5jdXJyZW50U2xpZGUpLGEub3B0aW9ucy5hc05hdkZvciYmKGw9KGw9YS5nZXROYXZUYXJnZXQoKSkuc2xpY2soXCJnZXRTbGlja1wiKSkuc2xpZGVDb3VudDw9bC5vcHRpb25zLnNsaWRlc1RvU2hvdyYmbC5zZXRTbGlkZUNsYXNzZXMoYS5jdXJyZW50U2xpZGUpLGEudXBkYXRlRG90cygpLGEudXBkYXRlQXJyb3dzKCksITA9PT1hLm9wdGlvbnMuZmFkZSlyZXR1cm4hMCE9PXQ/KGEuZmFkZVNsaWRlT3V0KG4pLGEuZmFkZVNsaWRlKHMsZnVuY3Rpb24oKXthLnBvc3RTbGlkZShzKX0pKTphLnBvc3RTbGlkZShzKSx2b2lkIGEuYW5pbWF0ZUhlaWdodCgpOyEwIT09dD9hLmFuaW1hdGVTbGlkZShkLGZ1bmN0aW9uKCl7YS5wb3N0U2xpZGUocyl9KTphLnBvc3RTbGlkZShzKX19LGUucHJvdG90eXBlLnN0YXJ0TG9hZD1mdW5jdGlvbigpe3ZhciBpPXRoaXM7ITA9PT1pLm9wdGlvbnMuYXJyb3dzJiZpLnNsaWRlQ291bnQ+aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGkuJHByZXZBcnJvdy5oaWRlKCksaS4kbmV4dEFycm93LmhpZGUoKSksITA9PT1pLm9wdGlvbnMuZG90cyYmaS5zbGlkZUNvdW50Pmkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmkuJGRvdHMuaGlkZSgpLGkuJHNsaWRlci5hZGRDbGFzcyhcInNsaWNrLWxvYWRpbmdcIil9LGUucHJvdG90eXBlLnN3aXBlRGlyZWN0aW9uPWZ1bmN0aW9uKCl7dmFyIGksZSx0LG8scz10aGlzO3JldHVybiBpPXMudG91Y2hPYmplY3Quc3RhcnRYLXMudG91Y2hPYmplY3QuY3VyWCxlPXMudG91Y2hPYmplY3Quc3RhcnRZLXMudG91Y2hPYmplY3QuY3VyWSx0PU1hdGguYXRhbjIoZSxpKSwobz1NYXRoLnJvdW5kKDE4MCp0L01hdGguUEkpKTwwJiYobz0zNjAtTWF0aC5hYnMobykpLG88PTQ1JiZvPj0wPyExPT09cy5vcHRpb25zLnJ0bD9cImxlZnRcIjpcInJpZ2h0XCI6bzw9MzYwJiZvPj0zMTU/ITE9PT1zLm9wdGlvbnMucnRsP1wibGVmdFwiOlwicmlnaHRcIjpvPj0xMzUmJm88PTIyNT8hMT09PXMub3B0aW9ucy5ydGw/XCJyaWdodFwiOlwibGVmdFwiOiEwPT09cy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZz9vPj0zNSYmbzw9MTM1P1wiZG93blwiOlwidXBcIjpcInZlcnRpY2FsXCJ9LGUucHJvdG90eXBlLnN3aXBlRW5kPWZ1bmN0aW9uKGkpe3ZhciBlLHQsbz10aGlzO2lmKG8uZHJhZ2dpbmc9ITEsby5zd2lwaW5nPSExLG8uc2Nyb2xsaW5nKXJldHVybiBvLnNjcm9sbGluZz0hMSwhMTtpZihvLmludGVycnVwdGVkPSExLG8uc2hvdWxkQ2xpY2s9IShvLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoPjEwKSx2b2lkIDA9PT1vLnRvdWNoT2JqZWN0LmN1clgpcmV0dXJuITE7aWYoITA9PT1vLnRvdWNoT2JqZWN0LmVkZ2VIaXQmJm8uJHNsaWRlci50cmlnZ2VyKFwiZWRnZVwiLFtvLG8uc3dpcGVEaXJlY3Rpb24oKV0pLG8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGg+PW8udG91Y2hPYmplY3QubWluU3dpcGUpe3N3aXRjaCh0PW8uc3dpcGVEaXJlY3Rpb24oKSl7Y2FzZVwibGVmdFwiOmNhc2VcImRvd25cIjplPW8ub3B0aW9ucy5zd2lwZVRvU2xpZGU/by5jaGVja05hdmlnYWJsZShvLmN1cnJlbnRTbGlkZStvLmdldFNsaWRlQ291bnQoKSk6by5jdXJyZW50U2xpZGUrby5nZXRTbGlkZUNvdW50KCksby5jdXJyZW50RGlyZWN0aW9uPTA7YnJlYWs7Y2FzZVwicmlnaHRcIjpjYXNlXCJ1cFwiOmU9by5vcHRpb25zLnN3aXBlVG9TbGlkZT9vLmNoZWNrTmF2aWdhYmxlKG8uY3VycmVudFNsaWRlLW8uZ2V0U2xpZGVDb3VudCgpKTpvLmN1cnJlbnRTbGlkZS1vLmdldFNsaWRlQ291bnQoKSxvLmN1cnJlbnREaXJlY3Rpb249MX1cInZlcnRpY2FsXCIhPXQmJihvLnNsaWRlSGFuZGxlcihlKSxvLnRvdWNoT2JqZWN0PXt9LG8uJHNsaWRlci50cmlnZ2VyKFwic3dpcGVcIixbbyx0XSkpfWVsc2Ugby50b3VjaE9iamVjdC5zdGFydFghPT1vLnRvdWNoT2JqZWN0LmN1clgmJihvLnNsaWRlSGFuZGxlcihvLmN1cnJlbnRTbGlkZSksby50b3VjaE9iamVjdD17fSl9LGUucHJvdG90eXBlLnN3aXBlSGFuZGxlcj1mdW5jdGlvbihpKXt2YXIgZT10aGlzO2lmKCEoITE9PT1lLm9wdGlvbnMuc3dpcGV8fFwib250b3VjaGVuZFwiaW4gZG9jdW1lbnQmJiExPT09ZS5vcHRpb25zLnN3aXBlfHwhMT09PWUub3B0aW9ucy5kcmFnZ2FibGUmJi0xIT09aS50eXBlLmluZGV4T2YoXCJtb3VzZVwiKSkpc3dpdGNoKGUudG91Y2hPYmplY3QuZmluZ2VyQ291bnQ9aS5vcmlnaW5hbEV2ZW50JiZ2b2lkIDAhPT1pLm9yaWdpbmFsRXZlbnQudG91Y2hlcz9pLm9yaWdpbmFsRXZlbnQudG91Y2hlcy5sZW5ndGg6MSxlLnRvdWNoT2JqZWN0Lm1pblN3aXBlPWUubGlzdFdpZHRoL2Uub3B0aW9ucy50b3VjaFRocmVzaG9sZCwhMD09PWUub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcmJihlLnRvdWNoT2JqZWN0Lm1pblN3aXBlPWUubGlzdEhlaWdodC9lLm9wdGlvbnMudG91Y2hUaHJlc2hvbGQpLGkuZGF0YS5hY3Rpb24pe2Nhc2VcInN0YXJ0XCI6ZS5zd2lwZVN0YXJ0KGkpO2JyZWFrO2Nhc2VcIm1vdmVcIjplLnN3aXBlTW92ZShpKTticmVhaztjYXNlXCJlbmRcIjplLnN3aXBlRW5kKGkpfX0sZS5wcm90b3R5cGUuc3dpcGVNb3ZlPWZ1bmN0aW9uKGkpe3ZhciBlLHQsbyxzLG4scixsPXRoaXM7cmV0dXJuIG49dm9pZCAwIT09aS5vcmlnaW5hbEV2ZW50P2kub3JpZ2luYWxFdmVudC50b3VjaGVzOm51bGwsISghbC5kcmFnZ2luZ3x8bC5zY3JvbGxpbmd8fG4mJjEhPT1uLmxlbmd0aCkmJihlPWwuZ2V0TGVmdChsLmN1cnJlbnRTbGlkZSksbC50b3VjaE9iamVjdC5jdXJYPXZvaWQgMCE9PW4/blswXS5wYWdlWDppLmNsaWVudFgsbC50b3VjaE9iamVjdC5jdXJZPXZvaWQgMCE9PW4/blswXS5wYWdlWTppLmNsaWVudFksbC50b3VjaE9iamVjdC5zd2lwZUxlbmd0aD1NYXRoLnJvdW5kKE1hdGguc3FydChNYXRoLnBvdyhsLnRvdWNoT2JqZWN0LmN1clgtbC50b3VjaE9iamVjdC5zdGFydFgsMikpKSxyPU1hdGgucm91bmQoTWF0aC5zcXJ0KE1hdGgucG93KGwudG91Y2hPYmplY3QuY3VyWS1sLnRvdWNoT2JqZWN0LnN0YXJ0WSwyKSkpLCFsLm9wdGlvbnMudmVydGljYWxTd2lwaW5nJiYhbC5zd2lwaW5nJiZyPjQ/KGwuc2Nyb2xsaW5nPSEwLCExKTooITA9PT1sLm9wdGlvbnMudmVydGljYWxTd2lwaW5nJiYobC50b3VjaE9iamVjdC5zd2lwZUxlbmd0aD1yKSx0PWwuc3dpcGVEaXJlY3Rpb24oKSx2b2lkIDAhPT1pLm9yaWdpbmFsRXZlbnQmJmwudG91Y2hPYmplY3Quc3dpcGVMZW5ndGg+NCYmKGwuc3dpcGluZz0hMCxpLnByZXZlbnREZWZhdWx0KCkpLHM9KCExPT09bC5vcHRpb25zLnJ0bD8xOi0xKSoobC50b3VjaE9iamVjdC5jdXJYPmwudG91Y2hPYmplY3Quc3RhcnRYPzE6LTEpLCEwPT09bC5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyYmKHM9bC50b3VjaE9iamVjdC5jdXJZPmwudG91Y2hPYmplY3Quc3RhcnRZPzE6LTEpLG89bC50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCxsLnRvdWNoT2JqZWN0LmVkZ2VIaXQ9ITEsITE9PT1sLm9wdGlvbnMuaW5maW5pdGUmJigwPT09bC5jdXJyZW50U2xpZGUmJlwicmlnaHRcIj09PXR8fGwuY3VycmVudFNsaWRlPj1sLmdldERvdENvdW50KCkmJlwibGVmdFwiPT09dCkmJihvPWwudG91Y2hPYmplY3Quc3dpcGVMZW5ndGgqbC5vcHRpb25zLmVkZ2VGcmljdGlvbixsLnRvdWNoT2JqZWN0LmVkZ2VIaXQ9ITApLCExPT09bC5vcHRpb25zLnZlcnRpY2FsP2wuc3dpcGVMZWZ0PWUrbypzOmwuc3dpcGVMZWZ0PWUrbyoobC4kbGlzdC5oZWlnaHQoKS9sLmxpc3RXaWR0aCkqcywhMD09PWwub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcmJihsLnN3aXBlTGVmdD1lK28qcyksITAhPT1sLm9wdGlvbnMuZmFkZSYmITEhPT1sLm9wdGlvbnMudG91Y2hNb3ZlJiYoITA9PT1sLmFuaW1hdGluZz8obC5zd2lwZUxlZnQ9bnVsbCwhMSk6dm9pZCBsLnNldENTUyhsLnN3aXBlTGVmdCkpKSl9LGUucHJvdG90eXBlLnN3aXBlU3RhcnQ9ZnVuY3Rpb24oaSl7dmFyIGUsdD10aGlzO2lmKHQuaW50ZXJydXB0ZWQ9ITAsMSE9PXQudG91Y2hPYmplY3QuZmluZ2VyQ291bnR8fHQuc2xpZGVDb3VudDw9dC5vcHRpb25zLnNsaWRlc1RvU2hvdylyZXR1cm4gdC50b3VjaE9iamVjdD17fSwhMTt2b2lkIDAhPT1pLm9yaWdpbmFsRXZlbnQmJnZvaWQgMCE9PWkub3JpZ2luYWxFdmVudC50b3VjaGVzJiYoZT1pLm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXSksdC50b3VjaE9iamVjdC5zdGFydFg9dC50b3VjaE9iamVjdC5jdXJYPXZvaWQgMCE9PWU/ZS5wYWdlWDppLmNsaWVudFgsdC50b3VjaE9iamVjdC5zdGFydFk9dC50b3VjaE9iamVjdC5jdXJZPXZvaWQgMCE9PWU/ZS5wYWdlWTppLmNsaWVudFksdC5kcmFnZ2luZz0hMH0sZS5wcm90b3R5cGUudW5maWx0ZXJTbGlkZXM9ZS5wcm90b3R5cGUuc2xpY2tVbmZpbHRlcj1mdW5jdGlvbigpe3ZhciBpPXRoaXM7bnVsbCE9PWkuJHNsaWRlc0NhY2hlJiYoaS51bmxvYWQoKSxpLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCksaS4kc2xpZGVzQ2FjaGUuYXBwZW5kVG8oaS4kc2xpZGVUcmFjayksaS5yZWluaXQoKSl9LGUucHJvdG90eXBlLnVubG9hZD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7aShcIi5zbGljay1jbG9uZWRcIixlLiRzbGlkZXIpLnJlbW92ZSgpLGUuJGRvdHMmJmUuJGRvdHMucmVtb3ZlKCksZS4kcHJldkFycm93JiZlLmh0bWxFeHByLnRlc3QoZS5vcHRpb25zLnByZXZBcnJvdykmJmUuJHByZXZBcnJvdy5yZW1vdmUoKSxlLiRuZXh0QXJyb3cmJmUuaHRtbEV4cHIudGVzdChlLm9wdGlvbnMubmV4dEFycm93KSYmZS4kbmV4dEFycm93LnJlbW92ZSgpLGUuJHNsaWRlcy5yZW1vdmVDbGFzcyhcInNsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnRcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpLmNzcyhcIndpZHRoXCIsXCJcIil9LGUucHJvdG90eXBlLnVuc2xpY2s9ZnVuY3Rpb24oaSl7dmFyIGU9dGhpcztlLiRzbGlkZXIudHJpZ2dlcihcInVuc2xpY2tcIixbZSxpXSksZS5kZXN0cm95KCl9LGUucHJvdG90eXBlLnVwZGF0ZUFycm93cz1mdW5jdGlvbigpe3ZhciBpPXRoaXM7TWF0aC5mbG9vcihpLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIpLCEwPT09aS5vcHRpb25zLmFycm93cyYmaS5zbGlkZUNvdW50Pmkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJiFpLm9wdGlvbnMuaW5maW5pdGUmJihpLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwiZmFsc2VcIiksaS4kbmV4dEFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpLDA9PT1pLmN1cnJlbnRTbGlkZT8oaS4kcHJldkFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIiksaS4kbmV4dEFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpKTppLmN1cnJlbnRTbGlkZT49aS5zbGlkZUNvdW50LWkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJiExPT09aS5vcHRpb25zLmNlbnRlck1vZGU/KGkuJG5leHRBcnJvdy5hZGRDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJ0cnVlXCIpLGkuJHByZXZBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJmYWxzZVwiKSk6aS5jdXJyZW50U2xpZGU+PWkuc2xpZGVDb3VudC0xJiYhMD09PWkub3B0aW9ucy5jZW50ZXJNb2RlJiYoaS4kbmV4dEFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIiksaS4kcHJldkFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpKSl9LGUucHJvdG90eXBlLnVwZGF0ZURvdHM9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO251bGwhPT1pLiRkb3RzJiYoaS4kZG90cy5maW5kKFwibGlcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuZW5kKCksaS4kZG90cy5maW5kKFwibGlcIikuZXEoTWF0aC5mbG9vcihpLmN1cnJlbnRTbGlkZS9pLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKSl9LGUucHJvdG90eXBlLnZpc2liaWxpdHk9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2kub3B0aW9ucy5hdXRvcGxheSYmKGRvY3VtZW50W2kuaGlkZGVuXT9pLmludGVycnVwdGVkPSEwOmkuaW50ZXJydXB0ZWQ9ITEpfSxpLmZuLnNsaWNrPWZ1bmN0aW9uKCl7dmFyIGksdCxvPXRoaXMscz1hcmd1bWVudHNbMF0sbj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSkscj1vLmxlbmd0aDtmb3IoaT0wO2k8cjtpKyspaWYoXCJvYmplY3RcIj09dHlwZW9mIHN8fHZvaWQgMD09PXM/b1tpXS5zbGljaz1uZXcgZShvW2ldLHMpOnQ9b1tpXS5zbGlja1tzXS5hcHBseShvW2ldLnNsaWNrLG4pLHZvaWQgMCE9PXQpcmV0dXJuIHQ7cmV0dXJuIG99fSk7XHJcbiIsIi8qKlxuICogd2hhdC1pbnB1dCAtIEEgZ2xvYmFsIHV0aWxpdHkgZm9yIHRyYWNraW5nIHRoZSBjdXJyZW50IGlucHV0IG1ldGhvZCAobW91c2UsIGtleWJvYXJkIG9yIHRvdWNoKS5cbiAqIEB2ZXJzaW9uIHY0LjMuMVxuICogQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3RlbjFzZXZlbi93aGF0LWlucHV0XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJ3aGF0SW5wdXRcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wid2hhdElucHV0XCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIndoYXRJbnB1dFwiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG5cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG5cblxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgLypcblx0ICAgKiB2YXJpYWJsZXNcblx0ICAgKi9cblxuXHQgIC8vIGxhc3QgdXNlZCBpbnB1dCB0eXBlXG5cdCAgdmFyIGN1cnJlbnRJbnB1dCA9ICdpbml0aWFsJztcblxuXHQgIC8vIGxhc3QgdXNlZCBpbnB1dCBpbnRlbnRcblx0ICB2YXIgY3VycmVudEludGVudCA9IG51bGw7XG5cblx0ICAvLyBjYWNoZSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRcblx0ICB2YXIgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cdCAgLy8gZm9ybSBpbnB1dCB0eXBlc1xuXHQgIHZhciBmb3JtSW5wdXRzID0gWydpbnB1dCcsICdzZWxlY3QnLCAndGV4dGFyZWEnXTtcblxuXHQgIHZhciBmdW5jdGlvbkxpc3QgPSBbXTtcblxuXHQgIC8vIGxpc3Qgb2YgbW9kaWZpZXIga2V5cyBjb21tb25seSB1c2VkIHdpdGggdGhlIG1vdXNlIGFuZFxuXHQgIC8vIGNhbiBiZSBzYWZlbHkgaWdub3JlZCB0byBwcmV2ZW50IGZhbHNlIGtleWJvYXJkIGRldGVjdGlvblxuXHQgIHZhciBpZ25vcmVNYXAgPSBbMTYsIC8vIHNoaWZ0XG5cdCAgMTcsIC8vIGNvbnRyb2xcblx0ICAxOCwgLy8gYWx0XG5cdCAgOTEsIC8vIFdpbmRvd3Mga2V5IC8gbGVmdCBBcHBsZSBjbWRcblx0ICA5MyAvLyBXaW5kb3dzIG1lbnUgLyByaWdodCBBcHBsZSBjbWRcblx0ICBdO1xuXG5cdCAgLy8gbGlzdCBvZiBrZXlzIGZvciB3aGljaCB3ZSBjaGFuZ2UgaW50ZW50IGV2ZW4gZm9yIGZvcm0gaW5wdXRzXG5cdCAgdmFyIGNoYW5nZUludGVudE1hcCA9IFs5IC8vIHRhYlxuXHQgIF07XG5cblx0ICAvLyBtYXBwaW5nIG9mIGV2ZW50cyB0byBpbnB1dCB0eXBlc1xuXHQgIHZhciBpbnB1dE1hcCA9IHtcblx0ICAgIGtleWRvd246ICdrZXlib2FyZCcsXG5cdCAgICBrZXl1cDogJ2tleWJvYXJkJyxcblx0ICAgIG1vdXNlZG93bjogJ21vdXNlJyxcblx0ICAgIG1vdXNlbW92ZTogJ21vdXNlJyxcblx0ICAgIE1TUG9pbnRlckRvd246ICdwb2ludGVyJyxcblx0ICAgIE1TUG9pbnRlck1vdmU6ICdwb2ludGVyJyxcblx0ICAgIHBvaW50ZXJkb3duOiAncG9pbnRlcicsXG5cdCAgICBwb2ludGVybW92ZTogJ3BvaW50ZXInLFxuXHQgICAgdG91Y2hzdGFydDogJ3RvdWNoJ1xuXHQgIH07XG5cblx0ICAvLyBhcnJheSBvZiBhbGwgdXNlZCBpbnB1dCB0eXBlc1xuXHQgIHZhciBpbnB1dFR5cGVzID0gW107XG5cblx0ICAvLyBib29sZWFuOiB0cnVlIGlmIHRvdWNoIGJ1ZmZlciBpcyBhY3RpdmVcblx0ICB2YXIgaXNCdWZmZXJpbmcgPSBmYWxzZTtcblxuXHQgIC8vIGJvb2xlYW46IHRydWUgaWYgdGhlIHBhZ2UgaXMgYmVpbmcgc2Nyb2xsZWRcblx0ICB2YXIgaXNTY3JvbGxpbmcgPSBmYWxzZTtcblxuXHQgIC8vIHN0b3JlIGN1cnJlbnQgbW91c2UgcG9zaXRpb25cblx0ICB2YXIgbW91c2VQb3MgPSB7XG5cdCAgICB4OiBudWxsLFxuXHQgICAgeTogbnVsbFxuXHQgIH07XG5cblx0ICAvLyBtYXAgb2YgSUUgMTAgcG9pbnRlciBldmVudHNcblx0ICB2YXIgcG9pbnRlck1hcCA9IHtcblx0ICAgIDI6ICd0b3VjaCcsXG5cdCAgICAzOiAndG91Y2gnLCAvLyB0cmVhdCBwZW4gbGlrZSB0b3VjaFxuXHQgICAgNDogJ21vdXNlJ1xuXHQgIH07XG5cblx0ICB2YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5cblx0ICB0cnkge1xuXHQgICAgdmFyIG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuXHQgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRzKTtcblx0ICB9IGNhdGNoIChlKSB7fVxuXG5cdCAgLypcblx0ICAgKiBzZXQgdXBcblx0ICAgKi9cblxuXHQgIHZhciBzZXRVcCA9IGZ1bmN0aW9uIHNldFVwKCkge1xuXHQgICAgLy8gYWRkIGNvcnJlY3QgbW91c2Ugd2hlZWwgZXZlbnQgbWFwcGluZyB0byBgaW5wdXRNYXBgXG5cdCAgICBpbnB1dE1hcFtkZXRlY3RXaGVlbCgpXSA9ICdtb3VzZSc7XG5cblx0ICAgIGFkZExpc3RlbmVycygpO1xuXHQgICAgc2V0SW5wdXQoKTtcblx0ICB9O1xuXG5cdCAgLypcblx0ICAgKiBldmVudHNcblx0ICAgKi9cblxuXHQgIHZhciBhZGRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcnMoKSB7XG5cdCAgICAvLyBgcG9pbnRlcm1vdmVgLCBgTVNQb2ludGVyTW92ZWAsIGBtb3VzZW1vdmVgIGFuZCBtb3VzZSB3aGVlbCBldmVudCBiaW5kaW5nXG5cdCAgICAvLyBjYW4gb25seSBkZW1vbnN0cmF0ZSBwb3RlbnRpYWwsIGJ1dCBub3QgYWN0dWFsLCBpbnRlcmFjdGlvblxuXHQgICAgLy8gYW5kIGFyZSB0cmVhdGVkIHNlcGFyYXRlbHlcblx0ICAgIHZhciBvcHRpb25zID0gc3VwcG9ydHNQYXNzaXZlID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZTtcblxuXHQgICAgLy8gcG9pbnRlciBldmVudHMgKG1vdXNlLCBwZW4sIHRvdWNoKVxuXHQgICAgaWYgKHdpbmRvdy5Qb2ludGVyRXZlbnQpIHtcblx0ICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdXBkYXRlSW5wdXQpO1xuXHQgICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBzZXRJbnRlbnQpO1xuXHQgICAgfSBlbHNlIGlmICh3aW5kb3cuTVNQb2ludGVyRXZlbnQpIHtcblx0ICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ01TUG9pbnRlckRvd24nLCB1cGRhdGVJbnB1dCk7XG5cdCAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdNU1BvaW50ZXJNb3ZlJywgc2V0SW50ZW50KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIG1vdXNlIGV2ZW50c1xuXHQgICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdXBkYXRlSW5wdXQpO1xuXHQgICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc2V0SW50ZW50KTtcblxuXHQgICAgICAvLyB0b3VjaCBldmVudHNcblx0ICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykge1xuXHQgICAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdG91Y2hCdWZmZXIsIG9wdGlvbnMpO1xuXHQgICAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRvdWNoQnVmZmVyKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICAvLyBtb3VzZSB3aGVlbFxuXHQgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoZGV0ZWN0V2hlZWwoKSwgc2V0SW50ZW50LCBvcHRpb25zKTtcblxuXHQgICAgLy8ga2V5Ym9hcmQgZXZlbnRzXG5cdCAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHVwZGF0ZUlucHV0KTtcblx0ICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHVwZGF0ZUlucHV0KTtcblx0ICB9O1xuXG5cdCAgLy8gY2hlY2tzIGNvbmRpdGlvbnMgYmVmb3JlIHVwZGF0aW5nIG5ldyBpbnB1dFxuXHQgIHZhciB1cGRhdGVJbnB1dCA9IGZ1bmN0aW9uIHVwZGF0ZUlucHV0KGV2ZW50KSB7XG5cdCAgICAvLyBvbmx5IGV4ZWN1dGUgaWYgdGhlIHRvdWNoIGJ1ZmZlciB0aW1lciBpc24ndCBydW5uaW5nXG5cdCAgICBpZiAoIWlzQnVmZmVyaW5nKSB7XG5cdCAgICAgIHZhciBldmVudEtleSA9IGV2ZW50LndoaWNoO1xuXHQgICAgICB2YXIgdmFsdWUgPSBpbnB1dE1hcFtldmVudC50eXBlXTtcblx0ICAgICAgaWYgKHZhbHVlID09PSAncG9pbnRlcicpIHZhbHVlID0gcG9pbnRlclR5cGUoZXZlbnQpO1xuXG5cdCAgICAgIGlmIChjdXJyZW50SW5wdXQgIT09IHZhbHVlIHx8IGN1cnJlbnRJbnRlbnQgIT09IHZhbHVlKSB7XG5cdCAgICAgICAgdmFyIGFjdGl2ZUVsZW0gPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHQgICAgICAgIHZhciBhY3RpdmVJbnB1dCA9IGZhbHNlO1xuXHQgICAgICAgIHZhciBub3RGb3JtSW5wdXQgPSBhY3RpdmVFbGVtICYmIGFjdGl2ZUVsZW0ubm9kZU5hbWUgJiYgZm9ybUlucHV0cy5pbmRleE9mKGFjdGl2ZUVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkgPT09IC0xO1xuXG5cdCAgICAgICAgaWYgKG5vdEZvcm1JbnB1dCB8fCBjaGFuZ2VJbnRlbnRNYXAuaW5kZXhPZihldmVudEtleSkgIT09IC0xKSB7XG5cdCAgICAgICAgICBhY3RpdmVJbnB1dCA9IHRydWU7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHZhbHVlID09PSAndG91Y2gnIHx8XG5cdCAgICAgICAgLy8gaWdub3JlIG1vdXNlIG1vZGlmaWVyIGtleXNcblx0ICAgICAgICB2YWx1ZSA9PT0gJ21vdXNlJyB8fFxuXHQgICAgICAgIC8vIGRvbid0IHN3aXRjaCBpZiB0aGUgY3VycmVudCBlbGVtZW50IGlzIGEgZm9ybSBpbnB1dFxuXHQgICAgICAgIHZhbHVlID09PSAna2V5Ym9hcmQnICYmIGV2ZW50S2V5ICYmIGFjdGl2ZUlucHV0ICYmIGlnbm9yZU1hcC5pbmRleE9mKGV2ZW50S2V5KSA9PT0gLTEpIHtcblx0ICAgICAgICAgIC8vIHNldCB0aGUgY3VycmVudCBhbmQgY2F0Y2gtYWxsIHZhcmlhYmxlXG5cdCAgICAgICAgICBjdXJyZW50SW5wdXQgPSBjdXJyZW50SW50ZW50ID0gdmFsdWU7XG5cblx0ICAgICAgICAgIHNldElucHV0KCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfTtcblxuXHQgIC8vIHVwZGF0ZXMgdGhlIGRvYyBhbmQgYGlucHV0VHlwZXNgIGFycmF5IHdpdGggbmV3IGlucHV0XG5cdCAgdmFyIHNldElucHV0ID0gZnVuY3Rpb24gc2V0SW5wdXQoKSB7XG5cdCAgICBkb2Muc2V0QXR0cmlidXRlKCdkYXRhLXdoYXRpbnB1dCcsIGN1cnJlbnRJbnB1dCk7XG5cdCAgICBkb2Muc2V0QXR0cmlidXRlKCdkYXRhLXdoYXRpbnRlbnQnLCBjdXJyZW50SW5wdXQpO1xuXG5cdCAgICBpZiAoaW5wdXRUeXBlcy5pbmRleE9mKGN1cnJlbnRJbnB1dCkgPT09IC0xKSB7XG5cdCAgICAgIGlucHV0VHlwZXMucHVzaChjdXJyZW50SW5wdXQpO1xuXHQgICAgICBkb2MuY2xhc3NOYW1lICs9ICcgd2hhdGlucHV0LXR5cGVzLScgKyBjdXJyZW50SW5wdXQ7XG5cdCAgICB9XG5cblx0ICAgIGZpcmVGdW5jdGlvbnMoJ2lucHV0Jyk7XG5cdCAgfTtcblxuXHQgIC8vIHVwZGF0ZXMgaW5wdXQgaW50ZW50IGZvciBgbW91c2Vtb3ZlYCBhbmQgYHBvaW50ZXJtb3ZlYFxuXHQgIHZhciBzZXRJbnRlbnQgPSBmdW5jdGlvbiBzZXRJbnRlbnQoZXZlbnQpIHtcblx0ICAgIC8vIHRlc3QgdG8gc2VlIGlmIGBtb3VzZW1vdmVgIGhhcHBlbmVkIHJlbGF0aXZlIHRvIHRoZSBzY3JlZW5cblx0ICAgIC8vIHRvIGRldGVjdCBzY3JvbGxpbmcgdmVyc3VzIG1vdXNlbW92ZVxuXHQgICAgaWYgKG1vdXNlUG9zWyd4J10gIT09IGV2ZW50LnNjcmVlblggfHwgbW91c2VQb3NbJ3knXSAhPT0gZXZlbnQuc2NyZWVuWSkge1xuXHQgICAgICBpc1Njcm9sbGluZyA9IGZhbHNlO1xuXG5cdCAgICAgIG1vdXNlUG9zWyd4J10gPSBldmVudC5zY3JlZW5YO1xuXHQgICAgICBtb3VzZVBvc1sneSddID0gZXZlbnQuc2NyZWVuWTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGlzU2Nyb2xsaW5nID0gdHJ1ZTtcblx0ICAgIH1cblxuXHQgICAgLy8gb25seSBleGVjdXRlIGlmIHRoZSB0b3VjaCBidWZmZXIgdGltZXIgaXNuJ3QgcnVubmluZ1xuXHQgICAgLy8gb3Igc2Nyb2xsaW5nIGlzbid0IGhhcHBlbmluZ1xuXHQgICAgaWYgKCFpc0J1ZmZlcmluZyAmJiAhaXNTY3JvbGxpbmcpIHtcblx0ICAgICAgdmFyIHZhbHVlID0gaW5wdXRNYXBbZXZlbnQudHlwZV07XG5cdCAgICAgIGlmICh2YWx1ZSA9PT0gJ3BvaW50ZXInKSB2YWx1ZSA9IHBvaW50ZXJUeXBlKGV2ZW50KTtcblxuXHQgICAgICBpZiAoY3VycmVudEludGVudCAhPT0gdmFsdWUpIHtcblx0ICAgICAgICBjdXJyZW50SW50ZW50ID0gdmFsdWU7XG5cblx0ICAgICAgICBkb2Muc2V0QXR0cmlidXRlKCdkYXRhLXdoYXRpbnRlbnQnLCBjdXJyZW50SW50ZW50KTtcblxuXHQgICAgICAgIGZpcmVGdW5jdGlvbnMoJ2ludGVudCcpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfTtcblxuXHQgIC8vIGJ1ZmZlcnMgdG91Y2ggZXZlbnRzIGJlY2F1c2UgdGhleSBmcmVxdWVudGx5IGFsc28gZmlyZSBtb3VzZSBldmVudHNcblx0ICB2YXIgdG91Y2hCdWZmZXIgPSBmdW5jdGlvbiB0b3VjaEJ1ZmZlcihldmVudCkge1xuXHQgICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuXHQgICAgICBpc0J1ZmZlcmluZyA9IGZhbHNlO1xuXG5cdCAgICAgIC8vIHNldCB0aGUgY3VycmVudCBpbnB1dFxuXHQgICAgICB1cGRhdGVJbnB1dChldmVudCk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBpc0J1ZmZlcmluZyA9IHRydWU7XG5cdCAgICB9XG5cdCAgfTtcblxuXHQgIHZhciBmaXJlRnVuY3Rpb25zID0gZnVuY3Rpb24gZmlyZUZ1bmN0aW9ucyh0eXBlKSB7XG5cdCAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZnVuY3Rpb25MaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgIGlmIChmdW5jdGlvbkxpc3RbaV0udHlwZSA9PT0gdHlwZSkge1xuXHQgICAgICAgIGZ1bmN0aW9uTGlzdFtpXS5mbi5jYWxsKHVuZGVmaW5lZCwgY3VycmVudEludGVudCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9O1xuXG5cdCAgLypcblx0ICAgKiB1dGlsaXRpZXNcblx0ICAgKi9cblxuXHQgIHZhciBwb2ludGVyVHlwZSA9IGZ1bmN0aW9uIHBvaW50ZXJUeXBlKGV2ZW50KSB7XG5cdCAgICBpZiAodHlwZW9mIGV2ZW50LnBvaW50ZXJUeXBlID09PSAnbnVtYmVyJykge1xuXHQgICAgICByZXR1cm4gcG9pbnRlck1hcFtldmVudC5wb2ludGVyVHlwZV07XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAvLyB0cmVhdCBwZW4gbGlrZSB0b3VjaFxuXHQgICAgICByZXR1cm4gZXZlbnQucG9pbnRlclR5cGUgPT09ICdwZW4nID8gJ3RvdWNoJyA6IGV2ZW50LnBvaW50ZXJUeXBlO1xuXHQgICAgfVxuXHQgIH07XG5cblx0ICAvLyBkZXRlY3QgdmVyc2lvbiBvZiBtb3VzZSB3aGVlbCBldmVudCB0byB1c2Vcblx0ICAvLyB2aWEgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3doZWVsXG5cdCAgdmFyIGRldGVjdFdoZWVsID0gZnVuY3Rpb24gZGV0ZWN0V2hlZWwoKSB7XG5cdCAgICB2YXIgd2hlZWxUeXBlID0gdm9pZCAwO1xuXG5cdCAgICAvLyBNb2Rlcm4gYnJvd3NlcnMgc3VwcG9ydCBcIndoZWVsXCJcblx0ICAgIGlmICgnb253aGVlbCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpIHtcblx0ICAgICAgd2hlZWxUeXBlID0gJ3doZWVsJztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIFdlYmtpdCBhbmQgSUUgc3VwcG9ydCBhdCBsZWFzdCBcIm1vdXNld2hlZWxcIlxuXHQgICAgICAvLyBvciBhc3N1bWUgdGhhdCByZW1haW5pbmcgYnJvd3NlcnMgYXJlIG9sZGVyIEZpcmVmb3hcblx0ICAgICAgd2hlZWxUeXBlID0gZG9jdW1lbnQub25tb3VzZXdoZWVsICE9PSB1bmRlZmluZWQgPyAnbW91c2V3aGVlbCcgOiAnRE9NTW91c2VTY3JvbGwnO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gd2hlZWxUeXBlO1xuXHQgIH07XG5cblx0ICB2YXIgb2JqUG9zID0gZnVuY3Rpb24gb2JqUG9zKG1hdGNoKSB7XG5cdCAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZnVuY3Rpb25MaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgIGlmIChmdW5jdGlvbkxpc3RbaV0uZm4gPT09IG1hdGNoKSB7XG5cdCAgICAgICAgcmV0dXJuIGk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9O1xuXG5cdCAgLypcblx0ICAgKiBpbml0XG5cdCAgICovXG5cblx0ICAvLyBkb24ndCBzdGFydCBzY3JpcHQgdW5sZXNzIGJyb3dzZXIgY3V0cyB0aGUgbXVzdGFyZFxuXHQgIC8vIChhbHNvIHBhc3NlcyBpZiBwb2x5ZmlsbHMgYXJlIHVzZWQpXG5cdCAgaWYgKCdhZGRFdmVudExpc3RlbmVyJyBpbiB3aW5kb3cgJiYgQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcblx0ICAgIHNldFVwKCk7XG5cdCAgfVxuXG5cdCAgLypcblx0ICAgKiBhcGlcblx0ICAgKi9cblxuXHQgIHJldHVybiB7XG5cdCAgICAvLyByZXR1cm5zIHN0cmluZzogdGhlIGN1cnJlbnQgaW5wdXQgdHlwZVxuXHQgICAgLy8gb3B0OiAnbG9vc2UnfCdzdHJpY3QnXG5cdCAgICAvLyAnc3RyaWN0JyAoZGVmYXVsdCk6IHJldHVybnMgdGhlIHNhbWUgdmFsdWUgYXMgdGhlIGBkYXRhLXdoYXRpbnB1dGAgYXR0cmlidXRlXG5cdCAgICAvLyAnbG9vc2UnOiBpbmNsdWRlcyBgZGF0YS13aGF0aW50ZW50YCB2YWx1ZSBpZiBpdCdzIG1vcmUgY3VycmVudCB0aGFuIGBkYXRhLXdoYXRpbnB1dGBcblx0ICAgIGFzazogZnVuY3Rpb24gYXNrKG9wdCkge1xuXHQgICAgICByZXR1cm4gb3B0ID09PSAnbG9vc2UnID8gY3VycmVudEludGVudCA6IGN1cnJlbnRJbnB1dDtcblx0ICAgIH0sXG5cblx0ICAgIC8vIHJldHVybnMgYXJyYXk6IGFsbCB0aGUgZGV0ZWN0ZWQgaW5wdXQgdHlwZXNcblx0ICAgIHR5cGVzOiBmdW5jdGlvbiB0eXBlcygpIHtcblx0ICAgICAgcmV0dXJuIGlucHV0VHlwZXM7XG5cdCAgICB9LFxuXG5cdCAgICAvLyBvdmVyd3JpdGVzIGlnbm9yZWQga2V5cyB3aXRoIHByb3ZpZGVkIGFycmF5XG5cdCAgICBpZ25vcmVLZXlzOiBmdW5jdGlvbiBpZ25vcmVLZXlzKGFycikge1xuXHQgICAgICBpZ25vcmVNYXAgPSBhcnI7XG5cdCAgICB9LFxuXG5cdCAgICAvLyBhdHRhY2ggZnVuY3Rpb25zIHRvIGlucHV0IGFuZCBpbnRlbnQgXCJldmVudHNcIlxuXHQgICAgLy8gZnVuY3Q6IGZ1bmN0aW9uIHRvIGZpcmUgb24gY2hhbmdlXG5cdCAgICAvLyBldmVudFR5cGU6ICdpbnB1dCd8J2ludGVudCdcblx0ICAgIHJlZ2lzdGVyT25DaGFuZ2U6IGZ1bmN0aW9uIHJlZ2lzdGVyT25DaGFuZ2UoZm4sIGV2ZW50VHlwZSkge1xuXHQgICAgICBmdW5jdGlvbkxpc3QucHVzaCh7XG5cdCAgICAgICAgZm46IGZuLFxuXHQgICAgICAgIHR5cGU6IGV2ZW50VHlwZSB8fCAnaW5wdXQnXG5cdCAgICAgIH0pO1xuXHQgICAgfSxcblxuXHQgICAgdW5SZWdpc3Rlck9uQ2hhbmdlOiBmdW5jdGlvbiB1blJlZ2lzdGVyT25DaGFuZ2UoZm4pIHtcblx0ICAgICAgdmFyIHBvc2l0aW9uID0gb2JqUG9zKGZuKTtcblxuXHQgICAgICBpZiAocG9zaXRpb24pIHtcblx0ICAgICAgICBmdW5jdGlvbkxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH07XG5cdH0oKTtcblxuLyoqKi8gfVxuLyoqKioqKi8gXSlcbn0pO1xuOyIsIm1vZHVsZS5leHBvcnRzID0galF1ZXJ5OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5pbXBvcnQgd2hhdElucHV0IGZyb20gJ3doYXQtaW5wdXQnO1xyXG5cclxud2luZG93LiQgPSAkO1xyXG5cclxuLy8gbGliXHJcbmltcG9ydCAnLi9saWIvc2xpY2subWluJztcclxuXHJcblxyXG4vLyBCb290c3RyYXAgNVxyXG5pbXBvcnQgJy4vYm9vdHN0cmFwL2Jvb3RzdHJhcC5idW5kbGUubWluJztcclxuLy8gY29tcG9uZW50c1xyXG5pbXBvcnQgJy4vY29tcG9uZW50cy9zZWxlY3QyLm1pbic7XHJcbmltcG9ydCBcIi4vY29tcG9uZW50cy9tYWluXCI7XHJcbmltcG9ydCBcIi4vY29tcG9uZW50cy9jdXN0b21cIjtcclxuaW1wb3J0IFwiLi9jb21wb25lbnRzL3BvZGNhc3RNZWRpYVwiO1xyXG5pbXBvcnQgXCIuL2NvbXBvbmVudHMvY2hhdFwiO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJTZWxlY3RvckVuZ2luZSIsImZpbmQiLCJzZWxlY3RvciIsImVsZW1lbnQiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImNvbmNhdCIsIkVsZW1lbnQiLCJwcm90b3R5cGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2FsbCIsImZpbmRPbmUiLCJxdWVyeVNlbGVjdG9yIiwiY2hpbGRyZW4iLCJmaWx0ZXIiLCJjaGlsZCIsIm1hdGNoZXMiLCJwYXJlbnRzIiwiYW5jZXN0b3IiLCJwYXJlbnROb2RlIiwibm9kZVR5cGUiLCJOb2RlIiwiRUxFTUVOVF9OT0RFIiwicHVzaCIsInByZXYiLCJwcmV2aW91cyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJuZXh0IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwib2JqIiwidG9TdHJpbmciLCJtYXRjaCIsInRvTG93ZXJDYXNlIiwiZ2V0VUlEIiwicHJlZml4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsImhyZWZBdHRyIiwiaW5jbHVkZXMiLCJzdGFydHNXaXRoIiwic3BsaXQiLCJ0cmltIiwiZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCIsImdldEVsZW1lbnRGcm9tU2VsZWN0b3IiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJ3aW5kb3ciLCJnZXRDb21wdXRlZFN0eWxlIiwiZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24iLCJOdW1iZXIiLCJwYXJzZUZsb2F0IiwiZmxvYXRUcmFuc2l0aW9uRGVsYXkiLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsImlzRWxlbWVudCIsImpxdWVyeSIsImdldEVsZW1lbnQiLCJsZW5ndGgiLCJ0eXBlQ2hlY2tDb25maWciLCJjb21wb25lbnROYW1lIiwiY29uZmlnIiwiY29uZmlnVHlwZXMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsInByb3BlcnR5IiwiZXhwZWN0ZWRUeXBlcyIsInZhbHVlIiwidmFsdWVUeXBlIiwiUmVnRXhwIiwidGVzdCIsIlR5cGVFcnJvciIsInRvVXBwZXJDYXNlIiwiaXNWaXNpYmxlIiwiZ2V0Q2xpZW50UmVjdHMiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiaXNEaXNhYmxlZCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiZGlzYWJsZWQiLCJoYXNBdHRyaWJ1dGUiLCJmaW5kU2hhZG93Um9vdCIsImF0dGFjaFNoYWRvdyIsImdldFJvb3ROb2RlIiwicm9vdCIsIlNoYWRvd1Jvb3QiLCJub29wIiwicmVmbG93Iiwib2Zmc2V0SGVpZ2h0IiwiZ2V0alF1ZXJ5IiwialF1ZXJ5IiwiYm9keSIsIkRPTUNvbnRlbnRMb2FkZWRDYWxsYmFja3MiLCJjYWxsYmFjayIsInJlYWR5U3RhdGUiLCJhZGRFdmVudExpc3RlbmVyIiwiaXNSVEwiLCJkaXIiLCJkZWZpbmVKUXVlcnlQbHVnaW4iLCJwbHVnaW4iLCIkIiwibmFtZSIsIk5BTUUiLCJKUVVFUllfTk9fQ09ORkxJQ1QiLCJmbiIsImpRdWVyeUludGVyZmFjZSIsIkNvbnN0cnVjdG9yIiwibm9Db25mbGljdCIsImV4ZWN1dGUiLCJleGVjdXRlQWZ0ZXJUcmFuc2l0aW9uIiwidHJhbnNpdGlvbkVsZW1lbnQiLCJ3YWl0Rm9yVHJhbnNpdGlvbiIsImVtdWxhdGVkRHVyYXRpb24iLCJjYWxsZWQiLCJoYW5kbGVyIiwidGFyZ2V0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldFRpbWVvdXQiLCJnZXROZXh0QWN0aXZlRWxlbWVudCIsImxpc3QiLCJhY3RpdmVFbGVtZW50Iiwic2hvdWxkR2V0TmV4dCIsImlzQ3ljbGVBbGxvd2VkIiwiaW5kZXgiLCJpbmRleE9mIiwibGlzdExlbmd0aCIsIm1heCIsIm1pbiIsIm5hbWVzcGFjZVJlZ2V4Iiwic3RyaXBOYW1lUmVnZXgiLCJzdHJpcFVpZFJlZ2V4IiwiZXZlbnRSZWdpc3RyeSIsInVpZEV2ZW50IiwiY3VzdG9tRXZlbnRzIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJjdXN0b21FdmVudHNSZWdleCIsIm5hdGl2ZUV2ZW50cyIsIlNldCIsImdldFVpZEV2ZW50IiwidWlkIiwiZ2V0RXZlbnQiLCJldmVudCIsImRlbGVnYXRlVGFyZ2V0Iiwib25lT2ZmIiwiRXZlbnRIYW5kbGVyIiwib2ZmIiwidHlwZSIsImFwcGx5IiwiZG9tRWxlbWVudHMiLCJ0aGlzIiwiaSIsImZpbmRIYW5kbGVyIiwiZXZlbnRzIiwiZGVsZWdhdGlvblNlbGVjdG9yIiwidWlkRXZlbnRMaXN0IiwibGVuIiwib3JpZ2luYWxIYW5kbGVyIiwibm9ybWFsaXplUGFyYW1zIiwib3JpZ2luYWxUeXBlRXZlbnQiLCJkZWxlZ2F0aW9uRm4iLCJkZWxlZ2F0aW9uIiwidHlwZUV2ZW50IiwiZ2V0VHlwZUV2ZW50IiwiaGFzIiwiYWRkSGFuZGxlciIsIndyYXBGbiIsInJlbGF0ZWRUYXJnZXQiLCJoYW5kbGVycyIsInByZXZpb3VzRm4iLCJyZXBsYWNlIiwiYm9vdHN0cmFwRGVsZWdhdGlvbkhhbmRsZXIiLCJib290c3RyYXBIYW5kbGVyIiwicmVtb3ZlSGFuZGxlciIsIkJvb2xlYW4iLCJuYW1lc3BhY2UiLCJzdG9yZUVsZW1lbnRFdmVudCIsImhhbmRsZXJLZXkiLCJvbiIsIm9uZSIsImluTmFtZXNwYWNlIiwiaXNOYW1lc3BhY2UiLCJlbGVtZW50RXZlbnQiLCJyZW1vdmVOYW1lc3BhY2VkSGFuZGxlcnMiLCJzbGljZSIsImtleUhhbmRsZXJzIiwidHJpZ2dlciIsImFyZ3MiLCJpc05hdGl2ZSIsImpRdWVyeUV2ZW50IiwiYnViYmxlcyIsIm5hdGl2ZURpc3BhdGNoIiwiZGVmYXVsdFByZXZlbnRlZCIsImV2dCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsIkN1c3RvbUV2ZW50IiwiY2FuY2VsYWJsZSIsImtleSIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwicHJldmVudERlZmF1bHQiLCJlbGVtZW50TWFwIiwiTWFwIiwic2V0IiwiaW5zdGFuY2UiLCJpbnN0YW5jZU1hcCIsInNpemUiLCJjb25zb2xlIiwiZXJyb3IiLCJBcnJheSIsImZyb20iLCJyZW1vdmUiLCJkZWxldGUiLCJCYXNlQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJfZWxlbWVudCIsIkRhdGEiLCJEQVRBX0tFWSIsImRpc3Bvc2UiLCJFVkVOVF9LRVkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwicHJvcGVydHlOYW1lIiwiX3F1ZXVlQ2FsbGJhY2siLCJpc0FuaW1hdGVkIiwiW29iamVjdCBPYmplY3RdIiwiZ2V0SW5zdGFuY2UiLCJWRVJTSU9OIiwiRXJyb3IiLCJBbGVydCIsImNsb3NlIiwicm9vdEVsZW1lbnQiLCJfZ2V0Um9vdEVsZW1lbnQiLCJjdXN0b21FdmVudCIsIl90cmlnZ2VyQ2xvc2VFdmVudCIsIl9yZW1vdmVFbGVtZW50IiwiY2xvc2VzdCIsIl9kZXN0cm95RWxlbWVudCIsImVhY2giLCJkYXRhIiwiZ2V0T3JDcmVhdGVJbnN0YW5jZSIsImFsZXJ0SW5zdGFuY2UiLCJoYW5kbGVEaXNtaXNzIiwiQnV0dG9uIiwidG9nZ2xlIiwic2V0QXR0cmlidXRlIiwiYnV0dG9uIiwibm9ybWFsaXplRGF0YSIsInZhbCIsIm5vcm1hbGl6ZURhdGFLZXkiLCJjaHIiLCJNYW5pcHVsYXRvciIsInNldERhdGFBdHRyaWJ1dGUiLCJyZW1vdmVEYXRhQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiZ2V0RGF0YUF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwiZGF0YXNldCIsInB1cmVLZXkiLCJjaGFyQXQiLCJnZXREYXRhQXR0cmlidXRlIiwib2Zmc2V0IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvcCIsInNjcm9sbFRvcCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwicG9zaXRpb24iLCJvZmZzZXRUb3AiLCJvZmZzZXRMZWZ0IiwiRGVmYXVsdCIsImludGVydmFsIiwia2V5Ym9hcmQiLCJzbGlkZSIsInBhdXNlIiwid3JhcCIsInRvdWNoIiwiRGVmYXVsdFR5cGUiLCJPUkRFUl9ORVhUIiwiT1JERVJfUFJFViIsIkRJUkVDVElPTl9MRUZUIiwiRElSRUNUSU9OX1JJR0hUIiwiS0VZX1RPX0RJUkVDVElPTiIsIkFycm93TGVmdCIsIkFycm93UmlnaHQiLCJDYXJvdXNlbCIsInN1cGVyIiwiX2l0ZW1zIiwiX2ludGVydmFsIiwiX2FjdGl2ZUVsZW1lbnQiLCJfaXNQYXVzZWQiLCJfaXNTbGlkaW5nIiwidG91Y2hUaW1lb3V0IiwidG91Y2hTdGFydFgiLCJ0b3VjaERlbHRhWCIsIl9jb25maWciLCJfZ2V0Q29uZmlnIiwiX2luZGljYXRvcnNFbGVtZW50IiwiX3RvdWNoU3VwcG9ydGVkIiwibmF2aWdhdG9yIiwibWF4VG91Y2hQb2ludHMiLCJfcG9pbnRlckV2ZW50IiwiUG9pbnRlckV2ZW50IiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwiX3NsaWRlIiwibmV4dFdoZW5WaXNpYmxlIiwiaGlkZGVuIiwiY3ljbGUiLCJjbGVhckludGVydmFsIiwiX3VwZGF0ZUludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJ2aXNpYmlsaXR5U3RhdGUiLCJiaW5kIiwidG8iLCJhY3RpdmVJbmRleCIsIl9nZXRJdGVtSW5kZXgiLCJvcmRlciIsIl9oYW5kbGVTd2lwZSIsImFic0RlbHRheCIsImFicyIsImRpcmVjdGlvbiIsIl9rZXlkb3duIiwiX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMiLCJzdGFydCIsInBvaW50ZXJUeXBlIiwiY2xpZW50WCIsInRvdWNoZXMiLCJtb3ZlIiwiZW5kIiwiY2xlYXJUaW1lb3V0IiwiaXRlbUltZyIsImUiLCJhZGQiLCJ0YWdOYW1lIiwiX2dldEl0ZW1CeU9yZGVyIiwiaXNOZXh0IiwiX3RyaWdnZXJTbGlkZUV2ZW50IiwiZXZlbnREaXJlY3Rpb25OYW1lIiwidGFyZ2V0SW5kZXgiLCJmcm9tSW5kZXgiLCJfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCIsImFjdGl2ZUluZGljYXRvciIsImluZGljYXRvcnMiLCJwYXJzZUludCIsImVsZW1lbnRJbnRlcnZhbCIsImRlZmF1bHRJbnRlcnZhbCIsImRpcmVjdGlvbk9yT3JkZXIiLCJfZGlyZWN0aW9uVG9PcmRlciIsImFjdGl2ZUVsZW1lbnRJbmRleCIsIm5leHRFbGVtZW50IiwibmV4dEVsZW1lbnRJbmRleCIsImlzQ3ljbGluZyIsImRpcmVjdGlvbmFsQ2xhc3NOYW1lIiwib3JkZXJDbGFzc05hbWUiLCJfb3JkZXJUb0RpcmVjdGlvbiIsInRyaWdnZXJTbGlkRXZlbnQiLCJjb21wbGV0ZUNhbGxCYWNrIiwiYWN0aW9uIiwicmlkZSIsImNhcm91c2VsSW50ZXJmYWNlIiwic2xpZGVJbmRleCIsImRhdGFBcGlDbGlja0hhbmRsZXIiLCJjYXJvdXNlbHMiLCJwYXJlbnQiLCJDb2xsYXBzZSIsIl9pc1RyYW5zaXRpb25pbmciLCJfdHJpZ2dlckFycmF5IiwiaWQiLCJ0b2dnbGVMaXN0IiwiZWxlbSIsImZpbHRlckVsZW1lbnQiLCJmb3VuZEVsZW0iLCJfc2VsZWN0b3IiLCJfcGFyZW50IiwiX2dldFBhcmVudCIsIl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJoaWRlIiwic2hvdyIsImFjdGl2ZXMiLCJhY3RpdmVzRGF0YSIsImNvbnRhaW5lciIsInRlbXBBY3RpdmVEYXRhIiwiZWxlbUFjdGl2ZSIsImNvbGxhcHNlSW50ZXJmYWNlIiwiZGltZW5zaW9uIiwiX2dldERpbWVuc2lvbiIsInN0eWxlIiwic2V0VHJhbnNpdGlvbmluZyIsInNjcm9sbFNpemUiLCJ0cmlnZ2VyQXJyYXlMZW5ndGgiLCJpc1RyYW5zaXRpb25pbmciLCJzZWxlY3RlZCIsInRyaWdnZXJBcnJheSIsImlzT3BlbiIsInRyaWdnZXJEYXRhIiwiYm90dG9tIiwicmlnaHQiLCJiYXNlUGxhY2VtZW50cyIsInZhcmlhdGlvblBsYWNlbWVudHMiLCJyZWR1Y2UiLCJhY2MiLCJwbGFjZW1lbnQiLCJwbGFjZW1lbnRzIiwibW9kaWZpZXJQaGFzZXMiLCJnZXROb2RlTmFtZSIsIm5vZGVOYW1lIiwiZ2V0V2luZG93Iiwibm9kZSIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImlzSFRNTEVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImlzU2hhZG93Um9vdCIsIl9yZWYiLCJzdGF0ZSIsImVsZW1lbnRzIiwic3R5bGVzIiwiYXNzaWduIiwiX3JlZjIiLCJpbml0aWFsU3R5bGVzIiwicG9wcGVyIiwib3B0aW9ucyIsInN0cmF0ZWd5IiwibWFyZ2luIiwiYXJyb3ciLCJyZWZlcmVuY2UiLCJoYXNPd25Qcm9wZXJ0eSIsImF0dHJpYnV0ZSIsImVuYWJsZWQiLCJwaGFzZSIsImVmZmVjdCIsInJlcXVpcmVzIiwiZ2V0QmFzZVBsYWNlbWVudCIsIndpZHRoIiwiaGVpZ2h0IiwieCIsInkiLCJnZXRMYXlvdXRSZWN0IiwiY2xpZW50UmVjdCIsIm9mZnNldFdpZHRoIiwicm9vdE5vZGUiLCJpc1NhbWVOb2RlIiwiaG9zdCIsImlzVGFibGVFbGVtZW50IiwiZ2V0RG9jdW1lbnRFbGVtZW50IiwiZ2V0UGFyZW50Tm9kZSIsImFzc2lnbmVkU2xvdCIsImdldFRydWVPZmZzZXRQYXJlbnQiLCJvZmZzZXRQYXJlbnQiLCJpc0ZpcmVmb3giLCJ1c2VyQWdlbnQiLCJjdXJyZW50Tm9kZSIsImNzcyIsInRyYW5zZm9ybSIsInBlcnNwZWN0aXZlIiwiY29udGFpbiIsIndpbGxDaGFuZ2UiLCJnZXRPZmZzZXRQYXJlbnQiLCJnZXRDb250YWluaW5nQmxvY2siLCJnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQiLCJyb3VuZCIsIndpdGhpbiIsIm1hdGhNYXgiLCJtYXRoTWluIiwibWVyZ2VQYWRkaW5nT2JqZWN0IiwicGFkZGluZ09iamVjdCIsImV4cGFuZFRvSGFzaE1hcCIsImhhc2hNYXAiLCJwYWRkaW5nIiwicmVjdHMiLCJfc3RhdGUkbW9kaWZpZXJzRGF0YSQiLCJhcnJvd0VsZW1lbnQiLCJwb3BwZXJPZmZzZXRzIiwibW9kaWZpZXJzRGF0YSIsImJhc2VQbGFjZW1lbnQiLCJheGlzIiwidG9QYWRkaW5nT2JqZWN0IiwiYXJyb3dSZWN0IiwibWluUHJvcCIsIm1heFByb3AiLCJlbmREaWZmIiwic3RhcnREaWZmIiwiYXJyb3dPZmZzZXRQYXJlbnQiLCJjbGllbnRTaXplIiwiY2xpZW50SGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJjZW50ZXJUb1JlZmVyZW5jZSIsImNlbnRlciIsImF4aXNQcm9wIiwiY2VudGVyT2Zmc2V0IiwiX29wdGlvbnMkZWxlbWVudCIsInJlcXVpcmVzSWZFeGlzdHMiLCJ1bnNldFNpZGVzIiwiZHByIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIm1hcFRvU3R5bGVzIiwiX09iamVjdCRhc3NpZ24yIiwicG9wcGVyUmVjdCIsIm9mZnNldHMiLCJncHVBY2NlbGVyYXRpb24iLCJhZGFwdGl2ZSIsInJvdW5kT2Zmc2V0cyIsIl9yZWYzIiwicm91bmRPZmZzZXRzQnlEUFIiLCJfcmVmMyR4IiwiX3JlZjMkeSIsImhhc1giLCJoYXNZIiwic2lkZVgiLCJzaWRlWSIsIndpbiIsImhlaWdodFByb3AiLCJ3aWR0aFByb3AiLCJjb21tb25TdHlsZXMiLCJfT2JqZWN0JGFzc2lnbiIsIl9yZWY0IiwiX29wdGlvbnMkZ3B1QWNjZWxlcmF0IiwiX29wdGlvbnMkYWRhcHRpdmUiLCJfb3B0aW9ucyRyb3VuZE9mZnNldHMiLCJkYXRhLXBvcHBlci1wbGFjZW1lbnQiLCJwYXNzaXZlIiwiX29wdGlvbnMkc2Nyb2xsIiwic2Nyb2xsIiwiX29wdGlvbnMkcmVzaXplIiwicmVzaXplIiwic2Nyb2xsUGFyZW50cyIsInNjcm9sbFBhcmVudCIsInVwZGF0ZSIsImV2ZW50TGlzdGVuZXJzIiwiaGFzaCIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwibWF0Y2hlZCIsImdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IiwiZ2V0V2luZG93U2Nyb2xsIiwicGFnZVhPZmZzZXQiLCJwYWdlWU9mZnNldCIsImdldFdpbmRvd1Njcm9sbEJhclgiLCJpc1Njcm9sbFBhcmVudCIsIl9nZXRDb21wdXRlZFN0eWxlIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJsaXN0U2Nyb2xsUGFyZW50cyIsIl9lbGVtZW50JG93bmVyRG9jdW1lbiIsImdldFNjcm9sbFBhcmVudCIsImlzQm9keSIsInZpc3VhbFZpZXdwb3J0IiwidXBkYXRlZExpc3QiLCJyZWN0VG9DbGllbnRSZWN0IiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsImdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlIiwiY2xpcHBpbmdQYXJlbnQiLCJnZXRWaWV3cG9ydFJlY3QiLCJnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdCIsImdldERvY3VtZW50UmVjdCIsImNsaXBwaW5nUGFyZW50cyIsImNsaXBwZXJFbGVtZW50IiwiYm91bmRhcnkiLCJyb290Qm91bmRhcnkiLCJtYWluQ2xpcHBpbmdQYXJlbnRzIiwiZ2V0Q2xpcHBpbmdQYXJlbnRzIiwiZmlyc3RDbGlwcGluZ1BhcmVudCIsImNsaXBwaW5nUmVjdCIsImFjY1JlY3QiLCJodG1sIiwid2luU2Nyb2xsIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJnZXRWYXJpYXRpb24iLCJjb21wdXRlT2Zmc2V0cyIsInZhcmlhdGlvbiIsImNvbW1vblgiLCJjb21tb25ZIiwibWFpbkF4aXMiLCJkZXRlY3RPdmVyZmxvdyIsIl9vcHRpb25zIiwiX29wdGlvbnMkcGxhY2VtZW50IiwiX29wdGlvbnMkYm91bmRhcnkiLCJfb3B0aW9ucyRyb290Qm91bmRhcnkiLCJfb3B0aW9ucyRlbGVtZW50Q29udGUiLCJlbGVtZW50Q29udGV4dCIsIl9vcHRpb25zJGFsdEJvdW5kYXJ5IiwiYWx0Qm91bmRhcnkiLCJfb3B0aW9ucyRwYWRkaW5nIiwiYWx0Q29udGV4dCIsInJlZmVyZW5jZUVsZW1lbnQiLCJjbGlwcGluZ0NsaWVudFJlY3QiLCJnZXRDbGlwcGluZ1JlY3QiLCJjb250ZXh0RWxlbWVudCIsInJlZmVyZW5jZUNsaWVudFJlY3QiLCJwb3BwZXJDbGllbnRSZWN0IiwiZWxlbWVudENsaWVudFJlY3QiLCJvdmVyZmxvd09mZnNldHMiLCJvZmZzZXREYXRhIiwibXVsdGlwbHkiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsImZsaXBWYXJpYXRpb25zIiwiX29wdGlvbnMkYWxsb3dlZEF1dG9QIiwiYWxsb3dlZEF1dG9QbGFjZW1lbnRzIiwiYWxsUGxhY2VtZW50cyIsImFsbG93ZWRQbGFjZW1lbnRzIiwib3ZlcmZsb3dzIiwic29ydCIsImEiLCJiIiwib3Bwb3NpdGVQbGFjZW1lbnQiLCJfc2tpcCIsIl9vcHRpb25zJG1haW5BeGlzIiwiY2hlY2tNYWluQXhpcyIsIl9vcHRpb25zJGFsdEF4aXMiLCJhbHRBeGlzIiwiY2hlY2tBbHRBeGlzIiwic3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIiwiZmFsbGJhY2tQbGFjZW1lbnRzIiwiX29wdGlvbnMkZmxpcFZhcmlhdGlvIiwicHJlZmVycmVkUGxhY2VtZW50IiwiZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMiLCJyZWZlcmVuY2VSZWN0IiwiY2hlY2tzTWFwIiwibWFrZUZhbGxiYWNrQ2hlY2tzIiwiZmlyc3RGaXR0aW5nUGxhY2VtZW50IiwiX2Jhc2VQbGFjZW1lbnQiLCJpc1N0YXJ0VmFyaWF0aW9uIiwiaXNWZXJ0aWNhbCIsIm1haW5WYXJpYXRpb25TaWRlIiwiYWx0VmFyaWF0aW9uU2lkZSIsImNoZWNrcyIsImV2ZXJ5IiwiY2hlY2siLCJfbG9vcCIsIl9pIiwiZml0dGluZ1BsYWNlbWVudCIsInJlc2V0IiwiZ2V0U2lkZU9mZnNldHMiLCJwcmV2ZW50ZWRPZmZzZXRzIiwiaXNBbnlTaWRlRnVsbHlDbGlwcGVkIiwic29tZSIsInNpZGUiLCJwcmV2ZW50T3ZlcmZsb3ciLCJyZWZlcmVuY2VPdmVyZmxvdyIsInBvcHBlckFsdE92ZXJmbG93IiwicmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzIiwicG9wcGVyRXNjYXBlT2Zmc2V0cyIsImlzUmVmZXJlbmNlSGlkZGVuIiwiaGFzUG9wcGVyRXNjYXBlZCIsImRhdGEtcG9wcGVyLXJlZmVyZW5jZS1oaWRkZW4iLCJkYXRhLXBvcHBlci1lc2NhcGVkIiwiaW52ZXJ0RGlzdGFuY2UiLCJza2lkZGluZyIsImRpc3RhbmNlIiwiX29wdGlvbnMkb2Zmc2V0IiwiZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkiLCJfZGF0YSRzdGF0ZSRwbGFjZW1lbnQiLCJvZmZzZXQkMSIsInBvcHBlck9mZnNldHMkMSIsIl9vcHRpb25zJHRldGhlciIsInRldGhlciIsIl9vcHRpb25zJHRldGhlck9mZnNldCIsInRldGhlck9mZnNldCIsImlzQmFzZVBsYWNlbWVudCIsInRldGhlck9mZnNldFZhbHVlIiwibWFpblNpZGUiLCJhbHRTaWRlIiwiYWRkaXRpdmUiLCJtaW5MZW4iLCJtYXhMZW4iLCJhcnJvd1BhZGRpbmdPYmplY3QiLCJhcnJvd1BhZGRpbmdNaW4iLCJhcnJvd1BhZGRpbmdNYXgiLCJhcnJvd0xlbiIsIm1pbk9mZnNldCIsIm1heE9mZnNldCIsImNsaWVudE9mZnNldCIsIm9mZnNldE1vZGlmaWVyVmFsdWUiLCJ0ZXRoZXJNaW4iLCJ0ZXRoZXJNYXgiLCJwcmV2ZW50ZWRPZmZzZXQiLCJfbWFpblNpZGUiLCJfYWx0U2lkZSIsIl9vZmZzZXQiLCJfbWluIiwiX21heCIsIl9wcmV2ZW50ZWRPZmZzZXQiLCJwcmV2ZW50T3ZlcmZsb3ckMSIsImdldENvbXBvc2l0ZVJlY3QiLCJlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCIsImlzRml4ZWQiLCJpc09mZnNldFBhcmVudEFuRWxlbWVudCIsIkRFRkFVTFRfT1BUSU9OUyIsIm1vZGlmaWVycyIsImFyZVZhbGlkRWxlbWVudHMiLCJfbGVuIiwiYXJndW1lbnRzIiwiX2tleSIsInBvcHBlckdlbmVyYXRvciIsImdlbmVyYXRvck9wdGlvbnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyIsIl9nZW5lcmF0b3JPcHRpb25zJGRlZiIsImRlZmF1bHRNb2RpZmllcnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyIiwiZGVmYXVsdE9wdGlvbnMiLCJvcmRlcmVkTW9kaWZpZXJzIiwiZWZmZWN0Q2xlYW51cEZucyIsImlzRGVzdHJveWVkIiwic2V0T3B0aW9ucyIsImNsZWFudXBNb2RpZmllckVmZmVjdHMiLCJvcmRlck1vZGlmaWVycyIsIm0iLCJmb3JjZVVwZGF0ZSIsIl9zdGF0ZSRlbGVtZW50cyIsIm1vZGlmaWVyIiwiX3N0YXRlJG9yZGVyZWRNb2RpZmllIiwiX3N0YXRlJG9yZGVyZWRNb2RpZmllMiIsIlByb21pc2UiLCJyZXNvbHZlIiwiZGVzdHJveSIsInRoZW4iLCJvbkZpcnN0VXBkYXRlIiwiX3JlZjMkb3B0aW9ucyIsImNsZWFudXBGbiIsImNyZWF0ZVBvcHBlciIsInBlbmRpbmciLCJ1bmRlZmluZWQiLCJtZXJnZWQiLCJjdXJyZW50IiwiZXhpc3RpbmciLCJtYXAiLCJ2aXNpdGVkIiwicmVzdWx0IiwiZGVwIiwiZGVwTW9kaWZpZXIiLCJjb21wdXRlU3R5bGVzIiwiYXBwbHlTdHlsZXMiLCJmbGlwIiwiUkVHRVhQX0tFWURPV04iLCJQTEFDRU1FTlRfVE9QIiwiUExBQ0VNRU5UX1RPUEVORCIsIlBMQUNFTUVOVF9CT1RUT00iLCJQTEFDRU1FTlRfQk9UVE9NRU5EIiwiUExBQ0VNRU5UX1JJR0hUIiwiUExBQ0VNRU5UX0xFRlQiLCJkaXNwbGF5IiwicG9wcGVyQ29uZmlnIiwiYXV0b0Nsb3NlIiwiRHJvcGRvd24iLCJfcG9wcGVyIiwiX21lbnUiLCJfZ2V0TWVudUVsZW1lbnQiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwiZ2V0UGFyZW50RnJvbUVsZW1lbnQiLCJQb3BwZXIiLCJfZ2V0UG9wcGVyQ29uZmlnIiwiaXNEaXNwbGF5U3RhdGljIiwiZm9jdXMiLCJfY29tcGxldGVIaWRlIiwiX2dldFBsYWNlbWVudCIsInBhcmVudERyb3Bkb3duIiwiaXNFbmQiLCJfZ2V0T2Zmc2V0IiwicG9wcGVyRGF0YSIsImRlZmF1bHRCc1BvcHBlckNvbmZpZyIsIl9zZWxlY3RNZW51SXRlbSIsIml0ZW1zIiwiZHJvcGRvd25JbnRlcmZhY2UiLCJ0b2dnbGVzIiwiY29udGV4dCIsImNvbXBvc2VkUGF0aCIsImlzTWVudVRhcmdldCIsImNsaWNrRXZlbnQiLCJpc0FjdGl2ZSIsInN0b3BQcm9wYWdhdGlvbiIsImdldFRvZ2dsZUJ1dHRvbiIsImNsZWFyTWVudXMiLCJjbGljayIsImRhdGFBcGlLZXlkb3duSGFuZGxlciIsIlNjcm9sbEJhckhlbHBlciIsImdldFdpZHRoIiwiZG9jdW1lbnRXaWR0aCIsImlubmVyV2lkdGgiLCJfZGlzYWJsZU92ZXJGbG93IiwiX3NldEVsZW1lbnRBdHRyaWJ1dGVzIiwiY2FsY3VsYXRlZFZhbHVlIiwiX3NhdmVJbml0aWFsQXR0cmlidXRlIiwic3R5bGVQcm9wIiwic2Nyb2xsYmFyV2lkdGgiLCJfYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayIsIl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzIiwiYWN0dWFsVmFsdWUiLCJyZW1vdmVQcm9wZXJ0eSIsImNhbGxCYWNrIiwiaXNPdmVyZmxvd2luZyIsImNsaWNrQ2FsbGJhY2siLCJCYWNrZHJvcCIsIl9pc0FwcGVuZGVkIiwiX2FwcGVuZCIsIl9nZXRFbGVtZW50IiwiX2VtdWxhdGVBbmltYXRpb24iLCJiYWNrZHJvcCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJhcHBlbmRDaGlsZCIsIk1vZGFsIiwiX2RpYWxvZyIsIl9iYWNrZHJvcCIsIl9pbml0aWFsaXplQmFja0Ryb3AiLCJfaXNTaG93biIsIl9pZ25vcmVCYWNrZHJvcENsaWNrIiwiX3Njcm9sbEJhciIsIl9pc0FuaW1hdGVkIiwiX2FkanVzdERpYWxvZyIsIl9zZXRFc2NhcGVFdmVudCIsIl9zZXRSZXNpemVFdmVudCIsIl9zaG93QmFja2Ryb3AiLCJfc2hvd0VsZW1lbnQiLCJfaGlkZU1vZGFsIiwiaHRtbEVsZW1lbnQiLCJoYW5kbGVVcGRhdGUiLCJtb2RhbEJvZHkiLCJfZW5mb3JjZUZvY3VzIiwiX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24iLCJfcmVzZXRBZGp1c3RtZW50cyIsImN1cnJlbnRUYXJnZXQiLCJpc01vZGFsT3ZlcmZsb3dpbmciLCJpc0JvZHlPdmVyZmxvd2luZyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0Iiwic2hvd0V2ZW50IiwiT2ZmY2FudmFzIiwidmlzaWJpbGl0eSIsIl9lbmZvcmNlRm9jdXNPbkVsZW1lbnQiLCJibHVyIiwiYWxsUmVhZHlPcGVuIiwiZWwiLCJ1cmlBdHRycyIsIlNBRkVfVVJMX1BBVFRFUk4iLCJEQVRBX1VSTF9QQVRURVJOIiwiYWxsb3dlZEF0dHJpYnV0ZSIsImF0dHIiLCJhbGxvd2VkQXR0cmlidXRlTGlzdCIsImF0dHJOYW1lIiwibm9kZVZhbHVlIiwicmVnRXhwIiwiYXR0clJlZ2V4IiwiKiIsImFyZWEiLCJiciIsImNvbCIsImNvZGUiLCJkaXYiLCJlbSIsImhyIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2IiwiaW1nIiwibGkiLCJvbCIsInAiLCJwcmUiLCJzIiwic21hbGwiLCJzcGFuIiwic3ViIiwic3VwIiwic3Ryb25nIiwidSIsInVsIiwic2FuaXRpemVIdG1sIiwidW5zYWZlSHRtbCIsImFsbG93TGlzdCIsInNhbml0aXplRm4iLCJET01QYXJzZXIiLCJjcmVhdGVkRG9jdW1lbnQiLCJwYXJzZUZyb21TdHJpbmciLCJhbGxvd2xpc3RLZXlzIiwiZWxOYW1lIiwiYXR0cmlidXRlTGlzdCIsImFsbG93ZWRBdHRyaWJ1dGVzIiwiaW5uZXJIVE1MIiwiQlNDTFNfUFJFRklYX1JFR0VYIiwiRElTQUxMT1dFRF9BVFRSSUJVVEVTIiwiYW5pbWF0aW9uIiwidGVtcGxhdGUiLCJ0aXRsZSIsImRlbGF5IiwiY3VzdG9tQ2xhc3MiLCJzYW5pdGl6ZSIsIkF0dGFjaG1lbnRNYXAiLCJBVVRPIiwiVE9QIiwiUklHSFQiLCJCT1RUT00iLCJMRUZUIiwiSElERSIsIkhJRERFTiIsIlNIT1ciLCJTSE9XTiIsIklOU0VSVEVEIiwiQ0xJQ0siLCJGT0NVU0lOIiwiRk9DVVNPVVQiLCJNT1VTRUVOVEVSIiwiTU9VU0VMRUFWRSIsIlRvb2x0aXAiLCJfaXNFbmFibGVkIiwiX3RpbWVvdXQiLCJfaG92ZXJTdGF0ZSIsIl9hY3RpdmVUcmlnZ2VyIiwidGlwIiwiX3NldExpc3RlbmVycyIsImVuYWJsZSIsImRpc2FibGUiLCJ0b2dnbGVFbmFibGVkIiwiX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldCIsIl9pc1dpdGhBY3RpdmVUcmlnZ2VyIiwiX2VudGVyIiwiX2xlYXZlIiwiZ2V0VGlwRWxlbWVudCIsIl9oaWRlTW9kYWxIYW5kbGVyIiwiaXNXaXRoQ29udGVudCIsInNoYWRvd1Jvb3QiLCJpc0luVGhlRG9tIiwidGlwSWQiLCJzZXRDb250ZW50IiwiYXR0YWNobWVudCIsIl9nZXRBdHRhY2htZW50IiwiX2FkZEF0dGFjaG1lbnRDbGFzcyIsInByZXZIb3ZlclN0YXRlIiwiX2NsZWFuVGlwQ2xhc3MiLCJnZXRUaXRsZSIsInNldEVsZW1lbnRDb250ZW50IiwiY29udGVudCIsInRleHRDb250ZW50IiwidXBkYXRlQXR0YWNobWVudCIsImRhdGFLZXkiLCJfZ2V0RGVsZWdhdGVDb25maWciLCJfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlIiwiZXZlbnRJbiIsImV2ZW50T3V0IiwiX2ZpeFRpdGxlIiwib3JpZ2luYWxUaXRsZVR5cGUiLCJkYXRhQXR0cmlidXRlcyIsImRhdGFBdHRyIiwidGFiQ2xhc3MiLCJ0b2tlbiIsInRDbGFzcyIsIlBvcG92ZXIiLCJfZ2V0Q29udGVudCIsIm1ldGhvZCIsIlNjcm9sbFNweSIsIl9zY3JvbGxFbGVtZW50IiwiX29mZnNldHMiLCJfdGFyZ2V0cyIsIl9hY3RpdmVUYXJnZXQiLCJfc2Nyb2xsSGVpZ2h0IiwiX3Byb2Nlc3MiLCJyZWZyZXNoIiwiYXV0b01ldGhvZCIsIm9mZnNldE1ldGhvZCIsIm9mZnNldEJhc2UiLCJfZ2V0U2Nyb2xsVG9wIiwiX2dldFNjcm9sbEhlaWdodCIsInRhcmdldFNlbGVjdG9yIiwidGFyZ2V0QkNSIiwiaXRlbSIsIl9nZXRPZmZzZXRIZWlnaHQiLCJpbm5lckhlaWdodCIsIm1heFNjcm9sbCIsIl9hY3RpdmF0ZSIsIl9jbGVhciIsInF1ZXJpZXMiLCJsaW5rIiwiam9pbiIsImxpc3RHcm91cCIsIm5hdkl0ZW0iLCJzcHkiLCJUYWIiLCJsaXN0RWxlbWVudCIsIml0ZW1TZWxlY3RvciIsImhpZGVFdmVudCIsImNvbXBsZXRlIiwiYWN0aXZlIiwiX3RyYW5zaXRpb25Db21wbGV0ZSIsImRyb3Bkb3duQ2hpbGQiLCJkcm9wZG93bkVsZW1lbnQiLCJkcm9wZG93biIsImF1dG9oaWRlIiwiVG9hc3QiLCJfaGFzTW91c2VJbnRlcmFjdGlvbiIsIl9oYXNLZXlib2FyZEludGVyYWN0aW9uIiwiX2NsZWFyVGltZW91dCIsIl9tYXliZVNjaGVkdWxlSGlkZSIsIl9vbkludGVyYWN0aW9uIiwiaXNJbnRlcmFjdGluZyIsImdldFVybFZhcnMiLCJ2YXJzIiwibG9jYXRpb24iLCJocmVmIiwidXJsX3ZhcnMiLCJjaGF0X2FjdGlvbiIsImNoYXRTZWN0aW9uIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsInJlYWR5IiwiY2hhdCIsIm1lc3NhZ2VUb1NlbmQiLCJtZXNzYWdlUmVzcG9uc2VzIiwiaW5pdCIsImNhY2hlRE9NIiwiYmluZEV2ZW50cyIsIiRjaGF0Rm9ybSIsIiRjaGF0Qm9keSIsIiR0ZXh0YXJlYSIsIiRjaGF0SGlzdG9yeUxpc3QiLCJzdWJtaXRCaW5kQWxsIiwic3VibWl0Rm9ybSIsImhhbmRsZU9wZW5DaGF0Qm9keSIsImlueCIsImZvcm0iLCJmb3JtU3VibWl0SGFuZGxlciIsImtleUNvZGUiLCJzdWJtaXQiLCJjdXJyZW50Rm9ybSIsImN1cnJlbnRNc2ciLCJyZW1vdmVFbXB0eU1zZyIsImFwcGVuZE1lc3NhZ2UiLCJib3RSZXNwb25zZSIsIm1lc3NhZ2UiLCJtc2dIVE1MIiwibXNnVGVtcGxldGVTZW5kZXIiLCJhcHBlbmQiLCJzY3JvbGxUb0JvdHRvbSIsImFwcGVuZE1lc3NhZ2VSZWNpcGllbnQiLCJyZW1vdmVUeXBpbmdNc2ciLCJtc2dUZW1wbGV0ZVJlY2lwaWVudCIsImFwcGVuZFR5cGluZ01zZyIsInR5cGluZ01zZyIsIm1zZ1R5cGluZyIsImFwcGVuZEVtcHR5TXNnIiwibXNnRW1wdHkiLCJyYW5kb21Nc2ciLCJnZXRSYW5kb21JdGVtIiwiYmluZE1lc3NhZ2VUZXh0QXJlYSIsInRhIiwiYXV0b3NpemUiLCJjc3NUZXh0IiwiZ2V0Q3VycmVudFRpbWUiLCJEYXRlIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwiYXJyIiwidGhpc0xpbmsiLCJjdXJyZW50Qm9keSIsInNlYXJjaEZpbHRlciIsInVzZXJMaXN0Iiwicm9vdE5ld01zZyIsInZhbHVlTmFtZXMiLCJyZXNldExpc3QiLCJ1c2VyTGlzdEl0ZW0iLCJmaW5kSW5MaXN0Iiwibm9JdGVtcyIsInRvdGFsTGVuZ3RoIiwiaGlkZGVuSXRlbSIsInVzZXIiLCJ1c2VyTmFtZSIsInRleHQiLCJjb21wYXJlVXNlck5hbWUiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsInJlc2V0TGlzdE5ld01zZyIsImZpbmRJbkxpc3ROZXdNc2ciLCJzZWFyY2hJbnB1dCIsInVzZXJMaXN0Tm9kZSIsImNoaWxkTm9kZXMiLCJfZXZlbnQiLCJ0YXJnZXRWYWx1ZSIsInNlcmFjaFZhbHVlIiwiaW5pdFNlYXJjaE5ld01zZyIsImVxdWFsSGVpZ2h0IiwidGFsbGVzdCIsInRoaXNIZWlnaHQiLCJpc19jaHJvbWUiLCJpc19leHBsb3JlciIsImlzX2ZpcmVmb3giLCJpc19zYWZhcmkiLCJpc19vcGVyYSIsInBhcnRzIiwiZ2V0VXJsIiwiJHVybCIsInVybCIsInByb3RvY29sIiwicGF0aCIsImxhc3RBcnIiLCJsYXN0IiwicG9wIiwicHJlbG9hZGVyR3JvdXAiLCJwYXJlbnRMaSIsImNvbGxhcHNlTWVudSIsImNvbGxhcHNlTGluayIsImxvY2F0aW9uVXJsQXJyIiwibGlua0hyZWYiLCJjdXJyZW50SHJlZiIsIm1haW5Db2ludGFpbmVyIiwiaGVhZGVyTmF2IiwiaGVhZGVyTmF2SGVpZ2h0IiwibWVudSIsIm1hcmdpbl9sZWZ0IiwiaG9tZV9iYW5uZXJfY29udGVudCIsImRhdGVyYW5nZXBpY2tlciIsImxvY2FsZSIsImZvcm1hdCIsImRhdGVwaWNrZXIiLCJkYXRlRm9ybWF0Iiwic2VsZWN0aXplIiwib25Jbml0aWFsaXplIiwidG9vbHRpcCIsImN1cnJlbnRJdGVtIiwiaGFzQ2xhc3MiLCJuZXdQYXRoIiwib3JpZ2luIiwidG9nZ2xlQ2xhc3MiLCJldmVudF9tZW51IiwibWVudV9pdGVtIiwiZXZlbnRfbWVudV9idG4iLCJjdXJyZW50X2xpIiwiY3VycmVudFRhYiIsImN1cnJlbnRUYWIyIiwic2VhcmNoRmllbGQiLCJyZW5kZXIiLCJvcHRpb24iLCJlc2NhcGUiLCJpbWFnZSIsInNlbGVjdDIiLCJwbGFjZWhvbGRlciIsInNsaWNrIiwiZG90cyIsImluZmluaXRlIiwiYXV0b3BsYXkiLCJwcmV2QXJyb3ciLCJuZXh0QXJyb3ciLCJhcHBlbmREb3RzIiwic3BlZWQiLCJzbGlkZXNUb1Nob3ciLCJzbGlkZXNUb1Njcm9sbCIsImN1c3RvbVBhZ2luZyIsInNsaWRlciIsImN1cnJlbnRfaSIsIml0ZW1fbGkiLCJsb2ciLCJyZXNwb25zaXZlIiwiYnJlYWtwb2ludCIsInNldHRpbmdzIiwibWFpblNjcmlwdCIsIm9mZmNhbnZhc1RvZ2dsZSIsIm9mZmNhbnZhc1RvZ2dsZUNsb3NlIiwib2ZmY2FudmFzQ29sbGFwc2UiLCJzZWFyY2hiYXJUb2dnbGUiLCJzZWFyY2hiYXJDb2xsYXBzZSIsInBvZGNhc3RNZWRpYSIsImRlZmF1bHRTcGVlZCIsImxvb3AiLCJmZWF0dXJlcyIsInBvZGNhc3RzUGxheWVyIiwicG9kY2FzdEF1ZGlvIiwicGxheWVyIiwiTWVkaWFFbGVtZW50UGxheWVyIiwicG9kY2FzdHNQbGF5ZXJQYWdlIiwibiIsImRlZmluZSIsImFtZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0IiwicmVxdWlyZSIsInIiLCJoIiwibyIsImYiLCJnIiwidiIsIl8iLCJ3IiwibCIsImMiLCJkIiwibm9kZUlkQ29tcGF0Iiwic3BsaWNlIiwiQSIsIkQiLCJzdWJzdHJpbmciLCJTIiwicmVxdWlyZWpzIiwibm9ybWFsaXplIiwicHIiLCJ1cmkiLCJsb2FkIiwiZGVwcyIsIl9kZWZpbmVkIiwiRXh0ZW5kIiwiX19zdXBlcl9fIiwiRGVjb3JhdGUiLCJ1bnNoaWZ0IiwiZGlzcGxheU5hbWUiLCJsaXN0ZW5lcnMiLCJfdHlwZSIsImludm9rZSIsIk9ic2VydmFibGUiLCJnZW5lcmF0ZUNoYXJzIiwiX2NvbnZlcnREYXRhIiwiaGFzU2Nyb2xsIiwiZXNjYXBlTWFya3VwIiwiU3RyaW5nIiwiYXBwZW5kTWFueSIsInN1YnN0ciIsIl9fY2FjaGUiLCJHZXRVbmlxdWVFbGVtZW50SWQiLCJTdG9yZURhdGEiLCJHZXREYXRhIiwiUmVtb3ZlRGF0YSIsIiRlbGVtZW50IiwiJHJlc3VsdHMiLCJjbGVhciIsImVtcHR5IiwiZGlzcGxheU1lc3NhZ2UiLCJoaWRlTG9hZGluZyIsImhpZGVNZXNzYWdlcyIsInJlc3VsdHMiLCJoaWdobGlnaHRGaXJzdEl0ZW0iLCJmaXJzdCIsImVuc3VyZUhpZ2hsaWdodFZpc2libGUiLCJzZXRDbGFzc2VzIiwiaW5BcnJheSIsInNob3dMb2FkaW5nIiwibG9hZGluZyIsInByZXBlbmQiLCJyb2xlIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJfcmVzdWx0SWQiLCJjbGFzcyIsInJlbW92ZUF0dHIiLCJnZXRIaWdobGlnaHRlZFJlc3VsdHMiLCJlcSIsIm91dGVySGVpZ2h0IiwibW91c2V3aGVlbCIsImRlbHRhWSIsIm9yaWdpbmFsRXZlbnQiLCJCQUNLU1BBQ0UiLCJUQUIiLCJFTlRFUiIsIlNISUZUIiwiQ1RSTCIsIkFMVCIsIkVTQyIsIlNQQUNFIiwiUEFHRV9VUCIsIlBBR0VfRE9XTiIsIkVORCIsIkhPTUUiLCJVUCIsIkRPV04iLCJERUxFVEUiLCJfdGFiaW5kZXgiLCIkc2VsZWN0aW9uIiwiX2hhbmRsZUJsdXIiLCJ3aGljaCIsIl9hdHRhY2hDbG9zZUhhbmRsZXIiLCJfZGV0YWNoQ2xvc2VIYW5kbGVyIiwiaXNFbmFibGVkIiwic2VsZWN0aW9uQ29udGFpbmVyIiwibm9ybWFsaXplUGxhY2Vob2xkZXIiLCJjcmVhdGVQbGFjZWhvbGRlciIsIl9oYW5kbGVDbGVhciIsIl9oYW5kbGVLZXlib2FyZENsZWFyIiwicHJldmVudGVkIiwiJHNlYXJjaENvbnRhaW5lciIsIiRzZWFyY2giLCJfdHJhbnNmZXJUYWJJbmRleCIsInByb3AiLCJfa2V5VXBQcmV2ZW50ZWQiLCJzZWFyY2hSZW1vdmVDaG9pY2UiLCJkb2N1bWVudE1vZGUiLCJoYW5kbGVTZWFyY2giLCJyZXNpemVTZWFyY2giLCJ0ZXJtIiwicGFyYW1zIiwiZGljdCIsImFsbCIsImV4dGVuZCIsIl9jYWNoZSIsImxvYWRQYXRoIiwicXVlcnkiLCJnZW5lcmF0ZVJlc3VsdElkIiwic2VsZWN0IiwiaXMiLCJ1bnNlbGVjdCIsImFkZE9wdGlvbnMiLCJsYWJlbCIsImlubmVyVGV4dCIsIl9ub3JtYWxpemVJdGVtIiwiX2RhdGFUb0NvbnZlcnQiLCJjb252ZXJ0VG9PcHRpb25zIiwicmVwbGFjZVdpdGgiLCJhamF4T3B0aW9ucyIsIl9hcHBseURlZmF1bHRzIiwicHJvY2Vzc1Jlc3VsdHMiLCJxIiwidHJhbnNwb3J0IiwiYWpheCIsImZhaWwiLCJfcmVxdWVzdCIsImlzRnVuY3Rpb24iLCJhYm9ydCIsImlzQXJyYXkiLCJzdGF0dXMiLCJfcXVlcnlUaW1lb3V0IiwiY3JlYXRlVGFnIiwiaW5zZXJ0VGFnIiwiX3JlbW92ZU9sZFRhZ3MiLCJwYWdlIiwidG9rZW5pemVyIiwic2VsZWN0aW9uIiwibWluaW11bUlucHV0TGVuZ3RoIiwibWluaW11bSIsImlucHV0IiwibWF4aW11bUlucHV0TGVuZ3RoIiwibWF4aW11bSIsIm1heGltdW1TZWxlY3Rpb25MZW5ndGgiLCJfY2hlY2tJZk1heGltdW1TZWxlY3RlZCIsIiRkcm9wZG93biIsInNob3dTZWFyY2giLCJyZW1vdmVQbGFjZWhvbGRlciIsImxhc3RQYXJhbXMiLCIkbG9hZGluZ01vcmUiLCJjcmVhdGVMb2FkaW5nTW9yZSIsInNob3dMb2FkaW5nTW9yZSIsImxvYWRNb3JlSWZOZWVkZWQiLCJsb2FkTW9yZSIsInBhZ2luYXRpb24iLCJtb3JlIiwiJGRyb3Bkb3duUGFyZW50IiwiX3Nob3dEcm9wZG93biIsIl9hdHRhY2hQb3NpdGlvbmluZ0hhbmRsZXIiLCJfYmluZENvbnRhaW5lclJlc3VsdEhhbmRsZXJzIiwiX2hpZGVEcm9wZG93biIsIl9kZXRhY2hQb3NpdGlvbmluZ0hhbmRsZXIiLCIkZHJvcGRvd25Db250YWluZXIiLCIkY29udGFpbmVyIiwiZGV0YWNoIiwiX2NvbnRhaW5lclJlc3VsdHNIYW5kbGVyc0JvdW5kIiwiX3Bvc2l0aW9uRHJvcGRvd24iLCJfcmVzaXplRHJvcGRvd24iLCJpc0Nvbm5lY3RlZCIsIm91dGVyV2lkdGgiLCJtaW5XaWR0aCIsImFwcGVuZFRvIiwibWluaW11bVJlc3VsdHNGb3JTZWFyY2giLCJfaGFuZGxlU2VsZWN0T25DbG9zZSIsIm9yaWdpbmFsU2VsZWN0MkV2ZW50IiwiX3NlbGVjdFRyaWdnZXJlZCIsImN0cmxLZXkiLCJtZXRhS2V5IiwiZXJyb3JMb2FkaW5nIiwiaW5wdXRUb29Mb25nIiwiaW5wdXRUb29TaG9ydCIsImxvYWRpbmdNb3JlIiwibWF4aW11bVNlbGVjdGVkIiwibm9SZXN1bHRzIiwic2VhcmNoaW5nIiwicmVtb3ZlQWxsSXRlbXMiLCJFIiwiQyIsIk8iLCJUIiwiTCIsIkkiLCJqIiwiZGVmYXVsdHMiLCJkYXRhQWRhcHRlciIsInRhZ3MiLCJ0b2tlblNlcGFyYXRvcnMiLCJhbWRCYXNlIiwiaW5pdFNlbGVjdGlvbiIsInJlc3VsdHNBZGFwdGVyIiwic2VsZWN0T25DbG9zZSIsImRyb3Bkb3duQWRhcHRlciIsIm11bHRpcGxlIiwiY2xvc2VPblNlbGVjdCIsImRyb3Bkb3duQ3NzQ2xhc3MiLCJkcm9wZG93bkNzcyIsImFkYXB0RHJvcGRvd25Dc3NDbGFzcyIsInNlbGVjdGlvbkFkYXB0ZXIiLCJhbGxvd0NsZWFyIiwiY29udGFpbmVyQ3NzQ2xhc3MiLCJjb250YWluZXJDc3MiLCJhZGFwdENvbnRhaW5lckNzc0NsYXNzIiwibGFuZ3VhZ2UiLCJfcmVzb2x2ZUxhbmd1YWdlIiwidHJhbnNsYXRpb25zIiwiX3Byb2Nlc3NUcmFuc2xhdGlvbnMiLCJkZWJ1ZyIsImFtZExhbmd1YWdlQmFzZSIsImRyb3Bkb3duQXV0b1dpZHRoIiwibWF0Y2hlciIsInNjcm9sbEFmdGVyU2VsZWN0Iiwic29ydGVyIiwidGVtcGxhdGVSZXN1bHQiLCJ0ZW1wbGF0ZVNlbGVjdGlvbiIsInRoZW1lIiwiYXBwbHlGcm9tRWxlbWVudCIsImlzRW1wdHlPYmplY3QiLCJpc1BsYWluT2JqZWN0Iiwid2FybiIsImNhbWVsQ2FzZSIsImZyb21FbGVtZW50IiwiX2dlbmVyYXRlSWQiLCJfcGxhY2VDb250YWluZXIiLCJfYmluZEFkYXB0ZXJzIiwiX3JlZ2lzdGVyRG9tRXZlbnRzIiwiX3JlZ2lzdGVyRGF0YUV2ZW50cyIsIl9yZWdpc3RlclNlbGVjdGlvbkV2ZW50cyIsIl9yZWdpc3RlckRyb3Bkb3duRXZlbnRzIiwiX3JlZ2lzdGVyUmVzdWx0c0V2ZW50cyIsIl9yZWdpc3RlckV2ZW50cyIsIl9zeW5jQXR0cmlidXRlcyIsImluc2VydEFmdGVyIiwiX3Jlc29sdmVXaWR0aCIsIl9zeW5jQSIsIl9zeW5jUyIsIl9zeW5jU3VidHJlZSIsImF0dGFjaEV2ZW50IiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJNb3pNdXRhdGlvbk9ic2VydmVyIiwiX29ic2VydmVyIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJ0b2dnbGVEcm9wZG93biIsImFsdEtleSIsIm9wZW4iLCJfaXNDaGFuZ2VNdXRhdGlvbiIsImFkZGVkTm9kZXMiLCJyZW1vdmVkTm9kZXMiLCJoYXNGb2N1cyIsImRldGFjaEV2ZW50IiwiZGlzY29ubmVjdCIsInJlbW92ZURhdGEiLCJTbGljayIsImFjY2Vzc2liaWxpdHkiLCJhZGFwdGl2ZUhlaWdodCIsImFwcGVuZEFycm93cyIsImFycm93cyIsImFzTmF2Rm9yIiwiYXV0b3BsYXlTcGVlZCIsImNlbnRlck1vZGUiLCJjZW50ZXJQYWRkaW5nIiwiY3NzRWFzZSIsImRvdHNDbGFzcyIsImRyYWdnYWJsZSIsImVhc2luZyIsImVkZ2VGcmljdGlvbiIsImZhZGUiLCJmb2N1c09uU2VsZWN0IiwiZm9jdXNPbkNoYW5nZSIsImluaXRpYWxTbGlkZSIsImxhenlMb2FkIiwibW9iaWxlRmlyc3QiLCJwYXVzZU9uSG92ZXIiLCJwYXVzZU9uRm9jdXMiLCJwYXVzZU9uRG90c0hvdmVyIiwicmVzcG9uZFRvIiwicm93cyIsInJ0bCIsInNsaWRlc1BlclJvdyIsInN3aXBlIiwic3dpcGVUb1NsaWRlIiwidG91Y2hNb3ZlIiwidG91Y2hUaHJlc2hvbGQiLCJ1c2VDU1MiLCJ1c2VUcmFuc2Zvcm0iLCJ2YXJpYWJsZVdpZHRoIiwidmVydGljYWwiLCJ2ZXJ0aWNhbFN3aXBpbmciLCJ3YWl0Rm9yQW5pbWF0ZSIsInpJbmRleCIsImluaXRpYWxzIiwiYW5pbWF0aW5nIiwiZHJhZ2dpbmciLCJhdXRvUGxheVRpbWVyIiwiY3VycmVudERpcmVjdGlvbiIsImN1cnJlbnRMZWZ0IiwiY3VycmVudFNsaWRlIiwiJGRvdHMiLCJsaXN0V2lkdGgiLCJsaXN0SGVpZ2h0IiwibG9hZEluZGV4IiwiJG5leHRBcnJvdyIsIiRwcmV2QXJyb3ciLCJzY3JvbGxpbmciLCJzbGlkZUNvdW50Iiwic2xpZGVXaWR0aCIsIiRzbGlkZVRyYWNrIiwiJHNsaWRlcyIsInNsaWRpbmciLCJzbGlkZU9mZnNldCIsInN3aXBlTGVmdCIsInN3aXBpbmciLCIkbGlzdCIsInRvdWNoT2JqZWN0IiwidHJhbnNmb3Jtc0VuYWJsZWQiLCJ1bnNsaWNrZWQiLCJhY3RpdmVCcmVha3BvaW50IiwiYW5pbVR5cGUiLCJhbmltUHJvcCIsImJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludFNldHRpbmdzIiwiY3NzVHJhbnNpdGlvbnMiLCJmb2N1c3NlZCIsImludGVycnVwdGVkIiwicGF1c2VkIiwicG9zaXRpb25Qcm9wIiwicm93Q291bnQiLCJzaG91bGRDbGljayIsIiRzbGlkZXIiLCIkc2xpZGVzQ2FjaGUiLCJ0cmFuc2Zvcm1UeXBlIiwidHJhbnNpdGlvblR5cGUiLCJ2aXNpYmlsaXR5Q2hhbmdlIiwid2luZG93V2lkdGgiLCJ3aW5kb3dUaW1lciIsIm9yaWdpbmFsU2V0dGluZ3MiLCJtb3pIaWRkZW4iLCJ3ZWJraXRIaWRkZW4iLCJhdXRvUGxheSIsInByb3h5IiwiYXV0b1BsYXlDbGVhciIsImF1dG9QbGF5SXRlcmF0b3IiLCJjaGFuZ2VTbGlkZSIsImNsaWNrSGFuZGxlciIsInNlbGVjdEhhbmRsZXIiLCJzZXRQb3NpdGlvbiIsInN3aXBlSGFuZGxlciIsImRyYWdIYW5kbGVyIiwia2V5SGFuZGxlciIsImluc3RhbmNlVWlkIiwiaHRtbEV4cHIiLCJyZWdpc3RlckJyZWFrcG9pbnRzIiwiYWN0aXZhdGVBREEiLCJ0YWJpbmRleCIsImFkZFNsaWRlIiwic2xpY2tBZGQiLCJ1bmxvYWQiLCJpbnNlcnRCZWZvcmUiLCJwcmVwZW5kVG8iLCJyZWluaXQiLCJhbmltYXRlSGVpZ2h0IiwiYW5pbWF0ZSIsImFuaW1hdGVTbGlkZSIsImFuaW1TdGFydCIsImR1cmF0aW9uIiwic3RlcCIsImNlaWwiLCJhcHBseVRyYW5zaXRpb24iLCJkaXNhYmxlVHJhbnNpdGlvbiIsImdldE5hdlRhcmdldCIsIm5vdCIsInNsaWRlSGFuZGxlciIsImJ1aWxkQXJyb3dzIiwiYnVpbGREb3RzIiwiZ2V0RG90Q291bnQiLCJidWlsZE91dCIsIndyYXBBbGwiLCJzZXR1cEluZmluaXRlIiwidXBkYXRlRG90cyIsInNldFNsaWRlQ2xhc3NlcyIsImJ1aWxkUm93cyIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjaGVja1Jlc3BvbnNpdmUiLCJ1bnNsaWNrIiwiY2hlY2tOYXZpZ2FibGUiLCJnZXROYXZpZ2FibGVJbmRleGVzIiwiY2xlYW5VcEV2ZW50cyIsImludGVycnVwdCIsImNsZWFuVXBTbGlkZUV2ZW50cyIsIm9yaWVudGF0aW9uQ2hhbmdlIiwiY2xlYW5VcFJvd3MiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJmYWRlU2xpZGUiLCJvcGFjaXR5IiwiZmFkZVNsaWRlT3V0IiwiZmlsdGVyU2xpZGVzIiwic2xpY2tGaWx0ZXIiLCJmb2N1c0hhbmRsZXIiLCJnZXRDdXJyZW50Iiwic2xpY2tDdXJyZW50U2xpZGUiLCJnZXRMZWZ0IiwiZ2V0T3B0aW9uIiwic2xpY2tHZXRPcHRpb24iLCJnZXRTbGljayIsImdldFNsaWRlQ291bnQiLCJnb1RvIiwic2xpY2tHb1RvIiwic2V0UHJvcHMiLCJzdGFydExvYWQiLCJsb2FkU2xpZGVyIiwiaW5pdGlhbGl6ZUV2ZW50cyIsInVwZGF0ZUFycm93cyIsImluaXRBREEiLCJpbml0QXJyb3dFdmVudHMiLCJpbml0RG90RXZlbnRzIiwiaW5pdFNsaWRlRXZlbnRzIiwiaW5pdFVJIiwib25sb2FkIiwib25lcnJvciIsInNyYyIsInByb2dyZXNzaXZlTGF6eUxvYWQiLCJzbGlja05leHQiLCJzbGlja1BhdXNlIiwicGxheSIsInNsaWNrUGxheSIsInBvc3RTbGlkZSIsInNsaWNrUHJldiIsIndpbmRvd0RlbGF5IiwicmVtb3ZlU2xpZGUiLCJzbGlja1JlbW92ZSIsInNldENTUyIsInNldERpbWVuc2lvbnMiLCJzZXRGYWRlIiwic2V0SGVpZ2h0Iiwic2V0T3B0aW9uIiwic2xpY2tTZXRPcHRpb24iLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIm1zVHJhbnNpdGlvbiIsIk9UcmFuc2Zvcm0iLCJwZXJzcGVjdGl2ZVByb3BlcnR5Iiwid2Via2l0UGVyc3BlY3RpdmUiLCJNb3pUcmFuc2Zvcm0iLCJNb3pQZXJzcGVjdGl2ZSIsIndlYmtpdFRyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwiY2xvbmUiLCJzd2lwZURpcmVjdGlvbiIsInN0YXJ0WCIsImN1clgiLCJzdGFydFkiLCJjdXJZIiwiYXRhbjIiLCJQSSIsInN3aXBlRW5kIiwic3dpcGVMZW5ndGgiLCJlZGdlSGl0IiwibWluU3dpcGUiLCJmaW5nZXJDb3VudCIsInN3aXBlU3RhcnQiLCJzd2lwZU1vdmUiLCJwYWdlWCIsInBhZ2VZIiwiY2xpZW50WSIsInNxcnQiLCJwb3ciLCJ1bmZpbHRlclNsaWRlcyIsInNsaWNrVW5maWx0ZXIiLCJ3aGF0SW5wdXQiXSwic291cmNlUm9vdCI6IiJ9