/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/what-input/dist/what-input.js":
/*!****************************************************!*\
  !*** ./node_modules/what-input/dist/what-input.js ***!
  \****************************************************/
/***/ (function(module) {

/**
 * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).
 * @version v4.3.1
 * @link https://github.com/ten1seven/what-input
 * @license MIT
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __nested_webpack_require_737__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_737__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__nested_webpack_require_737__.m = modules;

/******/ 	// expose the module cache
/******/ 	__nested_webpack_require_737__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__nested_webpack_require_737__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __nested_webpack_require_737__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function () {
	  /*
	   * variables
	   */

	  // last used input type
	  var currentInput = 'initial';

	  // last used input intent
	  var currentIntent = null;

	  // cache document.documentElement
	  var doc = document.documentElement;

	  // form input types
	  var formInputs = ['input', 'select', 'textarea'];

	  var functionList = [];

	  // list of modifier keys commonly used with the mouse and
	  // can be safely ignored to prevent false keyboard detection
	  var ignoreMap = [16, // shift
	  17, // control
	  18, // alt
	  91, // Windows key / left Apple cmd
	  93 // Windows menu / right Apple cmd
	  ];

	  // list of keys for which we change intent even for form inputs
	  var changeIntentMap = [9 // tab
	  ];

	  // mapping of events to input types
	  var inputMap = {
	    keydown: 'keyboard',
	    keyup: 'keyboard',
	    mousedown: 'mouse',
	    mousemove: 'mouse',
	    MSPointerDown: 'pointer',
	    MSPointerMove: 'pointer',
	    pointerdown: 'pointer',
	    pointermove: 'pointer',
	    touchstart: 'touch'
	  };

	  // array of all used input types
	  var inputTypes = [];

	  // boolean: true if touch buffer is active
	  var isBuffering = false;

	  // boolean: true if the page is being scrolled
	  var isScrolling = false;

	  // store current mouse position
	  var mousePos = {
	    x: null,
	    y: null
	  };

	  // map of IE 10 pointer events
	  var pointerMap = {
	    2: 'touch',
	    3: 'touch', // treat pen like touch
	    4: 'mouse'
	  };

	  var supportsPassive = false;

	  try {
	    var opts = Object.defineProperty({}, 'passive', {
	      get: function get() {
	        supportsPassive = true;
	      }
	    });

	    window.addEventListener('test', null, opts);
	  } catch (e) {}

	  /*
	   * set up
	   */

	  var setUp = function setUp() {
	    // add correct mouse wheel event mapping to `inputMap`
	    inputMap[detectWheel()] = 'mouse';

	    addListeners();
	    setInput();
	  };

	  /*
	   * events
	   */

	  var addListeners = function addListeners() {
	    // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding
	    // can only demonstrate potential, but not actual, interaction
	    // and are treated separately
	    var options = supportsPassive ? { passive: true } : false;

	    // pointer events (mouse, pen, touch)
	    if (window.PointerEvent) {
	      doc.addEventListener('pointerdown', updateInput);
	      doc.addEventListener('pointermove', setIntent);
	    } else if (window.MSPointerEvent) {
	      doc.addEventListener('MSPointerDown', updateInput);
	      doc.addEventListener('MSPointerMove', setIntent);
	    } else {
	      // mouse events
	      doc.addEventListener('mousedown', updateInput);
	      doc.addEventListener('mousemove', setIntent);

	      // touch events
	      if ('ontouchstart' in window) {
	        doc.addEventListener('touchstart', touchBuffer, options);
	        doc.addEventListener('touchend', touchBuffer);
	      }
	    }

	    // mouse wheel
	    doc.addEventListener(detectWheel(), setIntent, options);

	    // keyboard events
	    doc.addEventListener('keydown', updateInput);
	    doc.addEventListener('keyup', updateInput);
	  };

	  // checks conditions before updating new input
	  var updateInput = function updateInput(event) {
	    // only execute if the touch buffer timer isn't running
	    if (!isBuffering) {
	      var eventKey = event.which;
	      var value = inputMap[event.type];
	      if (value === 'pointer') value = pointerType(event);

	      if (currentInput !== value || currentIntent !== value) {
	        var activeElem = document.activeElement;
	        var activeInput = false;
	        var notFormInput = activeElem && activeElem.nodeName && formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1;

	        if (notFormInput || changeIntentMap.indexOf(eventKey) !== -1) {
	          activeInput = true;
	        }

	        if (value === 'touch' ||
	        // ignore mouse modifier keys
	        value === 'mouse' ||
	        // don't switch if the current element is a form input
	        value === 'keyboard' && eventKey && activeInput && ignoreMap.indexOf(eventKey) === -1) {
	          // set the current and catch-all variable
	          currentInput = currentIntent = value;

	          setInput();
	        }
	      }
	    }
	  };

	  // updates the doc and `inputTypes` array with new input
	  var setInput = function setInput() {
	    doc.setAttribute('data-whatinput', currentInput);
	    doc.setAttribute('data-whatintent', currentInput);

	    if (inputTypes.indexOf(currentInput) === -1) {
	      inputTypes.push(currentInput);
	      doc.className += ' whatinput-types-' + currentInput;
	    }

	    fireFunctions('input');
	  };

	  // updates input intent for `mousemove` and `pointermove`
	  var setIntent = function setIntent(event) {
	    // test to see if `mousemove` happened relative to the screen
	    // to detect scrolling versus mousemove
	    if (mousePos['x'] !== event.screenX || mousePos['y'] !== event.screenY) {
	      isScrolling = false;

	      mousePos['x'] = event.screenX;
	      mousePos['y'] = event.screenY;
	    } else {
	      isScrolling = true;
	    }

	    // only execute if the touch buffer timer isn't running
	    // or scrolling isn't happening
	    if (!isBuffering && !isScrolling) {
	      var value = inputMap[event.type];
	      if (value === 'pointer') value = pointerType(event);

	      if (currentIntent !== value) {
	        currentIntent = value;

	        doc.setAttribute('data-whatintent', currentIntent);

	        fireFunctions('intent');
	      }
	    }
	  };

	  // buffers touch events because they frequently also fire mouse events
	  var touchBuffer = function touchBuffer(event) {
	    if (event.type === 'touchstart') {
	      isBuffering = false;

	      // set the current input
	      updateInput(event);
	    } else {
	      isBuffering = true;
	    }
	  };

	  var fireFunctions = function fireFunctions(type) {
	    for (var i = 0, len = functionList.length; i < len; i++) {
	      if (functionList[i].type === type) {
	        functionList[i].fn.call(undefined, currentIntent);
	      }
	    }
	  };

	  /*
	   * utilities
	   */

	  var pointerType = function pointerType(event) {
	    if (typeof event.pointerType === 'number') {
	      return pointerMap[event.pointerType];
	    } else {
	      // treat pen like touch
	      return event.pointerType === 'pen' ? 'touch' : event.pointerType;
	    }
	  };

	  // detect version of mouse wheel event to use
	  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel
	  var detectWheel = function detectWheel() {
	    var wheelType = void 0;

	    // Modern browsers support "wheel"
	    if ('onwheel' in document.createElement('div')) {
	      wheelType = 'wheel';
	    } else {
	      // Webkit and IE support at least "mousewheel"
	      // or assume that remaining browsers are older Firefox
	      wheelType = document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';
	    }

	    return wheelType;
	  };

	  var objPos = function objPos(match) {
	    for (var i = 0, len = functionList.length; i < len; i++) {
	      if (functionList[i].fn === match) {
	        return i;
	      }
	    }
	  };

	  /*
	   * init
	   */

	  // don't start script unless browser cuts the mustard
	  // (also passes if polyfills are used)
	  if ('addEventListener' in window && Array.prototype.indexOf) {
	    setUp();
	  }

	  /*
	   * api
	   */

	  return {
	    // returns string: the current input type
	    // opt: 'loose'|'strict'
	    // 'strict' (default): returns the same value as the `data-whatinput` attribute
	    // 'loose': includes `data-whatintent` value if it's more current than `data-whatinput`
	    ask: function ask(opt) {
	      return opt === 'loose' ? currentIntent : currentInput;
	    },

	    // returns array: all the detected input types
	    types: function types() {
	      return inputTypes;
	    },

	    // overwrites ignored keys with provided array
	    ignoreKeys: function ignoreKeys(arr) {
	      ignoreMap = arr;
	    },

	    // attach functions to input and intent "events"
	    // funct: function to fire on change
	    // eventType: 'input'|'intent'
	    registerOnChange: function registerOnChange(fn, eventType) {
	      functionList.push({
	        fn: fn,
	        type: eventType || 'input'
	      });
	    },

	    unRegisterOnChange: function unRegisterOnChange(fn) {
	      var position = objPos(fn);

	      if (position) {
	        functionList.splice(position, 1);
	      }
	    }
	  };
	}();

/***/ }
/******/ ])
});
;

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/***/ (function(module) {

"use strict";
module.exports = jQuery;

/***/ }),

/***/ "./src/assets/js/bootstrap/bootstrap.bundle.min.js":
/*!*********************************************************!*\
  !*** ./src/assets/js/bootstrap/bootstrap.bundle.min.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);enumerableOnly && (symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;})), keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = null != arguments[i] ? arguments[i] : {};i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {_defineProperty(target, key, source[key]);}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}return target;}function _defineProperty(obj, key, value) {key = _toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toPropertyKey(arg) {var key = _toPrimitive(arg, "string");return typeof key === "symbol" ? key : String(key);}function _toPrimitive(input, hint) {if (typeof input !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (typeof res !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}function _newArrowCheck(innerThis, boundThis) {if (innerThis !== boundThis) {throw new TypeError("Cannot instantiate an arrow function");}} /*!
  * Bootstrap v5.0.2 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
!function (t, e) {"object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).bootstrap = e();}(undefined, function () {"use strict";var _this = this;const t = { find: function find(t, e = document.documentElement) {_newArrowCheck(this, _this);return [].concat(...Element.prototype.querySelectorAll.call(e, t));}.bind(this), findOne: function findOne(t, e = document.documentElement) {_newArrowCheck(this, _this);return Element.prototype.querySelector.call(e, t);}.bind(this), children: function children(t, e) {var _this2 = this;_newArrowCheck(this, _this);return [].concat(...t.children).filter(function (t) {_newArrowCheck(this, _this2);return t.matches(e);}.bind(this));}.bind(this), parents(t, e) {const i = [];let n = t.parentNode;for (; n && n.nodeType === Node.ELEMENT_NODE && 3 !== n.nodeType;) n.matches(e) && i.push(n), n = n.parentNode;return i;}, prev(t, e) {let i = t.previousElementSibling;for (; i;) {if (i.matches(e)) return [i];i = i.previousElementSibling;}return [];}, next(t, e) {let i = t.nextElementSibling;for (; i;) {if (i.matches(e)) return [i];i = i.nextElementSibling;}return [];} },e = function e(t) {_newArrowCheck(this, _this);do {t += Math.floor(1e6 * Math.random());} while (document.getElementById(t));return t;}.bind(this),i = function i(t) {_newArrowCheck(this, _this);let e = t.getAttribute("data-bs-target");if (!e || "#" === e) {let i = t.getAttribute("href");if (!i || !i.includes("#") && !i.startsWith(".")) return null;i.includes("#") && !i.startsWith("#") && (i = "#" + i.split("#")[1]), e = i && "#" !== i ? i.trim() : null;}return e;}.bind(this),n = function n(t) {_newArrowCheck(this, _this);const e = i(t);return e && document.querySelector(e) ? e : null;}.bind(this),s = function s(t) {_newArrowCheck(this, _this);const e = i(t);return e ? document.querySelector(e) : null;}.bind(this),o = function o(t) {_newArrowCheck(this, _this);t.dispatchEvent(new Event("transitionend"));}.bind(this),r = function r(t) {_newArrowCheck(this, _this);return !(!t || "object" != typeof t) && (void 0 !== t.jquery && (t = t[0]), void 0 !== t.nodeType);}.bind(this),a = function a(e) {_newArrowCheck(this, _this);return r(e) ? e.jquery ? e[0] : e : "string" == typeof e && e.length > 0 ? t.findOne(e) : null;}.bind(this),l = function l(t, e, i) {var _this3 = this;_newArrowCheck(this, _this);Object.keys(i).forEach(function (n) {_newArrowCheck(this, _this3);const s = i[n],o = e[n],a = o && r(o) ? "element" : null == (l = o) ? "" + l : {}.toString.call(l).match(/\s([a-z]+)/i)[1].toLowerCase();var l;if (!new RegExp(s).test(a)) throw new TypeError(`${t.toUpperCase()}: Option "${n}" provided type "${a}" but expected type "${s}".`);}.bind(this));}.bind(this),c = function c(t) {_newArrowCheck(this, _this);return !(!r(t) || 0 === t.getClientRects().length) && "visible" === getComputedStyle(t).getPropertyValue("visibility");}.bind(this),h = function h(t) {_newArrowCheck(this, _this);return !t || t.nodeType !== Node.ELEMENT_NODE || !!t.classList.contains("disabled") || (void 0 !== t.disabled ? t.disabled : t.hasAttribute("disabled") && "false" !== t.getAttribute("disabled"));}.bind(this),_d = function d(t) {_newArrowCheck(this, _this);if (!document.documentElement.attachShadow) return null;if ("function" == typeof t.getRootNode) {const e = t.getRootNode();return e instanceof ShadowRoot ? e : null;}return t instanceof ShadowRoot ? t : t.parentNode ? _d(t.parentNode) : null;}.bind(this),u = function u() {_newArrowCheck(this, _this);}.bind(this),f = function f(t) {_newArrowCheck(this, _this);return t.offsetHeight;}.bind(this),p = function p() {_newArrowCheck(this, _this);const { jQuery: t } = window;return t && !document.body.hasAttribute("data-bs-no-jquery") ? t : null;}.bind(this),m = [],g = function g() {_newArrowCheck(this, _this);return "rtl" === document.documentElement.dir;}.bind(this),_ = function _(t) {var _this4 = this;_newArrowCheck(this, _this);var e;e = function e() {var _this5 = this;_newArrowCheck(this, _this4);const e = p();if (e) {const i = t.NAME,n = e.fn[i];e.fn[i] = t.jQueryInterface, e.fn[i].Constructor = t, e.fn[i].noConflict = function () {_newArrowCheck(this, _this5);return e.fn[i] = n, t.jQueryInterface;}.bind(this);}}.bind(this), "loading" === document.readyState ? (m.length || document.addEventListener("DOMContentLoaded", function () {var _this6 = this;_newArrowCheck(this, _this4);m.forEach(function (t) {_newArrowCheck(this, _this6);return t();}.bind(this));}.bind(this)), m.push(e)) : e();}.bind(this),b = function b(t) {_newArrowCheck(this, _this);"function" == typeof t && t();}.bind(this),v = function v(t, e, i = !0) {var _this7 = this;_newArrowCheck(this, _this);if (!i) return void b(t);const n = function (t) {_newArrowCheck(this, _this7);if (!t) return 0;let { transitionDuration: e, transitionDelay: i } = window.getComputedStyle(t);const n = Number.parseFloat(e),s = Number.parseFloat(i);return n || s ? (e = e.split(",")[0], i = i.split(",")[0], 1e3 * (Number.parseFloat(e) + Number.parseFloat(i))) : 0;}.bind(this)(e) + 5;let s = !1;const _r = function r({ target: i }) {_newArrowCheck(this, _this7);i === e && (s = !0, e.removeEventListener("transitionend", _r), b(t));}.bind(this);e.addEventListener("transitionend", _r), setTimeout(function () {_newArrowCheck(this, _this7);s || o(e);}.bind(this), n);}.bind(this),y = function y(t, e, i, n) {_newArrowCheck(this, _this);let s = t.indexOf(e);if (-1 === s) return t[!i && n ? t.length - 1 : 0];const o = t.length;return s += i ? 1 : -1, n && (s = (s + o) % o), t[Math.max(0, Math.min(s, o - 1))];}.bind(this),w = /[^.]*(?=\..*)\.|.*/,E = /\..*/,A = /::\d+$/,T = {};let O = 1;const C = { mouseenter: "mouseover", mouseleave: "mouseout" },k = /^(mouseenter|mouseleave)/i,L = new Set(["click", "dblclick", "mouseup", "mousedown", "contextmenu", "mousewheel", "DOMMouseScroll", "mouseover", "mouseout", "mousemove", "selectstart", "selectend", "keydown", "keypress", "keyup", "orientationchange", "touchstart", "touchmove", "touchend", "touchcancel", "pointerdown", "pointermove", "pointerup", "pointerleave", "pointercancel", "gesturestart", "gesturechange", "gestureend", "focus", "blur", "change", "reset", "select", "submit", "focusin", "focusout", "load", "unload", "beforeunload", "resize", "move", "DOMContentLoaded", "readystatechange", "error", "abort", "scroll"]);function x(t, e) {return e && `${e}::${O++}` || t.uidEvent || O++;}function D(t) {const e = x(t);return t.uidEvent = e, T[e] = T[e] || {}, T[e];}function S(t, e, i = null) {const n = Object.keys(t);for (let s = 0, o = n.length; s < o; s++) {const o = t[n[s]];if (o.originalHandler === e && o.delegationSelector === i) return o;}return null;}function I(t, e, i) {const n = "string" == typeof e,s = n ? i : e;let o = M(t);return L.has(o) || (o = t), [n, s, o];}function N(t, e, i, n, s) {var _this8 = this;if ("string" != typeof e || !t) return;if (i || (i = n, n = null), k.test(e)) {const t = function t(_t2) {_newArrowCheck(this, _this8);return function (e) {if (!e.relatedTarget || e.relatedTarget !== e.delegateTarget && !e.delegateTarget.contains(e.relatedTarget)) return _t2.call(this, e);};}.bind(this);n ? n = t(n) : i = t(i);}const [o, r, a] = I(e, i, n),l = D(t),c = l[a] || (l[a] = {}),h = S(c, r, o ? i : null);if (h) return void (h.oneOff = h.oneOff && s);const d = x(r, e.replace(w, "")),u = o ? function (t, e, i) {return function n(s) {const o = t.querySelectorAll(e);for (let { target: r } = s; r && r !== this; r = r.parentNode) for (let a = o.length; a--;) if (o[a] === r) return s.delegateTarget = r, n.oneOff && P.off(t, s.type, e, i), i.apply(r, [s]);return null;};}(t, i, n) : function (t, e) {return function i(n) {return n.delegateTarget = t, i.oneOff && P.off(t, n.type, e), e.apply(t, [n]);};}(t, i);u.delegationSelector = o ? i : null, u.originalHandler = r, u.oneOff = s, u.uidEvent = d, c[d] = u, t.addEventListener(a, u, o);}function j(t, e, i, n, s) {const o = S(e[i], n, s);o && (t.removeEventListener(i, o, Boolean(s)), delete e[i][o.uidEvent]);}function M(t) {return t = t.replace(E, ""), C[t] || t;}const P = { on(t, e, i, n) {N(t, e, i, n, !1);}, one(t, e, i, n) {N(t, e, i, n, !0);}, off(t, e, i, n) {var _this9 = this;if ("string" != typeof e || !t) return;const [s, o, r] = I(e, i, n),a = r !== e,l = D(t),c = e.startsWith(".");if (void 0 !== o) {if (!l || !l[r]) return;return void j(t, l, r, o, s ? i : null);}c && Object.keys(l).forEach(function (i) {_newArrowCheck(this, _this9);!function (t, e, i, n) {var _this10 = this;const s = e[i] || {};Object.keys(s).forEach(function (o) {_newArrowCheck(this, _this10);if (o.includes(n)) {const n = s[o];j(t, e, i, n.originalHandler, n.delegationSelector);}}.bind(this));}(t, l, i, e.slice(1));}.bind(this));const h = l[r] || {};Object.keys(h).forEach(function (i) {_newArrowCheck(this, _this9);const n = i.replace(A, "");if (!a || e.includes(n)) {const e = h[i];j(t, l, r, e.originalHandler, e.delegationSelector);}}.bind(this));}, trigger(t, e, i) {var _this11 = this;if ("string" != typeof e || !t) return null;const n = p(),s = M(e),o = e !== s,r = L.has(s);let a,l = !0,c = !0,h = !1,d = null;return o && n && (a = n.Event(e, i), n(t).trigger(a), l = !a.isPropagationStopped(), c = !a.isImmediatePropagationStopped(), h = a.isDefaultPrevented()), r ? (d = document.createEvent("HTMLEvents"), d.initEvent(s, l, !0)) : d = new CustomEvent(e, { bubbles: l, cancelable: !0 }), void 0 !== i && Object.keys(i).forEach(function (t) {var _this12 = this;_newArrowCheck(this, _this11);Object.defineProperty(d, t, { get: function get() {_newArrowCheck(this, _this12);return i[t];}.bind(this) });}.bind(this)), h && d.preventDefault(), c && t.dispatchEvent(d), d.defaultPrevented && void 0 !== a && a.preventDefault(), d;} },H = new Map();var R = { set(t, e, i) {H.has(t) || H.set(t, new Map());const n = H.get(t);n.has(e) || 0 === n.size ? n.set(e, i) : console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(n.keys())[0]}.`);}, get: function get(t, e) {_newArrowCheck(this, _this);return H.has(t) && H.get(t).get(e) || null;}.bind(this), remove(t, e) {if (!H.has(t)) return;const i = H.get(t);i.delete(e), 0 === i.size && H.delete(t);} };class B {constructor(t) {(t = a(t)) && (this._element = t, R.set(this._element, this.constructor.DATA_KEY, this));}dispose() {var _this13 = this;R.remove(this._element, this.constructor.DATA_KEY), P.off(this._element, this.constructor.EVENT_KEY), Object.getOwnPropertyNames(this).forEach(function (t) {_newArrowCheck(this, _this13);this[t] = null;}.bind(this));}_queueCallback(t, e, i = !0) {v(t, e, i);}static getInstance(t) {return R.get(t, this.DATA_KEY);}static getOrCreateInstance(t, e = {}) {return this.getInstance(t) || new this(t, "object" == typeof e ? e : null);}static get VERSION() {return "5.0.2";}static get NAME() {throw new Error('You have to implement the static method "NAME", for each component!');}static get DATA_KEY() {return "bs." + this.NAME;}static get EVENT_KEY() {return "." + this.DATA_KEY;}}class W extends B {static get NAME() {return "alert";}close(t) {const e = t ? this._getRootElement(t) : this._element,i = this._triggerCloseEvent(e);null === i || i.defaultPrevented || this._removeElement(e);}_getRootElement(t) {return s(t) || t.closest(".alert");}_triggerCloseEvent(t) {return P.trigger(t, "close.bs.alert");}_removeElement(t) {var _this14 = this;t.classList.remove("show");const e = t.classList.contains("fade");this._queueCallback(function () {_newArrowCheck(this, _this14);return this._destroyElement(t);}.bind(this), t, e);}_destroyElement(t) {t.remove(), P.trigger(t, "closed.bs.alert");}static jQueryInterface(t) {return this.each(function () {const e = W.getOrCreateInstance(this);"close" === t && e[t](this);});}static handleDismiss(t) {return function (e) {e && e.preventDefault(), t.close(this);};}}P.on(document, "click.bs.alert.data-api", '[data-bs-dismiss="alert"]', W.handleDismiss(new W())), _(W);class q extends B {static get NAME() {return "button";}toggle() {this._element.setAttribute("aria-pressed", this._element.classList.toggle("active"));}static jQueryInterface(t) {return this.each(function () {const e = q.getOrCreateInstance(this);"toggle" === t && e[t]();});}}function z(t) {return "true" === t || "false" !== t && (t === Number(t).toString() ? Number(t) : "" === t || "null" === t ? null : t);}function $(t) {var _this15 = this;return t.replace(/[A-Z]/g, function (t) {_newArrowCheck(this, _this15);return "-" + t.toLowerCase();}.bind(this));}P.on(document, "click.bs.button.data-api", '[data-bs-toggle="button"]', function (t) {_newArrowCheck(this, _this);t.preventDefault();const e = t.target.closest('[data-bs-toggle="button"]');q.getOrCreateInstance(e).toggle();}.bind(this)), _(q);const U = { setDataAttribute(t, e, i) {t.setAttribute("data-bs-" + $(e), i);}, removeDataAttribute(t, e) {t.removeAttribute("data-bs-" + $(e));}, getDataAttributes(t) {var _this16 = this;if (!t) return {};const e = {};return Object.keys(t.dataset).filter(function (t) {_newArrowCheck(this, _this16);return t.startsWith("bs");}.bind(this)).forEach(function (i) {_newArrowCheck(this, _this16);let n = i.replace(/^bs/, "");n = n.charAt(0).toLowerCase() + n.slice(1, n.length), e[n] = z(t.dataset[i]);}.bind(this)), e;}, getDataAttribute: function getDataAttribute(t, e) {_newArrowCheck(this, _this);return z(t.getAttribute("data-bs-" + $(e)));}.bind(this), offset(t) {const e = t.getBoundingClientRect();return { top: e.top + document.body.scrollTop, left: e.left + document.body.scrollLeft };}, position: function position(t) {_newArrowCheck(this, _this);return { top: t.offsetTop, left: t.offsetLeft };}.bind(this) },F = { interval: 5e3, keyboard: !0, slide: !1, pause: "hover", wrap: !0, touch: !0 },V = { interval: "(number|boolean)", keyboard: "boolean", slide: "(boolean|string)", pause: "(string|boolean)", wrap: "boolean", touch: "boolean" },K = "next",X = "prev",Y = "left",Q = "right",G = { ArrowLeft: Q, ArrowRight: Y };class Z extends B {constructor(e, i) {super(e), this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(i), this._indicatorsElement = t.findOne(".carousel-indicators", this._element), this._touchSupported = "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0, this._pointerEvent = Boolean(window.PointerEvent), this._addEventListeners();}static get Default() {return F;}static get NAME() {return "carousel";}next() {this._slide(K);}nextWhenVisible() {!document.hidden && c(this._element) && this.next();}prev() {this._slide(X);}pause(e) {e || (this._isPaused = !0), t.findOne(".carousel-item-next, .carousel-item-prev", this._element) && (o(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;}cycle(t) {t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config && this._config.interval && !this._isPaused && (this._updateInterval(), this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));}to(e) {var _this17 = this;this._activeElement = t.findOne(".active.carousel-item", this._element);const i = this._getItemIndex(this._activeElement);if (e > this._items.length - 1 || e < 0) return;if (this._isSliding) return void P.one(this._element, "slid.bs.carousel", function () {_newArrowCheck(this, _this17);return this.to(e);}.bind(this));if (i === e) return this.pause(), void this.cycle();const n = e > i ? K : X;this._slide(n, this._items[e]);}_getConfig(t) {return t = _objectSpread(_objectSpread(_objectSpread({}, F), U.getDataAttributes(this._element)), "object" == typeof t ? t : {}), l("carousel", t, V), t;}_handleSwipe() {const t = Math.abs(this.touchDeltaX);if (t <= 40) return;const e = t / this.touchDeltaX;this.touchDeltaX = 0, e && this._slide(e > 0 ? Q : Y);}_addEventListeners() {var _this18 = this;this._config.keyboard && P.on(this._element, "keydown.bs.carousel", function (t) {_newArrowCheck(this, _this18);return this._keydown(t);}.bind(this)), "hover" === this._config.pause && (P.on(this._element, "mouseenter.bs.carousel", function (t) {_newArrowCheck(this, _this18);return this.pause(t);}.bind(this)), P.on(this._element, "mouseleave.bs.carousel", function (t) {_newArrowCheck(this, _this18);return this.cycle(t);}.bind(this))), this._config.touch && this._touchSupported && this._addTouchEventListeners();}_addTouchEventListeners() {var _this19 = this;const e = function e(t) {_newArrowCheck(this, _this19);!this._pointerEvent || "pen" !== t.pointerType && "touch" !== t.pointerType ? this._pointerEvent || (this.touchStartX = t.touches[0].clientX) : this.touchStartX = t.clientX;}.bind(this),i = function i(t) {_newArrowCheck(this, _this19);this.touchDeltaX = t.touches && t.touches.length > 1 ? 0 : t.touches[0].clientX - this.touchStartX;}.bind(this),n = function n(t) {var _this20 = this;_newArrowCheck(this, _this19);!this._pointerEvent || "pen" !== t.pointerType && "touch" !== t.pointerType || (this.touchDeltaX = t.clientX - this.touchStartX), this._handleSwipe(), "hover" === this._config.pause && (this.pause(), this.touchTimeout && clearTimeout(this.touchTimeout), this.touchTimeout = setTimeout(function (t) {_newArrowCheck(this, _this20);return this.cycle(t);}.bind(this), 500 + this._config.interval));}.bind(this);t.find(".carousel-item img", this._element).forEach(function (t) {var _this21 = this;_newArrowCheck(this, _this19);P.on(t, "dragstart.bs.carousel", function (t) {_newArrowCheck(this, _this21);return t.preventDefault();}.bind(this));}.bind(this)), this._pointerEvent ? (P.on(this._element, "pointerdown.bs.carousel", function (t) {_newArrowCheck(this, _this19);return e(t);}.bind(this)), P.on(this._element, "pointerup.bs.carousel", function (t) {_newArrowCheck(this, _this19);return n(t);}.bind(this)), this._element.classList.add("pointer-event")) : (P.on(this._element, "touchstart.bs.carousel", function (t) {_newArrowCheck(this, _this19);return e(t);}.bind(this)), P.on(this._element, "touchmove.bs.carousel", function (t) {_newArrowCheck(this, _this19);return i(t);}.bind(this)), P.on(this._element, "touchend.bs.carousel", function (t) {_newArrowCheck(this, _this19);return n(t);}.bind(this)));}_keydown(t) {if (/input|textarea/i.test(t.target.tagName)) return;const e = G[t.key];e && (t.preventDefault(), this._slide(e));}_getItemIndex(e) {return this._items = e && e.parentNode ? t.find(".carousel-item", e.parentNode) : [], this._items.indexOf(e);}_getItemByOrder(t, e) {const i = t === K;return y(this._items, e, i, this._config.wrap);}_triggerSlideEvent(e, i) {const n = this._getItemIndex(e),s = this._getItemIndex(t.findOne(".active.carousel-item", this._element));return P.trigger(this._element, "slide.bs.carousel", { relatedTarget: e, direction: i, from: s, to: n });}_setActiveIndicatorElement(e) {if (this._indicatorsElement) {const i = t.findOne(".active", this._indicatorsElement);i.classList.remove("active"), i.removeAttribute("aria-current");const n = t.find("[data-bs-target]", this._indicatorsElement);for (let t = 0; t < n.length; t++) if (Number.parseInt(n[t].getAttribute("data-bs-slide-to"), 10) === this._getItemIndex(e)) {n[t].classList.add("active"), n[t].setAttribute("aria-current", "true");break;}}}_updateInterval() {const e = this._activeElement || t.findOne(".active.carousel-item", this._element);if (!e) return;const i = Number.parseInt(e.getAttribute("data-bs-interval"), 10);i ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = i) : this._config.interval = this._config.defaultInterval || this._config.interval;}_slide(e, i) {var _this22 = this;const n = this._directionToOrder(e),s = t.findOne(".active.carousel-item", this._element),o = this._getItemIndex(s),r = i || this._getItemByOrder(n, s),a = this._getItemIndex(r),l = Boolean(this._interval),c = n === K,h = c ? "carousel-item-start" : "carousel-item-end",d = c ? "carousel-item-next" : "carousel-item-prev",u = this._orderToDirection(n);if (r && r.classList.contains("active")) return void (this._isSliding = !1);if (this._isSliding) return;if (this._triggerSlideEvent(r, u).defaultPrevented) return;if (!s || !r) return;this._isSliding = !0, l && this.pause(), this._setActiveIndicatorElement(r), this._activeElement = r;const p = function p() {_newArrowCheck(this, _this22);P.trigger(this._element, "slid.bs.carousel", { relatedTarget: r, direction: u, from: o, to: a });}.bind(this);if (this._element.classList.contains("slide")) {r.classList.add(d), f(r), s.classList.add(h), r.classList.add(h);const t = function t() {_newArrowCheck(this, _this22);r.classList.remove(h, d), r.classList.add("active"), s.classList.remove("active", d, h), this._isSliding = !1, setTimeout(p, 0);}.bind(this);this._queueCallback(t, s, !0);} else s.classList.remove("active"), r.classList.add("active"), this._isSliding = !1, p();l && this.cycle();}_directionToOrder(t) {return [Q, Y].includes(t) ? g() ? t === Y ? X : K : t === Y ? K : X : t;}_orderToDirection(t) {return [K, X].includes(t) ? g() ? t === X ? Y : Q : t === X ? Q : Y : t;}static carouselInterface(t, e) {const i = Z.getOrCreateInstance(t, e);let { _config: n } = i;"object" == typeof e && (n = _objectSpread(_objectSpread({}, n), e));const s = "string" == typeof e ? e : n.slide;if ("number" == typeof e) i.to(e);else if ("string" == typeof s) {if (void 0 === i[s]) throw new TypeError(`No method named "${s}"`);i[s]();} else n.interval && n.ride && (i.pause(), i.cycle());}static jQueryInterface(t) {return this.each(function () {Z.carouselInterface(this, t);});}static dataApiClickHandler(t) {const e = s(this);if (!e || !e.classList.contains("carousel")) return;const i = _objectSpread(_objectSpread({}, U.getDataAttributes(e)), U.getDataAttributes(this)),n = this.getAttribute("data-bs-slide-to");n && (i.interval = !1), Z.carouselInterface(e, i), n && Z.getInstance(e).to(n), t.preventDefault();}}P.on(document, "click.bs.carousel.data-api", "[data-bs-slide], [data-bs-slide-to]", Z.dataApiClickHandler), P.on(window, "load.bs.carousel.data-api", function () {_newArrowCheck(this, _this);const e = t.find('[data-bs-ride="carousel"]');for (let t = 0, i = e.length; t < i; t++) Z.carouselInterface(e[t], Z.getInstance(e[t]));}.bind(this)), _(Z);const J = { toggle: !0, parent: "" },tt = { toggle: "boolean", parent: "(string|element)" };class et extends B {constructor(e, i) {var _this23;(super(e), _this23 = this), this._isTransitioning = !1, this._config = this._getConfig(i), this._triggerArray = t.find(`[data-bs-toggle="collapse"][href="#${this._element.id}"],[data-bs-toggle="collapse"][data-bs-target="#${this._element.id}"]`);const s = t.find('[data-bs-toggle="collapse"]');for (let e = 0, i = s.length; e < i; e++) {var _arrowCheckId = {};const i = s[e],o = n(i),r = t.find(o).filter(function (t) {_newArrowCheck(this, _arrowCheckId);return t === _this23._element;}.bind(_arrowCheckId));null !== o && r.length && (this._selector = o, this._triggerArray.push(i));}this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();}static get Default() {return J;}static get NAME() {return "collapse";}toggle() {this._element.classList.contains("show") ? this.hide() : this.show();}show() {var _this24 = this;if (this._isTransitioning || this._element.classList.contains("show")) return;let e, i;this._parent && (e = t.find(".show, .collapsing", this._parent).filter(function (t) {_newArrowCheck(this, _this24);return "string" == typeof this._config.parent ? t.getAttribute("data-bs-parent") === this._config.parent : t.classList.contains("collapse");}.bind(this)), 0 === e.length && (e = null));const n = t.findOne(this._selector);if (e) {const t = e.find(function (t) {_newArrowCheck(this, _this24);return n !== t;}.bind(this));if (i = t ? et.getInstance(t) : null, i && i._isTransitioning) return;}if (P.trigger(this._element, "show.bs.collapse").defaultPrevented) return;e && e.forEach(function (t) {_newArrowCheck(this, _this24);n !== t && et.collapseInterface(t, "hide"), i || R.set(t, "bs.collapse", null);}.bind(this));const s = this._getDimension();this._element.classList.remove("collapse"), this._element.classList.add("collapsing"), this._element.style[s] = 0, this._triggerArray.length && this._triggerArray.forEach(function (t) {_newArrowCheck(this, _this24);t.classList.remove("collapsed"), t.setAttribute("aria-expanded", !0);}.bind(this)), this.setTransitioning(!0);const o = "scroll" + (s[0].toUpperCase() + s.slice(1));this._queueCallback(function () {_newArrowCheck(this, _this24);this._element.classList.remove("collapsing"), this._element.classList.add("collapse", "show"), this._element.style[s] = "", this.setTransitioning(!1), P.trigger(this._element, "shown.bs.collapse");}.bind(this), this._element, !0), this._element.style[s] = this._element[o] + "px";}hide() {var _this25 = this;if (this._isTransitioning || !this._element.classList.contains("show")) return;if (P.trigger(this._element, "hide.bs.collapse").defaultPrevented) return;const t = this._getDimension();this._element.style[t] = this._element.getBoundingClientRect()[t] + "px", f(this._element), this._element.classList.add("collapsing"), this._element.classList.remove("collapse", "show");const e = this._triggerArray.length;if (e > 0) for (let t = 0; t < e; t++) {const e = this._triggerArray[t],i = s(e);i && !i.classList.contains("show") && (e.classList.add("collapsed"), e.setAttribute("aria-expanded", !1));}this.setTransitioning(!0), this._element.style[t] = "", this._queueCallback(function () {_newArrowCheck(this, _this25);this.setTransitioning(!1), this._element.classList.remove("collapsing"), this._element.classList.add("collapse"), P.trigger(this._element, "hidden.bs.collapse");}.bind(this), this._element, !0);}setTransitioning(t) {this._isTransitioning = t;}_getConfig(t) {return (t = _objectSpread(_objectSpread({}, J), t)).toggle = Boolean(t.toggle), l("collapse", t, tt), t;}_getDimension() {return this._element.classList.contains("width") ? "width" : "height";}_getParent() {var _this26 = this;let { parent: e } = this._config;e = a(e);const i = `[data-bs-toggle="collapse"][data-bs-parent="${e}"]`;return t.find(i, e).forEach(function (t) {_newArrowCheck(this, _this26);const e = s(t);this._addAriaAndCollapsedClass(e, [t]);}.bind(this)), e;}_addAriaAndCollapsedClass(t, e) {var _this27 = this;if (!t || !e.length) return;const i = t.classList.contains("show");e.forEach(function (t) {_newArrowCheck(this, _this27);i ? t.classList.remove("collapsed") : t.classList.add("collapsed"), t.setAttribute("aria-expanded", i);}.bind(this));}static collapseInterface(t, e) {let i = et.getInstance(t);const n = _objectSpread(_objectSpread(_objectSpread({}, J), U.getDataAttributes(t)), "object" == typeof e && e ? e : {});if (!i && n.toggle && "string" == typeof e && /show|hide/.test(e) && (n.toggle = !1), i || (i = new et(t, n)), "string" == typeof e) {if (void 0 === i[e]) throw new TypeError(`No method named "${e}"`);i[e]();}}static jQueryInterface(t) {return this.each(function () {et.collapseInterface(this, t);});}}P.on(document, "click.bs.collapse.data-api", '[data-bs-toggle="collapse"]', function (e) {var _this28 = this;("A" === e.target.tagName || e.delegateTarget && "A" === e.delegateTarget.tagName) && e.preventDefault();const i = U.getDataAttributes(this),s = n(this);t.find(s).forEach(function (t) {_newArrowCheck(this, _this28);const e = et.getInstance(t);let n;e ? (null === e._parent && "string" == typeof i.parent && (e._config.parent = i.parent, e._parent = e._getParent()), n = "toggle") : n = i, et.collapseInterface(t, n);}.bind(this));}), _(et);var it = "top",nt = "bottom",st = "right",ot = "left",rt = [it, nt, st, ot],at = rt.reduce(function (t, e) {return t.concat([e + "-start", e + "-end"]);}, []),lt = [].concat(rt, ["auto"]).reduce(function (t, e) {return t.concat([e, e + "-start", e + "-end"]);}, []),ct = ["beforeRead", "read", "afterRead", "beforeMain", "main", "afterMain", "beforeWrite", "write", "afterWrite"];function ht(t) {return t ? (t.nodeName || "").toLowerCase() : null;}function dt(t) {if (null == t) return window;if ("[object Window]" !== t.toString()) {var e = t.ownerDocument;return e && e.defaultView || window;}return t;}function ut(t) {return t instanceof dt(t).Element || t instanceof Element;}function ft(t) {return t instanceof dt(t).HTMLElement || t instanceof HTMLElement;}function pt(t) {return "undefined" != typeof ShadowRoot && (t instanceof dt(t).ShadowRoot || t instanceof ShadowRoot);}var mt = { name: "applyStyles", enabled: !0, phase: "write", fn: function (t) {var e = t.state;Object.keys(e.elements).forEach(function (t) {var i = e.styles[t] || {},n = e.attributes[t] || {},s = e.elements[t];ft(s) && ht(s) && (Object.assign(s.style, i), Object.keys(n).forEach(function (t) {var e = n[t];!1 === e ? s.removeAttribute(t) : s.setAttribute(t, !0 === e ? "" : e);}));});}, effect: function (t) {var e = t.state,i = { popper: { position: e.options.strategy, left: "0", top: "0", margin: "0" }, arrow: { position: "absolute" }, reference: {} };return Object.assign(e.elements.popper.style, i.popper), e.styles = i, e.elements.arrow && Object.assign(e.elements.arrow.style, i.arrow), function () {Object.keys(e.elements).forEach(function (t) {var n = e.elements[t],s = e.attributes[t] || {},o = Object.keys(e.styles.hasOwnProperty(t) ? e.styles[t] : i[t]).reduce(function (t, e) {return t[e] = "", t;}, {});ft(n) && ht(n) && (Object.assign(n.style, o), Object.keys(s).forEach(function (t) {n.removeAttribute(t);}));});};}, requires: ["computeStyles"] };function gt(t) {return t.split("-")[0];}function _t(t) {var e = t.getBoundingClientRect();return { width: e.width, height: e.height, top: e.top, right: e.right, bottom: e.bottom, left: e.left, x: e.left, y: e.top };}function bt(t) {var e = _t(t),i = t.offsetWidth,n = t.offsetHeight;return Math.abs(e.width - i) <= 1 && (i = e.width), Math.abs(e.height - n) <= 1 && (n = e.height), { x: t.offsetLeft, y: t.offsetTop, width: i, height: n };}function vt(t, e) {var i = e.getRootNode && e.getRootNode();if (t.contains(e)) return !0;if (i && pt(i)) {var n = e;do {if (n && t.isSameNode(n)) return !0;n = n.parentNode || n.host;} while (n);}return !1;}function yt(t) {return dt(t).getComputedStyle(t);}function wt(t) {return ["table", "td", "th"].indexOf(ht(t)) >= 0;}function Et(t) {return ((ut(t) ? t.ownerDocument : t.document) || window.document).documentElement;}function At(t) {return "html" === ht(t) ? t : t.assignedSlot || t.parentNode || (pt(t) ? t.host : null) || Et(t);}function Tt(t) {return ft(t) && "fixed" !== yt(t).position ? t.offsetParent : null;}function Ot(t) {for (var e = dt(t), i = Tt(t); i && wt(i) && "static" === yt(i).position;) i = Tt(i);return i && ("html" === ht(i) || "body" === ht(i) && "static" === yt(i).position) ? e : i || function (t) {var e = -1 !== navigator.userAgent.toLowerCase().indexOf("firefox");if (-1 !== navigator.userAgent.indexOf("Trident") && ft(t) && "fixed" === yt(t).position) return null;for (var i = At(t); ft(i) && ["html", "body"].indexOf(ht(i)) < 0;) {var n = yt(i);if ("none" !== n.transform || "none" !== n.perspective || "paint" === n.contain || -1 !== ["transform", "perspective"].indexOf(n.willChange) || e && "filter" === n.willChange || e && n.filter && "none" !== n.filter) return i;i = i.parentNode;}return null;}(t) || e;}function Ct(t) {return ["top", "bottom"].indexOf(t) >= 0 ? "x" : "y";}var kt = Math.max,Lt = Math.min,xt = Math.round;function Dt(t, e, i) {return kt(t, Lt(e, i));}function St(t) {return Object.assign({}, { top: 0, right: 0, bottom: 0, left: 0 }, t);}function It(t, e) {return e.reduce(function (e, i) {return e[i] = t, e;}, {});}var Nt = { name: "arrow", enabled: !0, phase: "main", fn: function (t) {var e,i = t.state,n = t.name,s = t.options,o = i.elements.arrow,r = i.modifiersData.popperOffsets,a = gt(i.placement),l = Ct(a),c = [ot, st].indexOf(a) >= 0 ? "height" : "width";if (o && r) {var h = function (t, e) {return St("number" != typeof (t = "function" == typeof t ? t(Object.assign({}, e.rects, { placement: e.placement })) : t) ? t : It(t, rt));}(s.padding, i),d = bt(o),u = "y" === l ? it : ot,f = "y" === l ? nt : st,p = i.rects.reference[c] + i.rects.reference[l] - r[l] - i.rects.popper[c],m = r[l] - i.rects.reference[l],g = Ot(o),_ = g ? "y" === l ? g.clientHeight || 0 : g.clientWidth || 0 : 0,b = p / 2 - m / 2,v = h[u],y = _ - d[c] - h[f],w = _ / 2 - d[c] / 2 + b,E = Dt(v, w, y),A = l;i.modifiersData[n] = ((e = {})[A] = E, e.centerOffset = E - w, e);}}, effect: function (t) {var e = t.state,i = t.options.element,n = void 0 === i ? "[data-popper-arrow]" : i;null != n && ("string" != typeof n || (n = e.elements.popper.querySelector(n))) && vt(e.elements.popper, n) && (e.elements.arrow = n);}, requires: ["popperOffsets"], requiresIfExists: ["preventOverflow"] },jt = { top: "auto", right: "auto", bottom: "auto", left: "auto" };function Mt(t) {var e,i = t.popper,n = t.popperRect,s = t.placement,o = t.offsets,r = t.position,a = t.gpuAcceleration,l = t.adaptive,c = t.roundOffsets,h = !0 === c ? function (t) {var e = t.x,i = t.y,n = window.devicePixelRatio || 1;return { x: xt(xt(e * n) / n) || 0, y: xt(xt(i * n) / n) || 0 };}(o) : "function" == typeof c ? c(o) : o,d = h.x,u = void 0 === d ? 0 : d,f = h.y,p = void 0 === f ? 0 : f,m = o.hasOwnProperty("x"),g = o.hasOwnProperty("y"),_ = ot,b = it,v = window;if (l) {var y = Ot(i),w = "clientHeight",E = "clientWidth";y === dt(i) && "static" !== yt(y = Et(i)).position && (w = "scrollHeight", E = "scrollWidth"), y = y, s === it && (b = nt, p -= y[w] - n.height, p *= a ? 1 : -1), s === ot && (_ = st, u -= y[E] - n.width, u *= a ? 1 : -1);}var A,T = Object.assign({ position: r }, l && jt);return a ? Object.assign({}, T, ((A = {})[b] = g ? "0" : "", A[_] = m ? "0" : "", A.transform = (v.devicePixelRatio || 1) < 2 ? "translate(" + u + "px, " + p + "px)" : "translate3d(" + u + "px, " + p + "px, 0)", A)) : Object.assign({}, T, ((e = {})[b] = g ? p + "px" : "", e[_] = m ? u + "px" : "", e.transform = "", e));}var Pt = { name: "computeStyles", enabled: !0, phase: "beforeWrite", fn: function (t) {var e = t.state,i = t.options,n = i.gpuAcceleration,s = void 0 === n || n,o = i.adaptive,r = void 0 === o || o,a = i.roundOffsets,l = void 0 === a || a,c = { placement: gt(e.placement), popper: e.elements.popper, popperRect: e.rects.popper, gpuAcceleration: s };null != e.modifiersData.popperOffsets && (e.styles.popper = Object.assign({}, e.styles.popper, Mt(Object.assign({}, c, { offsets: e.modifiersData.popperOffsets, position: e.options.strategy, adaptive: r, roundOffsets: l })))), null != e.modifiersData.arrow && (e.styles.arrow = Object.assign({}, e.styles.arrow, Mt(Object.assign({}, c, { offsets: e.modifiersData.arrow, position: "absolute", adaptive: !1, roundOffsets: l })))), e.attributes.popper = Object.assign({}, e.attributes.popper, { "data-popper-placement": e.placement });}, data: {} },Ht = { passive: !0 },Rt = { name: "eventListeners", enabled: !0, phase: "write", fn: function () {}, effect: function (t) {var e = t.state,i = t.instance,n = t.options,s = n.scroll,o = void 0 === s || s,r = n.resize,a = void 0 === r || r,l = dt(e.elements.popper),c = [].concat(e.scrollParents.reference, e.scrollParents.popper);return o && c.forEach(function (t) {t.addEventListener("scroll", i.update, Ht);}), a && l.addEventListener("resize", i.update, Ht), function () {o && c.forEach(function (t) {t.removeEventListener("scroll", i.update, Ht);}), a && l.removeEventListener("resize", i.update, Ht);};}, data: {} },Bt = { left: "right", right: "left", bottom: "top", top: "bottom" };function Wt(t) {return t.replace(/left|right|bottom|top/g, function (t) {return Bt[t];});}var qt = { start: "end", end: "start" };function zt(t) {return t.replace(/start|end/g, function (t) {return qt[t];});}function $t(t) {var e = dt(t);return { scrollLeft: e.pageXOffset, scrollTop: e.pageYOffset };}function Ut(t) {return _t(Et(t)).left + $t(t).scrollLeft;}function Ft(t) {var e = yt(t),i = e.overflow,n = e.overflowX,s = e.overflowY;return /auto|scroll|overlay|hidden/.test(i + s + n);}function Vt(t, e) {var i;void 0 === e && (e = []);var n = function t(e) {return ["html", "body", "#document"].indexOf(ht(e)) >= 0 ? e.ownerDocument.body : ft(e) && Ft(e) ? e : t(At(e));}(t),s = n === (null == (i = t.ownerDocument) ? void 0 : i.body),o = dt(n),r = s ? [o].concat(o.visualViewport || [], Ft(n) ? n : []) : n,a = e.concat(r);return s ? a : a.concat(Vt(At(r)));}function Kt(t) {return Object.assign({}, t, { left: t.x, top: t.y, right: t.x + t.width, bottom: t.y + t.height });}function Xt(t, e) {return "viewport" === e ? Kt(function (t) {var e = dt(t),i = Et(t),n = e.visualViewport,s = i.clientWidth,o = i.clientHeight,r = 0,a = 0;return n && (s = n.width, o = n.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (r = n.offsetLeft, a = n.offsetTop)), { width: s, height: o, x: r + Ut(t), y: a };}(t)) : ft(e) ? function (t) {var e = _t(t);return e.top = e.top + t.clientTop, e.left = e.left + t.clientLeft, e.bottom = e.top + t.clientHeight, e.right = e.left + t.clientWidth, e.width = t.clientWidth, e.height = t.clientHeight, e.x = e.left, e.y = e.top, e;}(e) : Kt(function (t) {var e,i = Et(t),n = $t(t),s = null == (e = t.ownerDocument) ? void 0 : e.body,o = kt(i.scrollWidth, i.clientWidth, s ? s.scrollWidth : 0, s ? s.clientWidth : 0),r = kt(i.scrollHeight, i.clientHeight, s ? s.scrollHeight : 0, s ? s.clientHeight : 0),a = -n.scrollLeft + Ut(t),l = -n.scrollTop;return "rtl" === yt(s || i).direction && (a += kt(i.clientWidth, s ? s.clientWidth : 0) - o), { width: o, height: r, x: a, y: l };}(Et(t)));}function Yt(t) {return t.split("-")[1];}function Qt(t) {var e,i = t.reference,n = t.element,s = t.placement,o = s ? gt(s) : null,r = s ? Yt(s) : null,a = i.x + i.width / 2 - n.width / 2,l = i.y + i.height / 2 - n.height / 2;switch (o) {case it:e = { x: a, y: i.y - n.height };break;case nt:e = { x: a, y: i.y + i.height };break;case st:e = { x: i.x + i.width, y: l };break;case ot:e = { x: i.x - n.width, y: l };break;default:e = { x: i.x, y: i.y };}var c = o ? Ct(o) : null;if (null != c) {var h = "y" === c ? "height" : "width";switch (r) {case "start":e[c] = e[c] - (i[h] / 2 - n[h] / 2);break;case "end":e[c] = e[c] + (i[h] / 2 - n[h] / 2);}}return e;}function Gt(t, e) {void 0 === e && (e = {});var i = e,n = i.placement,s = void 0 === n ? t.placement : n,o = i.boundary,r = void 0 === o ? "clippingParents" : o,a = i.rootBoundary,l = void 0 === a ? "viewport" : a,c = i.elementContext,h = void 0 === c ? "popper" : c,d = i.altBoundary,u = void 0 !== d && d,f = i.padding,p = void 0 === f ? 0 : f,m = St("number" != typeof p ? p : It(p, rt)),g = "popper" === h ? "reference" : "popper",_ = t.elements.reference,b = t.rects.popper,v = t.elements[u ? g : h],y = function (t, e, i) {var n = "clippingParents" === e ? function (t) {var e = Vt(At(t)),i = ["absolute", "fixed"].indexOf(yt(t).position) >= 0 && ft(t) ? Ot(t) : t;return ut(i) ? e.filter(function (t) {return ut(t) && vt(t, i) && "body" !== ht(t);}) : [];}(t) : [].concat(e),s = [].concat(n, [i]),o = s[0],r = s.reduce(function (e, i) {var n = Xt(t, i);return e.top = kt(n.top, e.top), e.right = Lt(n.right, e.right), e.bottom = Lt(n.bottom, e.bottom), e.left = kt(n.left, e.left), e;}, Xt(t, o));return r.width = r.right - r.left, r.height = r.bottom - r.top, r.x = r.left, r.y = r.top, r;}(ut(v) ? v : v.contextElement || Et(t.elements.popper), r, l),w = _t(_),E = Qt({ reference: w, element: b, strategy: "absolute", placement: s }),A = Kt(Object.assign({}, b, E)),T = "popper" === h ? A : w,O = { top: y.top - T.top + m.top, bottom: T.bottom - y.bottom + m.bottom, left: y.left - T.left + m.left, right: T.right - y.right + m.right },C = t.modifiersData.offset;if ("popper" === h && C) {var k = C[s];Object.keys(O).forEach(function (t) {var e = [st, nt].indexOf(t) >= 0 ? 1 : -1,i = [it, nt].indexOf(t) >= 0 ? "y" : "x";O[t] += k[i] * e;});}return O;}function Zt(t, e) {void 0 === e && (e = {});var i = e,n = i.placement,s = i.boundary,o = i.rootBoundary,r = i.padding,a = i.flipVariations,l = i.allowedAutoPlacements,c = void 0 === l ? lt : l,h = Yt(n),d = h ? a ? at : at.filter(function (t) {return Yt(t) === h;}) : rt,u = d.filter(function (t) {return c.indexOf(t) >= 0;});0 === u.length && (u = d);var f = u.reduce(function (e, i) {return e[i] = Gt(t, { placement: i, boundary: s, rootBoundary: o, padding: r })[gt(i)], e;}, {});return Object.keys(f).sort(function (t, e) {return f[t] - f[e];});}var Jt = { name: "flip", enabled: !0, phase: "main", fn: function (t) {var e = t.state,i = t.options,n = t.name;if (!e.modifiersData[n]._skip) {for (var s = i.mainAxis, o = void 0 === s || s, r = i.altAxis, a = void 0 === r || r, l = i.fallbackPlacements, c = i.padding, h = i.boundary, d = i.rootBoundary, u = i.altBoundary, f = i.flipVariations, p = void 0 === f || f, m = i.allowedAutoPlacements, g = e.options.placement, _ = gt(g), b = l || (_ !== g && p ? function (t) {if ("auto" === gt(t)) return [];var e = Wt(t);return [zt(t), e, zt(e)];}(g) : [Wt(g)]), v = [g].concat(b).reduce(function (t, i) {return t.concat("auto" === gt(i) ? Zt(e, { placement: i, boundary: h, rootBoundary: d, padding: c, flipVariations: p, allowedAutoPlacements: m }) : i);}, []), y = e.rects.reference, w = e.rects.popper, E = new Map(), A = !0, T = v[0], O = 0; O < v.length; O++) {var C = v[O],k = gt(C),L = "start" === Yt(C),x = [it, nt].indexOf(k) >= 0,D = x ? "width" : "height",S = Gt(e, { placement: C, boundary: h, rootBoundary: d, altBoundary: u, padding: c }),I = x ? L ? st : ot : L ? nt : it;y[D] > w[D] && (I = Wt(I));var N = Wt(I),j = [];if (o && j.push(S[k] <= 0), a && j.push(S[I] <= 0, S[N] <= 0), j.every(function (t) {return t;})) {T = C, A = !1;break;}E.set(C, j);}if (A) for (var M = function (t) {var e = v.find(function (e) {var i = E.get(e);if (i) return i.slice(0, t).every(function (t) {return t;});});if (e) return T = e, "break";}, P = p ? 3 : 1; P > 0 && "break" !== M(P); P--);e.placement !== T && (e.modifiersData[n]._skip = !0, e.placement = T, e.reset = !0);}}, requiresIfExists: ["offset"], data: { _skip: !1 } };function te(t, e, i) {return void 0 === i && (i = { x: 0, y: 0 }), { top: t.top - e.height - i.y, right: t.right - e.width + i.x, bottom: t.bottom - e.height + i.y, left: t.left - e.width - i.x };}function ee(t) {return [it, st, nt, ot].some(function (e) {return t[e] >= 0;});}var ie = { name: "hide", enabled: !0, phase: "main", requiresIfExists: ["preventOverflow"], fn: function (t) {var e = t.state,i = t.name,n = e.rects.reference,s = e.rects.popper,o = e.modifiersData.preventOverflow,r = Gt(e, { elementContext: "reference" }),a = Gt(e, { altBoundary: !0 }),l = te(r, n),c = te(a, s, o),h = ee(l),d = ee(c);e.modifiersData[i] = { referenceClippingOffsets: l, popperEscapeOffsets: c, isReferenceHidden: h, hasPopperEscaped: d }, e.attributes.popper = Object.assign({}, e.attributes.popper, { "data-popper-reference-hidden": h, "data-popper-escaped": d });} },ne = { name: "offset", enabled: !0, phase: "main", requires: ["popperOffsets"], fn: function (t) {var e = t.state,i = t.options,n = t.name,s = i.offset,o = void 0 === s ? [0, 0] : s,r = lt.reduce(function (t, i) {return t[i] = function (t, e, i) {var n = gt(t),s = [ot, it].indexOf(n) >= 0 ? -1 : 1,o = "function" == typeof i ? i(Object.assign({}, e, { placement: t })) : i,r = o[0],a = o[1];return r = r || 0, a = (a || 0) * s, [ot, st].indexOf(n) >= 0 ? { x: a, y: r } : { x: r, y: a };}(i, e.rects, o), t;}, {}),a = r[e.placement],l = a.x,c = a.y;null != e.modifiersData.popperOffsets && (e.modifiersData.popperOffsets.x += l, e.modifiersData.popperOffsets.y += c), e.modifiersData[n] = r;} },se = { name: "popperOffsets", enabled: !0, phase: "read", fn: function (t) {var e = t.state,i = t.name;e.modifiersData[i] = Qt({ reference: e.rects.reference, element: e.rects.popper, strategy: "absolute", placement: e.placement });}, data: {} },oe = { name: "preventOverflow", enabled: !0, phase: "main", fn: function (t) {var e = t.state,i = t.options,n = t.name,s = i.mainAxis,o = void 0 === s || s,r = i.altAxis,a = void 0 !== r && r,l = i.boundary,c = i.rootBoundary,h = i.altBoundary,d = i.padding,u = i.tether,f = void 0 === u || u,p = i.tetherOffset,m = void 0 === p ? 0 : p,g = Gt(e, { boundary: l, rootBoundary: c, padding: d, altBoundary: h }),_ = gt(e.placement),b = Yt(e.placement),v = !b,y = Ct(_),w = "x" === y ? "y" : "x",E = e.modifiersData.popperOffsets,A = e.rects.reference,T = e.rects.popper,O = "function" == typeof m ? m(Object.assign({}, e.rects, { placement: e.placement })) : m,C = { x: 0, y: 0 };if (E) {if (o || a) {var k = "y" === y ? it : ot,L = "y" === y ? nt : st,x = "y" === y ? "height" : "width",D = E[y],S = E[y] + g[k],I = E[y] - g[L],N = f ? -T[x] / 2 : 0,j = "start" === b ? A[x] : T[x],M = "start" === b ? -T[x] : -A[x],P = e.elements.arrow,H = f && P ? bt(P) : { width: 0, height: 0 },R = e.modifiersData["arrow#persistent"] ? e.modifiersData["arrow#persistent"].padding : { top: 0, right: 0, bottom: 0, left: 0 },B = R[k],W = R[L],q = Dt(0, A[x], H[x]),z = v ? A[x] / 2 - N - q - B - O : j - q - B - O,$ = v ? -A[x] / 2 + N + q + W + O : M + q + W + O,U = e.elements.arrow && Ot(e.elements.arrow),F = U ? "y" === y ? U.clientTop || 0 : U.clientLeft || 0 : 0,V = e.modifiersData.offset ? e.modifiersData.offset[e.placement][y] : 0,K = E[y] + z - V - F,X = E[y] + $ - V;if (o) {var Y = Dt(f ? Lt(S, K) : S, D, f ? kt(I, X) : I);E[y] = Y, C[y] = Y - D;}if (a) {var Q = "x" === y ? it : ot,G = "x" === y ? nt : st,Z = E[w],J = Z + g[Q],tt = Z - g[G],et = Dt(f ? Lt(J, K) : J, Z, f ? kt(tt, X) : tt);E[w] = et, C[w] = et - Z;}}e.modifiersData[n] = C;}}, requiresIfExists: ["offset"] };function re(t, e, i) {void 0 === i && (i = !1);var n,s,o = Et(e),r = _t(t),a = ft(e),l = { scrollLeft: 0, scrollTop: 0 },c = { x: 0, y: 0 };return (a || !a && !i) && (("body" !== ht(e) || Ft(o)) && (l = (n = e) !== dt(n) && ft(n) ? { scrollLeft: (s = n).scrollLeft, scrollTop: s.scrollTop } : $t(n)), ft(e) ? ((c = _t(e)).x += e.clientLeft, c.y += e.clientTop) : o && (c.x = Ut(o))), { x: r.left + l.scrollLeft - c.x, y: r.top + l.scrollTop - c.y, width: r.width, height: r.height };}var ae = { placement: "bottom", modifiers: [], strategy: "absolute" };function le() {for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++) e[i] = arguments[i];return !e.some(function (t) {return !(t && "function" == typeof t.getBoundingClientRect);});}function ce(t) {void 0 === t && (t = {});var e = t,i = e.defaultModifiers,n = void 0 === i ? [] : i,s = e.defaultOptions,o = void 0 === s ? ae : s;return function (t, e, i) {void 0 === i && (i = o);var s,r,a = { placement: "bottom", orderedModifiers: [], options: Object.assign({}, ae, o), modifiersData: {}, elements: { reference: t, popper: e }, attributes: {}, styles: {} },l = [],c = !1,h = { state: a, setOptions: function (i) {d(), a.options = Object.assign({}, o, a.options, i), a.scrollParents = { reference: ut(t) ? Vt(t) : t.contextElement ? Vt(t.contextElement) : [], popper: Vt(e) };var s,r,c = function (t) {var e = function (t) {var e = new Map(),i = new Set(),n = [];return t.forEach(function (t) {e.set(t.name, t);}), t.forEach(function (t) {i.has(t.name) || function t(s) {i.add(s.name), [].concat(s.requires || [], s.requiresIfExists || []).forEach(function (n) {if (!i.has(n)) {var s = e.get(n);s && t(s);}}), n.push(s);}(t);}), n;}(t);return ct.reduce(function (t, i) {return t.concat(e.filter(function (t) {return t.phase === i;}));}, []);}((s = [].concat(n, a.options.modifiers), r = s.reduce(function (t, e) {var i = t[e.name];return t[e.name] = i ? Object.assign({}, i, e, { options: Object.assign({}, i.options, e.options), data: Object.assign({}, i.data, e.data) }) : e, t;}, {}), Object.keys(r).map(function (t) {return r[t];})));return a.orderedModifiers = c.filter(function (t) {return t.enabled;}), a.orderedModifiers.forEach(function (t) {var e = t.name,i = t.options,n = void 0 === i ? {} : i,s = t.effect;if ("function" == typeof s) {var o = s({ state: a, name: e, instance: h, options: n });l.push(o || function () {});}}), h.update();}, forceUpdate: function () {if (!c) {var t = a.elements,e = t.reference,i = t.popper;if (le(e, i)) {a.rects = { reference: re(e, Ot(i), "fixed" === a.options.strategy), popper: bt(i) }, a.reset = !1, a.placement = a.options.placement, a.orderedModifiers.forEach(function (t) {return a.modifiersData[t.name] = Object.assign({}, t.data);});for (var n = 0; n < a.orderedModifiers.length; n++) if (!0 !== a.reset) {var s = a.orderedModifiers[n],o = s.fn,r = s.options,l = void 0 === r ? {} : r,d = s.name;"function" == typeof o && (a = o({ state: a, options: l, name: d, instance: h }) || a);} else a.reset = !1, n = -1;}}}, update: (s = function () {return new Promise(function (t) {h.forceUpdate(), t(a);});}, function () {return r || (r = new Promise(function (t) {Promise.resolve().then(function () {r = void 0, t(s());});})), r;}), destroy: function () {d(), c = !0;} };if (!le(t, e)) return h;function d() {l.forEach(function (t) {return t();}), l = [];}return h.setOptions(i).then(function (t) {!c && i.onFirstUpdate && i.onFirstUpdate(t);}), h;};}var he = ce(),de = ce({ defaultModifiers: [Rt, se, Pt, mt] }),ue = ce({ defaultModifiers: [Rt, se, Pt, mt, ne, Jt, oe, Nt, ie] }),fe = Object.freeze({ __proto__: null, popperGenerator: ce, detectOverflow: Gt, createPopperBase: he, createPopper: ue, createPopperLite: de, top: it, bottom: nt, right: st, left: ot, auto: "auto", basePlacements: rt, start: "start", end: "end", clippingParents: "clippingParents", viewport: "viewport", popper: "popper", reference: "reference", variationPlacements: at, placements: lt, beforeRead: "beforeRead", read: "read", afterRead: "afterRead", beforeMain: "beforeMain", main: "main", afterMain: "afterMain", beforeWrite: "beforeWrite", write: "write", afterWrite: "afterWrite", modifierPhases: ct, applyStyles: mt, arrow: Nt, computeStyles: Pt, eventListeners: Rt, flip: Jt, hide: ie, offset: ne, popperOffsets: se, preventOverflow: oe });const pe = new RegExp("ArrowUp|ArrowDown|Escape"),me = g() ? "top-end" : "top-start",ge = g() ? "top-start" : "top-end",_e = g() ? "bottom-end" : "bottom-start",be = g() ? "bottom-start" : "bottom-end",ve = g() ? "left-start" : "right-start",ye = g() ? "right-start" : "left-start",we = { offset: [0, 2], boundary: "clippingParents", reference: "toggle", display: "dynamic", popperConfig: null, autoClose: !0 },Ee = { offset: "(array|string|function)", boundary: "(string|element)", reference: "(string|element|object)", display: "string", popperConfig: "(null|object|function)", autoClose: "(boolean|string)" };class Ae extends B {constructor(t, e) {super(t), this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();}static get Default() {return we;}static get DefaultType() {return Ee;}static get NAME() {return "dropdown";}toggle() {h(this._element) || (this._element.classList.contains("show") ? this.hide() : this.show());}show() {var _this29 = this;if (h(this._element) || this._menu.classList.contains("show")) return;const t = Ae.getParentFromElement(this._element),e = { relatedTarget: this._element };if (!P.trigger(this._element, "show.bs.dropdown", e).defaultPrevented) {if (this._inNavbar) U.setDataAttribute(this._menu, "popper", "none");else {if (void 0 === fe) throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e = this._element;"parent" === this._config.reference ? e = t : r(this._config.reference) ? e = a(this._config.reference) : "object" == typeof this._config.reference && (e = this._config.reference);const i = this._getPopperConfig(),n = i.modifiers.find(function (t) {_newArrowCheck(this, _this29);return "applyStyles" === t.name && !1 === t.enabled;}.bind(this));this._popper = ue(e, this._menu, i), n && U.setDataAttribute(this._menu, "popper", "static");}"ontouchstart" in document.documentElement && !t.closest(".navbar-nav") && [].concat(...document.body.children).forEach(function (t) {_newArrowCheck(this, _this29);return P.on(t, "mouseover", u);}.bind(this)), this._element.focus(), this._element.setAttribute("aria-expanded", !0), this._menu.classList.toggle("show"), this._element.classList.toggle("show"), P.trigger(this._element, "shown.bs.dropdown", e);}}hide() {if (h(this._element) || !this._menu.classList.contains("show")) return;const t = { relatedTarget: this._element };this._completeHide(t);}dispose() {this._popper && this._popper.destroy(), super.dispose();}update() {this._inNavbar = this._detectNavbar(), this._popper && this._popper.update();}_addEventListeners() {var _this30 = this;P.on(this._element, "click.bs.dropdown", function (t) {_newArrowCheck(this, _this30);t.preventDefault(), this.toggle();}.bind(this));}_completeHide(t) {var _this31 = this;P.trigger(this._element, "hide.bs.dropdown", t).defaultPrevented || ("ontouchstart" in document.documentElement && [].concat(...document.body.children).forEach(function (t) {_newArrowCheck(this, _this31);return P.off(t, "mouseover", u);}.bind(this)), this._popper && this._popper.destroy(), this._menu.classList.remove("show"), this._element.classList.remove("show"), this._element.setAttribute("aria-expanded", "false"), U.removeDataAttribute(this._menu, "popper"), P.trigger(this._element, "hidden.bs.dropdown", t));}_getConfig(t) {if (t = _objectSpread(_objectSpread(_objectSpread({}, this.constructor.Default), U.getDataAttributes(this._element)), t), l("dropdown", t, this.constructor.DefaultType), "object" == typeof t.reference && !r(t.reference) && "function" != typeof t.reference.getBoundingClientRect) throw new TypeError("dropdown".toUpperCase() + ': Option "reference" provided type "object" without a required "getBoundingClientRect" method.');return t;}_getMenuElement() {return t.next(this._element, ".dropdown-menu")[0];}_getPlacement() {const t = this._element.parentNode;if (t.classList.contains("dropend")) return ve;if (t.classList.contains("dropstart")) return ye;const e = "end" === getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup") ? e ? ge : me : e ? be : _e;}_detectNavbar() {return null !== this._element.closest(".navbar");}_getOffset() {var _this32 = this;const { offset: t } = this._config;return "string" == typeof t ? t.split(",").map(function (t) {_newArrowCheck(this, _this32);return Number.parseInt(t, 10);}.bind(this)) : "function" == typeof t ? function (e) {_newArrowCheck(this, _this32);return t(e, this._element);}.bind(this) : t;}_getPopperConfig() {const t = { placement: this._getPlacement(), modifiers: [{ name: "preventOverflow", options: { boundary: this._config.boundary } }, { name: "offset", options: { offset: this._getOffset() } }] };return "static" === this._config.display && (t.modifiers = [{ name: "applyStyles", enabled: !1 }]), _objectSpread(_objectSpread({}, t), "function" == typeof this._config.popperConfig ? this._config.popperConfig(t) : this._config.popperConfig);}_selectMenuItem({ key: e, target: i }) {const n = t.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)", this._menu).filter(c);n.length && y(n, i, "ArrowDown" === e, !n.includes(i)).focus();}static dropdownInterface(t, e) {const i = Ae.getOrCreateInstance(t, e);if ("string" == typeof e) {if (void 0 === i[e]) throw new TypeError(`No method named "${e}"`);i[e]();}}static jQueryInterface(t) {return this.each(function () {Ae.dropdownInterface(this, t);});}static clearMenus(e) {if (e && (2 === e.button || "keyup" === e.type && "Tab" !== e.key)) return;const i = t.find('[data-bs-toggle="dropdown"]');for (let t = 0, n = i.length; t < n; t++) {const n = Ae.getInstance(i[t]);if (!n || !1 === n._config.autoClose) continue;if (!n._element.classList.contains("show")) continue;const s = { relatedTarget: n._element };if (e) {const t = e.composedPath(),i = t.includes(n._menu);if (t.includes(n._element) || "inside" === n._config.autoClose && !i || "outside" === n._config.autoClose && i) continue;if (n._menu.contains(e.target) && ("keyup" === e.type && "Tab" === e.key || /input|select|option|textarea|form/i.test(e.target.tagName))) continue;"click" === e.type && (s.clickEvent = e);}n._completeHide(s);}}static getParentFromElement(t) {return s(t) || t.parentNode;}static dataApiKeydownHandler(e) {var _this33 = this;if (/input|textarea/i.test(e.target.tagName) ? "Space" === e.key || "Escape" !== e.key && ("ArrowDown" !== e.key && "ArrowUp" !== e.key || e.target.closest(".dropdown-menu")) : !pe.test(e.key)) return;const i = this.classList.contains("show");if (!i && "Escape" === e.key) return;if (e.preventDefault(), e.stopPropagation(), h(this)) return;const n = function n() {_newArrowCheck(this, _this33);return this.matches('[data-bs-toggle="dropdown"]') ? this : t.prev(this, '[data-bs-toggle="dropdown"]')[0];}.bind(this);return "Escape" === e.key ? (n().focus(), void Ae.clearMenus()) : "ArrowUp" === e.key || "ArrowDown" === e.key ? (i || n().click(), void Ae.getInstance(n())._selectMenuItem(e)) : void (i && "Space" !== e.key || Ae.clearMenus());}}P.on(document, "keydown.bs.dropdown.data-api", '[data-bs-toggle="dropdown"]', Ae.dataApiKeydownHandler), P.on(document, "keydown.bs.dropdown.data-api", ".dropdown-menu", Ae.dataApiKeydownHandler), P.on(document, "click.bs.dropdown.data-api", Ae.clearMenus), P.on(document, "keyup.bs.dropdown.data-api", Ae.clearMenus), P.on(document, "click.bs.dropdown.data-api", '[data-bs-toggle="dropdown"]', function (t) {t.preventDefault(), Ae.dropdownInterface(this);}), _(Ae);class Te {constructor() {this._element = document.body;}getWidth() {const t = document.documentElement.clientWidth;return Math.abs(window.innerWidth - t);}hide() {var _this34 = this;const t = this.getWidth();this._disableOverFlow(), this._setElementAttributes(this._element, "paddingRight", function (e) {_newArrowCheck(this, _this34);return e + t;}.bind(this)), this._setElementAttributes(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top", "paddingRight", function (e) {_newArrowCheck(this, _this34);return e + t;}.bind(this)), this._setElementAttributes(".sticky-top", "marginRight", function (e) {_newArrowCheck(this, _this34);return e - t;}.bind(this));}_disableOverFlow() {this._saveInitialAttribute(this._element, "overflow"), this._element.style.overflow = "hidden";}_setElementAttributes(t, e, i) {var _this35 = this;const n = this.getWidth();this._applyManipulationCallback(t, function (t) {_newArrowCheck(this, _this35);if (t !== this._element && window.innerWidth > t.clientWidth + n) return;this._saveInitialAttribute(t, e);const s = window.getComputedStyle(t)[e];t.style[e] = i(Number.parseFloat(s)) + "px";}.bind(this));}reset() {this._resetElementAttributes(this._element, "overflow"), this._resetElementAttributes(this._element, "paddingRight"), this._resetElementAttributes(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top", "paddingRight"), this._resetElementAttributes(".sticky-top", "marginRight");}_saveInitialAttribute(t, e) {const i = t.style[e];i && U.setDataAttribute(t, e, i);}_resetElementAttributes(t, e) {var _this36 = this;this._applyManipulationCallback(t, function (t) {_newArrowCheck(this, _this36);const i = U.getDataAttribute(t, e);void 0 === i ? t.style.removeProperty(e) : (U.removeDataAttribute(t, e), t.style[e] = i);}.bind(this));}_applyManipulationCallback(e, i) {r(e) ? i(e) : t.find(e, this._element).forEach(i);}isOverflowing() {return this.getWidth() > 0;}}const Oe = { isVisible: !0, isAnimated: !1, rootElement: "body", clickCallback: null },Ce = { isVisible: "boolean", isAnimated: "boolean", rootElement: "(element|string)", clickCallback: "(function|null)" };class ke {constructor(t) {this._config = this._getConfig(t), this._isAppended = !1, this._element = null;}show(t) {var _this37 = this;this._config.isVisible ? (this._append(), this._config.isAnimated && f(this._getElement()), this._getElement().classList.add("show"), this._emulateAnimation(function () {_newArrowCheck(this, _this37);b(t);}.bind(this))) : b(t);}hide(t) {var _this38 = this;this._config.isVisible ? (this._getElement().classList.remove("show"), this._emulateAnimation(function () {_newArrowCheck(this, _this38);this.dispose(), b(t);}.bind(this))) : b(t);}_getElement() {if (!this._element) {const t = document.createElement("div");t.className = "modal-backdrop", this._config.isAnimated && t.classList.add("fade"), this._element = t;}return this._element;}_getConfig(t) {return (t = _objectSpread(_objectSpread({}, Oe), "object" == typeof t ? t : {})).rootElement = a(t.rootElement), l("backdrop", t, Ce), t;}_append() {var _this39 = this;this._isAppended || (this._config.rootElement.appendChild(this._getElement()), P.on(this._getElement(), "mousedown.bs.backdrop", function () {_newArrowCheck(this, _this39);b(this._config.clickCallback);}.bind(this)), this._isAppended = !0);}dispose() {this._isAppended && (P.off(this._element, "mousedown.bs.backdrop"), this._element.remove(), this._isAppended = !1);}_emulateAnimation(t) {v(t, this._getElement(), this._config.isAnimated);}}const Le = { backdrop: !0, keyboard: !0, focus: !0 },xe = { backdrop: "(boolean|string)", keyboard: "boolean", focus: "boolean" };class De extends B {constructor(e, i) {super(e), this._config = this._getConfig(i), this._dialog = t.findOne(".modal-dialog", this._element), this._backdrop = this._initializeBackDrop(), this._isShown = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollBar = new Te();}static get Default() {return Le;}static get NAME() {return "modal";}toggle(t) {return this._isShown ? this.hide() : this.show(t);}show(t) {var _this40 = this;this._isShown || this._isTransitioning || P.trigger(this._element, "show.bs.modal", { relatedTarget: t }).defaultPrevented || (this._isShown = !0, this._isAnimated() && (this._isTransitioning = !0), this._scrollBar.hide(), document.body.classList.add("modal-open"), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), P.on(this._element, "click.dismiss.bs.modal", '[data-bs-dismiss="modal"]', function (t) {_newArrowCheck(this, _this40);return this.hide(t);}.bind(this)), P.on(this._dialog, "mousedown.dismiss.bs.modal", function () {var _this41 = this;_newArrowCheck(this, _this40);P.one(this._element, "mouseup.dismiss.bs.modal", function (t) {_newArrowCheck(this, _this41);t.target === this._element && (this._ignoreBackdropClick = !0);}.bind(this));}.bind(this)), this._showBackdrop(function () {_newArrowCheck(this, _this40);return this._showElement(t);}.bind(this)));}hide(t) {var _this42 = this;if (t && ["A", "AREA"].includes(t.target.tagName) && t.preventDefault(), !this._isShown || this._isTransitioning) return;if (P.trigger(this._element, "hide.bs.modal").defaultPrevented) return;this._isShown = !1;const e = this._isAnimated();e && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), P.off(document, "focusin.bs.modal"), this._element.classList.remove("show"), P.off(this._element, "click.dismiss.bs.modal"), P.off(this._dialog, "mousedown.dismiss.bs.modal"), this._queueCallback(function () {_newArrowCheck(this, _this42);return this._hideModal();}.bind(this), this._element, e);}dispose() {var _this43 = this;[window, this._dialog].forEach(function (t) {_newArrowCheck(this, _this43);return P.off(t, ".bs.modal");}.bind(this)), this._backdrop.dispose(), super.dispose(), P.off(document, "focusin.bs.modal");}handleUpdate() {this._adjustDialog();}_initializeBackDrop() {return new ke({ isVisible: Boolean(this._config.backdrop), isAnimated: this._isAnimated() });}_getConfig(t) {return t = _objectSpread(_objectSpread(_objectSpread({}, Le), U.getDataAttributes(this._element)), "object" == typeof t ? t : {}), l("modal", t, xe), t;}_showElement(e) {var _this44 = this;const i = this._isAnimated(),n = t.findOne(".modal-body", this._dialog);this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", !0), this._element.setAttribute("role", "dialog"), this._element.scrollTop = 0, n && (n.scrollTop = 0), i && f(this._element), this._element.classList.add("show"), this._config.focus && this._enforceFocus(), this._queueCallback(function () {_newArrowCheck(this, _this44);this._config.focus && this._element.focus(), this._isTransitioning = !1, P.trigger(this._element, "shown.bs.modal", { relatedTarget: e });}.bind(this), this._dialog, i);}_enforceFocus() {var _this45 = this;P.off(document, "focusin.bs.modal"), P.on(document, "focusin.bs.modal", function (t) {_newArrowCheck(this, _this45);document === t.target || this._element === t.target || this._element.contains(t.target) || this._element.focus();}.bind(this));}_setEscapeEvent() {var _this46 = this;this._isShown ? P.on(this._element, "keydown.dismiss.bs.modal", function (t) {_newArrowCheck(this, _this46);this._config.keyboard && "Escape" === t.key ? (t.preventDefault(), this.hide()) : this._config.keyboard || "Escape" !== t.key || this._triggerBackdropTransition();}.bind(this)) : P.off(this._element, "keydown.dismiss.bs.modal");}_setResizeEvent() {var _this47 = this;this._isShown ? P.on(window, "resize.bs.modal", function () {_newArrowCheck(this, _this47);return this._adjustDialog();}.bind(this)) : P.off(window, "resize.bs.modal");}_hideModal() {var _this48 = this;this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._element.removeAttribute("aria-modal"), this._element.removeAttribute("role"), this._isTransitioning = !1, this._backdrop.hide(function () {_newArrowCheck(this, _this48);document.body.classList.remove("modal-open"), this._resetAdjustments(), this._scrollBar.reset(), P.trigger(this._element, "hidden.bs.modal");}.bind(this));}_showBackdrop(t) {var _this49 = this;P.on(this._element, "click.dismiss.bs.modal", function (t) {_newArrowCheck(this, _this49);this._ignoreBackdropClick ? this._ignoreBackdropClick = !1 : t.target === t.currentTarget && (!0 === this._config.backdrop ? this.hide() : "static" === this._config.backdrop && this._triggerBackdropTransition());}.bind(this)), this._backdrop.show(t);}_isAnimated() {return this._element.classList.contains("fade");}_triggerBackdropTransition() {var _this50 = this;if (P.trigger(this._element, "hidePrevented.bs.modal").defaultPrevented) return;const { classList: t, scrollHeight: e, style: i } = this._element,n = e > document.documentElement.clientHeight;!n && "hidden" === i.overflowY || t.contains("modal-static") || (n || (i.overflowY = "hidden"), t.add("modal-static"), this._queueCallback(function () {var _this51 = this;_newArrowCheck(this, _this50);t.remove("modal-static"), n || this._queueCallback(function () {_newArrowCheck(this, _this51);i.overflowY = "";}.bind(this), this._dialog);}.bind(this), this._dialog), this._element.focus());}_adjustDialog() {const t = this._element.scrollHeight > document.documentElement.clientHeight,e = this._scrollBar.getWidth(),i = e > 0;(!i && t && !g() || i && !t && g()) && (this._element.style.paddingLeft = e + "px"), (i && !t && !g() || !i && t && g()) && (this._element.style.paddingRight = e + "px");}_resetAdjustments() {this._element.style.paddingLeft = "", this._element.style.paddingRight = "";}static jQueryInterface(t, e) {return this.each(function () {const i = De.getOrCreateInstance(this, t);if ("string" == typeof t) {if (void 0 === i[t]) throw new TypeError(`No method named "${t}"`);i[t](e);}});}}P.on(document, "click.bs.modal.data-api", '[data-bs-toggle="modal"]', function (t) {var _this52 = this;const e = s(this);["A", "AREA"].includes(this.tagName) && t.preventDefault(), P.one(e, "show.bs.modal", function (t) {var _this53 = this;_newArrowCheck(this, _this52);t.defaultPrevented || P.one(e, "hidden.bs.modal", function () {_newArrowCheck(this, _this53);c(this) && this.focus();}.bind(this));}.bind(this)), De.getOrCreateInstance(e).toggle(this);}), _(De);const Se = { backdrop: !0, keyboard: !0, scroll: !1 },Ie = { backdrop: "boolean", keyboard: "boolean", scroll: "boolean" };class Ne extends B {constructor(t, e) {super(t), this._config = this._getConfig(e), this._isShown = !1, this._backdrop = this._initializeBackDrop(), this._addEventListeners();}static get NAME() {return "offcanvas";}static get Default() {return Se;}toggle(t) {return this._isShown ? this.hide() : this.show(t);}show(t) {var _this54 = this;this._isShown || P.trigger(this._element, "show.bs.offcanvas", { relatedTarget: t }).defaultPrevented || (this._isShown = !0, this._element.style.visibility = "visible", this._backdrop.show(), this._config.scroll || (new Te().hide(), this._enforceFocusOnElement(this._element)), this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", !0), this._element.setAttribute("role", "dialog"), this._element.classList.add("show"), this._queueCallback(function () {_newArrowCheck(this, _this54);P.trigger(this._element, "shown.bs.offcanvas", { relatedTarget: t });}.bind(this), this._element, !0));}hide() {var _this55 = this;this._isShown && (P.trigger(this._element, "hide.bs.offcanvas").defaultPrevented || (P.off(document, "focusin.bs.offcanvas"), this._element.blur(), this._isShown = !1, this._element.classList.remove("show"), this._backdrop.hide(), this._queueCallback(function () {_newArrowCheck(this, _this55);this._element.setAttribute("aria-hidden", !0), this._element.removeAttribute("aria-modal"), this._element.removeAttribute("role"), this._element.style.visibility = "hidden", this._config.scroll || new Te().reset(), P.trigger(this._element, "hidden.bs.offcanvas");}.bind(this), this._element, !0)));}dispose() {this._backdrop.dispose(), super.dispose(), P.off(document, "focusin.bs.offcanvas");}_getConfig(t) {return t = _objectSpread(_objectSpread(_objectSpread({}, Se), U.getDataAttributes(this._element)), "object" == typeof t ? t : {}), l("offcanvas", t, Ie), t;}_initializeBackDrop() {var _this56 = this;return new ke({ isVisible: this._config.backdrop, isAnimated: !0, rootElement: this._element.parentNode, clickCallback: function clickCallback() {_newArrowCheck(this, _this56);return this.hide();}.bind(this) });}_enforceFocusOnElement(t) {var _this57 = this;P.off(document, "focusin.bs.offcanvas"), P.on(document, "focusin.bs.offcanvas", function (e) {_newArrowCheck(this, _this57);document === e.target || t === e.target || t.contains(e.target) || t.focus();}.bind(this)), t.focus();}_addEventListeners() {var _this58 = this;P.on(this._element, "click.dismiss.bs.offcanvas", '[data-bs-dismiss="offcanvas"]', function () {_newArrowCheck(this, _this58);return this.hide();}.bind(this)), P.on(this._element, "keydown.dismiss.bs.offcanvas", function (t) {_newArrowCheck(this, _this58);this._config.keyboard && "Escape" === t.key && this.hide();}.bind(this));}static jQueryInterface(t) {return this.each(function () {const e = Ne.getOrCreateInstance(this, t);if ("string" == typeof t) {if (void 0 === e[t] || t.startsWith("_") || "constructor" === t) throw new TypeError(`No method named "${t}"`);e[t](this);}});}}P.on(document, "click.bs.offcanvas.data-api", '[data-bs-toggle="offcanvas"]', function (e) {var _this59 = this;const i = s(this);if (["A", "AREA"].includes(this.tagName) && e.preventDefault(), h(this)) return;P.one(i, "hidden.bs.offcanvas", function () {_newArrowCheck(this, _this59);c(this) && this.focus();}.bind(this));const n = t.findOne(".offcanvas.show");n && n !== i && Ne.getInstance(n).hide(), Ne.getOrCreateInstance(i).toggle(this);}), P.on(window, "load.bs.offcanvas.data-api", function () {var _this60 = this;_newArrowCheck(this, _this);return t.find(".offcanvas.show").forEach(function (t) {_newArrowCheck(this, _this60);return Ne.getOrCreateInstance(t).show();}.bind(this));}.bind(this)), _(Ne);const je = new Set(["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"]),Me = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/i,Pe = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,He = function He(t, e) {var _this61 = this;_newArrowCheck(this, _this);const i = t.nodeName.toLowerCase();if (e.includes(i)) return !je.has(i) || Boolean(Me.test(t.nodeValue) || Pe.test(t.nodeValue));const n = e.filter(function (t) {_newArrowCheck(this, _this61);return t instanceof RegExp;}.bind(this));for (let t = 0, e = n.length; t < e; t++) if (n[t].test(i)) return !0;return !1;}.bind(this);function Re(t, e, i) {var _this62 = this;if (!t.length) return t;if (i && "function" == typeof i) return i(t);const n = new window.DOMParser().parseFromString(t, "text/html"),s = Object.keys(e),o = [].concat(...n.body.querySelectorAll("*"));for (let t = 0, i = o.length; t < i; t++) {const i = o[t],n = i.nodeName.toLowerCase();if (!s.includes(n)) {i.remove();continue;}const r = [].concat(...i.attributes),a = [].concat(e["*"] || [], e[n] || []);r.forEach(function (t) {_newArrowCheck(this, _this62);He(t, a) || i.removeAttribute(t.nodeName);}.bind(this));}return n.body.innerHTML;}const Be = new RegExp("(^|\\s)bs-tooltip\\S+", "g"),We = new Set(["sanitize", "allowList", "sanitizeFn"]),qe = { animation: "boolean", template: "string", title: "(string|element|function)", trigger: "string", delay: "(number|object)", html: "boolean", selector: "(string|boolean)", placement: "(string|function)", offset: "(array|string|function)", container: "(string|element|boolean)", fallbackPlacements: "array", boundary: "(string|element)", customClass: "(string|function)", sanitize: "boolean", sanitizeFn: "(null|function)", allowList: "object", popperConfig: "(null|object|function)" },ze = { AUTO: "auto", TOP: "top", RIGHT: g() ? "left" : "right", BOTTOM: "bottom", LEFT: g() ? "right" : "left" },$e = { animation: !0, template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>', trigger: "hover focus", title: "", delay: 0, html: !1, selector: !1, placement: "top", offset: [0, 0], container: !1, fallbackPlacements: ["top", "right", "bottom", "left"], boundary: "clippingParents", customClass: "", sanitize: !0, sanitizeFn: null, allowList: { "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i], a: ["target", "href", "title", "rel"], area: [], b: [], br: [], col: [], code: [], div: [], em: [], hr: [], h1: [], h2: [], h3: [], h4: [], h5: [], h6: [], i: [], img: ["src", "srcset", "alt", "title", "width", "height"], li: [], ol: [], p: [], pre: [], s: [], small: [], span: [], sub: [], sup: [], strong: [], u: [], ul: [] }, popperConfig: null },Ue = { HIDE: "hide.bs.tooltip", HIDDEN: "hidden.bs.tooltip", SHOW: "show.bs.tooltip", SHOWN: "shown.bs.tooltip", INSERTED: "inserted.bs.tooltip", CLICK: "click.bs.tooltip", FOCUSIN: "focusin.bs.tooltip", FOCUSOUT: "focusout.bs.tooltip", MOUSEENTER: "mouseenter.bs.tooltip", MOUSELEAVE: "mouseleave.bs.tooltip" };class Fe extends B {constructor(t, e) {if (void 0 === fe) throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t), this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this._config = this._getConfig(e), this.tip = null, this._setListeners();}static get Default() {return $e;}static get NAME() {return "tooltip";}static get Event() {return Ue;}static get DefaultType() {return qe;}enable() {this._isEnabled = !0;}disable() {this._isEnabled = !1;}toggleEnabled() {this._isEnabled = !this._isEnabled;}toggle(t) {if (this._isEnabled) if (t) {const e = this._initializeOnDelegatedTarget(t);e._activeTrigger.click = !e._activeTrigger.click, e._isWithActiveTrigger() ? e._enter(null, e) : e._leave(null, e);} else {if (this.getTipElement().classList.contains("show")) return void this._leave(null, this);this._enter(null, this);}}dispose() {clearTimeout(this._timeout), P.off(this._element.closest(".modal"), "hide.bs.modal", this._hideModalHandler), this.tip && this.tip.remove(), this._popper && this._popper.destroy(), super.dispose();}show() {var _this63 = this;if ("none" === this._element.style.display) throw new Error("Please use show on visible elements");if (!this.isWithContent() || !this._isEnabled) return;const t = P.trigger(this._element, this.constructor.Event.SHOW),i = _d(this._element),n = null === i ? this._element.ownerDocument.documentElement.contains(this._element) : i.contains(this._element);if (t.defaultPrevented || !n) return;const s = this.getTipElement(),o = e(this.constructor.NAME);s.setAttribute("id", o), this._element.setAttribute("aria-describedby", o), this.setContent(), this._config.animation && s.classList.add("fade");const r = "function" == typeof this._config.placement ? this._config.placement.call(this, s, this._element) : this._config.placement,a = this._getAttachment(r);this._addAttachmentClass(a);const { container: l } = this._config;R.set(s, this.constructor.DATA_KEY, this), this._element.ownerDocument.documentElement.contains(this.tip) || (l.appendChild(s), P.trigger(this._element, this.constructor.Event.INSERTED)), this._popper ? this._popper.update() : this._popper = ue(this._element, s, this._getPopperConfig(a)), s.classList.add("show");const c = "function" == typeof this._config.customClass ? this._config.customClass() : this._config.customClass;c && s.classList.add(...c.split(" ")), "ontouchstart" in document.documentElement && [].concat(...document.body.children).forEach(function (t) {_newArrowCheck(this, _this63);P.on(t, "mouseover", u);}.bind(this));const h = this.tip.classList.contains("fade");this._queueCallback(function () {_newArrowCheck(this, _this63);const t = this._hoverState;this._hoverState = null, P.trigger(this._element, this.constructor.Event.SHOWN), "out" === t && this._leave(null, this);}.bind(this), this.tip, h);}hide() {var _this64 = this;if (!this._popper) return;const t = this.getTipElement();if (P.trigger(this._element, this.constructor.Event.HIDE).defaultPrevented) return;t.classList.remove("show"), "ontouchstart" in document.documentElement && [].concat(...document.body.children).forEach(function (t) {_newArrowCheck(this, _this64);return P.off(t, "mouseover", u);}.bind(this)), this._activeTrigger.click = !1, this._activeTrigger.focus = !1, this._activeTrigger.hover = !1;const e = this.tip.classList.contains("fade");this._queueCallback(function () {_newArrowCheck(this, _this64);this._isWithActiveTrigger() || ("show" !== this._hoverState && t.remove(), this._cleanTipClass(), this._element.removeAttribute("aria-describedby"), P.trigger(this._element, this.constructor.Event.HIDDEN), this._popper && (this._popper.destroy(), this._popper = null));}.bind(this), this.tip, e), this._hoverState = "";}update() {null !== this._popper && this._popper.update();}isWithContent() {return Boolean(this.getTitle());}getTipElement() {if (this.tip) return this.tip;const t = document.createElement("div");return t.innerHTML = this._config.template, this.tip = t.children[0], this.tip;}setContent() {const e = this.getTipElement();this.setElementContent(t.findOne(".tooltip-inner", e), this.getTitle()), e.classList.remove("fade", "show");}setElementContent(t, e) {if (null !== t) return r(e) ? (e = a(e), void (this._config.html ? e.parentNode !== t && (t.innerHTML = "", t.appendChild(e)) : t.textContent = e.textContent)) : void (this._config.html ? (this._config.sanitize && (e = Re(e, this._config.allowList, this._config.sanitizeFn)), t.innerHTML = e) : t.textContent = e);}getTitle() {let t = this._element.getAttribute("data-bs-original-title");return t || (t = "function" == typeof this._config.title ? this._config.title.call(this._element) : this._config.title), t;}updateAttachment(t) {return "right" === t ? "end" : "left" === t ? "start" : t;}_initializeOnDelegatedTarget(t, e) {const i = this.constructor.DATA_KEY;return (e = e || R.get(t.delegateTarget, i)) || (e = new this.constructor(t.delegateTarget, this._getDelegateConfig()), R.set(t.delegateTarget, i, e)), e;}_getOffset() {var _this65 = this;const { offset: t } = this._config;return "string" == typeof t ? t.split(",").map(function (t) {_newArrowCheck(this, _this65);return Number.parseInt(t, 10);}.bind(this)) : "function" == typeof t ? function (e) {_newArrowCheck(this, _this65);return t(e, this._element);}.bind(this) : t;}_getPopperConfig(t) {var _this66 = this;const e = { placement: t, modifiers: [{ name: "flip", options: { fallbackPlacements: this._config.fallbackPlacements } }, { name: "offset", options: { offset: this._getOffset() } }, { name: "preventOverflow", options: { boundary: this._config.boundary } }, { name: "arrow", options: { element: `.${this.constructor.NAME}-arrow` } }, { name: "onChange", enabled: !0, phase: "afterWrite", fn: function fn(t) {_newArrowCheck(this, _this66);return this._handlePopperPlacementChange(t);}.bind(this) }], onFirstUpdate: function onFirstUpdate(t) {_newArrowCheck(this, _this66);t.options.placement !== t.placement && this._handlePopperPlacementChange(t);}.bind(this) };return _objectSpread(_objectSpread({}, e), "function" == typeof this._config.popperConfig ? this._config.popperConfig(e) : this._config.popperConfig);}_addAttachmentClass(t) {this.getTipElement().classList.add("bs-tooltip-" + this.updateAttachment(t));}_getAttachment(t) {return ze[t.toUpperCase()];}_setListeners() {var _this67 = this;this._config.trigger.split(" ").forEach(function (t) {var _this68 = this;_newArrowCheck(this, _this67);if ("click" === t) P.on(this._element, this.constructor.Event.CLICK, this._config.selector, function (t) {_newArrowCheck(this, _this68);return this.toggle(t);}.bind(this));else if ("manual" !== t) {const e = "hover" === t ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN,i = "hover" === t ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;P.on(this._element, e, this._config.selector, function (t) {_newArrowCheck(this, _this68);return this._enter(t);}.bind(this)), P.on(this._element, i, this._config.selector, function (t) {_newArrowCheck(this, _this68);return this._leave(t);}.bind(this));}}.bind(this)), this._hideModalHandler = function () {_newArrowCheck(this, _this67);this._element && this.hide();}.bind(this), P.on(this._element.closest(".modal"), "hide.bs.modal", this._hideModalHandler), this._config.selector ? this._config = _objectSpread(_objectSpread({}, this._config), {}, { trigger: "manual", selector: "" }) : this._fixTitle();}_fixTitle() {const t = this._element.getAttribute("title"),e = typeof this._element.getAttribute("data-bs-original-title");(t || "string" !== e) && (this._element.setAttribute("data-bs-original-title", t || ""), !t || this._element.getAttribute("aria-label") || this._element.textContent || this._element.setAttribute("aria-label", t), this._element.setAttribute("title", ""));}_enter(t, e) {var _this69 = this;e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger["focusin" === t.type ? "focus" : "hover"] = !0), e.getTipElement().classList.contains("show") || "show" === e._hoverState ? e._hoverState = "show" : (clearTimeout(e._timeout), e._hoverState = "show", e._config.delay && e._config.delay.show ? e._timeout = setTimeout(function () {_newArrowCheck(this, _this69);"show" === e._hoverState && e.show();}.bind(this), e._config.delay.show) : e.show());}_leave(t, e) {var _this70 = this;e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger["focusout" === t.type ? "focus" : "hover"] = e._element.contains(t.relatedTarget)), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = "out", e._config.delay && e._config.delay.hide ? e._timeout = setTimeout(function () {_newArrowCheck(this, _this70);"out" === e._hoverState && e.hide();}.bind(this), e._config.delay.hide) : e.hide());}_isWithActiveTrigger() {for (const t in this._activeTrigger) if (this._activeTrigger[t]) return !0;return !1;}_getConfig(t) {var _this71 = this;const e = U.getDataAttributes(this._element);return Object.keys(e).forEach(function (t) {_newArrowCheck(this, _this71);We.has(t) && delete e[t];}.bind(this)), (t = _objectSpread(_objectSpread(_objectSpread({}, this.constructor.Default), e), "object" == typeof t && t ? t : {})).container = !1 === t.container ? document.body : a(t.container), "number" == typeof t.delay && (t.delay = { show: t.delay, hide: t.delay }), "number" == typeof t.title && (t.title = t.title.toString()), "number" == typeof t.content && (t.content = t.content.toString()), l("tooltip", t, this.constructor.DefaultType), t.sanitize && (t.template = Re(t.template, t.allowList, t.sanitizeFn)), t;}_getDelegateConfig() {const t = {};if (this._config) for (const e in this._config) this.constructor.Default[e] !== this._config[e] && (t[e] = this._config[e]);return t;}_cleanTipClass() {var _this72 = this;const t = this.getTipElement(),e = t.getAttribute("class").match(Be);null !== e && e.length > 0 && e.map(function (t) {_newArrowCheck(this, _this72);return t.trim();}.bind(this)).forEach(function (e) {_newArrowCheck(this, _this72);return t.classList.remove(e);}.bind(this));}_handlePopperPlacementChange(t) {const { state: e } = t;e && (this.tip = e.elements.popper, this._cleanTipClass(), this._addAttachmentClass(this._getAttachment(e.placement)));}static jQueryInterface(t) {return this.each(function () {const e = Fe.getOrCreateInstance(this, t);if ("string" == typeof t) {if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);e[t]();}});}}_(Fe);const Ve = new RegExp("(^|\\s)bs-popover\\S+", "g"),Ke = _objectSpread(_objectSpread({}, Fe.Default), {}, { placement: "right", offset: [0, 8], trigger: "click", content: "", template: '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>' }),Xe = _objectSpread(_objectSpread({}, Fe.DefaultType), {}, { content: "(string|element|function)" }),Ye = { HIDE: "hide.bs.popover", HIDDEN: "hidden.bs.popover", SHOW: "show.bs.popover", SHOWN: "shown.bs.popover", INSERTED: "inserted.bs.popover", CLICK: "click.bs.popover", FOCUSIN: "focusin.bs.popover", FOCUSOUT: "focusout.bs.popover", MOUSEENTER: "mouseenter.bs.popover", MOUSELEAVE: "mouseleave.bs.popover" };class Qe extends Fe {static get Default() {return Ke;}static get NAME() {return "popover";}static get Event() {return Ye;}static get DefaultType() {return Xe;}isWithContent() {return this.getTitle() || this._getContent();}getTipElement() {return this.tip || (this.tip = super.getTipElement(), this.getTitle() || t.findOne(".popover-header", this.tip).remove(), this._getContent() || t.findOne(".popover-body", this.tip).remove()), this.tip;}setContent() {const e = this.getTipElement();this.setElementContent(t.findOne(".popover-header", e), this.getTitle());let i = this._getContent();"function" == typeof i && (i = i.call(this._element)), this.setElementContent(t.findOne(".popover-body", e), i), e.classList.remove("fade", "show");}_addAttachmentClass(t) {this.getTipElement().classList.add("bs-popover-" + this.updateAttachment(t));}_getContent() {return this._element.getAttribute("data-bs-content") || this._config.content;}_cleanTipClass() {var _this73 = this;const t = this.getTipElement(),e = t.getAttribute("class").match(Ve);null !== e && e.length > 0 && e.map(function (t) {_newArrowCheck(this, _this73);return t.trim();}.bind(this)).forEach(function (e) {_newArrowCheck(this, _this73);return t.classList.remove(e);}.bind(this));}static jQueryInterface(t) {return this.each(function () {const e = Qe.getOrCreateInstance(this, t);if ("string" == typeof t) {if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);e[t]();}});}}_(Qe);const Ge = { offset: 10, method: "auto", target: "" },Ze = { offset: "number", method: "string", target: "(string|element)" };class Je extends B {constructor(t, e) {var _this74,_arrowCheckId2 = {};(super(t), _this74 = this), this._scrollElement = "BODY" === this._element.tagName ? window : this._element, this._config = this._getConfig(e), this._selector = `${this._config.target} .nav-link, ${this._config.target} .list-group-item, ${this._config.target} .dropdown-item`, this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, P.on(this._scrollElement, "scroll.bs.scrollspy", function () {_newArrowCheck(this, _arrowCheckId2);return _this74._process();}.bind(_arrowCheckId2)), this.refresh(), this._process();}static get Default() {return Ge;}static get NAME() {return "scrollspy";}refresh() {var _this75 = this;const e = this._scrollElement === this._scrollElement.window ? "offset" : "position",i = "auto" === this._config.method ? e : this._config.method,s = "position" === i ? this._getScrollTop() : 0;this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), t.find(this._selector).map(function (e) {_newArrowCheck(this, _this75);const o = n(e),r = o ? t.findOne(o) : null;if (r) {const t = r.getBoundingClientRect();if (t.width || t.height) return [U[i](r).top + s, o];}return null;}.bind(this)).filter(function (t) {_newArrowCheck(this, _this75);return t;}.bind(this)).sort(function (t, e) {_newArrowCheck(this, _this75);return t[0] - e[0];}.bind(this)).forEach(function (t) {_newArrowCheck(this, _this75);this._offsets.push(t[0]), this._targets.push(t[1]);}.bind(this));}dispose() {P.off(this._scrollElement, ".bs.scrollspy"), super.dispose();}_getConfig(t) {if ("string" != typeof (t = _objectSpread(_objectSpread(_objectSpread({}, Ge), U.getDataAttributes(this._element)), "object" == typeof t && t ? t : {})).target && r(t.target)) {let { id: i } = t.target;i || (i = e("scrollspy"), t.target.id = i), t.target = "#" + i;}return l("scrollspy", t, Ze), t;}_getScrollTop() {return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;}_getScrollHeight() {return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);}_getOffsetHeight() {return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;}_process() {const t = this._getScrollTop() + this._config.offset,e = this._getScrollHeight(),i = this._config.offset + e - this._getOffsetHeight();if (this._scrollHeight !== e && this.refresh(), t >= i) {const t = this._targets[this._targets.length - 1];this._activeTarget !== t && this._activate(t);} else {if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear();for (let e = this._offsets.length; e--;) this._activeTarget !== this._targets[e] && t >= this._offsets[e] && (void 0 === this._offsets[e + 1] || t < this._offsets[e + 1]) && this._activate(this._targets[e]);}}_activate(e) {var _this76 = this;this._activeTarget = e, this._clear();const i = this._selector.split(",").map(function (t) {_newArrowCheck(this, _this76);return `${t}[data-bs-target="${e}"],${t}[href="${e}"]`;}.bind(this)),n = t.findOne(i.join(","));n.classList.contains("dropdown-item") ? (t.findOne(".dropdown-toggle", n.closest(".dropdown")).classList.add("active"), n.classList.add("active")) : (n.classList.add("active"), t.parents(n, ".nav, .list-group").forEach(function (e) {var _this77 = this;_newArrowCheck(this, _this76);t.prev(e, ".nav-link, .list-group-item").forEach(function (t) {_newArrowCheck(this, _this77);return t.classList.add("active");}.bind(this)), t.prev(e, ".nav-item").forEach(function (e) {var _this78 = this;_newArrowCheck(this, _this77);t.children(e, ".nav-link").forEach(function (t) {_newArrowCheck(this, _this78);return t.classList.add("active");}.bind(this));}.bind(this));}.bind(this))), P.trigger(this._scrollElement, "activate.bs.scrollspy", { relatedTarget: e });}_clear() {var _this79 = this;t.find(this._selector).filter(function (t) {_newArrowCheck(this, _this79);return t.classList.contains("active");}.bind(this)).forEach(function (t) {_newArrowCheck(this, _this79);return t.classList.remove("active");}.bind(this));}static jQueryInterface(t) {return this.each(function () {const e = Je.getOrCreateInstance(this, t);if ("string" == typeof t) {if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);e[t]();}});}}P.on(window, "load.bs.scrollspy.data-api", function () {var _this80 = this;_newArrowCheck(this, _this);t.find('[data-bs-spy="scroll"]').forEach(function (t) {_newArrowCheck(this, _this80);return new Je(t);}.bind(this));}.bind(this)), _(Je);class ti extends B {static get NAME() {return "tab";}show() {var _this81 = this;if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains("active")) return;let e;const i = s(this._element),n = this._element.closest(".nav, .list-group");if (n) {const i = "UL" === n.nodeName || "OL" === n.nodeName ? ":scope > li > .active" : ".active";e = t.find(i, n), e = e[e.length - 1];}const o = e ? P.trigger(e, "hide.bs.tab", { relatedTarget: this._element }) : null;if (P.trigger(this._element, "show.bs.tab", { relatedTarget: e }).defaultPrevented || null !== o && o.defaultPrevented) return;this._activate(this._element, n);const r = function r() {_newArrowCheck(this, _this81);P.trigger(e, "hidden.bs.tab", { relatedTarget: this._element }), P.trigger(this._element, "shown.bs.tab", { relatedTarget: e });}.bind(this);i ? this._activate(i, i.parentNode, r) : r();}_activate(e, i, n) {var _this82 = this;const s = (!i || "UL" !== i.nodeName && "OL" !== i.nodeName ? t.children(i, ".active") : t.find(":scope > li > .active", i))[0],o = n && s && s.classList.contains("fade"),r = function r() {_newArrowCheck(this, _this82);return this._transitionComplete(e, s, n);}.bind(this);s && o ? (s.classList.remove("show"), this._queueCallback(r, e, !0)) : r();}_transitionComplete(e, i, n) {var _this83 = this;if (i) {i.classList.remove("active");const e = t.findOne(":scope > .dropdown-menu .active", i.parentNode);e && e.classList.remove("active"), "tab" === i.getAttribute("role") && i.setAttribute("aria-selected", !1);}e.classList.add("active"), "tab" === e.getAttribute("role") && e.setAttribute("aria-selected", !0), f(e), e.classList.contains("fade") && e.classList.add("show");let s = e.parentNode;if (s && "LI" === s.nodeName && (s = s.parentNode), s && s.classList.contains("dropdown-menu")) {const i = e.closest(".dropdown");i && t.find(".dropdown-toggle", i).forEach(function (t) {_newArrowCheck(this, _this83);return t.classList.add("active");}.bind(this)), e.setAttribute("aria-expanded", !0);}n && n();}static jQueryInterface(t) {return this.each(function () {const e = ti.getOrCreateInstance(this);if ("string" == typeof t) {if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);e[t]();}});}}P.on(document, "click.bs.tab.data-api", '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]', function (t) {["A", "AREA"].includes(this.tagName) && t.preventDefault(), h(this) || ti.getOrCreateInstance(this).show();}), _(ti);const ei = { animation: "boolean", autohide: "boolean", delay: "number" },ii = { animation: !0, autohide: !0, delay: 5e3 };class ni extends B {constructor(t, e) {super(t), this._config = this._getConfig(e), this._timeout = null, this._hasMouseInteraction = !1, this._hasKeyboardInteraction = !1, this._setListeners();}static get DefaultType() {return ei;}static get Default() {return ii;}static get NAME() {return "toast";}show() {var _this84 = this;P.trigger(this._element, "show.bs.toast").defaultPrevented || (this._clearTimeout(), this._config.animation && this._element.classList.add("fade"), this._element.classList.remove("hide"), f(this._element), this._element.classList.add("showing"), this._queueCallback(function () {_newArrowCheck(this, _this84);this._element.classList.remove("showing"), this._element.classList.add("show"), P.trigger(this._element, "shown.bs.toast"), this._maybeScheduleHide();}.bind(this), this._element, this._config.animation));}hide() {var _this85 = this;this._element.classList.contains("show") && (P.trigger(this._element, "hide.bs.toast").defaultPrevented || (this._element.classList.remove("show"), this._queueCallback(function () {_newArrowCheck(this, _this85);this._element.classList.add("hide"), P.trigger(this._element, "hidden.bs.toast");}.bind(this), this._element, this._config.animation)));}dispose() {this._clearTimeout(), this._element.classList.contains("show") && this._element.classList.remove("show"), super.dispose();}_getConfig(t) {return t = _objectSpread(_objectSpread(_objectSpread({}, ii), U.getDataAttributes(this._element)), "object" == typeof t && t ? t : {}), l("toast", t, this.constructor.DefaultType), t;}_maybeScheduleHide() {var _this86 = this;this._config.autohide && (this._hasMouseInteraction || this._hasKeyboardInteraction || (this._timeout = setTimeout(function () {_newArrowCheck(this, _this86);this.hide();}.bind(this), this._config.delay)));}_onInteraction(t, e) {switch (t.type) {case "mouseover":case "mouseout":this._hasMouseInteraction = e;break;case "focusin":case "focusout":this._hasKeyboardInteraction = e;}if (e) return void this._clearTimeout();const i = t.relatedTarget;this._element === i || this._element.contains(i) || this._maybeScheduleHide();}_setListeners() {var _this87 = this;P.on(this._element, "click.dismiss.bs.toast", '[data-bs-dismiss="toast"]', function () {_newArrowCheck(this, _this87);return this.hide();}.bind(this)), P.on(this._element, "mouseover.bs.toast", function (t) {_newArrowCheck(this, _this87);return this._onInteraction(t, !0);}.bind(this)), P.on(this._element, "mouseout.bs.toast", function (t) {_newArrowCheck(this, _this87);return this._onInteraction(t, !1);}.bind(this)), P.on(this._element, "focusin.bs.toast", function (t) {_newArrowCheck(this, _this87);return this._onInteraction(t, !0);}.bind(this)), P.on(this._element, "focusout.bs.toast", function (t) {_newArrowCheck(this, _this87);return this._onInteraction(t, !1);}.bind(this));}_clearTimeout() {clearTimeout(this._timeout), this._timeout = null;}static jQueryInterface(t) {return this.each(function () {const e = ni.getOrCreateInstance(this, t);if ("string" == typeof t) {if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);e[t](this);}});}}return _(ni), { Alert: W, Button: q, Carousel: Z, Collapse: et, Dropdown: Ae, Modal: De, Offcanvas: Ne, Popover: Qe, ScrollSpy: Je, Tab: ti, Toast: ni, Tooltip: Fe };});

/***/ }),

/***/ "./src/assets/js/components/chat.js":
/*!******************************************!*\
  !*** ./src/assets/js/components/chat.js ***!
  \******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _newArrowCheck(innerThis, boundThis) {if (innerThis !== boundThis) {throw new TypeError("Cannot instantiate an arrow function");}}(function ($) {
  "use_strict";var _this = this;

  const getUrlVars = function getUrlVars() {_newArrowCheck(this, _this);
    let vars = {};
    window.location.href.replace(
    /[?&]+([^=&]+)=([^&]*)/gi,
    function (m, key, value) {
      vars[key] = value;
    });

    if (window.location.hash) {
      const hash = window.location.hash.replace("#", "/#");
      hash.replace(/[#&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
        vars[key] = value;
      });
    }
    return vars;
  }.bind(this);

  const url_vars = getUrlVars();

  $(window).on("load ready resize orientationChange", function () {

    const chatSection = $(document).find(".chat-section");
    if (chatSection && (chatSection === null || chatSection === void 0 ? void 0 : chatSection.length) > 0) {

      if ($(window).width() <= 861) {
        chatSection.find(".chat-sidebar").removeClass("hide");
        chatSection.find(".chat-main").removeClass("hide").addClass("hide");
      } else {
        chatSection.find(".chat-sidebar").removeClass("hide");
        chatSection.find(".chat-main").removeClass("hide");
      }

      if (url_vars !== null && url_vars !== void 0 && url_vars.chat_action) {
        const chatSection = $(document).find(".chat-section");
        if (chatSection && chatSection.length > 0) {
          // set active side menu item based on location href
          chatSection.find(`.chat-main__body`).each(function () {
            if ((url_vars === null || url_vars === void 0 ? void 0 : url_vars.chat_action) == $(this).attr("id")) {
              $(this).removeClass("hide");
              if ($(window).width() <= 861) {
                chatSection.find(".chat-sidebar").removeClass("hide");
                chatSection.
                find(".chat-main").
                removeClass("hide").
                addClass("hide");
              } else {
                chatSection.find(".chat-sidebar").removeClass("hide");
                chatSection.find(".chat-main").removeClass("hide");
              }
            } else {
              $(this).addClass("hide");
            }
          });
        }
      }

    }

  });

  $(document).ready(function () {
    // console.log({ url_vars });

    const chatSection = $(document).find(".chat-section");
    if (chatSection && (chatSection === null || chatSection === void 0 ? void 0 : chatSection.length) > 0) {
      const chat = {
        messageToSend: "",
        messageResponses: [
        "Why did the web developer leave the restaurant? Because of the table layout.",
        "How do you comfort a JavaScript bug? You console it.",
        'An SQL query enters a bar, approaches two tables and asks: "May I join you?"',
        "What is the most used language in programming? Profanity.",
        "What is the object-oriented way to become wealthy? Inheritance.",
        "An SEO expert walks into a bar, bars, pub, tavern, public house, Irish pub, drinks, beer, alcohol"],

        init: function () {
          this.cacheDOM();
          this.bindEvents();
          // this.bindMessageTextArea();
        },
        get: function (selector, root = document) {
          return root.querySelector(selector);
        },
        cacheDOM: function () {

          if ($(window).width() <= 861) {
            chatSection.find(".chat-sidebar").removeClass("hide");
            chatSection.find(".chat-main").removeClass("hide").addClass("hide");
          } else {
            chatSection.find(".chat-sidebar").removeClass("hide");
            chatSection.find(".chat-main").removeClass("hide");
          }

          this.$chatForm = chatSection.find('form[name="chat-form"]');
          this.$chatBody = this.$chatForm.parents(".chat-main__body");
          this.$textarea = this.$chatBody.find('[name="chat-message"]');
          this.$chatHistoryList = this.$chatBody.find("ul.chat-list");
        },
        bindEvents: function () {
          this.$chatForm.each(this.submitBindAll.bind(this));
          this.$chatForm.on("keydown", this.submitForm.bind(this));

          chatSection.
          find(".chat-new-message").
          on("click", this.handleOpenChatBody.bind(this));
          chatSection.
          find(".chat-sidebar__list .chat-list-item a").
          on("click", this.handleOpenChatBody.bind(this));
          chatSection.
          find(".chat-serach__list .chat-list-item a").
          on("click", this.handleOpenChatBody.bind(this));
          chatSection.
          find(".chat-sidebar-toggle").
          on("click", this.toggleSidebar.bind(this));
        },
        submitBindAll: function (inx, elem) {
          const form = $(elem);
          form.on("submit", this.formSubmitHandler.bind(this));
        },
        submitForm: function (event) {
          if (window.event.keyCode == "13") {
            this.$chatForm.submit();
          }
        },
        formSubmitHandler: function (event) {
          event.preventDefault();
          const currentForm = $(event.currentTarget);
          const currentMsg = currentForm.find('[name="chat-message"]').val();

          this.$chatBody = currentForm.parents(".chat-main__body");
          this.$textarea = currentForm.find('[name="chat-message"]');
          this.$chatHistoryList = currentForm.
          parents(".chat-main__body").
          find("ul.chat-list");

          if (currentMsg && currentMsg.trim() !== "") {
            this.removeEmptyMsg();
            this.appendMessage(currentMsg);
            this.botResponse();
          }
        },
        toggleSidebar: function (event) {
          const currentEl = $(event.currentTarget);
          if (chatSection.find(".chat-sidebar").hasClass("hide")) {
            chatSection.find(".chat-sidebar").removeClass("hide");
            chatSection.find(".chat-main").removeClass("hide").addClass("hide");
          } else {
            chatSection.find(".chat-sidebar").removeClass("hide").addClass("hide");
            chatSection.find(".chat-main").removeClass("hide");
          }
        },
        appendMessage: function (message) {
          if (message && message.trim() !== "") {
            const msgHTML = this.msgTempleteSender(message);
            this.$chatHistoryList.append(msgHTML);
            this.$textarea.val("");
            this.scrollToBottom();
          }
        },
        appendMessageRecipient: function (message) {
          if (message && message.trim() !== "") {
            this.removeTypingMsg();
            const msgHTML = this.msgTempleteRecipient(message);
            this.$chatHistoryList.append(msgHTML);
            this.scrollToBottom();
          }
        },
        appendTypingMsg: function () {
          const typingMsg = this.msgTyping();
          this.$chatHistoryList.append(typingMsg);
          this.scrollToBottom();
        },
        appendEmptyMsg: function () {
          const typingMsg = this.msgEmpty();
          this.$chatHistoryList.append(typingMsg);
          this.scrollToBottom();
        },
        removeEmptyMsg: function () {
          this.$chatHistoryList.find(".chat-list-item.empty-item").remove();
        },
        removeTypingMsg: function () {
          this.$chatHistoryList.find(".chat-list-item.typing").remove();
        },
        botResponse: function () {var _this2 = this;
          const randomMsg = this.getRandomItem(this.messageResponses);
          if (randomMsg && randomMsg.toString().trim() !== "") {
            this.appendTypingMsg();

            const delay = randomMsg.split(" ").length * 100;
            setTimeout(function () {_newArrowCheck(this, _this2);
              this.appendMessageRecipient(randomMsg);
            }.bind(this), delay);
          }
        },
        bindMessageTextArea: function () {
          const div = document.querySelector(".chat-main__form-message");
          const ta = document.querySelector(".chat-message");

          ta.addEventListener("keydown", autosize);

          function autosize() {
            setTimeout(function () {
              ta.style.cssText = "height:0px";
              let height = Math.min(26 * 5, ta.scrollHeight);
              div.style.cssText = "height:" + height + "px";
              ta.style.cssText = "height:" + height + "px";
            }, 0);
          }
        },
        scrollToBottom: function () {
          this.$chatHistoryList &&
          this.$chatHistoryList.scrollTop(
          this.$chatHistoryList[0].scrollHeight);

        },
        getCurrentTime: function () {
          return new Date().
          toLocaleTimeString().
          replace(/([\d]+:[\d]{2})(:[\d]{2})(.*)/, "$1$3");
        },
        getRandomItem: function (arr) {
          return arr && arr[Math.floor(Math.random() * arr.length)];
        },
        msgTyping: function () {
          return `<li class="chat-list-item typing">
          <div class="message-item-chat typing">
            <div class="message-user">
              <div class="user-photo">
                <img src="assets/images/Avatar_2.png" alt="Wade Warren" />
              </div>
              <span class="user-status online"></span>
            </div>
            <div class="message-info">
              <div class="message-header">
                <div class="message-user-info">
                  <h6 class="user-name">Wade Warren</h6>
                </div>
              </div>
              <div class="message-text">
                <div class="dot-typing"></div>
              </div>
            </div>
          </div>
        </li>`;
        },
        msgEmpty: function () {
          return `<li class="chat-list-item empty-item">
          <div class="message-item-big empty-item">There are no messages in this conversation yet.</div>
        </li>`;
        },
        msgTempleteSender: function (message) {
          return `<li class="chat-list-item right">
          <div class="message-item-chat my-msg">
            <div class="message-info">
              <div class="message-header">
                <div class="message-user-info">
                  <h6 class="user-name">You</h6>
                </div>
                <div class="message-time">${this.getCurrentTime()}</div>
              </div>
              <div class="message-text">
                <p>${message}</p>
              </div>
            </div>
          </div>
        </li>`;
        },
        msgTempleteRecipient: function (message) {
          return `<li class="chat-list-item">
          <div class="message-item-chat">
            <div class="message-user">
              <div class="user-photo">
                <img src="assets/images/Avatar_2.png" alt="Wade Warren" />
              </div>
              <span class="user-status online"></span>
            </div>
            <div class="message-info">
              <div class="message-header">
                <div class="message-user-info">
                  <h6 class="user-name">Wade Warren</h6>
                </div>
                <div class="message-time">${this.getCurrentTime()}</div>
              </div>
              <div class="message-text">
                <p>${message}</p>
              </div>
            </div>
          </div>
        </li>`;
        },
        handleOpenChatBody: function (e) {
          let vars = {};
          const thisLink = $(e.currentTarget);
          if (thisLink.attr("href")) {
            const hash = thisLink.attr("href").replace("#", "/#");
            hash.replace(/[#&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
              vars[key] = value;
            });
          }
          if (vars !== null && vars !== void 0 && vars.chat_action) {
            chatSection.find(".chat-main__body").each(function (inx, item) {
              const currentBody = $(item);
              if ((vars === null || vars === void 0 ? void 0 : vars.chat_action) == currentBody.attr("id")) {
                currentBody.removeClass("hide");
                if ($(window).width() <= 861) {
                  chatSection.find(".chat-sidebar").removeClass("hide");
                  chatSection.find(".chat-main").removeClass("hide").addClass("hide");
                } else {
                  chatSection.find(".chat-sidebar").removeClass("hide");
                  chatSection.find(".chat-main").removeClass("hide");
                }
              } else {
                currentBody.addClass("hide");
              }
            });
          }
        }
      };

      chat.init();

      // Search user in the list
      const searchFilter = {
        root: function () {
          const userList = chatSection.find(".chat-sidebar__list");
          return userList;
        },
        rootNewMsg: function () {
          const userList = chatSection.find(".chat-serach__list");
          return userList;
        },
        options: { valueNames: ["user-name"] },
        resetList: function () {
          const root = this.root();
          const userList = root.find(".chat-sidebar__list");
          const userListItem = root.find("> li");

          // show all items if seraching vakue is empty
          userListItem.each(function (e) {
            $(this).removeClass("hide");
          });

          // remove empty message if we have it in the list
          if (
          userList.find(".chat-list-item.empty-item") &&
          userList.find(".chat-list-item.empty-item").length > 0)
          {
            userList.find(".chat-list-item.empty-item").remove();
          }
        },
        findInList: function (value) {
          const root = this.root();
          const userListItem = root.find("> li");
          if (value) {
            const noItems =
            '<li class="chat-list-item empty-item"><div class="message-item-big empty-item">No items found</div></li>';
            const totalLength = userListItem === null || userListItem === void 0 ? void 0 : userListItem.length;
            let hiddenItem = 0;
            userListItem.each(function (e) {
              const user = $(this),
                userName = user.find(".user-name").text(),
                compareUserName = userName.toString().toLocaleLowerCase();
              if (compareUserName.indexOf(value) == -1) {
                ++hiddenItem;
                user.addClass("hide");

                // add empty message if total list item amount the same as hidden item amount
                if (totalLength == hiddenItem) {
                  root.append(noItems);
                } else {
                  // remove empty message if we have it in the list
                  if (
                  root.find(".chat-list-item.empty-item") &&
                  root.find(".chat-list-item.empty-item").length > 0)
                  {
                    root.find(".chat-list-item.empty-item").remove();
                  }
                }
              } else {
                user.removeClass("hide");
              }
            });
          } else {
            this.resetList();
          }
        },
        resetListNewMsg: function () {
          const root = this.rootNewMsg();
          const userList = root.find(".chat-sidebar__list");
          const userListItem = root.find("> li");

          // show all items if seraching vakue is empty
          userListItem.each(function (e) {
            $(this).removeClass("hide");
          });

          // remove empty message if we have it in the list
          if (
          userList.find(".chat-list-item.empty-item") &&
          userList.find(".chat-list-item.empty-item").length > 0)
          {
            userList.find(".chat-list-item.empty-item").remove();
          }
        },
        findInListNewMsg: function (value) {
          const root = this.rootNewMsg();
          const userListItem = root.find("li");

          if (value) {
            const noItems =
            '<li class="chat-list-item empty-item"><div class="message-item-big empty-item">No items found</div></li>';
            const totalLength = userListItem === null || userListItem === void 0 ? void 0 : userListItem.length;
            let hiddenItem = 0;
            userListItem.each(function (e) {
              const user = $(this),
                userName = user.find(".user-name").text(),
                compareUserName = userName.toString().toLocaleLowerCase();

              if (compareUserName.indexOf(value) == -1) {
                ++hiddenItem;
                user.addClass("hide");

                // add empty message if total list item amount the same as hidden item amount
                if (totalLength == hiddenItem) {
                  root.append(noItems);
                } else {
                  // remove empty message if we have it in the list
                  if (
                  root.find(".chat-list-item.empty-item") &&
                  root.find(".chat-list-item.empty-item").length > 0)
                  {
                    root.find(".chat-list-item.empty-item").remove();
                  }
                }
              } else {
                user.removeClass("hide");
              }
            });
          } else {
            this.resetListNewMsg();
          }
        },
        init: function () {var _this3 = this;
          const userList = this.root();
          const searchInput = chatSection.find(
          '.chat-sidebar__header [type="search"]');

          const noItems =
          '<li class="chat-list-item empty-item"><div class="message-item-big empty-item">No items found</div></li>';

          if (
          searchInput &&
          (searchInput === null || searchInput === void 0 ? void 0 : searchInput.length) > 0 &&
          userList &&
          (userList === null || userList === void 0 ? void 0 : userList.length) > 0)
          {var _userListNode$childNo, _userListNode$childNo2;
            const userListNode = userList[0];
            // empty message if in list item is 0 or empty string
            if (
            (userListNode === null || userListNode === void 0 ? void 0 : (_userListNode$childNo = userListNode.childNodes) === null || _userListNode$childNo === void 0 ? void 0 : _userListNode$childNo.length) <= 0 ||
            (userListNode === null || userListNode === void 0 ? void 0 : (_userListNode$childNo2 = userListNode.childNodes) === null || _userListNode$childNo2 === void 0 ? void 0 : _userListNode$childNo2.length) == 1 &&
            (userListNode === null || userListNode === void 0 ? void 0 : userListNode.childNodes[0].nodeName) == "#text")
            {
              userList.html(noItems);
            } else {
              searchInput.on("keyup", function (_event) {var _event$currentTarget;_newArrowCheck(this, _this3);
                const targetValue = (_event$currentTarget = _event.currentTarget) === null || _event$currentTarget === void 0 ? void 0 : _event$currentTarget.value,
                  serachValue = targetValue.toString().toLowerCase();
                this.findInList(serachValue);
              }.bind(this));
              searchInput.on("search", function (_event) {var _event$currentTarget2;_newArrowCheck(this, _this3);
                const targetValue = (_event$currentTarget2 = _event.currentTarget) === null || _event$currentTarget2 === void 0 ? void 0 : _event$currentTarget2.value,
                  serachValue = targetValue.toString().toLowerCase();
                this.findInList(serachValue);
              }.bind(this));
            }
          }
        },
        initSearchNewMsg: function () {var _this4 = this;
          const userList = this.rootNewMsg();
          const searchInput = chatSection.find(
          '.chat-main__messages [type="search"]');

          const noItems =
          '<li class="chat-list-item empty-item"><div class="message-item-big empty-item">No items found</div></li>';

          if (
          searchInput &&
          (searchInput === null || searchInput === void 0 ? void 0 : searchInput.length) > 0 &&
          userList &&
          (userList === null || userList === void 0 ? void 0 : userList.length) > 0)
          {var _userListNode$childNo3, _userListNode$childNo4;
            const userListNode = userList[0];
            // empty message if in list item is 0 or empty string
            if (
            (userListNode === null || userListNode === void 0 ? void 0 : (_userListNode$childNo3 = userListNode.childNodes) === null || _userListNode$childNo3 === void 0 ? void 0 : _userListNode$childNo3.length) <= 0 ||
            (userListNode === null || userListNode === void 0 ? void 0 : (_userListNode$childNo4 = userListNode.childNodes) === null || _userListNode$childNo4 === void 0 ? void 0 : _userListNode$childNo4.length) == 1 &&
            (userListNode === null || userListNode === void 0 ? void 0 : userListNode.childNodes[0].nodeName) == "#text")
            {
              userList.html(noItems);
            } else {
              searchInput.on("keyup", function (_event) {var _event$currentTarget3;_newArrowCheck(this, _this4);
                const targetValue = (_event$currentTarget3 = _event.currentTarget) === null || _event$currentTarget3 === void 0 ? void 0 : _event$currentTarget3.value,
                  serachValue = targetValue.toString().toLowerCase();
                this.findInListNewMsg(serachValue);
              }.bind(this));
              searchInput.on("search", function (_event) {var _event$currentTarget4;_newArrowCheck(this, _this4);
                const targetValue = (_event$currentTarget4 = _event.currentTarget) === null || _event$currentTarget4 === void 0 ? void 0 : _event$currentTarget4.value,
                  serachValue = targetValue.toString().toLowerCase();
                this.findInListNewMsg(serachValue);
              }.bind(this));
            }
          }
        }
      };

      searchFilter.init();
      searchFilter.initSearchNewMsg();
    }
  });
})(jQuery);

/***/ }),

/***/ "./src/assets/js/components/custom.js":
/*!********************************************!*\
  !*** ./src/assets/js/components/custom.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _newArrowCheck(innerThis, boundThis) {if (innerThis !== boundThis) {throw new TypeError("Cannot instantiate an arrow function");}}(function ($) {
  'use_strict';var _this = this;

  $.fn.equalHeight = function () {
    let tallest = 0;
    this.each(function () {
      let thisHeight = $(this).height();
      tallest = thisHeight > tallest ? thisHeight : tallest;
    });
    return this.height(tallest);
  };

  let is_chrome = navigator.userAgent.indexOf('Chrome') > -1;
  const is_explorer = navigator.userAgent.indexOf('MSIE') > -1;
  const is_firefox = navigator.userAgent.indexOf('Firefox') > -1;
  let is_safari = navigator.userAgent.indexOf("Safari") > -1;
  const is_opera = navigator.userAgent.toLowerCase().indexOf("op") > -1;
  if (is_chrome && is_safari) {
    is_safari = false;
  }
  if (is_chrome && is_opera) {
    is_chrome = false;
  }

  const getUrlVars = function getUrlVars() {_newArrowCheck(this, _this);
    let vars = {};
    let parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
      vars[key] = value;
    });
    return vars;
  }.bind(this);

  const url_vars = getUrlVars();

  const getUrl = function getUrl($url) {_newArrowCheck(this, _this);
    let url = $url.split("//");
    if (url[0] === "http:" || url[0] === "https:") {
      const protocol = url[0] + "//";
      let host = url[1].split("/")[0];
      url = protocol + host;
      const path = $url.split(url)[1];
      const lastArr = $url.split("/dist/"),
        last = lastArr.slice(-1).pop();

      return {
        protocol: protocol,
        host: host,
        path: path,
        last: last
      };
    }
  }.bind(this);

  /**
   * Preloader
   * */
  window.addEventListener("load", function () {var _this2 = this;_newArrowCheck(this, _this);
    const preloaderGroup = document.getElementById("preloaderGroup");
    if (preloaderGroup) {
      preloaderGroup.classList.add("vanish");
      setTimeout(function () {_newArrowCheck(this, _this2);
        preloaderGroup.style.display = "none";
      }.bind(this), 500);
    }

    // open side menu item
    if (url_vars !== null && url_vars !== void 0 && url_vars.toggle) {
      const parentLi = $(document).find(".collapse-item");
      if (parentLi && parentLi.length > 0) {
        const collapseMenu = parentLi.find(`#${url_vars === null || url_vars === void 0 ? void 0 : url_vars.toggle}`),
          collapseLink = parentLi.find(`.nav-link`),
          locationUrlArr = getUrl(window.location.href),
          linkHref = locationUrlArr === null || locationUrlArr === void 0 ? void 0 : locationUrlArr.last;

        // open collapsed menu
        collapseLink.removeClass("collapsed");
        collapseMenu.addClass("show");
        parentLi.addClass("active");

        // set active side menu item based on location href
        parentLi.find(`.nav-link`).each(function () {
          const current = $(this),
            currentHref = current.attr("href");
          if (linkHref == currentHref) {
            current.parent(".nav-item").addClass("active");
          }
        });
      }
    }
  }.bind(this));
  // END - Preloader

  $(window).on("load ready resize orientationChange", function () {
    const mainCointainer = document.querySelector("main.main-container"),
      headerNav = document.querySelector(".main-header > nav.navbar"),
      headerNavHeight =
      headerNav && (headerNav === null || headerNav === void 0 ? void 0 : headerNav.length) > 0 && headerNav.offsetHeight;
    mainCointainer && (
    mainCointainer.style["padding-top"] = headerNavHeight + "px");

    // Set same height for events-item
    if (
    $(window).width() >= 576 &&
    $(document).find(".event-results").length > 0)
    {
      $(document).
      find(".event-results .event-item:not(.full-width)").
      equalHeight();
    }
  });

  $(document).ready(function () {
    // left margin for main container
    const menu = $(document).find(".main-header .navbar .container"),
      margin_left = menu.length > 0 ? menu.offset().left : "auto",
      home_banner_content = $(document).find(
      ".features-banner-home .banner-content-wrapper");


    // home banner set left marging
    if (
    $(window).width() >= 1164 &&
    $(document).find(".event-results").length > 0)
    {
      home_banner_content.length > 0 &&
      home_banner_content.css({ "margin-left": margin_left + "px" });
    }

    // Customize inputs
    $('input[name="dates"]').daterangepicker({
      locale: {
        format: "YYYY.MM.DD"
      }
    });
    $("#date-of-birth").datepicker({
      dateFormat: "dd/mm/yy"
    });
    $('input[name="dates"]').val("");
    $('input[name="dates"]').attr("placeholder");

    $(".search-select").selectize({
      onInitialize: function () {
        $("#select-country-selectized").attr(
        "data-parsley-errors-container",
        "#errors");

      }
    });

    /* Inicialize Tooltip */
    $('[data-bs-toggle="tooltip"]').tooltip();

    // replace init action on collapse button
    $(".nav-item").on("click", function (e) {
      const currentItem = $(this),
        link = currentItem.find(".nav-link"),
        linkHref = link.attr("href");

      if (currentItem.hasClass("collapse-item")) {
        const newPath = `${window.location.origin}/dist/${linkHref}`;
        window.location.href = newPath;
      }
    });

    /* Inicialize Tables */
    // $('#dtBasicExample').DataTable();
  });

  $(document).on('click', '.filter-toggle', function () {
    if ($(".form-events-filter").length > 0) {
      $(".form-events-filter").toggleClass("active");
    }
    if ($(".form-news-filter").length > 0) {
      $(".form-news-filter").toggleClass("active");
    }

  });

  const event_menu = $('#event-nav'),
    menu_item = $('#event-nav .menu-item a'),
    event_menu_btn = $('.event-nav-toggle span');
  if (event_menu) {
    let current_li = $(event_menu).find('li.active>a');
    $(event_menu_btn).text($(current_li).text());
  }

  $(document).on('click', '.event-nav-toggle', function () {
    $('#event-nav').toggleClass('show');
  });


  $(document).on('click', function (e) {
    if (!$(e.target).closest(".event-menu").length) {
      $('#event-nav').removeClass('show');
    }
  });
  $(menu_item).on('click', function (e) {
    $('#event-nav').removeClass('show');
    $(event_menu_btn).text($(this).text());
  });


  $(function () {
    $('.event-menu a').click(function () {

      // Check for active
      $('.event-menu li').removeClass('active');
      $(this).parent().addClass('active');

      // Display active tab
      let currentTab = $(this).attr('data-tabs');
      let currentTab2 = $(this).attr('data-tabs2');
      $('.tabs-content .tab-item-content').removeClass('active');
      $(currentTab).addClass('active');
      $(currentTab2).addClass('active');
      return false;
    });
  });


  $(document).on('mouseenter', '.general_info-button a', function () {
    const name = $(this).data('hover');
    $(this).text(name);
  });

  $(document).on('mouseout', '.general_info-button a', function () {
    const name = $(this).data('value');
    $(this).text(name);
  });


  $('#search-member-admin').selectize({
    searchField: ['text'],
    render: {
      option: function (item, escape) {
        if (item.type == 'user') {
          return '<div><span class="search-image"><img src="' + item.image + '"></span><span>' + item.text + '</span></div>';
        }
        if (item.type == 'event') {
          return '<div><span class="search-image-event"><img src="' + item.image + '"></span><span>' + item.text + '</span></div>';
        }
      }
    }
  });

  $('#search-collective-members-country').selectize({
    searchField: ['text'],
    render: {
      option: function (item, escape) {
        return '<div>' + item.text + '</div>';
      }
    }
  });

  $("#search-collective-members-keyword").on("keyup", function () {
    var value = $(this).val().toLowerCase();
    $("#search-collective-members-list .list-group-item").filter(function () {
      $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
    });


    if (value == "") {
      $('.list-group-item').unhighlight();
      return;
    }

    $('.list-group-item').unhighlight();
    $('.list-group-item').highlight(value);

    $('.search-result').show();
    $('.search-result').text('Search results for “' + $(this).val() + '”');
    if ($(this).val() == '') {
      $('.search-result').hide();
    }
  });


  $('#spoken-language').select2({
    placeholder: {
      id: '-1', // the value of the option
      text: 'Add more'
    }
  }).
  on('select2:close', function (e) {
    $('.select2-search__field').attr('placeholder', 'Add more');
  });

  $('.event-slider').slick({
    dots: true,
    infinite: false,
    autoplay: false,
    prevArrow: $('.prev'),
    nextArrow: $('.next'),
    appendDots: $('.slick-slider-dots'),
    speed: 300,
    slidesToShow: 4,
    slidesToScroll: 4,
    customPaging: function (slider, i) {
      let current_i = i + 1;
      let item_li = $(i).length;
      console.log(slider);
      return '<button class="tab">' + current_i + ' of ' + 3 + '</button>';
    },
    responsive: [
    {
      breakpoint: 1401,
      settings: {
        slidesToShow: 3,
        slidesToScroll: 3,
        infinite: true,
        dots: true
      }
    },
    {
      breakpoint: 1024,
      settings: {
        slidesToShow: 2,
        slidesToScroll: 2
      }
    },
    {
      breakpoint: 600,
      settings: {
        slidesToShow: 1,
        slidesToScroll: 1
      }
    }
    // You can unslick at a given breakpoint now by adding:
    // settings: "unslick"
    // instead of a settings object
    ]
  });


})(jQuery);

jQuery.extend({
  highlight: function (node, re, nodeName, className) {
    if (node.nodeType === 3) {
      var match = node.data.match(re);
      if (match) {
        var highlight = document.createElement(nodeName || 'span');
        highlight.className = className || 'highlight';
        var wordNode = node.splitText(match.index);
        wordNode.splitText(match[0].length);
        var wordClone = wordNode.cloneNode(true);
        highlight.appendChild(wordClone);
        wordNode.parentNode.replaceChild(highlight, wordNode);
        return 1; //skip added node in parent
      }
    } else if (node.nodeType === 1 && node.childNodes && // only element nodes that have children
    !/(script|style)/i.test(node.tagName) && // ignore script and style nodes
    !(node.tagName === nodeName.toUpperCase() && node.className === className)) {// skip if already highlighted
      for (var i = 0; i < node.childNodes.length; i++) {
        i += jQuery.highlight(node.childNodes[i], re, nodeName, className);
      }
    }
    return 0;
  }
});

jQuery.fn.unhighlight = function (options) {
  var settings = {
    className: 'highlight',
    element: 'span'
  };
  jQuery.extend(settings, options);

  return this.find(settings.element + "." + settings.className).each(function () {
    var parent = this.parentNode;
    parent.replaceChild(this.firstChild, this);
    parent.normalize();
  }).end();
};

jQuery.fn.highlight = function (words, options) {
  var settings = {
    className: 'highlight',
    element: 'span',
    caseSensitive: false,
    wordsOnly: false
  };
  jQuery.extend(settings, options);

  if (words.constructor === String) {
    words = [words];
  }
  words = jQuery.grep(words, function (word, i) {
    return word != '';
  });
  words = jQuery.map(words, function (word, i) {
    return word.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  });
  if (words.length == 0) {
    return this;
  };

  var flag = settings.caseSensitive ? "" : "i";
  var pattern = "(" + words.join("|") + ")";
  if (settings.wordsOnly) {
    pattern = "\\b" + pattern + "\\b";
  }
  var re = new RegExp(pattern, flag);

  return this.each(function () {
    jQuery.highlight(this, re, settings.element, settings.className);
  });
};

/***/ }),

/***/ "./src/assets/js/components/main.js":
/*!******************************************!*\
  !*** ./src/assets/js/components/main.js ***!
  \******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
(function mainScript() {
  "use strict";

  /* OffCanvas */
  const offcanvasToggle = document.querySelector(
  '[data-bs-toggle="offcanvas"]');

  const offcanvasToggleClose = document.querySelector(
  '[data-bs-toggle="close-offcanvas"]');

  const offcanvasCollapse = document.querySelector(".offcanvas-collapse");

  offcanvasToggle && offcanvasToggle.addEventListener("click", function () {
    const headerNav = document.querySelector('.main-header > nav.navbar');
    /* Add Height of navbar */
    if (headerNav && (headerNav === null || headerNav === void 0 ? void 0 : headerNav.length) > 0 && offcanvasCollapse.classList.contains('open')) {
      offcanvasCollapse.style.top = 0;
    } else if (headerNav && (headerNav === null || headerNav === void 0 ? void 0 : headerNav.length) > 0 && !offcanvasCollapse.classList.contains('open')) {
      console.log(headerNav.offsetHeight);
      offcanvasCollapse.style.top = headerNav.offsetHeight + 'px';
    }
    // main action
    offcanvasCollapse.classList.toggle("open");

  });

  offcanvasToggleClose && offcanvasToggleClose.addEventListener("click", function () {
    const headerNav = document.querySelector('.main-header > nav.navbar');
    /* Add Height of navbar */
    if (headerNav && (headerNav === null || headerNav === void 0 ? void 0 : headerNav.length) > 0 && offcanvasCollapse.classList.contains('open')) {
      offcanvasCollapse.style.top = 0;
    } else if (headerNav && (headerNav === null || headerNav === void 0 ? void 0 : headerNav.length) > 0 && !offcanvasCollapse.classList.contains('open')) {
      console.log(headerNav.offsetHeight);
      offcanvasCollapse.style.top = headerNav.offsetHeight + 'px';
    }
    // main action
    offcanvasCollapse.classList.toggle("open");
  });

  /* Header Search Bar */
  const searchbarToggle = document.querySelector(
  '[data-bs-toggle="searchbar"]');

  const searchbarCollapse = document.querySelector(".searchbar-collapse");
  searchbarToggle && searchbarToggle.addEventListener("click", function () {
    const searchInput = searchbarCollapse.querySelector('[type="search"]'),
      headerNav = document.querySelector('.main-header > nav.navbar'),
      headerNavHeight = headerNav && headerNav.offsetHeight;
    if (headerNav && (headerNav === null || headerNav === void 0 ? void 0 : headerNav.length) > 0 && searchbarCollapse.classList.contains('open')) {
      searchbarCollapse.style.top = 0;
    } else if (headerNav && (headerNav === null || headerNav === void 0 ? void 0 : headerNav.length) > 0 && !searchbarCollapse.classList.contains('open')) {
      searchbarCollapse.style.top = headerNavHeight + 'px';
    }
    // main action
    searchbarCollapse.classList.toggle("open");
    searchInput.focus();
  });


})();

/***/ }),

/***/ "./src/assets/js/components/podcastMedia.js":
/*!**************************************************!*\
  !*** ./src/assets/js/components/podcastMedia.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
(function podcastMedia() {
  "use strict";

  const options = {
    defaultSpeed: '1.00',
    loop: false,
    features: [
    "playpause",
    "progress",
    "current",
    "duration"]

  };

  const podcastsPlayer = document.querySelectorAll(".mejs__podcast");

  podcastsPlayer.forEach(function (podcastAudio) {
    let player = new MediaElementPlayer(
    podcastAudio,
    options);


    /*    console.log('podcastAudio', podcastAudio);
       console.log('player', player); */

    /* const elementTop = document.createElement('div');
      const elementBottom = document.createElement('div');
      elementTop.classList.add('mejs-prepended-buttons');
      elementBottom.classList.add('mejs-appended-buttons');
      const controls = player.controls;
       //const controls = document.querySelector('.mejs__controls');
      controls.prepend(elementTop);
      controls.append(elementBottom);
        const controlsChildren = Array.from(controls.childNodes).filter(v => v.className.startsWith("mejs__"));
      console.log(controlsChildren)
      controlsChildren.slice(0, 3).forEach(elem => {
        elementTop.append(elem)
      });
        controlsChildren.slice(3, controlsChildren.length).forEach(elem => {
        elementBottom.append(elem)
      }) */




  });

  const podcastsPlayerPage = document.querySelectorAll(".mejs__podcast-page");

  podcastsPlayerPage.forEach(function (podcastAudio) {
    let player = new MediaElementPlayer(
    podcastAudio,
    options);

  });



})();

/***/ }),

/***/ "./src/assets/js/components/select2.min.js":
/*!*************************************************!*\
  !*** ./src/assets/js/components/select2.min.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*! Select2 4.0.13 | https://github.com/select2/select2/blob/master/LICENSE.md */
!function (n) {"function" == typeof define && define.amd ? define(["jquery"], n) : "object" == typeof module && module.exports ? module.exports = function (e, t) {return void 0 === t && (t = "undefined" != typeof window ? require("jquery") : require("jquery")(e)), n(t), t;} : n(jQuery);}(function (u) {var e = function () {if (u && u.fn && u.fn.select2 && u.fn.select2.amd) var e = u.fn.select2.amd;var t, n, r, h, o, s, f, g, m, v, y, _, i, a, b;function w(e, t) {return i.call(e, t);}function l(e, t) {var n,r,i,o,s,a,l,c,u,d,p,h = t && t.split("/"),f = y.map,g = f && f["*"] || {};if (e) {for (s = (e = e.split("/")).length - 1, y.nodeIdCompat && b.test(e[s]) && (e[s] = e[s].replace(b, "")), "." === e[0].charAt(0) && h && (e = h.slice(0, h.length - 1).concat(e)), u = 0; u < e.length; u++) if ("." === (p = e[u])) e.splice(u, 1), --u;else if (".." === p) {if (0 === u || 1 === u && ".." === e[2] || ".." === e[u - 1]) continue;0 < u && (e.splice(u - 1, 2), u -= 2);}e = e.join("/");}if ((h || g) && f) {for (u = (n = e.split("/")).length; 0 < u; --u) {if (r = n.slice(0, u).join("/"), h) for (d = h.length; 0 < d; --d) if (i = (i = f[h.slice(0, d).join("/")]) && i[r]) {o = i, a = u;break;}if (o) break;!l && g && g[r] && (l = g[r], c = u);}!o && l && (o = l, a = c), o && (n.splice(0, a, o), e = n.join("/"));}return e;}function A(t, n) {return function () {var e = a.call(arguments, 0);return "string" != typeof e[0] && 1 === e.length && e.push(null), s.apply(h, e.concat([t, n]));};}function x(t) {return function (e) {m[t] = e;};}function D(e) {if (w(v, e)) {var t = v[e];delete v[e], _[e] = !0, o.apply(h, t);}if (!w(m, e) && !w(_, e)) throw new Error("No " + e);return m[e];}function c(e) {var t,n = e ? e.indexOf("!") : -1;return -1 < n && (t = e.substring(0, n), e = e.substring(n + 1, e.length)), [t, e];}function S(e) {return e ? c(e) : [];}return e && e.requirejs || (e ? n = e : e = {}, m = {}, v = {}, y = {}, _ = {}, i = Object.prototype.hasOwnProperty, a = [].slice, b = /\.js$/, f = function (e, t) {var n,r,i = c(e),o = i[0],s = t[1];return e = i[1], o && (n = D(o = l(o, s))), o ? e = n && n.normalize ? n.normalize(e, (r = s, function (e) {return l(e, r);})) : l(e, s) : (o = (i = c(e = l(e, s)))[0], e = i[1], o && (n = D(o))), { f: o ? o + "!" + e : e, n: e, pr: o, p: n };}, g = { require: function (e) {return A(e);}, exports: function (e) {var t = m[e];return void 0 !== t ? t : m[e] = {};}, module: function (e) {return { id: e, uri: "", exports: m[e], config: (t = e, function () {return y && y.config && y.config[t] || {};}) };var t;} }, o = function (e, t, n, r) {var i,o,s,a,l,c,u,d = [],p = typeof n;if (c = S(r = r || e), "undefined" == p || "function" == p) {for (t = !t.length && n.length ? ["require", "exports", "module"] : t, l = 0; l < t.length; l += 1) if ("require" === (o = (a = f(t[l], c)).f)) d[l] = g.require(e);else if ("exports" === o) d[l] = g.exports(e), u = !0;else if ("module" === o) i = d[l] = g.module(e);else if (w(m, o) || w(v, o) || w(_, o)) d[l] = D(o);else {if (!a.p) throw new Error(e + " missing " + o);a.p.load(a.n, A(r, !0), x(o), {}), d[l] = m[o];}s = n ? n.apply(m[e], d) : void 0, e && (i && i.exports !== h && i.exports !== m[e] ? m[e] = i.exports : s === h && u || (m[e] = s));} else e && (m[e] = n);}, t = n = s = function (e, t, n, r, i) {if ("string" == typeof e) return g[e] ? g[e](t) : D(f(e, S(t)).f);if (!e.splice) {if ((y = e).deps && s(y.deps, y.callback), !t) return;t.splice ? (e = t, t = n, n = null) : e = h;}return t = t || function () {}, "function" == typeof n && (n = r, r = i), r ? o(h, e, t, n) : setTimeout(function () {o(h, e, t, n);}, 4), s;}, s.config = function (e) {return s(e);}, t._defined = m, (r = function (e, t, n) {if ("string" != typeof e) throw new Error("See almond README: incorrect module build, no module name");t.splice || (n = t, t = []), w(m, e) || w(v, e) || (v[e] = [e, t, n]);}).amd = { jQuery: !0 }, e.requirejs = t, e.require = n, e.define = r), e.define("almond", function () {}), e.define("jquery", [], function () {var e = u || $;return null == e && console && console.error && console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."), e;}), e.define("select2/utils", ["jquery"], function (o) {var i = {};function u(e) {var t = e.prototype,n = [];for (var r in t) {"function" == typeof t[r] && "constructor" !== r && n.push(r);}return n;}i.Extend = function (e, t) {var n = {}.hasOwnProperty;function r() {this.constructor = e;}for (var i in t) n.call(t, i) && (e[i] = t[i]);return r.prototype = t.prototype, e.prototype = new r(), e.__super__ = t.prototype, e;}, i.Decorate = function (r, i) {var e = u(i),t = u(r);function o() {var e = Array.prototype.unshift,t = i.prototype.constructor.length,n = r.prototype.constructor;0 < t && (e.call(arguments, r.prototype.constructor), n = i.prototype.constructor), n.apply(this, arguments);}i.displayName = r.displayName, o.prototype = new function () {this.constructor = o;}();for (var n = 0; n < t.length; n++) {var s = t[n];o.prototype[s] = r.prototype[s];}function a(e) {var t = function () {};e in o.prototype && (t = o.prototype[e]);var n = i.prototype[e];return function () {return Array.prototype.unshift.call(arguments, t), n.apply(this, arguments);};}for (var l = 0; l < e.length; l++) {var c = e[l];o.prototype[c] = a(c);}return o;};function e() {this.listeners = {};}e.prototype.on = function (e, t) {this.listeners = this.listeners || {}, e in this.listeners ? this.listeners[e].push(t) : this.listeners[e] = [t];}, e.prototype.trigger = function (e) {var t = Array.prototype.slice,n = t.call(arguments, 1);this.listeners = this.listeners || {}, null == n && (n = []), 0 === n.length && n.push({}), (n[0]._type = e) in this.listeners && this.invoke(this.listeners[e], t.call(arguments, 1)), "*" in this.listeners && this.invoke(this.listeners["*"], arguments);}, e.prototype.invoke = function (e, t) {for (var n = 0, r = e.length; n < r; n++) e[n].apply(this, t);}, i.Observable = e, i.generateChars = function (e) {for (var t = "", n = 0; n < e; n++) {t += Math.floor(36 * Math.random()).toString(36);}return t;}, i.bind = function (e, t) {return function () {e.apply(t, arguments);};}, i._convertData = function (e) {for (var t in e) {var n = t.split("-"),r = e;if (1 !== n.length) {for (var i = 0; i < n.length; i++) {var o = n[i];(o = o.substring(0, 1).toLowerCase() + o.substring(1)) in r || (r[o] = {}), i == n.length - 1 && (r[o] = e[t]), r = r[o];}delete e[t];}}return e;}, i.hasScroll = function (e, t) {var n = o(t),r = t.style.overflowX,i = t.style.overflowY;return (r !== i || "hidden" !== i && "visible" !== i) && ("scroll" === r || "scroll" === i || n.innerHeight() < t.scrollHeight || n.innerWidth() < t.scrollWidth);}, i.escapeMarkup = function (e) {var t = { "\\": "&#92;", "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;", "/": "&#47;" };return "string" != typeof e ? e : String(e).replace(/[&<>"'\/\\]/g, function (e) {return t[e];});}, i.appendMany = function (e, t) {if ("1.7" === o.fn.jquery.substr(0, 3)) {var n = o();o.map(t, function (e) {n = n.add(e);}), t = n;}e.append(t);}, i.__cache = {};var n = 0;return i.GetUniqueElementId = function (e) {var t = e.getAttribute("data-select2-id");return null == t && (e.id ? (t = e.id, e.setAttribute("data-select2-id", t)) : (e.setAttribute("data-select2-id", ++n), t = n.toString())), t;}, i.StoreData = function (e, t, n) {var r = i.GetUniqueElementId(e);i.__cache[r] || (i.__cache[r] = {}), i.__cache[r][t] = n;}, i.GetData = function (e, t) {var n = i.GetUniqueElementId(e);return t ? i.__cache[n] && null != i.__cache[n][t] ? i.__cache[n][t] : o(e).data(t) : i.__cache[n];}, i.RemoveData = function (e) {var t = i.GetUniqueElementId(e);null != i.__cache[t] && delete i.__cache[t], e.removeAttribute("data-select2-id");}, i;}), e.define("select2/results", ["jquery", "./utils"], function (h, f) {function r(e, t, n) {this.$element = e, this.data = n, this.options = t, r.__super__.constructor.call(this);}return f.Extend(r, f.Observable), r.prototype.render = function () {var e = h('<ul class="select2-results__options" role="listbox"></ul>');return this.options.get("multiple") && e.attr("aria-multiselectable", "true"), this.$results = e;}, r.prototype.clear = function () {this.$results.empty();}, r.prototype.displayMessage = function (e) {var t = this.options.get("escapeMarkup");this.clear(), this.hideLoading();var n = h('<li role="alert" aria-live="assertive" class="select2-results__option"></li>'),r = this.options.get("translations").get(e.message);n.append(t(r(e.args))), n[0].className += " select2-results__message", this.$results.append(n);}, r.prototype.hideMessages = function () {this.$results.find(".select2-results__message").remove();}, r.prototype.append = function (e) {this.hideLoading();var t = [];if (null != e.results && 0 !== e.results.length) {e.results = this.sort(e.results);for (var n = 0; n < e.results.length; n++) {var r = e.results[n],i = this.option(r);t.push(i);}this.$results.append(t);} else 0 === this.$results.children().length && this.trigger("results:message", { message: "noResults" });}, r.prototype.position = function (e, t) {t.find(".select2-results").append(e);}, r.prototype.sort = function (e) {return this.options.get("sorter")(e);}, r.prototype.highlightFirstItem = function () {var e = this.$results.find(".select2-results__option[aria-selected]"),t = e.filter("[aria-selected=true]");0 < t.length ? t.first().trigger("mouseenter") : e.first().trigger("mouseenter"), this.ensureHighlightVisible();}, r.prototype.setClasses = function () {var t = this;this.data.current(function (e) {var r = h.map(e, function (e) {return e.id.toString();});t.$results.find(".select2-results__option[aria-selected]").each(function () {var e = h(this),t = f.GetData(this, "data"),n = "" + t.id;null != t.element && t.element.selected || null == t.element && -1 < h.inArray(n, r) ? e.attr("aria-selected", "true") : e.attr("aria-selected", "false");});});}, r.prototype.showLoading = function (e) {this.hideLoading();var t = { disabled: !0, loading: !0, text: this.options.get("translations").get("searching")(e) },n = this.option(t);n.className += " loading-results", this.$results.prepend(n);}, r.prototype.hideLoading = function () {this.$results.find(".loading-results").remove();}, r.prototype.option = function (e) {var t = document.createElement("li");t.className = "select2-results__option";var n = { role: "option", "aria-selected": "false" },r = window.Element.prototype.matches || window.Element.prototype.msMatchesSelector || window.Element.prototype.webkitMatchesSelector;for (var i in (null != e.element && r.call(e.element, ":disabled") || null == e.element && e.disabled) && (delete n["aria-selected"], n["aria-disabled"] = "true"), null == e.id && delete n["aria-selected"], null != e._resultId && (t.id = e._resultId), e.title && (t.title = e.title), e.children && (n.role = "group", n["aria-label"] = e.text, delete n["aria-selected"]), n) {var o = n[i];t.setAttribute(i, o);}if (e.children) {var s = h(t),a = document.createElement("strong");a.className = "select2-results__group";h(a);this.template(e, a);for (var l = [], c = 0; c < e.children.length; c++) {var u = e.children[c],d = this.option(u);l.push(d);}var p = h("<ul></ul>", { class: "select2-results__options select2-results__options--nested" });p.append(l), s.append(a), s.append(p);} else this.template(e, t);return f.StoreData(t, "data", e), t;}, r.prototype.bind = function (t, e) {var l = this,n = t.id + "-results";this.$results.attr("id", n), t.on("results:all", function (e) {l.clear(), l.append(e.data), t.isOpen() && (l.setClasses(), l.highlightFirstItem());}), t.on("results:append", function (e) {l.append(e.data), t.isOpen() && l.setClasses();}), t.on("query", function (e) {l.hideMessages(), l.showLoading(e);}), t.on("select", function () {t.isOpen() && (l.setClasses(), l.options.get("scrollAfterSelect") && l.highlightFirstItem());}), t.on("unselect", function () {t.isOpen() && (l.setClasses(), l.options.get("scrollAfterSelect") && l.highlightFirstItem());}), t.on("open", function () {l.$results.attr("aria-expanded", "true"), l.$results.attr("aria-hidden", "false"), l.setClasses(), l.ensureHighlightVisible();}), t.on("close", function () {l.$results.attr("aria-expanded", "false"), l.$results.attr("aria-hidden", "true"), l.$results.removeAttr("aria-activedescendant");}), t.on("results:toggle", function () {var e = l.getHighlightedResults();0 !== e.length && e.trigger("mouseup");}), t.on("results:select", function () {var e = l.getHighlightedResults();if (0 !== e.length) {var t = f.GetData(e[0], "data");"true" == e.attr("aria-selected") ? l.trigger("close", {}) : l.trigger("select", { data: t });}}), t.on("results:previous", function () {var e = l.getHighlightedResults(),t = l.$results.find("[aria-selected]"),n = t.index(e);if (!(n <= 0)) {var r = n - 1;0 === e.length && (r = 0);var i = t.eq(r);i.trigger("mouseenter");var o = l.$results.offset().top,s = i.offset().top,a = l.$results.scrollTop() + (s - o);0 === r ? l.$results.scrollTop(0) : s - o < 0 && l.$results.scrollTop(a);}}), t.on("results:next", function () {var e = l.getHighlightedResults(),t = l.$results.find("[aria-selected]"),n = t.index(e) + 1;if (!(n >= t.length)) {var r = t.eq(n);r.trigger("mouseenter");var i = l.$results.offset().top + l.$results.outerHeight(!1),o = r.offset().top + r.outerHeight(!1),s = l.$results.scrollTop() + o - i;0 === n ? l.$results.scrollTop(0) : i < o && l.$results.scrollTop(s);}}), t.on("results:focus", function (e) {e.element.addClass("select2-results__option--highlighted");}), t.on("results:message", function (e) {l.displayMessage(e);}), h.fn.mousewheel && this.$results.on("mousewheel", function (e) {var t = l.$results.scrollTop(),n = l.$results.get(0).scrollHeight - t + e.deltaY,r = 0 < e.deltaY && t - e.deltaY <= 0,i = e.deltaY < 0 && n <= l.$results.height();r ? (l.$results.scrollTop(0), e.preventDefault(), e.stopPropagation()) : i && (l.$results.scrollTop(l.$results.get(0).scrollHeight - l.$results.height()), e.preventDefault(), e.stopPropagation());}), this.$results.on("mouseup", ".select2-results__option[aria-selected]", function (e) {var t = h(this),n = f.GetData(this, "data");"true" !== t.attr("aria-selected") ? l.trigger("select", { originalEvent: e, data: n }) : l.options.get("multiple") ? l.trigger("unselect", { originalEvent: e, data: n }) : l.trigger("close", {});}), this.$results.on("mouseenter", ".select2-results__option[aria-selected]", function (e) {var t = f.GetData(this, "data");l.getHighlightedResults().removeClass("select2-results__option--highlighted"), l.trigger("results:focus", { data: t, element: h(this) });});}, r.prototype.getHighlightedResults = function () {return this.$results.find(".select2-results__option--highlighted");}, r.prototype.destroy = function () {this.$results.remove();}, r.prototype.ensureHighlightVisible = function () {var e = this.getHighlightedResults();if (0 !== e.length) {var t = this.$results.find("[aria-selected]").index(e),n = this.$results.offset().top,r = e.offset().top,i = this.$results.scrollTop() + (r - n),o = r - n;i -= 2 * e.outerHeight(!1), t <= 2 ? this.$results.scrollTop(0) : (o > this.$results.outerHeight() || o < 0) && this.$results.scrollTop(i);}}, r.prototype.template = function (e, t) {var n = this.options.get("templateResult"),r = this.options.get("escapeMarkup"),i = n(e, t);null == i ? t.style.display = "none" : "string" == typeof i ? t.innerHTML = r(i) : h(t).append(i);}, r;}), e.define("select2/keys", [], function () {return { BACKSPACE: 8, TAB: 9, ENTER: 13, SHIFT: 16, CTRL: 17, ALT: 18, ESC: 27, SPACE: 32, PAGE_UP: 33, PAGE_DOWN: 34, END: 35, HOME: 36, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, DELETE: 46 };}), e.define("select2/selection/base", ["jquery", "../utils", "../keys"], function (n, r, i) {function o(e, t) {this.$element = e, this.options = t, o.__super__.constructor.call(this);}return r.Extend(o, r.Observable), o.prototype.render = function () {var e = n('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>');return this._tabindex = 0, null != r.GetData(this.$element[0], "old-tabindex") ? this._tabindex = r.GetData(this.$element[0], "old-tabindex") : null != this.$element.attr("tabindex") && (this._tabindex = this.$element.attr("tabindex")), e.attr("title", this.$element.attr("title")), e.attr("tabindex", this._tabindex), e.attr("aria-disabled", "false"), this.$selection = e;}, o.prototype.bind = function (e, t) {var n = this,r = e.id + "-results";this.container = e, this.$selection.on("focus", function (e) {n.trigger("focus", e);}), this.$selection.on("blur", function (e) {n._handleBlur(e);}), this.$selection.on("keydown", function (e) {n.trigger("keypress", e), e.which === i.SPACE && e.preventDefault();}), e.on("results:focus", function (e) {n.$selection.attr("aria-activedescendant", e.data._resultId);}), e.on("selection:update", function (e) {n.update(e.data);}), e.on("open", function () {n.$selection.attr("aria-expanded", "true"), n.$selection.attr("aria-owns", r), n._attachCloseHandler(e);}), e.on("close", function () {n.$selection.attr("aria-expanded", "false"), n.$selection.removeAttr("aria-activedescendant"), n.$selection.removeAttr("aria-owns"), n.$selection.trigger("focus"), n._detachCloseHandler(e);}), e.on("enable", function () {n.$selection.attr("tabindex", n._tabindex), n.$selection.attr("aria-disabled", "false");}), e.on("disable", function () {n.$selection.attr("tabindex", "-1"), n.$selection.attr("aria-disabled", "true");});}, o.prototype._handleBlur = function (e) {var t = this;window.setTimeout(function () {document.activeElement == t.$selection[0] || n.contains(t.$selection[0], document.activeElement) || t.trigger("blur", e);}, 1);}, o.prototype._attachCloseHandler = function (e) {n(document.body).on("mousedown.select2." + e.id, function (e) {var t = n(e.target).closest(".select2");n(".select2.select2-container--open").each(function () {this != t[0] && r.GetData(this, "element").select2("close");});});}, o.prototype._detachCloseHandler = function (e) {n(document.body).off("mousedown.select2." + e.id);}, o.prototype.position = function (e, t) {t.find(".selection").append(e);}, o.prototype.destroy = function () {this._detachCloseHandler(this.container);}, o.prototype.update = function (e) {throw new Error("The `update` method must be defined in child classes.");}, o.prototype.isEnabled = function () {return !this.isDisabled();}, o.prototype.isDisabled = function () {return this.options.get("disabled");}, o;}), e.define("select2/selection/single", ["jquery", "./base", "../utils", "../keys"], function (e, t, n, r) {function i() {i.__super__.constructor.apply(this, arguments);}return n.Extend(i, t), i.prototype.render = function () {var e = i.__super__.render.call(this);return e.addClass("select2-selection--single"), e.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'), e;}, i.prototype.bind = function (t, e) {var n = this;i.__super__.bind.apply(this, arguments);var r = t.id + "-container";this.$selection.find(".select2-selection__rendered").attr("id", r).attr("role", "textbox").attr("aria-readonly", "true"), this.$selection.attr("aria-labelledby", r), this.$selection.on("mousedown", function (e) {1 === e.which && n.trigger("toggle", { originalEvent: e });}), this.$selection.on("focus", function (e) {}), this.$selection.on("blur", function (e) {}), t.on("focus", function (e) {t.isOpen() || n.$selection.trigger("focus");});}, i.prototype.clear = function () {var e = this.$selection.find(".select2-selection__rendered");e.empty(), e.removeAttr("title");}, i.prototype.display = function (e, t) {var n = this.options.get("templateSelection");return this.options.get("escapeMarkup")(n(e, t));}, i.prototype.selectionContainer = function () {return e("<span></span>");}, i.prototype.update = function (e) {if (0 !== e.length) {var t = e[0],n = this.$selection.find(".select2-selection__rendered"),r = this.display(t, n);n.empty().append(r);var i = t.title || t.text;i ? n.attr("title", i) : n.removeAttr("title");} else this.clear();}, i;}), e.define("select2/selection/multiple", ["jquery", "./base", "../utils"], function (i, e, l) {function n(e, t) {n.__super__.constructor.apply(this, arguments);}return l.Extend(n, e), n.prototype.render = function () {var e = n.__super__.render.call(this);return e.addClass("select2-selection--multiple"), e.html('<ul class="select2-selection__rendered"></ul>'), e;}, n.prototype.bind = function (e, t) {var r = this;n.__super__.bind.apply(this, arguments), this.$selection.on("click", function (e) {r.trigger("toggle", { originalEvent: e });}), this.$selection.on("click", ".select2-selection__choice__remove", function (e) {if (!r.isDisabled()) {var t = i(this).parent(),n = l.GetData(t[0], "data");r.trigger("unselect", { originalEvent: e, data: n });}});}, n.prototype.clear = function () {var e = this.$selection.find(".select2-selection__rendered");e.empty(), e.removeAttr("title");}, n.prototype.display = function (e, t) {var n = this.options.get("templateSelection");return this.options.get("escapeMarkup")(n(e, t));}, n.prototype.selectionContainer = function () {return i('<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>');}, n.prototype.update = function (e) {if (this.clear(), 0 !== e.length) {for (var t = [], n = 0; n < e.length; n++) {var r = e[n],i = this.selectionContainer(),o = this.display(r, i);i.append(o);var s = r.title || r.text;s && i.attr("title", s), l.StoreData(i[0], "data", r), t.push(i);}var a = this.$selection.find(".select2-selection__rendered");l.appendMany(a, t);}}, n;}), e.define("select2/selection/placeholder", ["../utils"], function (e) {function t(e, t, n) {this.placeholder = this.normalizePlaceholder(n.get("placeholder")), e.call(this, t, n);}return t.prototype.normalizePlaceholder = function (e, t) {return "string" == typeof t && (t = { id: "", text: t }), t;}, t.prototype.createPlaceholder = function (e, t) {var n = this.selectionContainer();return n.html(this.display(t)), n.addClass("select2-selection__placeholder").removeClass("select2-selection__choice"), n;}, t.prototype.update = function (e, t) {var n = 1 == t.length && t[0].id != this.placeholder.id;if (1 < t.length || n) return e.call(this, t);this.clear();var r = this.createPlaceholder(this.placeholder);this.$selection.find(".select2-selection__rendered").append(r);}, t;}), e.define("select2/selection/allowClear", ["jquery", "../keys", "../utils"], function (i, r, a) {function e() {}return e.prototype.bind = function (e, t, n) {var r = this;e.call(this, t, n), null == this.placeholder && this.options.get("debug") && window.console && console.error && console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option."), this.$selection.on("mousedown", ".select2-selection__clear", function (e) {r._handleClear(e);}), t.on("keypress", function (e) {r._handleKeyboardClear(e, t);});}, e.prototype._handleClear = function (e, t) {if (!this.isDisabled()) {var n = this.$selection.find(".select2-selection__clear");if (0 !== n.length) {t.stopPropagation();var r = a.GetData(n[0], "data"),i = this.$element.val();this.$element.val(this.placeholder.id);var o = { data: r };if (this.trigger("clear", o), o.prevented) this.$element.val(i);else {for (var s = 0; s < r.length; s++) if (o = { data: r[s] }, this.trigger("unselect", o), o.prevented) return void this.$element.val(i);this.$element.trigger("input").trigger("change"), this.trigger("toggle", {});}}}}, e.prototype._handleKeyboardClear = function (e, t, n) {n.isOpen() || t.which != r.DELETE && t.which != r.BACKSPACE || this._handleClear(t);}, e.prototype.update = function (e, t) {if (e.call(this, t), !(0 < this.$selection.find(".select2-selection__placeholder").length || 0 === t.length)) {var n = this.options.get("translations").get("removeAllItems"),r = i('<span class="select2-selection__clear" title="' + n() + '">&times;</span>');a.StoreData(r[0], "data", t), this.$selection.find(".select2-selection__rendered").prepend(r);}}, e;}), e.define("select2/selection/search", ["jquery", "../utils", "../keys"], function (r, a, l) {function e(e, t, n) {e.call(this, t, n);}return e.prototype.render = function (e) {var t = r('<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" /></li>');this.$searchContainer = t, this.$search = t.find("input");var n = e.call(this);return this._transferTabIndex(), n;}, e.prototype.bind = function (e, t, n) {var r = this,i = t.id + "-results";e.call(this, t, n), t.on("open", function () {r.$search.attr("aria-controls", i), r.$search.trigger("focus");}), t.on("close", function () {r.$search.val(""), r.$search.removeAttr("aria-controls"), r.$search.removeAttr("aria-activedescendant"), r.$search.trigger("focus");}), t.on("enable", function () {r.$search.prop("disabled", !1), r._transferTabIndex();}), t.on("disable", function () {r.$search.prop("disabled", !0);}), t.on("focus", function (e) {r.$search.trigger("focus");}), t.on("results:focus", function (e) {e.data._resultId ? r.$search.attr("aria-activedescendant", e.data._resultId) : r.$search.removeAttr("aria-activedescendant");}), this.$selection.on("focusin", ".select2-search--inline", function (e) {r.trigger("focus", e);}), this.$selection.on("focusout", ".select2-search--inline", function (e) {r._handleBlur(e);}), this.$selection.on("keydown", ".select2-search--inline", function (e) {if (e.stopPropagation(), r.trigger("keypress", e), r._keyUpPrevented = e.isDefaultPrevented(), e.which === l.BACKSPACE && "" === r.$search.val()) {var t = r.$searchContainer.prev(".select2-selection__choice");if (0 < t.length) {var n = a.GetData(t[0], "data");r.searchRemoveChoice(n), e.preventDefault();}}}), this.$selection.on("click", ".select2-search--inline", function (e) {r.$search.val() && e.stopPropagation();});var o = document.documentMode,s = o && o <= 11;this.$selection.on("input.searchcheck", ".select2-search--inline", function (e) {s ? r.$selection.off("input.search input.searchcheck") : r.$selection.off("keyup.search");}), this.$selection.on("keyup.search input.search", ".select2-search--inline", function (e) {if (s && "input" === e.type) r.$selection.off("input.search input.searchcheck");else {var t = e.which;t != l.SHIFT && t != l.CTRL && t != l.ALT && t != l.TAB && r.handleSearch(e);}});}, e.prototype._transferTabIndex = function (e) {this.$search.attr("tabindex", this.$selection.attr("tabindex")), this.$selection.attr("tabindex", "-1");}, e.prototype.createPlaceholder = function (e, t) {this.$search.attr("placeholder", t.text);}, e.prototype.update = function (e, t) {var n = this.$search[0] == document.activeElement;this.$search.attr("placeholder", ""), e.call(this, t), this.$selection.find(".select2-selection__rendered").append(this.$searchContainer), this.resizeSearch(), n && this.$search.trigger("focus");}, e.prototype.handleSearch = function () {if (this.resizeSearch(), !this._keyUpPrevented) {var e = this.$search.val();this.trigger("query", { term: e });}this._keyUpPrevented = !1;}, e.prototype.searchRemoveChoice = function (e, t) {this.trigger("unselect", { data: t }), this.$search.val(t.text), this.handleSearch();}, e.prototype.resizeSearch = function () {this.$search.css("width", "25px");var e = "";"" !== this.$search.attr("placeholder") ? e = this.$selection.find(".select2-selection__rendered").width() : e = .75 * (this.$search.val().length + 1) + "em";this.$search.css("width", e);}, e;}), e.define("select2/selection/eventRelay", ["jquery"], function (s) {function e() {}return e.prototype.bind = function (e, t, n) {var r = this,i = ["open", "opening", "close", "closing", "select", "selecting", "unselect", "unselecting", "clear", "clearing"],o = ["opening", "closing", "selecting", "unselecting", "clearing"];e.call(this, t, n), t.on("*", function (e, t) {if (-1 !== s.inArray(e, i)) {t = t || {};var n = s.Event("select2:" + e, { params: t });r.$element.trigger(n), -1 !== s.inArray(e, o) && (t.prevented = n.isDefaultPrevented());}});}, e;}), e.define("select2/translation", ["jquery", "require"], function (t, n) {function r(e) {this.dict = e || {};}return r.prototype.all = function () {return this.dict;}, r.prototype.get = function (e) {return this.dict[e];}, r.prototype.extend = function (e) {this.dict = t.extend({}, e.all(), this.dict);}, r._cache = {}, r.loadPath = function (e) {if (!(e in r._cache)) {var t = n(e);r._cache[e] = t;}return new r(r._cache[e]);}, r;}), e.define("select2/diacritics", [], function () {return { "Ⓐ": "A", "Ａ": "A", "À": "A", "Á": "A", "Â": "A", "Ầ": "A", "Ấ": "A", "Ẫ": "A", "Ẩ": "A", "Ã": "A", "Ā": "A", "Ă": "A", "Ằ": "A", "Ắ": "A", "Ẵ": "A", "Ẳ": "A", "Ȧ": "A", "Ǡ": "A", "Ä": "A", "Ǟ": "A", "Ả": "A", "Å": "A", "Ǻ": "A", "Ǎ": "A", "Ȁ": "A", "Ȃ": "A", "Ạ": "A", "Ậ": "A", "Ặ": "A", "Ḁ": "A", "Ą": "A", "Ⱥ": "A", "Ɐ": "A", "Ꜳ": "AA", "Æ": "AE", "Ǽ": "AE", "Ǣ": "AE", "Ꜵ": "AO", "Ꜷ": "AU", "Ꜹ": "AV", "Ꜻ": "AV", "Ꜽ": "AY", "Ⓑ": "B", "Ｂ": "B", "Ḃ": "B", "Ḅ": "B", "Ḇ": "B", "Ƀ": "B", "Ƃ": "B", "Ɓ": "B", "Ⓒ": "C", "Ｃ": "C", "Ć": "C", "Ĉ": "C", "Ċ": "C", "Č": "C", "Ç": "C", "Ḉ": "C", "Ƈ": "C", "Ȼ": "C", "Ꜿ": "C", "Ⓓ": "D", "Ｄ": "D", "Ḋ": "D", "Ď": "D", "Ḍ": "D", "Ḑ": "D", "Ḓ": "D", "Ḏ": "D", "Đ": "D", "Ƌ": "D", "Ɗ": "D", "Ɖ": "D", "Ꝺ": "D", "Ǳ": "DZ", "Ǆ": "DZ", "ǲ": "Dz", "ǅ": "Dz", "Ⓔ": "E", "Ｅ": "E", "È": "E", "É": "E", "Ê": "E", "Ề": "E", "Ế": "E", "Ễ": "E", "Ể": "E", "Ẽ": "E", "Ē": "E", "Ḕ": "E", "Ḗ": "E", "Ĕ": "E", "Ė": "E", "Ë": "E", "Ẻ": "E", "Ě": "E", "Ȅ": "E", "Ȇ": "E", "Ẹ": "E", "Ệ": "E", "Ȩ": "E", "Ḝ": "E", "Ę": "E", "Ḙ": "E", "Ḛ": "E", "Ɛ": "E", "Ǝ": "E", "Ⓕ": "F", "Ｆ": "F", "Ḟ": "F", "Ƒ": "F", "Ꝼ": "F", "Ⓖ": "G", "Ｇ": "G", "Ǵ": "G", "Ĝ": "G", "Ḡ": "G", "Ğ": "G", "Ġ": "G", "Ǧ": "G", "Ģ": "G", "Ǥ": "G", "Ɠ": "G", "Ꞡ": "G", "Ᵹ": "G", "Ꝿ": "G", "Ⓗ": "H", "Ｈ": "H", "Ĥ": "H", "Ḣ": "H", "Ḧ": "H", "Ȟ": "H", "Ḥ": "H", "Ḩ": "H", "Ḫ": "H", "Ħ": "H", "Ⱨ": "H", "Ⱶ": "H", "Ɥ": "H", "Ⓘ": "I", "Ｉ": "I", "Ì": "I", "Í": "I", "Î": "I", "Ĩ": "I", "Ī": "I", "Ĭ": "I", "İ": "I", "Ï": "I", "Ḯ": "I", "Ỉ": "I", "Ǐ": "I", "Ȉ": "I", "Ȋ": "I", "Ị": "I", "Į": "I", "Ḭ": "I", "Ɨ": "I", "Ⓙ": "J", "Ｊ": "J", "Ĵ": "J", "Ɉ": "J", "Ⓚ": "K", "Ｋ": "K", "Ḱ": "K", "Ǩ": "K", "Ḳ": "K", "Ķ": "K", "Ḵ": "K", "Ƙ": "K", "Ⱪ": "K", "Ꝁ": "K", "Ꝃ": "K", "Ꝅ": "K", "Ꞣ": "K", "Ⓛ": "L", "Ｌ": "L", "Ŀ": "L", "Ĺ": "L", "Ľ": "L", "Ḷ": "L", "Ḹ": "L", "Ļ": "L", "Ḽ": "L", "Ḻ": "L", "Ł": "L", "Ƚ": "L", "Ɫ": "L", "Ⱡ": "L", "Ꝉ": "L", "Ꝇ": "L", "Ꞁ": "L", "Ǉ": "LJ", "ǈ": "Lj", "Ⓜ": "M", "Ｍ": "M", "Ḿ": "M", "Ṁ": "M", "Ṃ": "M", "Ɱ": "M", "Ɯ": "M", "Ⓝ": "N", "Ｎ": "N", "Ǹ": "N", "Ń": "N", "Ñ": "N", "Ṅ": "N", "Ň": "N", "Ṇ": "N", "Ņ": "N", "Ṋ": "N", "Ṉ": "N", "Ƞ": "N", "Ɲ": "N", "Ꞑ": "N", "Ꞥ": "N", "Ǌ": "NJ", "ǋ": "Nj", "Ⓞ": "O", "Ｏ": "O", "Ò": "O", "Ó": "O", "Ô": "O", "Ồ": "O", "Ố": "O", "Ỗ": "O", "Ổ": "O", "Õ": "O", "Ṍ": "O", "Ȭ": "O", "Ṏ": "O", "Ō": "O", "Ṑ": "O", "Ṓ": "O", "Ŏ": "O", "Ȯ": "O", "Ȱ": "O", "Ö": "O", "Ȫ": "O", "Ỏ": "O", "Ő": "O", "Ǒ": "O", "Ȍ": "O", "Ȏ": "O", "Ơ": "O", "Ờ": "O", "Ớ": "O", "Ỡ": "O", "Ở": "O", "Ợ": "O", "Ọ": "O", "Ộ": "O", "Ǫ": "O", "Ǭ": "O", "Ø": "O", "Ǿ": "O", "Ɔ": "O", "Ɵ": "O", "Ꝋ": "O", "Ꝍ": "O", "Œ": "OE", "Ƣ": "OI", "Ꝏ": "OO", "Ȣ": "OU", "Ⓟ": "P", "Ｐ": "P", "Ṕ": "P", "Ṗ": "P", "Ƥ": "P", "Ᵽ": "P", "Ꝑ": "P", "Ꝓ": "P", "Ꝕ": "P", "Ⓠ": "Q", "Ｑ": "Q", "Ꝗ": "Q", "Ꝙ": "Q", "Ɋ": "Q", "Ⓡ": "R", "Ｒ": "R", "Ŕ": "R", "Ṙ": "R", "Ř": "R", "Ȑ": "R", "Ȓ": "R", "Ṛ": "R", "Ṝ": "R", "Ŗ": "R", "Ṟ": "R", "Ɍ": "R", "Ɽ": "R", "Ꝛ": "R", "Ꞧ": "R", "Ꞃ": "R", "Ⓢ": "S", "Ｓ": "S", "ẞ": "S", "Ś": "S", "Ṥ": "S", "Ŝ": "S", "Ṡ": "S", "Š": "S", "Ṧ": "S", "Ṣ": "S", "Ṩ": "S", "Ș": "S", "Ş": "S", "Ȿ": "S", "Ꞩ": "S", "Ꞅ": "S", "Ⓣ": "T", "Ｔ": "T", "Ṫ": "T", "Ť": "T", "Ṭ": "T", "Ț": "T", "Ţ": "T", "Ṱ": "T", "Ṯ": "T", "Ŧ": "T", "Ƭ": "T", "Ʈ": "T", "Ⱦ": "T", "Ꞇ": "T", "Ꜩ": "TZ", "Ⓤ": "U", "Ｕ": "U", "Ù": "U", "Ú": "U", "Û": "U", "Ũ": "U", "Ṹ": "U", "Ū": "U", "Ṻ": "U", "Ŭ": "U", "Ü": "U", "Ǜ": "U", "Ǘ": "U", "Ǖ": "U", "Ǚ": "U", "Ủ": "U", "Ů": "U", "Ű": "U", "Ǔ": "U", "Ȕ": "U", "Ȗ": "U", "Ư": "U", "Ừ": "U", "Ứ": "U", "Ữ": "U", "Ử": "U", "Ự": "U", "Ụ": "U", "Ṳ": "U", "Ų": "U", "Ṷ": "U", "Ṵ": "U", "Ʉ": "U", "Ⓥ": "V", "Ｖ": "V", "Ṽ": "V", "Ṿ": "V", "Ʋ": "V", "Ꝟ": "V", "Ʌ": "V", "Ꝡ": "VY", "Ⓦ": "W", "Ｗ": "W", "Ẁ": "W", "Ẃ": "W", "Ŵ": "W", "Ẇ": "W", "Ẅ": "W", "Ẉ": "W", "Ⱳ": "W", "Ⓧ": "X", "Ｘ": "X", "Ẋ": "X", "Ẍ": "X", "Ⓨ": "Y", "Ｙ": "Y", "Ỳ": "Y", "Ý": "Y", "Ŷ": "Y", "Ỹ": "Y", "Ȳ": "Y", "Ẏ": "Y", "Ÿ": "Y", "Ỷ": "Y", "Ỵ": "Y", "Ƴ": "Y", "Ɏ": "Y", "Ỿ": "Y", "Ⓩ": "Z", "Ｚ": "Z", "Ź": "Z", "Ẑ": "Z", "Ż": "Z", "Ž": "Z", "Ẓ": "Z", "Ẕ": "Z", "Ƶ": "Z", "Ȥ": "Z", "Ɀ": "Z", "Ⱬ": "Z", "Ꝣ": "Z", "ⓐ": "a", "ａ": "a", "ẚ": "a", "à": "a", "á": "a", "â": "a", "ầ": "a", "ấ": "a", "ẫ": "a", "ẩ": "a", "ã": "a", "ā": "a", "ă": "a", "ằ": "a", "ắ": "a", "ẵ": "a", "ẳ": "a", "ȧ": "a", "ǡ": "a", "ä": "a", "ǟ": "a", "ả": "a", "å": "a", "ǻ": "a", "ǎ": "a", "ȁ": "a", "ȃ": "a", "ạ": "a", "ậ": "a", "ặ": "a", "ḁ": "a", "ą": "a", "ⱥ": "a", "ɐ": "a", "ꜳ": "aa", "æ": "ae", "ǽ": "ae", "ǣ": "ae", "ꜵ": "ao", "ꜷ": "au", "ꜹ": "av", "ꜻ": "av", "ꜽ": "ay", "ⓑ": "b", "ｂ": "b", "ḃ": "b", "ḅ": "b", "ḇ": "b", "ƀ": "b", "ƃ": "b", "ɓ": "b", "ⓒ": "c", "ｃ": "c", "ć": "c", "ĉ": "c", "ċ": "c", "č": "c", "ç": "c", "ḉ": "c", "ƈ": "c", "ȼ": "c", "ꜿ": "c", "ↄ": "c", "ⓓ": "d", "ｄ": "d", "ḋ": "d", "ď": "d", "ḍ": "d", "ḑ": "d", "ḓ": "d", "ḏ": "d", "đ": "d", "ƌ": "d", "ɖ": "d", "ɗ": "d", "ꝺ": "d", "ǳ": "dz", "ǆ": "dz", "ⓔ": "e", "ｅ": "e", "è": "e", "é": "e", "ê": "e", "ề": "e", "ế": "e", "ễ": "e", "ể": "e", "ẽ": "e", "ē": "e", "ḕ": "e", "ḗ": "e", "ĕ": "e", "ė": "e", "ë": "e", "ẻ": "e", "ě": "e", "ȅ": "e", "ȇ": "e", "ẹ": "e", "ệ": "e", "ȩ": "e", "ḝ": "e", "ę": "e", "ḙ": "e", "ḛ": "e", "ɇ": "e", "ɛ": "e", "ǝ": "e", "ⓕ": "f", "ｆ": "f", "ḟ": "f", "ƒ": "f", "ꝼ": "f", "ⓖ": "g", "ｇ": "g", "ǵ": "g", "ĝ": "g", "ḡ": "g", "ğ": "g", "ġ": "g", "ǧ": "g", "ģ": "g", "ǥ": "g", "ɠ": "g", "ꞡ": "g", "ᵹ": "g", "ꝿ": "g", "ⓗ": "h", "ｈ": "h", "ĥ": "h", "ḣ": "h", "ḧ": "h", "ȟ": "h", "ḥ": "h", "ḩ": "h", "ḫ": "h", "ẖ": "h", "ħ": "h", "ⱨ": "h", "ⱶ": "h", "ɥ": "h", "ƕ": "hv", "ⓘ": "i", "ｉ": "i", "ì": "i", "í": "i", "î": "i", "ĩ": "i", "ī": "i", "ĭ": "i", "ï": "i", "ḯ": "i", "ỉ": "i", "ǐ": "i", "ȉ": "i", "ȋ": "i", "ị": "i", "į": "i", "ḭ": "i", "ɨ": "i", "ı": "i", "ⓙ": "j", "ｊ": "j", "ĵ": "j", "ǰ": "j", "ɉ": "j", "ⓚ": "k", "ｋ": "k", "ḱ": "k", "ǩ": "k", "ḳ": "k", "ķ": "k", "ḵ": "k", "ƙ": "k", "ⱪ": "k", "ꝁ": "k", "ꝃ": "k", "ꝅ": "k", "ꞣ": "k", "ⓛ": "l", "ｌ": "l", "ŀ": "l", "ĺ": "l", "ľ": "l", "ḷ": "l", "ḹ": "l", "ļ": "l", "ḽ": "l", "ḻ": "l", "ſ": "l", "ł": "l", "ƚ": "l", "ɫ": "l", "ⱡ": "l", "ꝉ": "l", "ꞁ": "l", "ꝇ": "l", "ǉ": "lj", "ⓜ": "m", "ｍ": "m", "ḿ": "m", "ṁ": "m", "ṃ": "m", "ɱ": "m", "ɯ": "m", "ⓝ": "n", "ｎ": "n", "ǹ": "n", "ń": "n", "ñ": "n", "ṅ": "n", "ň": "n", "ṇ": "n", "ņ": "n", "ṋ": "n", "ṉ": "n", "ƞ": "n", "ɲ": "n", "ŉ": "n", "ꞑ": "n", "ꞥ": "n", "ǌ": "nj", "ⓞ": "o", "ｏ": "o", "ò": "o", "ó": "o", "ô": "o", "ồ": "o", "ố": "o", "ỗ": "o", "ổ": "o", "õ": "o", "ṍ": "o", "ȭ": "o", "ṏ": "o", "ō": "o", "ṑ": "o", "ṓ": "o", "ŏ": "o", "ȯ": "o", "ȱ": "o", "ö": "o", "ȫ": "o", "ỏ": "o", "ő": "o", "ǒ": "o", "ȍ": "o", "ȏ": "o", "ơ": "o", "ờ": "o", "ớ": "o", "ỡ": "o", "ở": "o", "ợ": "o", "ọ": "o", "ộ": "o", "ǫ": "o", "ǭ": "o", "ø": "o", "ǿ": "o", "ɔ": "o", "ꝋ": "o", "ꝍ": "o", "ɵ": "o", "œ": "oe", "ƣ": "oi", "ȣ": "ou", "ꝏ": "oo", "ⓟ": "p", "ｐ": "p", "ṕ": "p", "ṗ": "p", "ƥ": "p", "ᵽ": "p", "ꝑ": "p", "ꝓ": "p", "ꝕ": "p", "ⓠ": "q", "ｑ": "q", "ɋ": "q", "ꝗ": "q", "ꝙ": "q", "ⓡ": "r", "ｒ": "r", "ŕ": "r", "ṙ": "r", "ř": "r", "ȑ": "r", "ȓ": "r", "ṛ": "r", "ṝ": "r", "ŗ": "r", "ṟ": "r", "ɍ": "r", "ɽ": "r", "ꝛ": "r", "ꞧ": "r", "ꞃ": "r", "ⓢ": "s", "ｓ": "s", "ß": "s", "ś": "s", "ṥ": "s", "ŝ": "s", "ṡ": "s", "š": "s", "ṧ": "s", "ṣ": "s", "ṩ": "s", "ș": "s", "ş": "s", "ȿ": "s", "ꞩ": "s", "ꞅ": "s", "ẛ": "s", "ⓣ": "t", "ｔ": "t", "ṫ": "t", "ẗ": "t", "ť": "t", "ṭ": "t", "ț": "t", "ţ": "t", "ṱ": "t", "ṯ": "t", "ŧ": "t", "ƭ": "t", "ʈ": "t", "ⱦ": "t", "ꞇ": "t", "ꜩ": "tz", "ⓤ": "u", "ｕ": "u", "ù": "u", "ú": "u", "û": "u", "ũ": "u", "ṹ": "u", "ū": "u", "ṻ": "u", "ŭ": "u", "ü": "u", "ǜ": "u", "ǘ": "u", "ǖ": "u", "ǚ": "u", "ủ": "u", "ů": "u", "ű": "u", "ǔ": "u", "ȕ": "u", "ȗ": "u", "ư": "u", "ừ": "u", "ứ": "u", "ữ": "u", "ử": "u", "ự": "u", "ụ": "u", "ṳ": "u", "ų": "u", "ṷ": "u", "ṵ": "u", "ʉ": "u", "ⓥ": "v", "ｖ": "v", "ṽ": "v", "ṿ": "v", "ʋ": "v", "ꝟ": "v", "ʌ": "v", "ꝡ": "vy", "ⓦ": "w", "ｗ": "w", "ẁ": "w", "ẃ": "w", "ŵ": "w", "ẇ": "w", "ẅ": "w", "ẘ": "w", "ẉ": "w", "ⱳ": "w", "ⓧ": "x", "ｘ": "x", "ẋ": "x", "ẍ": "x", "ⓨ": "y", "ｙ": "y", "ỳ": "y", "ý": "y", "ŷ": "y", "ỹ": "y", "ȳ": "y", "ẏ": "y", "ÿ": "y", "ỷ": "y", "ẙ": "y", "ỵ": "y", "ƴ": "y", "ɏ": "y", "ỿ": "y", "ⓩ": "z", "ｚ": "z", "ź": "z", "ẑ": "z", "ż": "z", "ž": "z", "ẓ": "z", "ẕ": "z", "ƶ": "z", "ȥ": "z", "ɀ": "z", "ⱬ": "z", "ꝣ": "z", "Ά": "Α", "Έ": "Ε", "Ή": "Η", "Ί": "Ι", "Ϊ": "Ι", "Ό": "Ο", "Ύ": "Υ", "Ϋ": "Υ", "Ώ": "Ω", "ά": "α", "έ": "ε", "ή": "η", "ί": "ι", "ϊ": "ι", "ΐ": "ι", "ό": "ο", "ύ": "υ", "ϋ": "υ", "ΰ": "υ", "ώ": "ω", "ς": "σ", "’": "'" };}), e.define("select2/data/base", ["../utils"], function (r) {function n(e, t) {n.__super__.constructor.call(this);}return r.Extend(n, r.Observable), n.prototype.current = function (e) {throw new Error("The `current` method must be defined in child classes.");}, n.prototype.query = function (e, t) {throw new Error("The `query` method must be defined in child classes.");}, n.prototype.bind = function (e, t) {}, n.prototype.destroy = function () {}, n.prototype.generateResultId = function (e, t) {var n = e.id + "-result-";return n += r.generateChars(4), null != t.id ? n += "-" + t.id.toString() : n += "-" + r.generateChars(4), n;}, n;}), e.define("select2/data/select", ["./base", "../utils", "jquery"], function (e, a, l) {function n(e, t) {this.$element = e, this.options = t, n.__super__.constructor.call(this);}return a.Extend(n, e), n.prototype.current = function (e) {var n = [],r = this;this.$element.find(":selected").each(function () {var e = l(this),t = r.item(e);n.push(t);}), e(n);}, n.prototype.select = function (i) {var o = this;if (i.selected = !0, l(i.element).is("option")) return i.element.selected = !0, void this.$element.trigger("input").trigger("change");if (this.$element.prop("multiple")) this.current(function (e) {var t = [];(i = [i]).push.apply(i, e);for (var n = 0; n < i.length; n++) {var r = i[n].id;-1 === l.inArray(r, t) && t.push(r);}o.$element.val(t), o.$element.trigger("input").trigger("change");});else {var e = i.id;this.$element.val(e), this.$element.trigger("input").trigger("change");}}, n.prototype.unselect = function (i) {var o = this;if (this.$element.prop("multiple")) {if (i.selected = !1, l(i.element).is("option")) return i.element.selected = !1, void this.$element.trigger("input").trigger("change");this.current(function (e) {for (var t = [], n = 0; n < e.length; n++) {var r = e[n].id;r !== i.id && -1 === l.inArray(r, t) && t.push(r);}o.$element.val(t), o.$element.trigger("input").trigger("change");});}}, n.prototype.bind = function (e, t) {var n = this;(this.container = e).on("select", function (e) {n.select(e.data);}), e.on("unselect", function (e) {n.unselect(e.data);});}, n.prototype.destroy = function () {this.$element.find("*").each(function () {a.RemoveData(this);});}, n.prototype.query = function (r, e) {var i = [],o = this;this.$element.children().each(function () {var e = l(this);if (e.is("option") || e.is("optgroup")) {var t = o.item(e),n = o.matches(r, t);null !== n && i.push(n);}}), e({ results: i });}, n.prototype.addOptions = function (e) {a.appendMany(this.$element, e);}, n.prototype.option = function (e) {var t;e.children ? (t = document.createElement("optgroup")).label = e.text : void 0 !== (t = document.createElement("option")).textContent ? t.textContent = e.text : t.innerText = e.text, void 0 !== e.id && (t.value = e.id), e.disabled && (t.disabled = !0), e.selected && (t.selected = !0), e.title && (t.title = e.title);var n = l(t),r = this._normalizeItem(e);return r.element = t, a.StoreData(t, "data", r), n;}, n.prototype.item = function (e) {var t = {};if (null != (t = a.GetData(e[0], "data"))) return t;if (e.is("option")) t = { id: e.val(), text: e.text(), disabled: e.prop("disabled"), selected: e.prop("selected"), title: e.prop("title") };else if (e.is("optgroup")) {t = { text: e.prop("label"), children: [], title: e.prop("title") };for (var n = e.children("option"), r = [], i = 0; i < n.length; i++) {var o = l(n[i]),s = this.item(o);r.push(s);}t.children = r;}return (t = this._normalizeItem(t)).element = e[0], a.StoreData(e[0], "data", t), t;}, n.prototype._normalizeItem = function (e) {e !== Object(e) && (e = { id: e, text: e });return null != (e = l.extend({}, { text: "" }, e)).id && (e.id = e.id.toString()), null != e.text && (e.text = e.text.toString()), null == e._resultId && e.id && null != this.container && (e._resultId = this.generateResultId(this.container, e)), l.extend({}, { selected: !1, disabled: !1 }, e);}, n.prototype.matches = function (e, t) {return this.options.get("matcher")(e, t);}, n;}), e.define("select2/data/array", ["./select", "../utils", "jquery"], function (e, f, g) {function r(e, t) {this._dataToConvert = t.get("data") || [], r.__super__.constructor.call(this, e, t);}return f.Extend(r, e), r.prototype.bind = function (e, t) {r.__super__.bind.call(this, e, t), this.addOptions(this.convertToOptions(this._dataToConvert));}, r.prototype.select = function (n) {var e = this.$element.find("option").filter(function (e, t) {return t.value == n.id.toString();});0 === e.length && (e = this.option(n), this.addOptions(e)), r.__super__.select.call(this, n);}, r.prototype.convertToOptions = function (e) {var t = this,n = this.$element.find("option"),r = n.map(function () {return t.item(g(this)).id;}).get(),i = [];function o(e) {return function () {return g(this).val() == e.id;};}for (var s = 0; s < e.length; s++) {var a = this._normalizeItem(e[s]);if (0 <= g.inArray(a.id, r)) {var l = n.filter(o(a)),c = this.item(l),u = g.extend(!0, {}, a, c),d = this.option(u);l.replaceWith(d);} else {var p = this.option(a);if (a.children) {var h = this.convertToOptions(a.children);f.appendMany(p, h);}i.push(p);}}return i;}, r;}), e.define("select2/data/ajax", ["./array", "../utils", "jquery"], function (e, t, o) {function n(e, t) {this.ajaxOptions = this._applyDefaults(t.get("ajax")), null != this.ajaxOptions.processResults && (this.processResults = this.ajaxOptions.processResults), n.__super__.constructor.call(this, e, t);}return t.Extend(n, e), n.prototype._applyDefaults = function (e) {var t = { data: function (e) {return o.extend({}, e, { q: e.term });}, transport: function (e, t, n) {var r = o.ajax(e);return r.then(t), r.fail(n), r;} };return o.extend({}, t, e, !0);}, n.prototype.processResults = function (e) {return e;}, n.prototype.query = function (n, r) {var i = this;null != this._request && (o.isFunction(this._request.abort) && this._request.abort(), this._request = null);var t = o.extend({ type: "GET" }, this.ajaxOptions);function e() {var e = t.transport(t, function (e) {var t = i.processResults(e, n);i.options.get("debug") && window.console && console.error && (t && t.results && o.isArray(t.results) || console.error("Select2: The AJAX results did not return an array in the `results` key of the response.")), r(t);}, function () {"status" in e && (0 === e.status || "0" === e.status) || i.trigger("results:message", { message: "errorLoading" });});i._request = e;}"function" == typeof t.url && (t.url = t.url.call(this.$element, n)), "function" == typeof t.data && (t.data = t.data.call(this.$element, n)), this.ajaxOptions.delay && null != n.term ? (this._queryTimeout && window.clearTimeout(this._queryTimeout), this._queryTimeout = window.setTimeout(e, this.ajaxOptions.delay)) : e();}, n;}), e.define("select2/data/tags", ["jquery"], function (u) {function e(e, t, n) {var r = n.get("tags"),i = n.get("createTag");void 0 !== i && (this.createTag = i);var o = n.get("insertTag");if (void 0 !== o && (this.insertTag = o), e.call(this, t, n), u.isArray(r)) for (var s = 0; s < r.length; s++) {var a = r[s],l = this._normalizeItem(a),c = this.option(l);this.$element.append(c);}}return e.prototype.query = function (e, c, u) {var d = this;this._removeOldTags(), null != c.term && null == c.page ? e.call(this, c, function e(t, n) {for (var r = t.results, i = 0; i < r.length; i++) {var o = r[i],s = null != o.children && !e({ results: o.children }, !0);if ((o.text || "").toUpperCase() === (c.term || "").toUpperCase() || s) return !n && (t.data = r, void u(t));}if (n) return !0;var a = d.createTag(c);if (null != a) {var l = d.option(a);l.attr("data-select2-tag", !0), d.addOptions([l]), d.insertTag(r, a);}t.results = r, u(t);}) : e.call(this, c, u);}, e.prototype.createTag = function (e, t) {var n = u.trim(t.term);return "" === n ? null : { id: n, text: n };}, e.prototype.insertTag = function (e, t, n) {t.unshift(n);}, e.prototype._removeOldTags = function (e) {this.$element.find("option[data-select2-tag]").each(function () {this.selected || u(this).remove();});}, e;}), e.define("select2/data/tokenizer", ["jquery"], function (d) {function e(e, t, n) {var r = n.get("tokenizer");void 0 !== r && (this.tokenizer = r), e.call(this, t, n);}return e.prototype.bind = function (e, t, n) {e.call(this, t, n), this.$search = t.dropdown.$search || t.selection.$search || n.find(".select2-search__field");}, e.prototype.query = function (e, t, n) {var i = this;t.term = t.term || "";var r = this.tokenizer(t, this.options, function (e) {var t,n = i._normalizeItem(e);if (!i.$element.find("option").filter(function () {return d(this).val() === n.id;}).length) {var r = i.option(n);r.attr("data-select2-tag", !0), i._removeOldTags(), i.addOptions([r]);}t = n, i.trigger("select", { data: t });});r.term !== t.term && (this.$search.length && (this.$search.val(r.term), this.$search.trigger("focus")), t.term = r.term), e.call(this, t, n);}, e.prototype.tokenizer = function (e, t, n, r) {for (var i = n.get("tokenSeparators") || [], o = t.term, s = 0, a = this.createTag || function (e) {return { id: e.term, text: e.term };}; s < o.length;) {var l = o[s];if (-1 !== d.inArray(l, i)) {var c = o.substr(0, s),u = a(d.extend({}, t, { term: c }));null != u ? (r(u), o = o.substr(s + 1) || "", s = 0) : s++;} else s++;}return { term: o };}, e;}), e.define("select2/data/minimumInputLength", [], function () {function e(e, t, n) {this.minimumInputLength = n.get("minimumInputLength"), e.call(this, t, n);}return e.prototype.query = function (e, t, n) {t.term = t.term || "", t.term.length < this.minimumInputLength ? this.trigger("results:message", { message: "inputTooShort", args: { minimum: this.minimumInputLength, input: t.term, params: t } }) : e.call(this, t, n);}, e;}), e.define("select2/data/maximumInputLength", [], function () {function e(e, t, n) {this.maximumInputLength = n.get("maximumInputLength"), e.call(this, t, n);}return e.prototype.query = function (e, t, n) {t.term = t.term || "", 0 < this.maximumInputLength && t.term.length > this.maximumInputLength ? this.trigger("results:message", { message: "inputTooLong", args: { maximum: this.maximumInputLength, input: t.term, params: t } }) : e.call(this, t, n);}, e;}), e.define("select2/data/maximumSelectionLength", [], function () {function e(e, t, n) {this.maximumSelectionLength = n.get("maximumSelectionLength"), e.call(this, t, n);}return e.prototype.bind = function (e, t, n) {var r = this;e.call(this, t, n), t.on("select", function () {r._checkIfMaximumSelected();});}, e.prototype.query = function (e, t, n) {var r = this;this._checkIfMaximumSelected(function () {e.call(r, t, n);});}, e.prototype._checkIfMaximumSelected = function (e, n) {var r = this;this.current(function (e) {var t = null != e ? e.length : 0;0 < r.maximumSelectionLength && t >= r.maximumSelectionLength ? r.trigger("results:message", { message: "maximumSelected", args: { maximum: r.maximumSelectionLength } }) : n && n();});}, e;}), e.define("select2/dropdown", ["jquery", "./utils"], function (t, e) {function n(e, t) {this.$element = e, this.options = t, n.__super__.constructor.call(this);}return e.Extend(n, e.Observable), n.prototype.render = function () {var e = t('<span class="select2-dropdown"><span class="select2-results"></span></span>');return e.attr("dir", this.options.get("dir")), this.$dropdown = e;}, n.prototype.bind = function () {}, n.prototype.position = function (e, t) {}, n.prototype.destroy = function () {this.$dropdown.remove();}, n;}), e.define("select2/dropdown/search", ["jquery", "../utils"], function (o, e) {function t() {}return t.prototype.render = function (e) {var t = e.call(this),n = o('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" /></span>');return this.$searchContainer = n, this.$search = n.find("input"), t.prepend(n), t;}, t.prototype.bind = function (e, t, n) {var r = this,i = t.id + "-results";e.call(this, t, n), this.$search.on("keydown", function (e) {r.trigger("keypress", e), r._keyUpPrevented = e.isDefaultPrevented();}), this.$search.on("input", function (e) {o(this).off("keyup");}), this.$search.on("keyup input", function (e) {r.handleSearch(e);}), t.on("open", function () {r.$search.attr("tabindex", 0), r.$search.attr("aria-controls", i), r.$search.trigger("focus"), window.setTimeout(function () {r.$search.trigger("focus");}, 0);}), t.on("close", function () {r.$search.attr("tabindex", -1), r.$search.removeAttr("aria-controls"), r.$search.removeAttr("aria-activedescendant"), r.$search.val(""), r.$search.trigger("blur");}), t.on("focus", function () {t.isOpen() || r.$search.trigger("focus");}), t.on("results:all", function (e) {null != e.query.term && "" !== e.query.term || (r.showSearch(e) ? r.$searchContainer.removeClass("select2-search--hide") : r.$searchContainer.addClass("select2-search--hide"));}), t.on("results:focus", function (e) {e.data._resultId ? r.$search.attr("aria-activedescendant", e.data._resultId) : r.$search.removeAttr("aria-activedescendant");});}, t.prototype.handleSearch = function (e) {if (!this._keyUpPrevented) {var t = this.$search.val();this.trigger("query", { term: t });}this._keyUpPrevented = !1;}, t.prototype.showSearch = function (e, t) {return !0;}, t;}), e.define("select2/dropdown/hidePlaceholder", [], function () {function e(e, t, n, r) {this.placeholder = this.normalizePlaceholder(n.get("placeholder")), e.call(this, t, n, r);}return e.prototype.append = function (e, t) {t.results = this.removePlaceholder(t.results), e.call(this, t);}, e.prototype.normalizePlaceholder = function (e, t) {return "string" == typeof t && (t = { id: "", text: t }), t;}, e.prototype.removePlaceholder = function (e, t) {for (var n = t.slice(0), r = t.length - 1; 0 <= r; r--) {var i = t[r];this.placeholder.id === i.id && n.splice(r, 1);}return n;}, e;}), e.define("select2/dropdown/infiniteScroll", ["jquery"], function (n) {function e(e, t, n, r) {this.lastParams = {}, e.call(this, t, n, r), this.$loadingMore = this.createLoadingMore(), this.loading = !1;}return e.prototype.append = function (e, t) {this.$loadingMore.remove(), this.loading = !1, e.call(this, t), this.showLoadingMore(t) && (this.$results.append(this.$loadingMore), this.loadMoreIfNeeded());}, e.prototype.bind = function (e, t, n) {var r = this;e.call(this, t, n), t.on("query", function (e) {r.lastParams = e, r.loading = !0;}), t.on("query:append", function (e) {r.lastParams = e, r.loading = !0;}), this.$results.on("scroll", this.loadMoreIfNeeded.bind(this));}, e.prototype.loadMoreIfNeeded = function () {var e = n.contains(document.documentElement, this.$loadingMore[0]);if (!this.loading && e) {var t = this.$results.offset().top + this.$results.outerHeight(!1);this.$loadingMore.offset().top + this.$loadingMore.outerHeight(!1) <= t + 50 && this.loadMore();}}, e.prototype.loadMore = function () {this.loading = !0;var e = n.extend({}, { page: 1 }, this.lastParams);e.page++, this.trigger("query:append", e);}, e.prototype.showLoadingMore = function (e, t) {return t.pagination && t.pagination.more;}, e.prototype.createLoadingMore = function () {var e = n('<li class="select2-results__option select2-results__option--load-more"role="option" aria-disabled="true"></li>'),t = this.options.get("translations").get("loadingMore");return e.html(t(this.lastParams)), e;}, e;}), e.define("select2/dropdown/attachBody", ["jquery", "../utils"], function (f, a) {function e(e, t, n) {this.$dropdownParent = f(n.get("dropdownParent") || document.body), e.call(this, t, n);}return e.prototype.bind = function (e, t, n) {var r = this;e.call(this, t, n), t.on("open", function () {r._showDropdown(), r._attachPositioningHandler(t), r._bindContainerResultHandlers(t);}), t.on("close", function () {r._hideDropdown(), r._detachPositioningHandler(t);}), this.$dropdownContainer.on("mousedown", function (e) {e.stopPropagation();});}, e.prototype.destroy = function (e) {e.call(this), this.$dropdownContainer.remove();}, e.prototype.position = function (e, t, n) {t.attr("class", n.attr("class")), t.removeClass("select2"), t.addClass("select2-container--open"), t.css({ position: "absolute", top: -999999 }), this.$container = n;}, e.prototype.render = function (e) {var t = f("<span></span>"),n = e.call(this);return t.append(n), this.$dropdownContainer = t;}, e.prototype._hideDropdown = function (e) {this.$dropdownContainer.detach();}, e.prototype._bindContainerResultHandlers = function (e, t) {if (!this._containerResultsHandlersBound) {var n = this;t.on("results:all", function () {n._positionDropdown(), n._resizeDropdown();}), t.on("results:append", function () {n._positionDropdown(), n._resizeDropdown();}), t.on("results:message", function () {n._positionDropdown(), n._resizeDropdown();}), t.on("select", function () {n._positionDropdown(), n._resizeDropdown();}), t.on("unselect", function () {n._positionDropdown(), n._resizeDropdown();}), this._containerResultsHandlersBound = !0;}}, e.prototype._attachPositioningHandler = function (e, t) {var n = this,r = "scroll.select2." + t.id,i = "resize.select2." + t.id,o = "orientationchange.select2." + t.id,s = this.$container.parents().filter(a.hasScroll);s.each(function () {a.StoreData(this, "select2-scroll-position", { x: f(this).scrollLeft(), y: f(this).scrollTop() });}), s.on(r, function (e) {var t = a.GetData(this, "select2-scroll-position");f(this).scrollTop(t.y);}), f(window).on(r + " " + i + " " + o, function (e) {n._positionDropdown(), n._resizeDropdown();});}, e.prototype._detachPositioningHandler = function (e, t) {var n = "scroll.select2." + t.id,r = "resize.select2." + t.id,i = "orientationchange.select2." + t.id;this.$container.parents().filter(a.hasScroll).off(n), f(window).off(n + " " + r + " " + i);}, e.prototype._positionDropdown = function () {var e = f(window),t = this.$dropdown.hasClass("select2-dropdown--above"),n = this.$dropdown.hasClass("select2-dropdown--below"),r = null,i = this.$container.offset();i.bottom = i.top + this.$container.outerHeight(!1);var o = { height: this.$container.outerHeight(!1) };o.top = i.top, o.bottom = i.top + o.height;var s = this.$dropdown.outerHeight(!1),a = e.scrollTop(),l = e.scrollTop() + e.height(),c = a < i.top - s,u = l > i.bottom + s,d = { left: i.left, top: o.bottom },p = this.$dropdownParent;"static" === p.css("position") && (p = p.offsetParent());var h = { top: 0, left: 0 };(f.contains(document.body, p[0]) || p[0].isConnected) && (h = p.offset()), d.top -= h.top, d.left -= h.left, t || n || (r = "below"), u || !c || t ? !c && u && t && (r = "below") : r = "above", ("above" == r || t && "below" !== r) && (d.top = o.top - h.top - s), null != r && (this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--" + r), this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--" + r)), this.$dropdownContainer.css(d);}, e.prototype._resizeDropdown = function () {var e = { width: this.$container.outerWidth(!1) + "px" };this.options.get("dropdownAutoWidth") && (e.minWidth = e.width, e.position = "relative", e.width = "auto"), this.$dropdown.css(e);}, e.prototype._showDropdown = function (e) {this.$dropdownContainer.appendTo(this.$dropdownParent), this._positionDropdown(), this._resizeDropdown();}, e;}), e.define("select2/dropdown/minimumResultsForSearch", [], function () {function e(e, t, n, r) {this.minimumResultsForSearch = n.get("minimumResultsForSearch"), this.minimumResultsForSearch < 0 && (this.minimumResultsForSearch = 1 / 0), e.call(this, t, n, r);}return e.prototype.showSearch = function (e, t) {return !(function e(t) {for (var n = 0, r = 0; r < t.length; r++) {var i = t[r];i.children ? n += e(i.children) : n++;}return n;}(t.data.results) < this.minimumResultsForSearch) && e.call(this, t);}, e;}), e.define("select2/dropdown/selectOnClose", ["../utils"], function (o) {function e() {}return e.prototype.bind = function (e, t, n) {var r = this;e.call(this, t, n), t.on("close", function (e) {r._handleSelectOnClose(e);});}, e.prototype._handleSelectOnClose = function (e, t) {if (t && null != t.originalSelect2Event) {var n = t.originalSelect2Event;if ("select" === n._type || "unselect" === n._type) return;}var r = this.getHighlightedResults();if (!(r.length < 1)) {var i = o.GetData(r[0], "data");null != i.element && i.element.selected || null == i.element && i.selected || this.trigger("select", { data: i });}}, e;}), e.define("select2/dropdown/closeOnSelect", [], function () {function e() {}return e.prototype.bind = function (e, t, n) {var r = this;e.call(this, t, n), t.on("select", function (e) {r._selectTriggered(e);}), t.on("unselect", function (e) {r._selectTriggered(e);});}, e.prototype._selectTriggered = function (e, t) {var n = t.originalEvent;n && (n.ctrlKey || n.metaKey) || this.trigger("close", { originalEvent: n, originalSelect2Event: t });}, e;}), e.define("select2/i18n/en", [], function () {return { errorLoading: function () {return "The results could not be loaded.";}, inputTooLong: function (e) {var t = e.input.length - e.maximum,n = "Please delete " + t + " character";return 1 != t && (n += "s"), n;}, inputTooShort: function (e) {return "Please enter " + (e.minimum - e.input.length) + " or more characters";}, loadingMore: function () {return "Loading more results…";}, maximumSelected: function (e) {var t = "You can only select " + e.maximum + " item";return 1 != e.maximum && (t += "s"), t;}, noResults: function () {return "No results found";}, searching: function () {return "Searching…";}, removeAllItems: function () {return "Remove all items";} };}), e.define("select2/defaults", ["jquery", "require", "./results", "./selection/single", "./selection/multiple", "./selection/placeholder", "./selection/allowClear", "./selection/search", "./selection/eventRelay", "./utils", "./translation", "./diacritics", "./data/select", "./data/array", "./data/ajax", "./data/tags", "./data/tokenizer", "./data/minimumInputLength", "./data/maximumInputLength", "./data/maximumSelectionLength", "./dropdown", "./dropdown/search", "./dropdown/hidePlaceholder", "./dropdown/infiniteScroll", "./dropdown/attachBody", "./dropdown/minimumResultsForSearch", "./dropdown/selectOnClose", "./dropdown/closeOnSelect", "./i18n/en"], function (c, u, d, p, h, f, g, m, v, y, s, t, _, $, b, w, A, x, D, S, E, C, O, T, q, L, I, j, e) {function n() {this.reset();}return n.prototype.apply = function (e) {if (null == (e = c.extend(!0, {}, this.defaults, e)).dataAdapter) {if (null != e.ajax ? e.dataAdapter = b : null != e.data ? e.dataAdapter = $ : e.dataAdapter = _, 0 < e.minimumInputLength && (e.dataAdapter = y.Decorate(e.dataAdapter, x)), 0 < e.maximumInputLength && (e.dataAdapter = y.Decorate(e.dataAdapter, D)), 0 < e.maximumSelectionLength && (e.dataAdapter = y.Decorate(e.dataAdapter, S)), e.tags && (e.dataAdapter = y.Decorate(e.dataAdapter, w)), null == e.tokenSeparators && null == e.tokenizer || (e.dataAdapter = y.Decorate(e.dataAdapter, A)), null != e.query) {var t = u(e.amdBase + "compat/query");e.dataAdapter = y.Decorate(e.dataAdapter, t);}if (null != e.initSelection) {var n = u(e.amdBase + "compat/initSelection");e.dataAdapter = y.Decorate(e.dataAdapter, n);}}if (null == e.resultsAdapter && (e.resultsAdapter = d, null != e.ajax && (e.resultsAdapter = y.Decorate(e.resultsAdapter, T)), null != e.placeholder && (e.resultsAdapter = y.Decorate(e.resultsAdapter, O)), e.selectOnClose && (e.resultsAdapter = y.Decorate(e.resultsAdapter, I))), null == e.dropdownAdapter) {if (e.multiple) e.dropdownAdapter = E;else {var r = y.Decorate(E, C);e.dropdownAdapter = r;}if (0 !== e.minimumResultsForSearch && (e.dropdownAdapter = y.Decorate(e.dropdownAdapter, L)), e.closeOnSelect && (e.dropdownAdapter = y.Decorate(e.dropdownAdapter, j)), null != e.dropdownCssClass || null != e.dropdownCss || null != e.adaptDropdownCssClass) {var i = u(e.amdBase + "compat/dropdownCss");e.dropdownAdapter = y.Decorate(e.dropdownAdapter, i);}e.dropdownAdapter = y.Decorate(e.dropdownAdapter, q);}if (null == e.selectionAdapter) {if (e.multiple ? e.selectionAdapter = h : e.selectionAdapter = p, null != e.placeholder && (e.selectionAdapter = y.Decorate(e.selectionAdapter, f)), e.allowClear && (e.selectionAdapter = y.Decorate(e.selectionAdapter, g)), e.multiple && (e.selectionAdapter = y.Decorate(e.selectionAdapter, m)), null != e.containerCssClass || null != e.containerCss || null != e.adaptContainerCssClass) {var o = u(e.amdBase + "compat/containerCss");e.selectionAdapter = y.Decorate(e.selectionAdapter, o);}e.selectionAdapter = y.Decorate(e.selectionAdapter, v);}e.language = this._resolveLanguage(e.language), e.language.push("en");for (var s = [], a = 0; a < e.language.length; a++) {var l = e.language[a];-1 === s.indexOf(l) && s.push(l);}return e.language = s, e.translations = this._processTranslations(e.language, e.debug), e;}, n.prototype.reset = function () {function a(e) {return e.replace(/[^\u0000-\u007E]/g, function (e) {return t[e] || e;});}this.defaults = { amdBase: "./", amdLanguageBase: "./i18n/", closeOnSelect: !0, debug: !1, dropdownAutoWidth: !1, escapeMarkup: y.escapeMarkup, language: {}, matcher: function e(t, n) {if ("" === c.trim(t.term)) return n;if (n.children && 0 < n.children.length) {for (var r = c.extend(!0, {}, n), i = n.children.length - 1; 0 <= i; i--) null == e(t, n.children[i]) && r.children.splice(i, 1);return 0 < r.children.length ? r : e(t, r);}var o = a(n.text).toUpperCase(),s = a(t.term).toUpperCase();return -1 < o.indexOf(s) ? n : null;}, minimumInputLength: 0, maximumInputLength: 0, maximumSelectionLength: 0, minimumResultsForSearch: 0, selectOnClose: !1, scrollAfterSelect: !1, sorter: function (e) {return e;}, templateResult: function (e) {return e.text;}, templateSelection: function (e) {return e.text;}, theme: "default", width: "resolve" };}, n.prototype.applyFromElement = function (e, t) {var n = e.language,r = this.defaults.language,i = t.prop("lang"),o = t.closest("[lang]").prop("lang"),s = Array.prototype.concat.call(this._resolveLanguage(i), this._resolveLanguage(n), this._resolveLanguage(r), this._resolveLanguage(o));return e.language = s, e;}, n.prototype._resolveLanguage = function (e) {if (!e) return [];if (c.isEmptyObject(e)) return [];if (c.isPlainObject(e)) return [e];var t;t = c.isArray(e) ? e : [e];for (var n = [], r = 0; r < t.length; r++) if (n.push(t[r]), "string" == typeof t[r] && 0 < t[r].indexOf("-")) {var i = t[r].split("-")[0];n.push(i);}return n;}, n.prototype._processTranslations = function (e, t) {for (var n = new s(), r = 0; r < e.length; r++) {var i = new s(),o = e[r];if ("string" == typeof o) try {i = s.loadPath(o);} catch (e) {try {o = this.defaults.amdLanguageBase + o, i = s.loadPath(o);} catch (e) {t && window.console && console.warn && console.warn('Select2: The language file for "' + o + '" could not be automatically loaded. A fallback will be used instead.');}} else i = c.isPlainObject(o) ? new s(o) : o;n.extend(i);}return n;}, n.prototype.set = function (e, t) {var n = {};n[c.camelCase(e)] = t;var r = y._convertData(n);c.extend(!0, this.defaults, r);}, new n();}), e.define("select2/options", ["require", "jquery", "./defaults", "./utils"], function (r, d, i, p) {function e(e, t) {if (this.options = e, null != t && this.fromElement(t), null != t && (this.options = i.applyFromElement(this.options, t)), this.options = i.apply(this.options), t && t.is("input")) {var n = r(this.get("amdBase") + "compat/inputData");this.options.dataAdapter = p.Decorate(this.options.dataAdapter, n);}}return e.prototype.fromElement = function (e) {var t = ["select2"];null == this.options.multiple && (this.options.multiple = e.prop("multiple")), null == this.options.disabled && (this.options.disabled = e.prop("disabled")), null == this.options.dir && (e.prop("dir") ? this.options.dir = e.prop("dir") : e.closest("[dir]").prop("dir") ? this.options.dir = e.closest("[dir]").prop("dir") : this.options.dir = "ltr"), e.prop("disabled", this.options.disabled), e.prop("multiple", this.options.multiple), p.GetData(e[0], "select2Tags") && (this.options.debug && window.console && console.warn && console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'), p.StoreData(e[0], "data", p.GetData(e[0], "select2Tags")), p.StoreData(e[0], "tags", !0)), p.GetData(e[0], "ajaxUrl") && (this.options.debug && window.console && console.warn && console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."), e.attr("ajax--url", p.GetData(e[0], "ajaxUrl")), p.StoreData(e[0], "ajax-Url", p.GetData(e[0], "ajaxUrl")));var n = {};function r(e, t) {return t.toUpperCase();}for (var i = 0; i < e[0].attributes.length; i++) {var o = e[0].attributes[i].name,s = "data-";if (o.substr(0, s.length) == s) {var a = o.substring(s.length),l = p.GetData(e[0], a);n[a.replace(/-([a-z])/g, r)] = l;}}d.fn.jquery && "1." == d.fn.jquery.substr(0, 2) && e[0].dataset && (n = d.extend(!0, {}, e[0].dataset, n));var c = d.extend(!0, {}, p.GetData(e[0]), n);for (var u in c = p._convertData(c)) -1 < d.inArray(u, t) || (d.isPlainObject(this.options[u]) ? d.extend(this.options[u], c[u]) : this.options[u] = c[u]);return this;}, e.prototype.get = function (e) {return this.options[e];}, e.prototype.set = function (e, t) {this.options[e] = t;}, e;}), e.define("select2/core", ["jquery", "./options", "./utils", "./keys"], function (o, c, u, r) {var d = function (e, t) {null != u.GetData(e[0], "select2") && u.GetData(e[0], "select2").destroy(), this.$element = e, this.id = this._generateId(e), t = t || {}, this.options = new c(t, e), d.__super__.constructor.call(this);var n = e.attr("tabindex") || 0;u.StoreData(e[0], "old-tabindex", n), e.attr("tabindex", "-1");var r = this.options.get("dataAdapter");this.dataAdapter = new r(e, this.options);var i = this.render();this._placeContainer(i);var o = this.options.get("selectionAdapter");this.selection = new o(e, this.options), this.$selection = this.selection.render(), this.selection.position(this.$selection, i);var s = this.options.get("dropdownAdapter");this.dropdown = new s(e, this.options), this.$dropdown = this.dropdown.render(), this.dropdown.position(this.$dropdown, i);var a = this.options.get("resultsAdapter");this.results = new a(e, this.options, this.dataAdapter), this.$results = this.results.render(), this.results.position(this.$results, this.$dropdown);var l = this;this._bindAdapters(), this._registerDomEvents(), this._registerDataEvents(), this._registerSelectionEvents(), this._registerDropdownEvents(), this._registerResultsEvents(), this._registerEvents(), this.dataAdapter.current(function (e) {l.trigger("selection:update", { data: e });}), e.addClass("select2-hidden-accessible"), e.attr("aria-hidden", "true"), this._syncAttributes(), u.StoreData(e[0], "select2", this), e.data("select2", this);};return u.Extend(d, u.Observable), d.prototype._generateId = function (e) {return "select2-" + (null != e.attr("id") ? e.attr("id") : null != e.attr("name") ? e.attr("name") + "-" + u.generateChars(2) : u.generateChars(4)).replace(/(:|\.|\[|\]|,)/g, "");}, d.prototype._placeContainer = function (e) {e.insertAfter(this.$element);var t = this._resolveWidth(this.$element, this.options.get("width"));null != t && e.css("width", t);}, d.prototype._resolveWidth = function (e, t) {var n = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;if ("resolve" == t) {var r = this._resolveWidth(e, "style");return null != r ? r : this._resolveWidth(e, "element");}if ("element" == t) {var i = e.outerWidth(!1);return i <= 0 ? "auto" : i + "px";}if ("style" != t) return "computedstyle" != t ? t : window.getComputedStyle(e[0]).width;var o = e.attr("style");if ("string" != typeof o) return null;for (var s = o.split(";"), a = 0, l = s.length; a < l; a += 1) {var c = s[a].replace(/\s/g, "").match(n);if (null !== c && 1 <= c.length) return c[1];}return null;}, d.prototype._bindAdapters = function () {this.dataAdapter.bind(this, this.$container), this.selection.bind(this, this.$container), this.dropdown.bind(this, this.$container), this.results.bind(this, this.$container);}, d.prototype._registerDomEvents = function () {var t = this;this.$element.on("change.select2", function () {t.dataAdapter.current(function (e) {t.trigger("selection:update", { data: e });});}), this.$element.on("focus.select2", function (e) {t.trigger("focus", e);}), this._syncA = u.bind(this._syncAttributes, this), this._syncS = u.bind(this._syncSubtree, this), this.$element[0].attachEvent && this.$element[0].attachEvent("onpropertychange", this._syncA);var e = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;null != e ? (this._observer = new e(function (e) {t._syncA(), t._syncS(null, e);}), this._observer.observe(this.$element[0], { attributes: !0, childList: !0, subtree: !1 })) : this.$element[0].addEventListener && (this.$element[0].addEventListener("DOMAttrModified", t._syncA, !1), this.$element[0].addEventListener("DOMNodeInserted", t._syncS, !1), this.$element[0].addEventListener("DOMNodeRemoved", t._syncS, !1));}, d.prototype._registerDataEvents = function () {var n = this;this.dataAdapter.on("*", function (e, t) {n.trigger(e, t);});}, d.prototype._registerSelectionEvents = function () {var n = this,r = ["toggle", "focus"];this.selection.on("toggle", function () {n.toggleDropdown();}), this.selection.on("focus", function (e) {n.focus(e);}), this.selection.on("*", function (e, t) {-1 === o.inArray(e, r) && n.trigger(e, t);});}, d.prototype._registerDropdownEvents = function () {var n = this;this.dropdown.on("*", function (e, t) {n.trigger(e, t);});}, d.prototype._registerResultsEvents = function () {var n = this;this.results.on("*", function (e, t) {n.trigger(e, t);});}, d.prototype._registerEvents = function () {var n = this;this.on("open", function () {n.$container.addClass("select2-container--open");}), this.on("close", function () {n.$container.removeClass("select2-container--open");}), this.on("enable", function () {n.$container.removeClass("select2-container--disabled");}), this.on("disable", function () {n.$container.addClass("select2-container--disabled");}), this.on("blur", function () {n.$container.removeClass("select2-container--focus");}), this.on("query", function (t) {n.isOpen() || n.trigger("open", {}), this.dataAdapter.query(t, function (e) {n.trigger("results:all", { data: e, query: t });});}), this.on("query:append", function (t) {this.dataAdapter.query(t, function (e) {n.trigger("results:append", { data: e, query: t });});}), this.on("keypress", function (e) {var t = e.which;n.isOpen() ? t === r.ESC || t === r.TAB || t === r.UP && e.altKey ? (n.close(e), e.preventDefault()) : t === r.ENTER ? (n.trigger("results:select", {}), e.preventDefault()) : t === r.SPACE && e.ctrlKey ? (n.trigger("results:toggle", {}), e.preventDefault()) : t === r.UP ? (n.trigger("results:previous", {}), e.preventDefault()) : t === r.DOWN && (n.trigger("results:next", {}), e.preventDefault()) : (t === r.ENTER || t === r.SPACE || t === r.DOWN && e.altKey) && (n.open(), e.preventDefault());});}, d.prototype._syncAttributes = function () {this.options.set("disabled", this.$element.prop("disabled")), this.isDisabled() ? (this.isOpen() && this.close(), this.trigger("disable", {})) : this.trigger("enable", {});}, d.prototype._isChangeMutation = function (e, t) {var n = !1,r = this;if (!e || !e.target || "OPTION" === e.target.nodeName || "OPTGROUP" === e.target.nodeName) {if (t) {if (t.addedNodes && 0 < t.addedNodes.length) for (var i = 0; i < t.addedNodes.length; i++) {t.addedNodes[i].selected && (n = !0);} else t.removedNodes && 0 < t.removedNodes.length ? n = !0 : o.isArray(t) && o.each(t, function (e, t) {if (r._isChangeMutation(e, t)) return !(n = !0);});} else n = !0;return n;}}, d.prototype._syncSubtree = function (e, t) {var n = this._isChangeMutation(e, t),r = this;n && this.dataAdapter.current(function (e) {r.trigger("selection:update", { data: e });});}, d.prototype.trigger = function (e, t) {var n = d.__super__.trigger,r = { open: "opening", close: "closing", select: "selecting", unselect: "unselecting", clear: "clearing" };if (void 0 === t && (t = {}), e in r) {var i = r[e],o = { prevented: !1, name: e, args: t };if (n.call(this, i, o), o.prevented) return void (t.prevented = !0);}n.call(this, e, t);}, d.prototype.toggleDropdown = function () {this.isDisabled() || (this.isOpen() ? this.close() : this.open());}, d.prototype.open = function () {this.isOpen() || this.isDisabled() || this.trigger("query", {});}, d.prototype.close = function (e) {this.isOpen() && this.trigger("close", { originalEvent: e });}, d.prototype.isEnabled = function () {return !this.isDisabled();}, d.prototype.isDisabled = function () {return this.options.get("disabled");}, d.prototype.isOpen = function () {return this.$container.hasClass("select2-container--open");}, d.prototype.hasFocus = function () {return this.$container.hasClass("select2-container--focus");}, d.prototype.focus = function (e) {this.hasFocus() || (this.$container.addClass("select2-container--focus"), this.trigger("focus", {}));}, d.prototype.enable = function (e) {this.options.get("debug") && window.console && console.warn && console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'), null != e && 0 !== e.length || (e = [!0]);var t = !e[0];this.$element.prop("disabled", t);}, d.prototype.data = function () {this.options.get("debug") && 0 < arguments.length && window.console && console.warn && console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.');var t = [];return this.dataAdapter.current(function (e) {t = e;}), t;}, d.prototype.val = function (e) {if (this.options.get("debug") && window.console && console.warn && console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'), null == e || 0 === e.length) return this.$element.val();var t = e[0];o.isArray(t) && (t = o.map(t, function (e) {return e.toString();})), this.$element.val(t).trigger("input").trigger("change");}, d.prototype.destroy = function () {this.$container.remove(), this.$element[0].detachEvent && this.$element[0].detachEvent("onpropertychange", this._syncA), null != this._observer ? (this._observer.disconnect(), this._observer = null) : this.$element[0].removeEventListener && (this.$element[0].removeEventListener("DOMAttrModified", this._syncA, !1), this.$element[0].removeEventListener("DOMNodeInserted", this._syncS, !1), this.$element[0].removeEventListener("DOMNodeRemoved", this._syncS, !1)), this._syncA = null, this._syncS = null, this.$element.off(".select2"), this.$element.attr("tabindex", u.GetData(this.$element[0], "old-tabindex")), this.$element.removeClass("select2-hidden-accessible"), this.$element.attr("aria-hidden", "false"), u.RemoveData(this.$element[0]), this.$element.removeData("select2"), this.dataAdapter.destroy(), this.selection.destroy(), this.dropdown.destroy(), this.results.destroy(), this.dataAdapter = null, this.selection = null, this.dropdown = null, this.results = null;}, d.prototype.render = function () {var e = o('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');return e.attr("dir", this.options.get("dir")), this.$container = e, this.$container.addClass("select2-container--" + this.options.get("theme")), u.StoreData(e[0], "element", this.$element), e;}, d;}), e.define("jquery-mousewheel", ["jquery"], function (e) {return e;}), e.define("jquery.select2", ["jquery", "jquery-mousewheel", "./select2/core", "./select2/defaults", "./select2/utils"], function (i, e, o, t, s) {if (null == i.fn.select2) {var a = ["open", "close", "destroy"];i.fn.select2 = function (t) {if ("object" == typeof (t = t || {})) return this.each(function () {var e = i.extend(!0, {}, t);new o(i(this), e);}), this;if ("string" != typeof t) throw new Error("Invalid arguments for Select2: " + t);var n,r = Array.prototype.slice.call(arguments, 1);return this.each(function () {var e = s.GetData(this, "select2");null == e && window.console && console.error && console.error("The select2('" + t + "') method was called on an element that is not using Select2."), n = e[t].apply(e, r);}), -1 < i.inArray(t, a) ? this : n;};}return null == i.fn.select2.defaults && (i.fn.select2.defaults = t), o;}), { define: e.define, require: e.require };}(),t = e.require("jquery.select2");return u.fn.select2.amd = e, t;});

/***/ }),

/***/ "./src/assets/js/lib/slick.min.js":
/*!****************************************!*\
  !*** ./src/assets/js/lib/slick.min.js ***!
  \****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
!function (i) {"use strict";"function" == typeof define && define.amd ? define(["jquery"], i) : "undefined" != typeof exports ? module.exports = i(require("jquery")) : i(jQuery);}(function (i) {"use strict";var e = window.Slick || {};(e = function () {var e = 0;return function (t, o) {var s,n = this;n.defaults = { accessibility: !0, adaptiveHeight: !1, appendArrows: i(t), appendDots: i(t), arrows: !0, asNavFor: null, prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>', nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>', autoplay: !1, autoplaySpeed: 3e3, centerMode: !1, centerPadding: "50px", cssEase: "ease", customPaging: function (e, t) {return i('<button type="button" />').text(t + 1);}, dots: !1, dotsClass: "slick-dots", draggable: !0, easing: "linear", edgeFriction: .35, fade: !1, focusOnSelect: !1, focusOnChange: !1, infinite: !0, initialSlide: 0, lazyLoad: "ondemand", mobileFirst: !1, pauseOnHover: !0, pauseOnFocus: !0, pauseOnDotsHover: !1, respondTo: "window", responsive: null, rows: 1, rtl: !1, slide: "", slidesPerRow: 1, slidesToShow: 1, slidesToScroll: 1, speed: 500, swipe: !0, swipeToSlide: !1, touchMove: !0, touchThreshold: 5, useCSS: !0, useTransform: !0, variableWidth: !1, vertical: !1, verticalSwiping: !1, waitForAnimate: !0, zIndex: 1e3 }, n.initials = { animating: !1, dragging: !1, autoPlayTimer: null, currentDirection: 0, currentLeft: null, currentSlide: 0, direction: 1, $dots: null, listWidth: null, listHeight: null, loadIndex: 0, $nextArrow: null, $prevArrow: null, scrolling: !1, slideCount: null, slideWidth: null, $slideTrack: null, $slides: null, sliding: !1, slideOffset: 0, swipeLeft: null, swiping: !1, $list: null, touchObject: {}, transformsEnabled: !1, unslicked: !1 }, i.extend(n, n.initials), n.activeBreakpoint = null, n.animType = null, n.animProp = null, n.breakpoints = [], n.breakpointSettings = [], n.cssTransitions = !1, n.focussed = !1, n.interrupted = !1, n.hidden = "hidden", n.paused = !0, n.positionProp = null, n.respondTo = null, n.rowCount = 1, n.shouldClick = !0, n.$slider = i(t), n.$slidesCache = null, n.transformType = null, n.transitionType = null, n.visibilityChange = "visibilitychange", n.windowWidth = 0, n.windowTimer = null, s = i(t).data("slick") || {}, n.options = i.extend({}, n.defaults, o, s), n.currentSlide = n.options.initialSlide, n.originalSettings = n.options, void 0 !== document.mozHidden ? (n.hidden = "mozHidden", n.visibilityChange = "mozvisibilitychange") : void 0 !== document.webkitHidden && (n.hidden = "webkitHidden", n.visibilityChange = "webkitvisibilitychange"), n.autoPlay = i.proxy(n.autoPlay, n), n.autoPlayClear = i.proxy(n.autoPlayClear, n), n.autoPlayIterator = i.proxy(n.autoPlayIterator, n), n.changeSlide = i.proxy(n.changeSlide, n), n.clickHandler = i.proxy(n.clickHandler, n), n.selectHandler = i.proxy(n.selectHandler, n), n.setPosition = i.proxy(n.setPosition, n), n.swipeHandler = i.proxy(n.swipeHandler, n), n.dragHandler = i.proxy(n.dragHandler, n), n.keyHandler = i.proxy(n.keyHandler, n), n.instanceUid = e++, n.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/, n.registerBreakpoints(), n.init(!0);};}()).prototype.activateADA = function () {this.$slideTrack.find(".slick-active").attr({ "aria-hidden": "false" }).find("a, input, button, select").attr({ tabindex: "0" });}, e.prototype.addSlide = e.prototype.slickAdd = function (e, t, o) {var s = this;if ("boolean" == typeof t) o = t, t = null;else if (t < 0 || t >= s.slideCount) return !1;s.unload(), "number" == typeof t ? 0 === t && 0 === s.$slides.length ? i(e).appendTo(s.$slideTrack) : o ? i(e).insertBefore(s.$slides.eq(t)) : i(e).insertAfter(s.$slides.eq(t)) : !0 === o ? i(e).prependTo(s.$slideTrack) : i(e).appendTo(s.$slideTrack), s.$slides = s.$slideTrack.children(this.options.slide), s.$slideTrack.children(this.options.slide).detach(), s.$slideTrack.append(s.$slides), s.$slides.each(function (e, t) {i(t).attr("data-slick-index", e);}), s.$slidesCache = s.$slides, s.reinit();}, e.prototype.animateHeight = function () {var i = this;if (1 === i.options.slidesToShow && !0 === i.options.adaptiveHeight && !1 === i.options.vertical) {var e = i.$slides.eq(i.currentSlide).outerHeight(!0);i.$list.animate({ height: e }, i.options.speed);}}, e.prototype.animateSlide = function (e, t) {var o = {},s = this;s.animateHeight(), !0 === s.options.rtl && !1 === s.options.vertical && (e = -e), !1 === s.transformsEnabled ? !1 === s.options.vertical ? s.$slideTrack.animate({ left: e }, s.options.speed, s.options.easing, t) : s.$slideTrack.animate({ top: e }, s.options.speed, s.options.easing, t) : !1 === s.cssTransitions ? (!0 === s.options.rtl && (s.currentLeft = -s.currentLeft), i({ animStart: s.currentLeft }).animate({ animStart: e }, { duration: s.options.speed, easing: s.options.easing, step: function (i) {i = Math.ceil(i), !1 === s.options.vertical ? (o[s.animType] = "translate(" + i + "px, 0px)", s.$slideTrack.css(o)) : (o[s.animType] = "translate(0px," + i + "px)", s.$slideTrack.css(o));}, complete: function () {t && t.call();} })) : (s.applyTransition(), e = Math.ceil(e), !1 === s.options.vertical ? o[s.animType] = "translate3d(" + e + "px, 0px, 0px)" : o[s.animType] = "translate3d(0px," + e + "px, 0px)", s.$slideTrack.css(o), t && setTimeout(function () {s.disableTransition(), t.call();}, s.options.speed));}, e.prototype.getNavTarget = function () {var e = this,t = e.options.asNavFor;return t && null !== t && (t = i(t).not(e.$slider)), t;}, e.prototype.asNavFor = function (e) {var t = this.getNavTarget();null !== t && "object" == typeof t && t.each(function () {var t = i(this).slick("getSlick");t.unslicked || t.slideHandler(e, !0);});}, e.prototype.applyTransition = function (i) {var e = this,t = {};!1 === e.options.fade ? t[e.transitionType] = e.transformType + " " + e.options.speed + "ms " + e.options.cssEase : t[e.transitionType] = "opacity " + e.options.speed + "ms " + e.options.cssEase, !1 === e.options.fade ? e.$slideTrack.css(t) : e.$slides.eq(i).css(t);}, e.prototype.autoPlay = function () {var i = this;i.autoPlayClear(), i.slideCount > i.options.slidesToShow && (i.autoPlayTimer = setInterval(i.autoPlayIterator, i.options.autoplaySpeed));}, e.prototype.autoPlayClear = function () {var i = this;i.autoPlayTimer && clearInterval(i.autoPlayTimer);}, e.prototype.autoPlayIterator = function () {var i = this,e = i.currentSlide + i.options.slidesToScroll;i.paused || i.interrupted || i.focussed || (!1 === i.options.infinite && (1 === i.direction && i.currentSlide + 1 === i.slideCount - 1 ? i.direction = 0 : 0 === i.direction && (e = i.currentSlide - i.options.slidesToScroll, i.currentSlide - 1 == 0 && (i.direction = 1))), i.slideHandler(e));}, e.prototype.buildArrows = function () {var e = this;!0 === e.options.arrows && (e.$prevArrow = i(e.options.prevArrow).addClass("slick-arrow"), e.$nextArrow = i(e.options.nextArrow).addClass("slick-arrow"), e.slideCount > e.options.slidesToShow ? (e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), e.htmlExpr.test(e.options.prevArrow) && e.$prevArrow.prependTo(e.options.appendArrows), e.htmlExpr.test(e.options.nextArrow) && e.$nextArrow.appendTo(e.options.appendArrows), !0 !== e.options.infinite && e.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true")) : e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({ "aria-disabled": "true", tabindex: "-1" }));}, e.prototype.buildDots = function () {var e,t,o = this;if (!0 === o.options.dots) {for (o.$slider.addClass("slick-dotted"), t = i("<ul />").addClass(o.options.dotsClass), e = 0; e <= o.getDotCount(); e += 1) t.append(i("<li />").append(o.options.customPaging.call(this, o, e)));o.$dots = t.appendTo(o.options.appendDots), o.$dots.find("li").first().addClass("slick-active");}}, e.prototype.buildOut = function () {var e = this;e.$slides = e.$slider.children(e.options.slide + ":not(.slick-cloned)").addClass("slick-slide"), e.slideCount = e.$slides.length, e.$slides.each(function (e, t) {i(t).attr("data-slick-index", e).data("originalStyling", i(t).attr("style") || "");}), e.$slider.addClass("slick-slider"), e.$slideTrack = 0 === e.slideCount ? i('<div class="slick-track"/>').appendTo(e.$slider) : e.$slides.wrapAll('<div class="slick-track"/>').parent(), e.$list = e.$slideTrack.wrap('<div class="slick-list"/>').parent(), e.$slideTrack.css("opacity", 0), !0 !== e.options.centerMode && !0 !== e.options.swipeToSlide || (e.options.slidesToScroll = 1), i("img[data-lazy]", e.$slider).not("[src]").addClass("slick-loading"), e.setupInfinite(), e.buildArrows(), e.buildDots(), e.updateDots(), e.setSlideClasses("number" == typeof e.currentSlide ? e.currentSlide : 0), !0 === e.options.draggable && e.$list.addClass("draggable");}, e.prototype.buildRows = function () {var i,e,t,o,s,n,r,l = this;if (o = document.createDocumentFragment(), n = l.$slider.children(), l.options.rows > 1) {for (r = l.options.slidesPerRow * l.options.rows, s = Math.ceil(n.length / r), i = 0; i < s; i++) {var d = document.createElement("div");for (e = 0; e < l.options.rows; e++) {var a = document.createElement("div");for (t = 0; t < l.options.slidesPerRow; t++) {var c = i * r + (e * l.options.slidesPerRow + t);n.get(c) && a.appendChild(n.get(c));}d.appendChild(a);}o.appendChild(d);}l.$slider.empty().append(o), l.$slider.children().children().children().css({ width: 100 / l.options.slidesPerRow + "%", display: "inline-block" });}}, e.prototype.checkResponsive = function (e, t) {var o,s,n,r = this,l = !1,d = r.$slider.width(),a = window.innerWidth || i(window).width();if ("window" === r.respondTo ? n = a : "slider" === r.respondTo ? n = d : "min" === r.respondTo && (n = Math.min(a, d)), r.options.responsive && r.options.responsive.length && null !== r.options.responsive) {s = null;for (o in r.breakpoints) r.breakpoints.hasOwnProperty(o) && (!1 === r.originalSettings.mobileFirst ? n < r.breakpoints[o] && (s = r.breakpoints[o]) : n > r.breakpoints[o] && (s = r.breakpoints[o]));null !== s ? null !== r.activeBreakpoint ? (s !== r.activeBreakpoint || t) && (r.activeBreakpoint = s, "unslick" === r.breakpointSettings[s] ? r.unslick(s) : (r.options = i.extend({}, r.originalSettings, r.breakpointSettings[s]), !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e)), l = s) : (r.activeBreakpoint = s, "unslick" === r.breakpointSettings[s] ? r.unslick(s) : (r.options = i.extend({}, r.originalSettings, r.breakpointSettings[s]), !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e)), l = s) : null !== r.activeBreakpoint && (r.activeBreakpoint = null, r.options = r.originalSettings, !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e), l = s), e || !1 === l || r.$slider.trigger("breakpoint", [r, l]);}}, e.prototype.changeSlide = function (e, t) {var o,s,n,r = this,l = i(e.currentTarget);switch (l.is("a") && e.preventDefault(), l.is("li") || (l = l.closest("li")), n = r.slideCount % r.options.slidesToScroll != 0, o = n ? 0 : (r.slideCount - r.currentSlide) % r.options.slidesToScroll, e.data.message) {case "previous":s = 0 === o ? r.options.slidesToScroll : r.options.slidesToShow - o, r.slideCount > r.options.slidesToShow && r.slideHandler(r.currentSlide - s, !1, t);break;case "next":s = 0 === o ? r.options.slidesToScroll : o, r.slideCount > r.options.slidesToShow && r.slideHandler(r.currentSlide + s, !1, t);break;case "index":var d = 0 === e.data.index ? 0 : e.data.index || l.index() * r.options.slidesToScroll;r.slideHandler(r.checkNavigable(d), !1, t), l.children().trigger("focus");break;default:return;}}, e.prototype.checkNavigable = function (i) {var e, t;if (e = this.getNavigableIndexes(), t = 0, i > e[e.length - 1]) i = e[e.length - 1];else for (var o in e) {if (i < e[o]) {i = t;break;}t = e[o];}return i;}, e.prototype.cleanUpEvents = function () {var e = this;e.options.dots && null !== e.$dots && (i("li", e.$dots).off("click.slick", e.changeSlide).off("mouseenter.slick", i.proxy(e.interrupt, e, !0)).off("mouseleave.slick", i.proxy(e.interrupt, e, !1)), !0 === e.options.accessibility && e.$dots.off("keydown.slick", e.keyHandler)), e.$slider.off("focus.slick blur.slick"), !0 === e.options.arrows && e.slideCount > e.options.slidesToShow && (e.$prevArrow && e.$prevArrow.off("click.slick", e.changeSlide), e.$nextArrow && e.$nextArrow.off("click.slick", e.changeSlide), !0 === e.options.accessibility && (e.$prevArrow && e.$prevArrow.off("keydown.slick", e.keyHandler), e.$nextArrow && e.$nextArrow.off("keydown.slick", e.keyHandler))), e.$list.off("touchstart.slick mousedown.slick", e.swipeHandler), e.$list.off("touchmove.slick mousemove.slick", e.swipeHandler), e.$list.off("touchend.slick mouseup.slick", e.swipeHandler), e.$list.off("touchcancel.slick mouseleave.slick", e.swipeHandler), e.$list.off("click.slick", e.clickHandler), i(document).off(e.visibilityChange, e.visibility), e.cleanUpSlideEvents(), !0 === e.options.accessibility && e.$list.off("keydown.slick", e.keyHandler), !0 === e.options.focusOnSelect && i(e.$slideTrack).children().off("click.slick", e.selectHandler), i(window).off("orientationchange.slick.slick-" + e.instanceUid, e.orientationChange), i(window).off("resize.slick.slick-" + e.instanceUid, e.resize), i("[draggable!=true]", e.$slideTrack).off("dragstart", e.preventDefault), i(window).off("load.slick.slick-" + e.instanceUid, e.setPosition);}, e.prototype.cleanUpSlideEvents = function () {var e = this;e.$list.off("mouseenter.slick", i.proxy(e.interrupt, e, !0)), e.$list.off("mouseleave.slick", i.proxy(e.interrupt, e, !1));}, e.prototype.cleanUpRows = function () {var i,e = this;e.options.rows > 1 && ((i = e.$slides.children().children()).removeAttr("style"), e.$slider.empty().append(i));}, e.prototype.clickHandler = function (i) {!1 === this.shouldClick && (i.stopImmediatePropagation(), i.stopPropagation(), i.preventDefault());}, e.prototype.destroy = function (e) {var t = this;t.autoPlayClear(), t.touchObject = {}, t.cleanUpEvents(), i(".slick-cloned", t.$slider).detach(), t.$dots && t.$dots.remove(), t.$prevArrow && t.$prevArrow.length && (t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), t.htmlExpr.test(t.options.prevArrow) && t.$prevArrow.remove()), t.$nextArrow && t.$nextArrow.length && (t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), t.htmlExpr.test(t.options.nextArrow) && t.$nextArrow.remove()), t.$slides && (t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function () {i(this).attr("style", i(this).data("originalStyling"));}), t.$slideTrack.children(this.options.slide).detach(), t.$slideTrack.detach(), t.$list.detach(), t.$slider.append(t.$slides)), t.cleanUpRows(), t.$slider.removeClass("slick-slider"), t.$slider.removeClass("slick-initialized"), t.$slider.removeClass("slick-dotted"), t.unslicked = !0, e || t.$slider.trigger("destroy", [t]);}, e.prototype.disableTransition = function (i) {var e = this,t = {};t[e.transitionType] = "", !1 === e.options.fade ? e.$slideTrack.css(t) : e.$slides.eq(i).css(t);}, e.prototype.fadeSlide = function (i, e) {var t = this;!1 === t.cssTransitions ? (t.$slides.eq(i).css({ zIndex: t.options.zIndex }), t.$slides.eq(i).animate({ opacity: 1 }, t.options.speed, t.options.easing, e)) : (t.applyTransition(i), t.$slides.eq(i).css({ opacity: 1, zIndex: t.options.zIndex }), e && setTimeout(function () {t.disableTransition(i), e.call();}, t.options.speed));}, e.prototype.fadeSlideOut = function (i) {var e = this;!1 === e.cssTransitions ? e.$slides.eq(i).animate({ opacity: 0, zIndex: e.options.zIndex - 2 }, e.options.speed, e.options.easing) : (e.applyTransition(i), e.$slides.eq(i).css({ opacity: 0, zIndex: e.options.zIndex - 2 }));}, e.prototype.filterSlides = e.prototype.slickFilter = function (i) {var e = this;null !== i && (e.$slidesCache = e.$slides, e.unload(), e.$slideTrack.children(this.options.slide).detach(), e.$slidesCache.filter(i).appendTo(e.$slideTrack), e.reinit());}, e.prototype.focusHandler = function () {var e = this;e.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick", "*", function (t) {t.stopImmediatePropagation();var o = i(this);setTimeout(function () {e.options.pauseOnFocus && (e.focussed = o.is(":focus"), e.autoPlay());}, 0);});}, e.prototype.getCurrent = e.prototype.slickCurrentSlide = function () {return this.currentSlide;}, e.prototype.getDotCount = function () {var i = this,e = 0,t = 0,o = 0;if (!0 === i.options.infinite) {if (i.slideCount <= i.options.slidesToShow) ++o;else for (; e < i.slideCount;) ++o, e = t + i.options.slidesToScroll, t += i.options.slidesToScroll <= i.options.slidesToShow ? i.options.slidesToScroll : i.options.slidesToShow;} else if (!0 === i.options.centerMode) o = i.slideCount;else if (i.options.asNavFor) for (; e < i.slideCount;) ++o, e = t + i.options.slidesToScroll, t += i.options.slidesToScroll <= i.options.slidesToShow ? i.options.slidesToScroll : i.options.slidesToShow;else o = 1 + Math.ceil((i.slideCount - i.options.slidesToShow) / i.options.slidesToScroll);return o - 1;}, e.prototype.getLeft = function (i) {var e,t,o,s,n = this,r = 0;return n.slideOffset = 0, t = n.$slides.first().outerHeight(!0), !0 === n.options.infinite ? (n.slideCount > n.options.slidesToShow && (n.slideOffset = n.slideWidth * n.options.slidesToShow * -1, s = -1, !0 === n.options.vertical && !0 === n.options.centerMode && (2 === n.options.slidesToShow ? s = -1.5 : 1 === n.options.slidesToShow && (s = -2)), r = t * n.options.slidesToShow * s), n.slideCount % n.options.slidesToScroll != 0 && i + n.options.slidesToScroll > n.slideCount && n.slideCount > n.options.slidesToShow && (i > n.slideCount ? (n.slideOffset = (n.options.slidesToShow - (i - n.slideCount)) * n.slideWidth * -1, r = (n.options.slidesToShow - (i - n.slideCount)) * t * -1) : (n.slideOffset = n.slideCount % n.options.slidesToScroll * n.slideWidth * -1, r = n.slideCount % n.options.slidesToScroll * t * -1))) : i + n.options.slidesToShow > n.slideCount && (n.slideOffset = (i + n.options.slidesToShow - n.slideCount) * n.slideWidth, r = (i + n.options.slidesToShow - n.slideCount) * t), n.slideCount <= n.options.slidesToShow && (n.slideOffset = 0, r = 0), !0 === n.options.centerMode && n.slideCount <= n.options.slidesToShow ? n.slideOffset = n.slideWidth * Math.floor(n.options.slidesToShow) / 2 - n.slideWidth * n.slideCount / 2 : !0 === n.options.centerMode && !0 === n.options.infinite ? n.slideOffset += n.slideWidth * Math.floor(n.options.slidesToShow / 2) - n.slideWidth : !0 === n.options.centerMode && (n.slideOffset = 0, n.slideOffset += n.slideWidth * Math.floor(n.options.slidesToShow / 2)), e = !1 === n.options.vertical ? i * n.slideWidth * -1 + n.slideOffset : i * t * -1 + r, !0 === n.options.variableWidth && (o = n.slideCount <= n.options.slidesToShow || !1 === n.options.infinite ? n.$slideTrack.children(".slick-slide").eq(i) : n.$slideTrack.children(".slick-slide").eq(i + n.options.slidesToShow), e = !0 === n.options.rtl ? o[0] ? -1 * (n.$slideTrack.width() - o[0].offsetLeft - o.width()) : 0 : o[0] ? -1 * o[0].offsetLeft : 0, !0 === n.options.centerMode && (o = n.slideCount <= n.options.slidesToShow || !1 === n.options.infinite ? n.$slideTrack.children(".slick-slide").eq(i) : n.$slideTrack.children(".slick-slide").eq(i + n.options.slidesToShow + 1), e = !0 === n.options.rtl ? o[0] ? -1 * (n.$slideTrack.width() - o[0].offsetLeft - o.width()) : 0 : o[0] ? -1 * o[0].offsetLeft : 0, e += (n.$list.width() - o.outerWidth()) / 2)), e;}, e.prototype.getOption = e.prototype.slickGetOption = function (i) {return this.options[i];}, e.prototype.getNavigableIndexes = function () {var i,e = this,t = 0,o = 0,s = [];for (!1 === e.options.infinite ? i = e.slideCount : (t = -1 * e.options.slidesToScroll, o = -1 * e.options.slidesToScroll, i = 2 * e.slideCount); t < i;) s.push(t), t = o + e.options.slidesToScroll, o += e.options.slidesToScroll <= e.options.slidesToShow ? e.options.slidesToScroll : e.options.slidesToShow;return s;}, e.prototype.getSlick = function () {return this;}, e.prototype.getSlideCount = function () {var e,t,o = this;return t = !0 === o.options.centerMode ? o.slideWidth * Math.floor(o.options.slidesToShow / 2) : 0, !0 === o.options.swipeToSlide ? (o.$slideTrack.find(".slick-slide").each(function (s, n) {if (n.offsetLeft - t + i(n).outerWidth() / 2 > -1 * o.swipeLeft) return e = n, !1;}), Math.abs(i(e).attr("data-slick-index") - o.currentSlide) || 1) : o.options.slidesToScroll;}, e.prototype.goTo = e.prototype.slickGoTo = function (i, e) {this.changeSlide({ data: { message: "index", index: parseInt(i) } }, e);}, e.prototype.init = function (e) {var t = this;i(t.$slider).hasClass("slick-initialized") || (i(t.$slider).addClass("slick-initialized"), t.buildRows(), t.buildOut(), t.setProps(), t.startLoad(), t.loadSlider(), t.initializeEvents(), t.updateArrows(), t.updateDots(), t.checkResponsive(!0), t.focusHandler()), e && t.$slider.trigger("init", [t]), !0 === t.options.accessibility && t.initADA(), t.options.autoplay && (t.paused = !1, t.autoPlay());}, e.prototype.initADA = function () {var e = this,t = Math.ceil(e.slideCount / e.options.slidesToShow),o = e.getNavigableIndexes().filter(function (i) {return i >= 0 && i < e.slideCount;});e.$slides.add(e.$slideTrack.find(".slick-cloned")).attr({ "aria-hidden": "true", tabindex: "-1" }).find("a, input, button, select").attr({ tabindex: "-1" }), null !== e.$dots && (e.$slides.not(e.$slideTrack.find(".slick-cloned")).each(function (t) {var s = o.indexOf(t);i(this).attr({ role: "tabpanel", id: "slick-slide" + e.instanceUid + t, tabindex: -1 }), -1 !== s && i(this).attr({ "aria-describedby": "slick-slide-control" + e.instanceUid + s });}), e.$dots.attr("role", "tablist").find("li").each(function (s) {var n = o[s];i(this).attr({ role: "presentation" }), i(this).find("button").first().attr({ role: "tab", id: "slick-slide-control" + e.instanceUid + s, "aria-controls": "slick-slide" + e.instanceUid + n, "aria-label": s + 1 + " of " + t, "aria-selected": null, tabindex: "-1" });}).eq(e.currentSlide).find("button").attr({ "aria-selected": "true", tabindex: "0" }).end());for (var s = e.currentSlide, n = s + e.options.slidesToShow; s < n; s++) e.$slides.eq(s).attr("tabindex", 0);e.activateADA();}, e.prototype.initArrowEvents = function () {var i = this;!0 === i.options.arrows && i.slideCount > i.options.slidesToShow && (i.$prevArrow.off("click.slick").on("click.slick", { message: "previous" }, i.changeSlide), i.$nextArrow.off("click.slick").on("click.slick", { message: "next" }, i.changeSlide), !0 === i.options.accessibility && (i.$prevArrow.on("keydown.slick", i.keyHandler), i.$nextArrow.on("keydown.slick", i.keyHandler)));}, e.prototype.initDotEvents = function () {var e = this;!0 === e.options.dots && (i("li", e.$dots).on("click.slick", { message: "index" }, e.changeSlide), !0 === e.options.accessibility && e.$dots.on("keydown.slick", e.keyHandler)), !0 === e.options.dots && !0 === e.options.pauseOnDotsHover && i("li", e.$dots).on("mouseenter.slick", i.proxy(e.interrupt, e, !0)).on("mouseleave.slick", i.proxy(e.interrupt, e, !1));}, e.prototype.initSlideEvents = function () {var e = this;e.options.pauseOnHover && (e.$list.on("mouseenter.slick", i.proxy(e.interrupt, e, !0)), e.$list.on("mouseleave.slick", i.proxy(e.interrupt, e, !1)));}, e.prototype.initializeEvents = function () {var e = this;e.initArrowEvents(), e.initDotEvents(), e.initSlideEvents(), e.$list.on("touchstart.slick mousedown.slick", { action: "start" }, e.swipeHandler), e.$list.on("touchmove.slick mousemove.slick", { action: "move" }, e.swipeHandler), e.$list.on("touchend.slick mouseup.slick", { action: "end" }, e.swipeHandler), e.$list.on("touchcancel.slick mouseleave.slick", { action: "end" }, e.swipeHandler), e.$list.on("click.slick", e.clickHandler), i(document).on(e.visibilityChange, i.proxy(e.visibility, e)), !0 === e.options.accessibility && e.$list.on("keydown.slick", e.keyHandler), !0 === e.options.focusOnSelect && i(e.$slideTrack).children().on("click.slick", e.selectHandler), i(window).on("orientationchange.slick.slick-" + e.instanceUid, i.proxy(e.orientationChange, e)), i(window).on("resize.slick.slick-" + e.instanceUid, i.proxy(e.resize, e)), i("[draggable!=true]", e.$slideTrack).on("dragstart", e.preventDefault), i(window).on("load.slick.slick-" + e.instanceUid, e.setPosition), i(e.setPosition);}, e.prototype.initUI = function () {var i = this;!0 === i.options.arrows && i.slideCount > i.options.slidesToShow && (i.$prevArrow.show(), i.$nextArrow.show()), !0 === i.options.dots && i.slideCount > i.options.slidesToShow && i.$dots.show();}, e.prototype.keyHandler = function (i) {var e = this;i.target.tagName.match("TEXTAREA|INPUT|SELECT") || (37 === i.keyCode && !0 === e.options.accessibility ? e.changeSlide({ data: { message: !0 === e.options.rtl ? "next" : "previous" } }) : 39 === i.keyCode && !0 === e.options.accessibility && e.changeSlide({ data: { message: !0 === e.options.rtl ? "previous" : "next" } }));}, e.prototype.lazyLoad = function () {function e(e) {i("img[data-lazy]", e).each(function () {var e = i(this),t = i(this).attr("data-lazy"),o = i(this).attr("data-srcset"),s = i(this).attr("data-sizes") || n.$slider.attr("data-sizes"),r = document.createElement("img");r.onload = function () {e.animate({ opacity: 0 }, 100, function () {o && (e.attr("srcset", o), s && e.attr("sizes", s)), e.attr("src", t).animate({ opacity: 1 }, 200, function () {e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading");}), n.$slider.trigger("lazyLoaded", [n, e, t]);});}, r.onerror = function () {e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), n.$slider.trigger("lazyLoadError", [n, e, t]);}, r.src = t;});}var t,o,s,n = this;if (!0 === n.options.centerMode ? !0 === n.options.infinite ? s = (o = n.currentSlide + (n.options.slidesToShow / 2 + 1)) + n.options.slidesToShow + 2 : (o = Math.max(0, n.currentSlide - (n.options.slidesToShow / 2 + 1)), s = n.options.slidesToShow / 2 + 1 + 2 + n.currentSlide) : (o = n.options.infinite ? n.options.slidesToShow + n.currentSlide : n.currentSlide, s = Math.ceil(o + n.options.slidesToShow), !0 === n.options.fade && (o > 0 && o--, s <= n.slideCount && s++)), t = n.$slider.find(".slick-slide").slice(o, s), "anticipated" === n.options.lazyLoad) for (var r = o - 1, l = s, d = n.$slider.find(".slick-slide"), a = 0; a < n.options.slidesToScroll; a++) r < 0 && (r = n.slideCount - 1), t = (t = t.add(d.eq(r))).add(d.eq(l)), r--, l++;e(t), n.slideCount <= n.options.slidesToShow ? e(n.$slider.find(".slick-slide")) : n.currentSlide >= n.slideCount - n.options.slidesToShow ? e(n.$slider.find(".slick-cloned").slice(0, n.options.slidesToShow)) : 0 === n.currentSlide && e(n.$slider.find(".slick-cloned").slice(-1 * n.options.slidesToShow));}, e.prototype.loadSlider = function () {var i = this;i.setPosition(), i.$slideTrack.css({ opacity: 1 }), i.$slider.removeClass("slick-loading"), i.initUI(), "progressive" === i.options.lazyLoad && i.progressiveLazyLoad();}, e.prototype.next = e.prototype.slickNext = function () {this.changeSlide({ data: { message: "next" } });}, e.prototype.orientationChange = function () {var i = this;i.checkResponsive(), i.setPosition();}, e.prototype.pause = e.prototype.slickPause = function () {var i = this;i.autoPlayClear(), i.paused = !0;}, e.prototype.play = e.prototype.slickPlay = function () {var i = this;i.autoPlay(), i.options.autoplay = !0, i.paused = !1, i.focussed = !1, i.interrupted = !1;}, e.prototype.postSlide = function (e) {var t = this;t.unslicked || (t.$slider.trigger("afterChange", [t, e]), t.animating = !1, t.slideCount > t.options.slidesToShow && t.setPosition(), t.swipeLeft = null, t.options.autoplay && t.autoPlay(), !0 === t.options.accessibility && (t.initADA(), t.options.focusOnChange && i(t.$slides.get(t.currentSlide)).attr("tabindex", 0).focus()));}, e.prototype.prev = e.prototype.slickPrev = function () {this.changeSlide({ data: { message: "previous" } });}, e.prototype.preventDefault = function (i) {i.preventDefault();}, e.prototype.progressiveLazyLoad = function (e) {e = e || 1;var t,o,s,n,r,l = this,d = i("img[data-lazy]", l.$slider);d.length ? (t = d.first(), o = t.attr("data-lazy"), s = t.attr("data-srcset"), n = t.attr("data-sizes") || l.$slider.attr("data-sizes"), (r = document.createElement("img")).onload = function () {s && (t.attr("srcset", s), n && t.attr("sizes", n)), t.attr("src", o).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"), !0 === l.options.adaptiveHeight && l.setPosition(), l.$slider.trigger("lazyLoaded", [l, t, o]), l.progressiveLazyLoad();}, r.onerror = function () {e < 3 ? setTimeout(function () {l.progressiveLazyLoad(e + 1);}, 500) : (t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), l.$slider.trigger("lazyLoadError", [l, t, o]), l.progressiveLazyLoad());}, r.src = o) : l.$slider.trigger("allImagesLoaded", [l]);}, e.prototype.refresh = function (e) {var t,o,s = this;o = s.slideCount - s.options.slidesToShow, !s.options.infinite && s.currentSlide > o && (s.currentSlide = o), s.slideCount <= s.options.slidesToShow && (s.currentSlide = 0), t = s.currentSlide, s.destroy(!0), i.extend(s, s.initials, { currentSlide: t }), s.init(), e || s.changeSlide({ data: { message: "index", index: t } }, !1);}, e.prototype.registerBreakpoints = function () {var e,t,o,s = this,n = s.options.responsive || null;if ("array" === i.type(n) && n.length) {s.respondTo = s.options.respondTo || "window";for (e in n) if (o = s.breakpoints.length - 1, n.hasOwnProperty(e)) {for (t = n[e].breakpoint; o >= 0;) s.breakpoints[o] && s.breakpoints[o] === t && s.breakpoints.splice(o, 1), o--;s.breakpoints.push(t), s.breakpointSettings[t] = n[e].settings;}s.breakpoints.sort(function (i, e) {return s.options.mobileFirst ? i - e : e - i;});}}, e.prototype.reinit = function () {var e = this;e.$slides = e.$slideTrack.children(e.options.slide).addClass("slick-slide"), e.slideCount = e.$slides.length, e.currentSlide >= e.slideCount && 0 !== e.currentSlide && (e.currentSlide = e.currentSlide - e.options.slidesToScroll), e.slideCount <= e.options.slidesToShow && (e.currentSlide = 0), e.registerBreakpoints(), e.setProps(), e.setupInfinite(), e.buildArrows(), e.updateArrows(), e.initArrowEvents(), e.buildDots(), e.updateDots(), e.initDotEvents(), e.cleanUpSlideEvents(), e.initSlideEvents(), e.checkResponsive(!1, !0), !0 === e.options.focusOnSelect && i(e.$slideTrack).children().on("click.slick", e.selectHandler), e.setSlideClasses("number" == typeof e.currentSlide ? e.currentSlide : 0), e.setPosition(), e.focusHandler(), e.paused = !e.options.autoplay, e.autoPlay(), e.$slider.trigger("reInit", [e]);}, e.prototype.resize = function () {var e = this;i(window).width() !== e.windowWidth && (clearTimeout(e.windowDelay), e.windowDelay = window.setTimeout(function () {e.windowWidth = i(window).width(), e.checkResponsive(), e.unslicked || e.setPosition();}, 50));}, e.prototype.removeSlide = e.prototype.slickRemove = function (i, e, t) {var o = this;if (i = "boolean" == typeof i ? !0 === (e = i) ? 0 : o.slideCount - 1 : !0 === e ? --i : i, o.slideCount < 1 || i < 0 || i > o.slideCount - 1) return !1;o.unload(), !0 === t ? o.$slideTrack.children().remove() : o.$slideTrack.children(this.options.slide).eq(i).remove(), o.$slides = o.$slideTrack.children(this.options.slide), o.$slideTrack.children(this.options.slide).detach(), o.$slideTrack.append(o.$slides), o.$slidesCache = o.$slides, o.reinit();}, e.prototype.setCSS = function (i) {var e,t,o = this,s = {};!0 === o.options.rtl && (i = -i), e = "left" == o.positionProp ? Math.ceil(i) + "px" : "0px", t = "top" == o.positionProp ? Math.ceil(i) + "px" : "0px", s[o.positionProp] = i, !1 === o.transformsEnabled ? o.$slideTrack.css(s) : (s = {}, !1 === o.cssTransitions ? (s[o.animType] = "translate(" + e + ", " + t + ")", o.$slideTrack.css(s)) : (s[o.animType] = "translate3d(" + e + ", " + t + ", 0px)", o.$slideTrack.css(s)));}, e.prototype.setDimensions = function () {var i = this;!1 === i.options.vertical ? !0 === i.options.centerMode && i.$list.css({ padding: "0px " + i.options.centerPadding }) : (i.$list.height(i.$slides.first().outerHeight(!0) * i.options.slidesToShow), !0 === i.options.centerMode && i.$list.css({ padding: i.options.centerPadding + " 0px" })), i.listWidth = i.$list.width(), i.listHeight = i.$list.height(), !1 === i.options.vertical && !1 === i.options.variableWidth ? (i.slideWidth = Math.ceil(i.listWidth / i.options.slidesToShow), i.$slideTrack.width(Math.ceil(i.slideWidth * i.$slideTrack.children(".slick-slide").length))) : !0 === i.options.variableWidth ? i.$slideTrack.width(5e3 * i.slideCount) : (i.slideWidth = Math.ceil(i.listWidth), i.$slideTrack.height(Math.ceil(i.$slides.first().outerHeight(!0) * i.$slideTrack.children(".slick-slide").length)));var e = i.$slides.first().outerWidth(!0) - i.$slides.first().width();!1 === i.options.variableWidth && i.$slideTrack.children(".slick-slide").width(i.slideWidth - e);}, e.prototype.setFade = function () {var e,t = this;t.$slides.each(function (o, s) {e = t.slideWidth * o * -1, !0 === t.options.rtl ? i(s).css({ position: "relative", right: e, top: 0, zIndex: t.options.zIndex - 2, opacity: 0 }) : i(s).css({ position: "relative", left: e, top: 0, zIndex: t.options.zIndex - 2, opacity: 0 });}), t.$slides.eq(t.currentSlide).css({ zIndex: t.options.zIndex - 1, opacity: 1 });}, e.prototype.setHeight = function () {var i = this;if (1 === i.options.slidesToShow && !0 === i.options.adaptiveHeight && !1 === i.options.vertical) {var e = i.$slides.eq(i.currentSlide).outerHeight(!0);i.$list.css("height", e);}}, e.prototype.setOption = e.prototype.slickSetOption = function () {var e,t,o,s,n,r = this,l = !1;if ("object" === i.type(arguments[0]) ? (o = arguments[0], l = arguments[1], n = "multiple") : "string" === i.type(arguments[0]) && (o = arguments[0], s = arguments[1], l = arguments[2], "responsive" === arguments[0] && "array" === i.type(arguments[1]) ? n = "responsive" : void 0 !== arguments[1] && (n = "single")), "single" === n) r.options[o] = s;else if ("multiple" === n) i.each(o, function (i, e) {r.options[i] = e;});else if ("responsive" === n) for (t in s) if ("array" !== i.type(r.options.responsive)) r.options.responsive = [s[t]];else {for (e = r.options.responsive.length - 1; e >= 0;) r.options.responsive[e].breakpoint === s[t].breakpoint && r.options.responsive.splice(e, 1), e--;r.options.responsive.push(s[t]);}l && (r.unload(), r.reinit());}, e.prototype.setPosition = function () {var i = this;i.setDimensions(), i.setHeight(), !1 === i.options.fade ? i.setCSS(i.getLeft(i.currentSlide)) : i.setFade(), i.$slider.trigger("setPosition", [i]);}, e.prototype.setProps = function () {var i = this,e = document.body.style;i.positionProp = !0 === i.options.vertical ? "top" : "left", "top" === i.positionProp ? i.$slider.addClass("slick-vertical") : i.$slider.removeClass("slick-vertical"), void 0 === e.WebkitTransition && void 0 === e.MozTransition && void 0 === e.msTransition || !0 === i.options.useCSS && (i.cssTransitions = !0), i.options.fade && ("number" == typeof i.options.zIndex ? i.options.zIndex < 3 && (i.options.zIndex = 3) : i.options.zIndex = i.defaults.zIndex), void 0 !== e.OTransform && (i.animType = "OTransform", i.transformType = "-o-transform", i.transitionType = "OTransition", void 0 === e.perspectiveProperty && void 0 === e.webkitPerspective && (i.animType = !1)), void 0 !== e.MozTransform && (i.animType = "MozTransform", i.transformType = "-moz-transform", i.transitionType = "MozTransition", void 0 === e.perspectiveProperty && void 0 === e.MozPerspective && (i.animType = !1)), void 0 !== e.webkitTransform && (i.animType = "webkitTransform", i.transformType = "-webkit-transform", i.transitionType = "webkitTransition", void 0 === e.perspectiveProperty && void 0 === e.webkitPerspective && (i.animType = !1)), void 0 !== e.msTransform && (i.animType = "msTransform", i.transformType = "-ms-transform", i.transitionType = "msTransition", void 0 === e.msTransform && (i.animType = !1)), void 0 !== e.transform && !1 !== i.animType && (i.animType = "transform", i.transformType = "transform", i.transitionType = "transition"), i.transformsEnabled = i.options.useTransform && null !== i.animType && !1 !== i.animType;}, e.prototype.setSlideClasses = function (i) {var e,t,o,s,n = this;if (t = n.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true"), n.$slides.eq(i).addClass("slick-current"), !0 === n.options.centerMode) {var r = n.options.slidesToShow % 2 == 0 ? 1 : 0;e = Math.floor(n.options.slidesToShow / 2), !0 === n.options.infinite && (i >= e && i <= n.slideCount - 1 - e ? n.$slides.slice(i - e + r, i + e + 1).addClass("slick-active").attr("aria-hidden", "false") : (o = n.options.slidesToShow + i, t.slice(o - e + 1 + r, o + e + 2).addClass("slick-active").attr("aria-hidden", "false")), 0 === i ? t.eq(t.length - 1 - n.options.slidesToShow).addClass("slick-center") : i === n.slideCount - 1 && t.eq(n.options.slidesToShow).addClass("slick-center")), n.$slides.eq(i).addClass("slick-center");} else i >= 0 && i <= n.slideCount - n.options.slidesToShow ? n.$slides.slice(i, i + n.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false") : t.length <= n.options.slidesToShow ? t.addClass("slick-active").attr("aria-hidden", "false") : (s = n.slideCount % n.options.slidesToShow, o = !0 === n.options.infinite ? n.options.slidesToShow + i : i, n.options.slidesToShow == n.options.slidesToScroll && n.slideCount - i < n.options.slidesToShow ? t.slice(o - (n.options.slidesToShow - s), o + s).addClass("slick-active").attr("aria-hidden", "false") : t.slice(o, o + n.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false"));"ondemand" !== n.options.lazyLoad && "anticipated" !== n.options.lazyLoad || n.lazyLoad();}, e.prototype.setupInfinite = function () {var e,t,o,s = this;if (!0 === s.options.fade && (s.options.centerMode = !1), !0 === s.options.infinite && !1 === s.options.fade && (t = null, s.slideCount > s.options.slidesToShow)) {for (o = !0 === s.options.centerMode ? s.options.slidesToShow + 1 : s.options.slidesToShow, e = s.slideCount; e > s.slideCount - o; e -= 1) t = e - 1, i(s.$slides[t]).clone(!0).attr("id", "").attr("data-slick-index", t - s.slideCount).prependTo(s.$slideTrack).addClass("slick-cloned");for (e = 0; e < o + s.slideCount; e += 1) t = e, i(s.$slides[t]).clone(!0).attr("id", "").attr("data-slick-index", t + s.slideCount).appendTo(s.$slideTrack).addClass("slick-cloned");s.$slideTrack.find(".slick-cloned").find("[id]").each(function () {i(this).attr("id", "");});}}, e.prototype.interrupt = function (i) {var e = this;i || e.autoPlay(), e.interrupted = i;}, e.prototype.selectHandler = function (e) {var t = this,o = i(e.target).is(".slick-slide") ? i(e.target) : i(e.target).parents(".slick-slide"),s = parseInt(o.attr("data-slick-index"));s || (s = 0), t.slideCount <= t.options.slidesToShow ? t.slideHandler(s, !1, !0) : t.slideHandler(s);}, e.prototype.slideHandler = function (i, e, t) {var o,s,n,r,l,d = null,a = this;if (e = e || !1, !(!0 === a.animating && !0 === a.options.waitForAnimate || !0 === a.options.fade && a.currentSlide === i)) if (!1 === e && a.asNavFor(i), o = i, d = a.getLeft(o), r = a.getLeft(a.currentSlide), a.currentLeft = null === a.swipeLeft ? r : a.swipeLeft, !1 === a.options.infinite && !1 === a.options.centerMode && (i < 0 || i > a.getDotCount() * a.options.slidesToScroll)) !1 === a.options.fade && (o = a.currentSlide, !0 !== t ? a.animateSlide(r, function () {a.postSlide(o);}) : a.postSlide(o));else if (!1 === a.options.infinite && !0 === a.options.centerMode && (i < 0 || i > a.slideCount - a.options.slidesToScroll)) !1 === a.options.fade && (o = a.currentSlide, !0 !== t ? a.animateSlide(r, function () {a.postSlide(o);}) : a.postSlide(o));else {if (a.options.autoplay && clearInterval(a.autoPlayTimer), s = o < 0 ? a.slideCount % a.options.slidesToScroll != 0 ? a.slideCount - a.slideCount % a.options.slidesToScroll : a.slideCount + o : o >= a.slideCount ? a.slideCount % a.options.slidesToScroll != 0 ? 0 : o - a.slideCount : o, a.animating = !0, a.$slider.trigger("beforeChange", [a, a.currentSlide, s]), n = a.currentSlide, a.currentSlide = s, a.setSlideClasses(a.currentSlide), a.options.asNavFor && (l = (l = a.getNavTarget()).slick("getSlick")).slideCount <= l.options.slidesToShow && l.setSlideClasses(a.currentSlide), a.updateDots(), a.updateArrows(), !0 === a.options.fade) return !0 !== t ? (a.fadeSlideOut(n), a.fadeSlide(s, function () {a.postSlide(s);})) : a.postSlide(s), void a.animateHeight();!0 !== t ? a.animateSlide(d, function () {a.postSlide(s);}) : a.postSlide(s);}}, e.prototype.startLoad = function () {var i = this;!0 === i.options.arrows && i.slideCount > i.options.slidesToShow && (i.$prevArrow.hide(), i.$nextArrow.hide()), !0 === i.options.dots && i.slideCount > i.options.slidesToShow && i.$dots.hide(), i.$slider.addClass("slick-loading");}, e.prototype.swipeDirection = function () {var i,e,t,o,s = this;return i = s.touchObject.startX - s.touchObject.curX, e = s.touchObject.startY - s.touchObject.curY, t = Math.atan2(e, i), (o = Math.round(180 * t / Math.PI)) < 0 && (o = 360 - Math.abs(o)), o <= 45 && o >= 0 ? !1 === s.options.rtl ? "left" : "right" : o <= 360 && o >= 315 ? !1 === s.options.rtl ? "left" : "right" : o >= 135 && o <= 225 ? !1 === s.options.rtl ? "right" : "left" : !0 === s.options.verticalSwiping ? o >= 35 && o <= 135 ? "down" : "up" : "vertical";}, e.prototype.swipeEnd = function (i) {var e,t,o = this;if (o.dragging = !1, o.swiping = !1, o.scrolling) return o.scrolling = !1, !1;if (o.interrupted = !1, o.shouldClick = !(o.touchObject.swipeLength > 10), void 0 === o.touchObject.curX) return !1;if (!0 === o.touchObject.edgeHit && o.$slider.trigger("edge", [o, o.swipeDirection()]), o.touchObject.swipeLength >= o.touchObject.minSwipe) {switch (t = o.swipeDirection()) {case "left":case "down":e = o.options.swipeToSlide ? o.checkNavigable(o.currentSlide + o.getSlideCount()) : o.currentSlide + o.getSlideCount(), o.currentDirection = 0;break;case "right":case "up":e = o.options.swipeToSlide ? o.checkNavigable(o.currentSlide - o.getSlideCount()) : o.currentSlide - o.getSlideCount(), o.currentDirection = 1;}"vertical" != t && (o.slideHandler(e), o.touchObject = {}, o.$slider.trigger("swipe", [o, t]));} else o.touchObject.startX !== o.touchObject.curX && (o.slideHandler(o.currentSlide), o.touchObject = {});}, e.prototype.swipeHandler = function (i) {var e = this;if (!(!1 === e.options.swipe || "ontouchend" in document && !1 === e.options.swipe || !1 === e.options.draggable && -1 !== i.type.indexOf("mouse"))) switch (e.touchObject.fingerCount = i.originalEvent && void 0 !== i.originalEvent.touches ? i.originalEvent.touches.length : 1, e.touchObject.minSwipe = e.listWidth / e.options.touchThreshold, !0 === e.options.verticalSwiping && (e.touchObject.minSwipe = e.listHeight / e.options.touchThreshold), i.data.action) {case "start":e.swipeStart(i);break;case "move":e.swipeMove(i);break;case "end":e.swipeEnd(i);}}, e.prototype.swipeMove = function (i) {var e,t,o,s,n,r,l = this;return n = void 0 !== i.originalEvent ? i.originalEvent.touches : null, !(!l.dragging || l.scrolling || n && 1 !== n.length) && (e = l.getLeft(l.currentSlide), l.touchObject.curX = void 0 !== n ? n[0].pageX : i.clientX, l.touchObject.curY = void 0 !== n ? n[0].pageY : i.clientY, l.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(l.touchObject.curX - l.touchObject.startX, 2))), r = Math.round(Math.sqrt(Math.pow(l.touchObject.curY - l.touchObject.startY, 2))), !l.options.verticalSwiping && !l.swiping && r > 4 ? (l.scrolling = !0, !1) : (!0 === l.options.verticalSwiping && (l.touchObject.swipeLength = r), t = l.swipeDirection(), void 0 !== i.originalEvent && l.touchObject.swipeLength > 4 && (l.swiping = !0, i.preventDefault()), s = (!1 === l.options.rtl ? 1 : -1) * (l.touchObject.curX > l.touchObject.startX ? 1 : -1), !0 === l.options.verticalSwiping && (s = l.touchObject.curY > l.touchObject.startY ? 1 : -1), o = l.touchObject.swipeLength, l.touchObject.edgeHit = !1, !1 === l.options.infinite && (0 === l.currentSlide && "right" === t || l.currentSlide >= l.getDotCount() && "left" === t) && (o = l.touchObject.swipeLength * l.options.edgeFriction, l.touchObject.edgeHit = !0), !1 === l.options.vertical ? l.swipeLeft = e + o * s : l.swipeLeft = e + o * (l.$list.height() / l.listWidth) * s, !0 === l.options.verticalSwiping && (l.swipeLeft = e + o * s), !0 !== l.options.fade && !1 !== l.options.touchMove && (!0 === l.animating ? (l.swipeLeft = null, !1) : void l.setCSS(l.swipeLeft))));}, e.prototype.swipeStart = function (i) {var e,t = this;if (t.interrupted = !0, 1 !== t.touchObject.fingerCount || t.slideCount <= t.options.slidesToShow) return t.touchObject = {}, !1;void 0 !== i.originalEvent && void 0 !== i.originalEvent.touches && (e = i.originalEvent.touches[0]), t.touchObject.startX = t.touchObject.curX = void 0 !== e ? e.pageX : i.clientX, t.touchObject.startY = t.touchObject.curY = void 0 !== e ? e.pageY : i.clientY, t.dragging = !0;}, e.prototype.unfilterSlides = e.prototype.slickUnfilter = function () {var i = this;null !== i.$slidesCache && (i.unload(), i.$slideTrack.children(this.options.slide).detach(), i.$slidesCache.appendTo(i.$slideTrack), i.reinit());}, e.prototype.unload = function () {var e = this;i(".slick-cloned", e.$slider).remove(), e.$dots && e.$dots.remove(), e.$prevArrow && e.htmlExpr.test(e.options.prevArrow) && e.$prevArrow.remove(), e.$nextArrow && e.htmlExpr.test(e.options.nextArrow) && e.$nextArrow.remove(), e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "");}, e.prototype.unslick = function (i) {var e = this;e.$slider.trigger("unslick", [e, i]), e.destroy();}, e.prototype.updateArrows = function () {var i = this;Math.floor(i.options.slidesToShow / 2), !0 === i.options.arrows && i.slideCount > i.options.slidesToShow && !i.options.infinite && (i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), i.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), 0 === i.currentSlide ? (i.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true"), i.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : i.currentSlide >= i.slideCount - i.options.slidesToShow && !1 === i.options.centerMode ? (i.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : i.currentSlide >= i.slideCount - 1 && !0 === i.options.centerMode && (i.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")));}, e.prototype.updateDots = function () {var i = this;null !== i.$dots && (i.$dots.find("li").removeClass("slick-active").end(), i.$dots.find("li").eq(Math.floor(i.currentSlide / i.options.slidesToScroll)).addClass("slick-active"));}, e.prototype.visibility = function () {var i = this;i.options.autoplay && (document[i.hidden] ? i.interrupted = !0 : i.interrupted = !1);}, i.fn.slick = function () {var i,t,o = this,s = arguments[0],n = Array.prototype.slice.call(arguments, 1),r = o.length;for (i = 0; i < r; i++) if ("object" == typeof s || void 0 === s ? o[i].slick = new e(o[i], s) : t = o[i].slick[s].apply(o[i].slick, n), void 0 !== t) return t;return o;};});

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";
/*!*******************************!*\
  !*** ./src/assets/js/main.js ***!
  \*******************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var what_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! what-input */ "./node_modules/what-input/dist/what-input.js");
/* harmony import */ var _lib_slick_min_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/slick.min.js */ "./src/assets/js/lib/slick.min.js");
/* harmony import */ var _bootstrap_bootstrap_bundle_min_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bootstrap/bootstrap.bundle.min.js */ "./src/assets/js/bootstrap/bootstrap.bundle.min.js");
/* harmony import */ var _components_select2_min_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/select2.min.js */ "./src/assets/js/components/select2.min.js");
/* harmony import */ var _components_main_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/main.js */ "./src/assets/js/components/main.js");
/* harmony import */ var _components_custom_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/custom.js */ "./src/assets/js/components/custom.js");
/* harmony import */ var _components_podcastMedia_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/podcastMedia.js */ "./src/assets/js/components/podcastMedia.js");
/* harmony import */ var _components_chat_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/chat.js */ "./src/assets/js/components/chat.js");



window.$ = jquery__WEBPACK_IMPORTED_MODULE_0__;

// lib



// Bootstrap 5

// components







}();
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,